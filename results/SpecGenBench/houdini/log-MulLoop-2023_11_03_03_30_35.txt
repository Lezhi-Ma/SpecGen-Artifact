public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a == 1;
	//@ requires a != 1;
	//@ requires a >= 1;
	//@ requires a > 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a == 0;
	//@ requires a != 0;
	//@ requires a >= 0;
	//@ requires a > 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a == -1;
	//@ requires a != -1;
	//@ requires a >= -1;
	//@ requires a > -1;
	//@ requires b < a;
	//@ requires b <= a;
	//@ requires b == a;
	//@ requires b != a;
	//@ requires b >= a;
	//@ requires b > a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b == 1;
	//@ requires b != 1;
	//@ requires b >= 1;
	//@ requires b > 1;
	//@ requires b < 0;
	//@ requires b <= 0;
	//@ requires b == 0;
	//@ requires b != 0;
	//@ requires b >= 0;
	//@ requires b > 0;
	//@ requires b < -1;
	//@ requires b <= -1;
	//@ requires b == -1;
	//@ requires b != -1;
	//@ requires b >= -1;
	//@ requires b > -1;
	//@ ensures \result < b;
	//@ ensures \result <= b;
	//@ ensures \result == b;
	//@ ensures \result != b;
	//@ ensures \result >= b;
	//@ ensures \result > b;
	//@ ensures \result < a;
	//@ ensures \result <= a;
	//@ ensures \result == a;
	//@ ensures \result != a;
	//@ ensures \result >= a;
	//@ ensures \result > a;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures a >= 0 ==> \result >= 0;
	//@ ensures b >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:318: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:77:) in method main
        mulLoop(-4, 0);
               ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:77: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:318:
	public static int mulLoop(int a, int b) {
	                  ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:5: verify: Precondition conjunct is false: a == 1
	//@ requires a == 1;
	               ^
3 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a >= 1;
	//@ requires a > 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a == 0;
	//@ requires a != 0;
	//@ requires a >= 0;
	//@ requires a > 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a == -1;
	//@ requires a != -1;
	//@ requires a >= -1;
	//@ requires a > -1;
	//@ requires b < a;
	//@ requires b <= a;
	//@ requires b == a;
	//@ requires b != a;
	//@ requires b >= a;
	//@ requires b > a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b == 1;
	//@ requires b != 1;
	//@ requires b >= 1;
	//@ requires b > 1;
	//@ requires b < 0;
	//@ requires b <= 0;
	//@ requires b == 0;
	//@ requires b != 0;
	//@ requires b >= 0;
	//@ requires b > 0;
	//@ requires b < -1;
	//@ requires b <= -1;
	//@ requires b == -1;
	//@ requires b != -1;
	//@ requires b >= -1;
	//@ requires b > -1;
	//@ ensures \result < b;
	//@ ensures \result <= b;
	//@ ensures \result == b;
	//@ ensures \result != b;
	//@ ensures \result >= b;
	//@ ensures \result > b;
	//@ ensures \result < a;
	//@ ensures \result <= a;
	//@ ensures \result == a;
	//@ ensures \result != a;
	//@ ensures \result >= a;
	//@ ensures \result > a;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures a >= 0 ==> \result >= 0;
	//@ ensures b >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:317: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:76:) in method main
        mulLoop(-4, 0);
               ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:76: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:317:
	public static int mulLoop(int a, int b) {
	                  ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:6: verify: Precondition conjunct is false: a >= 1
	//@ requires a >= 1;
	               ^
3 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a > 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a == 0;
	//@ requires a != 0;
	//@ requires a >= 0;
	//@ requires a > 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a == -1;
	//@ requires a != -1;
	//@ requires a >= -1;
	//@ requires a > -1;
	//@ requires b < a;
	//@ requires b <= a;
	//@ requires b == a;
	//@ requires b != a;
	//@ requires b >= a;
	//@ requires b > a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b == 1;
	//@ requires b != 1;
	//@ requires b >= 1;
	//@ requires b > 1;
	//@ requires b < 0;
	//@ requires b <= 0;
	//@ requires b == 0;
	//@ requires b != 0;
	//@ requires b >= 0;
	//@ requires b > 0;
	//@ requires b < -1;
	//@ requires b <= -1;
	//@ requires b == -1;
	//@ requires b != -1;
	//@ requires b >= -1;
	//@ requires b > -1;
	//@ ensures \result < b;
	//@ ensures \result <= b;
	//@ ensures \result == b;
	//@ ensures \result != b;
	//@ ensures \result >= b;
	//@ ensures \result > b;
	//@ ensures \result < a;
	//@ ensures \result <= a;
	//@ ensures \result == a;
	//@ ensures \result != a;
	//@ ensures \result >= a;
	//@ ensures \result > a;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures a >= 0 ==> \result >= 0;
	//@ ensures b >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:316: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:75:) in method main
        mulLoop(-4, 0);
               ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:75: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:316:
	public static int mulLoop(int a, int b) {
	                  ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:6: verify: Precondition conjunct is false: a > 1
	//@ requires a > 1;
	               ^
3 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a == 0;
	//@ requires a != 0;
	//@ requires a >= 0;
	//@ requires a > 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a == -1;
	//@ requires a != -1;
	//@ requires a >= -1;
	//@ requires a > -1;
	//@ requires b < a;
	//@ requires b <= a;
	//@ requires b == a;
	//@ requires b != a;
	//@ requires b >= a;
	//@ requires b > a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b == 1;
	//@ requires b != 1;
	//@ requires b >= 1;
	//@ requires b > 1;
	//@ requires b < 0;
	//@ requires b <= 0;
	//@ requires b == 0;
	//@ requires b != 0;
	//@ requires b >= 0;
	//@ requires b > 0;
	//@ requires b < -1;
	//@ requires b <= -1;
	//@ requires b == -1;
	//@ requires b != -1;
	//@ requires b >= -1;
	//@ requires b > -1;
	//@ ensures \result < b;
	//@ ensures \result <= b;
	//@ ensures \result == b;
	//@ ensures \result != b;
	//@ ensures \result >= b;
	//@ ensures \result > b;
	//@ ensures \result < a;
	//@ ensures \result <= a;
	//@ ensures \result == a;
	//@ ensures \result != a;
	//@ ensures \result >= a;
	//@ ensures \result > a;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures a >= 0 ==> \result >= 0;
	//@ ensures b >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:315: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:74:) in method main
        mulLoop(-4, 0);
               ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:74: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:315:
	public static int mulLoop(int a, int b) {
	                  ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:8: verify: Precondition conjunct is false: a == 0
	//@ requires a == 0;
	               ^
3 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a != 0;
	//@ requires a >= 0;
	//@ requires a > 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a == -1;
	//@ requires a != -1;
	//@ requires a >= -1;
	//@ requires a > -1;
	//@ requires b < a;
	//@ requires b <= a;
	//@ requires b == a;
	//@ requires b != a;
	//@ requires b >= a;
	//@ requires b > a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b == 1;
	//@ requires b != 1;
	//@ requires b >= 1;
	//@ requires b > 1;
	//@ requires b < 0;
	//@ requires b <= 0;
	//@ requires b == 0;
	//@ requires b != 0;
	//@ requires b >= 0;
	//@ requires b > 0;
	//@ requires b < -1;
	//@ requires b <= -1;
	//@ requires b == -1;
	//@ requires b != -1;
	//@ requires b >= -1;
	//@ requires b > -1;
	//@ ensures \result < b;
	//@ ensures \result <= b;
	//@ ensures \result == b;
	//@ ensures \result != b;
	//@ ensures \result >= b;
	//@ ensures \result > b;
	//@ ensures \result < a;
	//@ ensures \result <= a;
	//@ ensures \result == a;
	//@ ensures \result != a;
	//@ ensures \result >= a;
	//@ ensures \result > a;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures a >= 0 ==> \result >= 0;
	//@ ensures b >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:314: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:73:) in method main
        mulLoop(-4, 0);
               ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:73: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:314:
	public static int mulLoop(int a, int b) {
	                  ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:9: verify: Precondition conjunct is false: a >= 0
	//@ requires a >= 0;
	               ^
3 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a != 0;
	//@ requires a > 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a == -1;
	//@ requires a != -1;
	//@ requires a >= -1;
	//@ requires a > -1;
	//@ requires b < a;
	//@ requires b <= a;
	//@ requires b == a;
	//@ requires b != a;
	//@ requires b >= a;
	//@ requires b > a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b == 1;
	//@ requires b != 1;
	//@ requires b >= 1;
	//@ requires b > 1;
	//@ requires b < 0;
	//@ requires b <= 0;
	//@ requires b == 0;
	//@ requires b != 0;
	//@ requires b >= 0;
	//@ requires b > 0;
	//@ requires b < -1;
	//@ requires b <= -1;
	//@ requires b == -1;
	//@ requires b != -1;
	//@ requires b >= -1;
	//@ requires b > -1;
	//@ ensures \result < b;
	//@ ensures \result <= b;
	//@ ensures \result == b;
	//@ ensures \result != b;
	//@ ensures \result >= b;
	//@ ensures \result > b;
	//@ ensures \result < a;
	//@ ensures \result <= a;
	//@ ensures \result == a;
	//@ ensures \result != a;
	//@ ensures \result >= a;
	//@ ensures \result > a;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures a >= 0 ==> \result >= 0;
	//@ ensures b >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:313: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:72:) in method main
        mulLoop(-4, 0);
               ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:72: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:313:
	public static int mulLoop(int a, int b) {
	                  ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:9: verify: Precondition conjunct is false: a > 0
	//@ requires a > 0;
	               ^
3 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a != 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a == -1;
	//@ requires a != -1;
	//@ requires a >= -1;
	//@ requires a > -1;
	//@ requires b < a;
	//@ requires b <= a;
	//@ requires b == a;
	//@ requires b != a;
	//@ requires b >= a;
	//@ requires b > a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b == 1;
	//@ requires b != 1;
	//@ requires b >= 1;
	//@ requires b > 1;
	//@ requires b < 0;
	//@ requires b <= 0;
	//@ requires b == 0;
	//@ requires b != 0;
	//@ requires b >= 0;
	//@ requires b > 0;
	//@ requires b < -1;
	//@ requires b <= -1;
	//@ requires b == -1;
	//@ requires b != -1;
	//@ requires b >= -1;
	//@ requires b > -1;
	//@ ensures \result < b;
	//@ ensures \result <= b;
	//@ ensures \result == b;
	//@ ensures \result != b;
	//@ ensures \result >= b;
	//@ ensures \result > b;
	//@ ensures \result < a;
	//@ ensures \result <= a;
	//@ ensures \result == a;
	//@ ensures \result != a;
	//@ ensures \result >= a;
	//@ ensures \result > a;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures a >= 0 ==> \result >= 0;
	//@ ensures b >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:312: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:71:) in method main
        mulLoop(-4, 0);
               ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:71: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:312:
	public static int mulLoop(int a, int b) {
	                  ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:11: verify: Precondition conjunct is false: a == -1
	//@ requires a == -1;
	               ^
3 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a != 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a != -1;
	//@ requires a >= -1;
	//@ requires a > -1;
	//@ requires b < a;
	//@ requires b <= a;
	//@ requires b == a;
	//@ requires b != a;
	//@ requires b >= a;
	//@ requires b > a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b == 1;
	//@ requires b != 1;
	//@ requires b >= 1;
	//@ requires b > 1;
	//@ requires b < 0;
	//@ requires b <= 0;
	//@ requires b == 0;
	//@ requires b != 0;
	//@ requires b >= 0;
	//@ requires b > 0;
	//@ requires b < -1;
	//@ requires b <= -1;
	//@ requires b == -1;
	//@ requires b != -1;
	//@ requires b >= -1;
	//@ requires b > -1;
	//@ ensures \result < b;
	//@ ensures \result <= b;
	//@ ensures \result == b;
	//@ ensures \result != b;
	//@ ensures \result >= b;
	//@ ensures \result > b;
	//@ ensures \result < a;
	//@ ensures \result <= a;
	//@ ensures \result == a;
	//@ ensures \result != a;
	//@ ensures \result >= a;
	//@ ensures \result > a;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures a >= 0 ==> \result >= 0;
	//@ ensures b >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:311: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:70:) in method main
        mulLoop(-4, 0);
               ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:70: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:311:
	public static int mulLoop(int a, int b) {
	                  ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:12: verify: Precondition conjunct is false: a >= -1
	//@ requires a >= -1;
	               ^
3 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a != 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a != -1;
	//@ requires a > -1;
	//@ requires b < a;
	//@ requires b <= a;
	//@ requires b == a;
	//@ requires b != a;
	//@ requires b >= a;
	//@ requires b > a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b == 1;
	//@ requires b != 1;
	//@ requires b >= 1;
	//@ requires b > 1;
	//@ requires b < 0;
	//@ requires b <= 0;
	//@ requires b == 0;
	//@ requires b != 0;
	//@ requires b >= 0;
	//@ requires b > 0;
	//@ requires b < -1;
	//@ requires b <= -1;
	//@ requires b == -1;
	//@ requires b != -1;
	//@ requires b >= -1;
	//@ requires b > -1;
	//@ ensures \result < b;
	//@ ensures \result <= b;
	//@ ensures \result == b;
	//@ ensures \result != b;
	//@ ensures \result >= b;
	//@ ensures \result > b;
	//@ ensures \result < a;
	//@ ensures \result <= a;
	//@ ensures \result == a;
	//@ ensures \result != a;
	//@ ensures \result >= a;
	//@ ensures \result > a;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures a >= 0 ==> \result >= 0;
	//@ ensures b >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:310: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:69:) in method main
        mulLoop(-4, 0);
               ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:69: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:310:
	public static int mulLoop(int a, int b) {
	                  ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:12: verify: Precondition conjunct is false: a > -1
	//@ requires a > -1;
	               ^
3 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a != 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a != -1;
	//@ requires b < a;
	//@ requires b <= a;
	//@ requires b == a;
	//@ requires b != a;
	//@ requires b >= a;
	//@ requires b > a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b == 1;
	//@ requires b != 1;
	//@ requires b >= 1;
	//@ requires b > 1;
	//@ requires b < 0;
	//@ requires b <= 0;
	//@ requires b == 0;
	//@ requires b != 0;
	//@ requires b >= 0;
	//@ requires b > 0;
	//@ requires b < -1;
	//@ requires b <= -1;
	//@ requires b == -1;
	//@ requires b != -1;
	//@ requires b >= -1;
	//@ requires b > -1;
	//@ ensures \result < b;
	//@ ensures \result <= b;
	//@ ensures \result == b;
	//@ ensures \result != b;
	//@ ensures \result >= b;
	//@ ensures \result > b;
	//@ ensures \result < a;
	//@ ensures \result <= a;
	//@ ensures \result == a;
	//@ ensures \result != a;
	//@ ensures \result >= a;
	//@ ensures \result > a;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures a >= 0 ==> \result >= 0;
	//@ ensures b >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:309: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:68:) in method main
        mulLoop(-4, 0);
               ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:68: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:309:
	public static int mulLoop(int a, int b) {
	                  ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:12: verify: Precondition conjunct is false: b < a
	//@ requires b < a;
	               ^
3 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a != 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a != -1;
	//@ requires b <= a;
	//@ requires b == a;
	//@ requires b != a;
	//@ requires b >= a;
	//@ requires b > a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b == 1;
	//@ requires b != 1;
	//@ requires b >= 1;
	//@ requires b > 1;
	//@ requires b < 0;
	//@ requires b <= 0;
	//@ requires b == 0;
	//@ requires b != 0;
	//@ requires b >= 0;
	//@ requires b > 0;
	//@ requires b < -1;
	//@ requires b <= -1;
	//@ requires b == -1;
	//@ requires b != -1;
	//@ requires b >= -1;
	//@ requires b > -1;
	//@ ensures \result < b;
	//@ ensures \result <= b;
	//@ ensures \result == b;
	//@ ensures \result != b;
	//@ ensures \result >= b;
	//@ ensures \result > b;
	//@ ensures \result < a;
	//@ ensures \result <= a;
	//@ ensures \result == a;
	//@ ensures \result != a;
	//@ ensures \result >= a;
	//@ ensures \result > a;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures a >= 0 ==> \result >= 0;
	//@ ensures b >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:308: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:67:) in method main
        mulLoop(-4, 0);
               ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:67: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:308:
	public static int mulLoop(int a, int b) {
	                  ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:12: verify: Precondition conjunct is false: b <= a
	//@ requires b <= a;
	               ^
3 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a != 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a != -1;
	//@ requires b == a;
	//@ requires b != a;
	//@ requires b >= a;
	//@ requires b > a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b == 1;
	//@ requires b != 1;
	//@ requires b >= 1;
	//@ requires b > 1;
	//@ requires b < 0;
	//@ requires b <= 0;
	//@ requires b == 0;
	//@ requires b != 0;
	//@ requires b >= 0;
	//@ requires b > 0;
	//@ requires b < -1;
	//@ requires b <= -1;
	//@ requires b == -1;
	//@ requires b != -1;
	//@ requires b >= -1;
	//@ requires b > -1;
	//@ ensures \result < b;
	//@ ensures \result <= b;
	//@ ensures \result == b;
	//@ ensures \result != b;
	//@ ensures \result >= b;
	//@ ensures \result > b;
	//@ ensures \result < a;
	//@ ensures \result <= a;
	//@ ensures \result == a;
	//@ ensures \result != a;
	//@ ensures \result >= a;
	//@ ensures \result > a;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures a >= 0 ==> \result >= 0;
	//@ ensures b >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:307: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:66:) in method main
        mulLoop(-4, 0);
               ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:66: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:307:
	public static int mulLoop(int a, int b) {
	                  ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:12: verify: Precondition conjunct is false: b == a
	//@ requires b == a;
	               ^
3 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a != 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b >= a;
	//@ requires b > a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b == 1;
	//@ requires b != 1;
	//@ requires b >= 1;
	//@ requires b > 1;
	//@ requires b < 0;
	//@ requires b <= 0;
	//@ requires b == 0;
	//@ requires b != 0;
	//@ requires b >= 0;
	//@ requires b > 0;
	//@ requires b < -1;
	//@ requires b <= -1;
	//@ requires b == -1;
	//@ requires b != -1;
	//@ requires b >= -1;
	//@ requires b > -1;
	//@ ensures \result < b;
	//@ ensures \result <= b;
	//@ ensures \result == b;
	//@ ensures \result != b;
	//@ ensures \result >= b;
	//@ ensures \result > b;
	//@ ensures \result < a;
	//@ ensures \result <= a;
	//@ ensures \result == a;
	//@ ensures \result != a;
	//@ ensures \result >= a;
	//@ ensures \result > a;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures a >= 0 ==> \result >= 0;
	//@ ensures b >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:306: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:65:) in method main
        mulLoop(-4, 0);
               ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:65: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:306:
	public static int mulLoop(int a, int b) {
	                  ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:17: verify: Precondition conjunct is false: b == 1
	//@ requires b == 1;
	               ^
3 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a != 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b >= a;
	//@ requires b > a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b >= 1;
	//@ requires b > 1;
	//@ requires b < 0;
	//@ requires b <= 0;
	//@ requires b == 0;
	//@ requires b != 0;
	//@ requires b >= 0;
	//@ requires b > 0;
	//@ requires b < -1;
	//@ requires b <= -1;
	//@ requires b == -1;
	//@ requires b != -1;
	//@ requires b >= -1;
	//@ requires b > -1;
	//@ ensures \result < b;
	//@ ensures \result <= b;
	//@ ensures \result == b;
	//@ ensures \result != b;
	//@ ensures \result >= b;
	//@ ensures \result > b;
	//@ ensures \result < a;
	//@ ensures \result <= a;
	//@ ensures \result == a;
	//@ ensures \result != a;
	//@ ensures \result >= a;
	//@ ensures \result > a;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures a >= 0 ==> \result >= 0;
	//@ ensures b >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:305: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:64:) in method main
        mulLoop(-4, 0);
               ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:64: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:305:
	public static int mulLoop(int a, int b) {
	                  ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:18: verify: Precondition conjunct is false: b >= 1
	//@ requires b >= 1;
	               ^
3 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a != 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b >= a;
	//@ requires b > a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b > 1;
	//@ requires b < 0;
	//@ requires b <= 0;
	//@ requires b == 0;
	//@ requires b != 0;
	//@ requires b >= 0;
	//@ requires b > 0;
	//@ requires b < -1;
	//@ requires b <= -1;
	//@ requires b == -1;
	//@ requires b != -1;
	//@ requires b >= -1;
	//@ requires b > -1;
	//@ ensures \result < b;
	//@ ensures \result <= b;
	//@ ensures \result == b;
	//@ ensures \result != b;
	//@ ensures \result >= b;
	//@ ensures \result > b;
	//@ ensures \result < a;
	//@ ensures \result <= a;
	//@ ensures \result == a;
	//@ ensures \result != a;
	//@ ensures \result >= a;
	//@ ensures \result > a;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures a >= 0 ==> \result >= 0;
	//@ ensures b >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:304: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:63:) in method main
        mulLoop(-4, 0);
               ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:63: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:304:
	public static int mulLoop(int a, int b) {
	                  ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:18: verify: Precondition conjunct is false: b > 1
	//@ requires b > 1;
	               ^
3 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a != 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b >= a;
	//@ requires b > a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b < 0;
	//@ requires b <= 0;
	//@ requires b == 0;
	//@ requires b != 0;
	//@ requires b >= 0;
	//@ requires b > 0;
	//@ requires b < -1;
	//@ requires b <= -1;
	//@ requires b == -1;
	//@ requires b != -1;
	//@ requires b >= -1;
	//@ requires b > -1;
	//@ ensures \result < b;
	//@ ensures \result <= b;
	//@ ensures \result == b;
	//@ ensures \result != b;
	//@ ensures \result >= b;
	//@ ensures \result > b;
	//@ ensures \result < a;
	//@ ensures \result <= a;
	//@ ensures \result == a;
	//@ ensures \result != a;
	//@ ensures \result >= a;
	//@ ensures \result > a;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures a >= 0 ==> \result >= 0;
	//@ ensures b >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:303: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:62:) in method main
        mulLoop(-4, 0);
               ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:62: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:303:
	public static int mulLoop(int a, int b) {
	                  ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:18: verify: Precondition conjunct is false: b < 0
	//@ requires b < 0;
	               ^
3 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a != 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b >= a;
	//@ requires b > a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b == 0;
	//@ requires b != 0;
	//@ requires b >= 0;
	//@ requires b > 0;
	//@ requires b < -1;
	//@ requires b <= -1;
	//@ requires b == -1;
	//@ requires b != -1;
	//@ requires b >= -1;
	//@ requires b > -1;
	//@ ensures \result < b;
	//@ ensures \result <= b;
	//@ ensures \result == b;
	//@ ensures \result != b;
	//@ ensures \result >= b;
	//@ ensures \result > b;
	//@ ensures \result < a;
	//@ ensures \result <= a;
	//@ ensures \result == a;
	//@ ensures \result != a;
	//@ ensures \result >= a;
	//@ ensures \result > a;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures a >= 0 ==> \result >= 0;
	//@ ensures b >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:302: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:61:) in method main
        mulLoop(-4, 0);
               ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:61: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:302:
	public static int mulLoop(int a, int b) {
	                  ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:20: verify: Precondition conjunct is false: b != 0
	//@ requires b != 0;
	               ^
3 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a != 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b >= a;
	//@ requires b > a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b == 0;
	//@ requires b >= 0;
	//@ requires b > 0;
	//@ requires b < -1;
	//@ requires b <= -1;
	//@ requires b == -1;
	//@ requires b != -1;
	//@ requires b >= -1;
	//@ requires b > -1;
	//@ ensures \result < b;
	//@ ensures \result <= b;
	//@ ensures \result == b;
	//@ ensures \result != b;
	//@ ensures \result >= b;
	//@ ensures \result > b;
	//@ ensures \result < a;
	//@ ensures \result <= a;
	//@ ensures \result == a;
	//@ ensures \result != a;
	//@ ensures \result >= a;
	//@ ensures \result > a;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures a >= 0 ==> \result >= 0;
	//@ ensures b >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:301: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:60:) in method main
        mulLoop(-4, 0);
               ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:60: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:301:
	public static int mulLoop(int a, int b) {
	                  ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:21: verify: Precondition conjunct is false: b > 0
	//@ requires b > 0;
	               ^
3 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a != 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b >= a;
	//@ requires b > a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b == 0;
	//@ requires b >= 0;
	//@ requires b < -1;
	//@ requires b <= -1;
	//@ requires b == -1;
	//@ requires b != -1;
	//@ requires b >= -1;
	//@ requires b > -1;
	//@ ensures \result < b;
	//@ ensures \result <= b;
	//@ ensures \result == b;
	//@ ensures \result != b;
	//@ ensures \result >= b;
	//@ ensures \result > b;
	//@ ensures \result < a;
	//@ ensures \result <= a;
	//@ ensures \result == a;
	//@ ensures \result != a;
	//@ ensures \result >= a;
	//@ ensures \result > a;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures a >= 0 ==> \result >= 0;
	//@ ensures b >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:300: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:59:) in method main
        mulLoop(-4, 0);
               ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:59: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:300:
	public static int mulLoop(int a, int b) {
	                  ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:21: verify: Precondition conjunct is false: b < -1
	//@ requires b < -1;
	               ^
3 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a != 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b >= a;
	//@ requires b > a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b == 0;
	//@ requires b >= 0;
	//@ requires b <= -1;
	//@ requires b == -1;
	//@ requires b != -1;
	//@ requires b >= -1;
	//@ requires b > -1;
	//@ ensures \result < b;
	//@ ensures \result <= b;
	//@ ensures \result == b;
	//@ ensures \result != b;
	//@ ensures \result >= b;
	//@ ensures \result > b;
	//@ ensures \result < a;
	//@ ensures \result <= a;
	//@ ensures \result == a;
	//@ ensures \result != a;
	//@ ensures \result >= a;
	//@ ensures \result > a;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures a >= 0 ==> \result >= 0;
	//@ ensures b >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:299: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:58:) in method main
        mulLoop(-4, 0);
               ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:58: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:299:
	public static int mulLoop(int a, int b) {
	                  ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:21: verify: Precondition conjunct is false: b <= -1
	//@ requires b <= -1;
	               ^
3 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a != 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b >= a;
	//@ requires b > a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b == 0;
	//@ requires b >= 0;
	//@ requires b == -1;
	//@ requires b != -1;
	//@ requires b >= -1;
	//@ requires b > -1;
	//@ ensures \result < b;
	//@ ensures \result <= b;
	//@ ensures \result == b;
	//@ ensures \result != b;
	//@ ensures \result >= b;
	//@ ensures \result > b;
	//@ ensures \result < a;
	//@ ensures \result <= a;
	//@ ensures \result == a;
	//@ ensures \result != a;
	//@ ensures \result >= a;
	//@ ensures \result > a;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures a >= 0 ==> \result >= 0;
	//@ ensures b >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:298: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:57:) in method main
        mulLoop(-4, 0);
               ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:57: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:298:
	public static int mulLoop(int a, int b) {
	                  ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:21: verify: Precondition conjunct is false: b == -1
	//@ requires b == -1;
	               ^
3 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a != 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b >= a;
	//@ requires b > a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b == 0;
	//@ requires b >= 0;
	//@ requires b != -1;
	//@ requires b >= -1;
	//@ requires b > -1;
	//@ ensures \result < b;
	//@ ensures \result <= b;
	//@ ensures \result == b;
	//@ ensures \result != b;
	//@ ensures \result >= b;
	//@ ensures \result > b;
	//@ ensures \result < a;
	//@ ensures \result <= a;
	//@ ensures \result == a;
	//@ ensures \result != a;
	//@ ensures \result >= a;
	//@ ensures \result > a;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures a >= 0 ==> \result >= 0;
	//@ ensures b >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:61: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:183:) in method mulLoop
                __Loop_Invariant_Dummy1(a, b, res, i);
                                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:183: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:61:
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:77: verify: Precondition conjunct is false: a == 1
    //@ requires a == 1;
                   ^
3 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a != 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b >= a;
	//@ requires b > a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b == 0;
	//@ requires b >= 0;
	//@ requires b != -1;
	//@ requires b >= -1;
	//@ requires b > -1;
	//@ ensures \result < b;
	//@ ensures \result <= b;
	//@ ensures \result == b;
	//@ ensures \result != b;
	//@ ensures \result >= b;
	//@ ensures \result > b;
	//@ ensures \result < a;
	//@ ensures \result <= a;
	//@ ensures \result == a;
	//@ ensures \result != a;
	//@ ensures \result >= a;
	//@ ensures \result > a;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures a >= 0 ==> \result >= 0;
	//@ ensures b >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:61: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:182:) in method mulLoop
                __Loop_Invariant_Dummy1(a, b, res, i);
                                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:182: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:61:
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:78: verify: Precondition conjunct is false: a >= 1
    //@ requires a >= 1;
                   ^
3 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a != 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b >= a;
	//@ requires b > a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b == 0;
	//@ requires b >= 0;
	//@ requires b != -1;
	//@ requires b >= -1;
	//@ requires b > -1;
	//@ ensures \result < b;
	//@ ensures \result <= b;
	//@ ensures \result == b;
	//@ ensures \result != b;
	//@ ensures \result >= b;
	//@ ensures \result > b;
	//@ ensures \result < a;
	//@ ensures \result <= a;
	//@ ensures \result == a;
	//@ ensures \result != a;
	//@ ensures \result >= a;
	//@ ensures \result > a;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures a >= 0 ==> \result >= 0;
	//@ ensures b >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:61: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:181:) in method mulLoop
                __Loop_Invariant_Dummy1(a, b, res, i);
                                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:181: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:61:
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:78: verify: Precondition conjunct is false: a > 1
    //@ requires a > 1;
                   ^
3 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a != 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b >= a;
	//@ requires b > a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b == 0;
	//@ requires b >= 0;
	//@ requires b != -1;
	//@ requires b >= -1;
	//@ requires b > -1;
	//@ ensures \result < b;
	//@ ensures \result <= b;
	//@ ensures \result == b;
	//@ ensures \result != b;
	//@ ensures \result >= b;
	//@ ensures \result > b;
	//@ ensures \result < a;
	//@ ensures \result <= a;
	//@ ensures \result == a;
	//@ ensures \result != a;
	//@ ensures \result >= a;
	//@ ensures \result > a;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures a >= 0 ==> \result >= 0;
	//@ ensures b >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:61: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:180:) in method mulLoop
                __Loop_Invariant_Dummy1(a, b, res, i);
                                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:180: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:61:
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:80: verify: Precondition conjunct is false: a == 0
    //@ requires a == 0;
                   ^
3 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a != 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b >= a;
	//@ requires b > a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b == 0;
	//@ requires b >= 0;
	//@ requires b != -1;
	//@ requires b >= -1;
	//@ requires b > -1;
	//@ ensures \result < b;
	//@ ensures \result <= b;
	//@ ensures \result == b;
	//@ ensures \result != b;
	//@ ensures \result >= b;
	//@ ensures \result > b;
	//@ ensures \result < a;
	//@ ensures \result <= a;
	//@ ensures \result == a;
	//@ ensures \result != a;
	//@ ensures \result >= a;
	//@ ensures \result > a;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures a >= 0 ==> \result >= 0;
	//@ ensures b >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:179:) in method mulLoop
            __Loop_Invariant_Dummy1(a, b, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:179: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:64:
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:81: verify: Precondition conjunct is false: a >= 0
    //@ requires a >= 0;
                   ^
3 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a != 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b >= a;
	//@ requires b > a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b == 0;
	//@ requires b >= 0;
	//@ requires b != -1;
	//@ requires b >= -1;
	//@ requires b > -1;
	//@ ensures \result < b;
	//@ ensures \result <= b;
	//@ ensures \result == b;
	//@ ensures \result != b;
	//@ ensures \result >= b;
	//@ ensures \result > b;
	//@ ensures \result < a;
	//@ ensures \result <= a;
	//@ ensures \result == a;
	//@ ensures \result != a;
	//@ ensures \result >= a;
	//@ ensures \result > a;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures a >= 0 ==> \result >= 0;
	//@ ensures b >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:61: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:178:) in method mulLoop
                __Loop_Invariant_Dummy1(a, b, res, i);
                                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:178: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:61:
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:81: verify: Precondition conjunct is false: a > 0
    //@ requires a > 0;
                   ^
3 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a != 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b >= a;
	//@ requires b > a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b == 0;
	//@ requires b >= 0;
	//@ requires b != -1;
	//@ requires b >= -1;
	//@ requires b > -1;
	//@ ensures \result < b;
	//@ ensures \result <= b;
	//@ ensures \result == b;
	//@ ensures \result != b;
	//@ ensures \result >= b;
	//@ ensures \result > b;
	//@ ensures \result < a;
	//@ ensures \result <= a;
	//@ ensures \result == a;
	//@ ensures \result != a;
	//@ ensures \result >= a;
	//@ ensures \result > a;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures a >= 0 ==> \result >= 0;
	//@ ensures b >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:177:) in method mulLoop
            __Loop_Invariant_Dummy1(a, b, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:177: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:64:
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:83: verify: Precondition conjunct is false: a == -1
    //@ requires a == -1;
                   ^
3 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a != 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b >= a;
	//@ requires b > a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b == 0;
	//@ requires b >= 0;
	//@ requires b != -1;
	//@ requires b >= -1;
	//@ requires b > -1;
	//@ ensures \result < b;
	//@ ensures \result <= b;
	//@ ensures \result == b;
	//@ ensures \result != b;
	//@ ensures \result >= b;
	//@ ensures \result > b;
	//@ ensures \result < a;
	//@ ensures \result <= a;
	//@ ensures \result == a;
	//@ ensures \result != a;
	//@ ensures \result >= a;
	//@ ensures \result > a;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures a >= 0 ==> \result >= 0;
	//@ ensures b >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:176:) in method mulLoop
            __Loop_Invariant_Dummy1(a, b, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:176: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:64:
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:84: verify: Precondition conjunct is false: a >= -1
    //@ requires a >= -1;
                   ^
3 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a != 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b >= a;
	//@ requires b > a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b == 0;
	//@ requires b >= 0;
	//@ requires b != -1;
	//@ requires b >= -1;
	//@ requires b > -1;
	//@ ensures \result < b;
	//@ ensures \result <= b;
	//@ ensures \result == b;
	//@ ensures \result != b;
	//@ ensures \result >= b;
	//@ ensures \result > b;
	//@ ensures \result < a;
	//@ ensures \result <= a;
	//@ ensures \result == a;
	//@ ensures \result != a;
	//@ ensures \result >= a;
	//@ ensures \result > a;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures a >= 0 ==> \result >= 0;
	//@ ensures b >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:175:) in method mulLoop
            __Loop_Invariant_Dummy1(a, b, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:175: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:64:
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:84: verify: Precondition conjunct is false: a > -1
    //@ requires a > -1;
                   ^
3 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a != 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b >= a;
	//@ requires b > a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b == 0;
	//@ requires b >= 0;
	//@ requires b != -1;
	//@ requires b >= -1;
	//@ requires b > -1;
	//@ ensures \result < b;
	//@ ensures \result <= b;
	//@ ensures \result == b;
	//@ ensures \result != b;
	//@ ensures \result >= b;
	//@ ensures \result > b;
	//@ ensures \result < a;
	//@ ensures \result <= a;
	//@ ensures \result == a;
	//@ ensures \result != a;
	//@ ensures \result >= a;
	//@ ensures \result > a;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures a >= 0 ==> \result >= 0;
	//@ ensures b >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:61: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:174:) in method mulLoop
                __Loop_Invariant_Dummy1(a, b, res, i);
                                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:174: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:61:
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:84: verify: Precondition conjunct is false: b < a
    //@ requires b < a;
                   ^
3 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a != 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b >= a;
	//@ requires b > a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b == 0;
	//@ requires b >= 0;
	//@ requires b != -1;
	//@ requires b >= -1;
	//@ requires b > -1;
	//@ ensures \result < b;
	//@ ensures \result <= b;
	//@ ensures \result == b;
	//@ ensures \result != b;
	//@ ensures \result >= b;
	//@ ensures \result > b;
	//@ ensures \result < a;
	//@ ensures \result <= a;
	//@ ensures \result == a;
	//@ ensures \result != a;
	//@ ensures \result >= a;
	//@ ensures \result > a;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures a >= 0 ==> \result >= 0;
	//@ ensures b >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:173:) in method mulLoop
            __Loop_Invariant_Dummy1(a, b, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:173: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:64:
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:84: verify: Precondition conjunct is false: b <= a
    //@ requires b <= a;
                   ^
3 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a != 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b >= a;
	//@ requires b > a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b == 0;
	//@ requires b >= 0;
	//@ requires b != -1;
	//@ requires b >= -1;
	//@ requires b > -1;
	//@ ensures \result < b;
	//@ ensures \result <= b;
	//@ ensures \result == b;
	//@ ensures \result != b;
	//@ ensures \result >= b;
	//@ ensures \result > b;
	//@ ensures \result < a;
	//@ ensures \result <= a;
	//@ ensures \result == a;
	//@ ensures \result != a;
	//@ ensures \result >= a;
	//@ ensures \result > a;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures a >= 0 ==> \result >= 0;
	//@ ensures b >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:172:) in method mulLoop
            __Loop_Invariant_Dummy1(a, b, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:172: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:64:
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:84: verify: Precondition conjunct is false: b == a
    //@ requires b == a;
                   ^
3 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a != 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b >= a;
	//@ requires b > a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b == 0;
	//@ requires b >= 0;
	//@ requires b != -1;
	//@ requires b >= -1;
	//@ requires b > -1;
	//@ ensures \result < b;
	//@ ensures \result <= b;
	//@ ensures \result == b;
	//@ ensures \result != b;
	//@ ensures \result >= b;
	//@ ensures \result > b;
	//@ ensures \result < a;
	//@ ensures \result <= a;
	//@ ensures \result == a;
	//@ ensures \result != a;
	//@ ensures \result >= a;
	//@ ensures \result > a;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures a >= 0 ==> \result >= 0;
	//@ ensures b >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:171:) in method mulLoop
            __Loop_Invariant_Dummy1(a, b, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:171: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:64:
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:89: verify: Precondition conjunct is false: b == 1
    //@ requires b == 1;
                   ^
3 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a != 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b >= a;
	//@ requires b > a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b == 0;
	//@ requires b >= 0;
	//@ requires b != -1;
	//@ requires b >= -1;
	//@ requires b > -1;
	//@ ensures \result < b;
	//@ ensures \result <= b;
	//@ ensures \result == b;
	//@ ensures \result != b;
	//@ ensures \result >= b;
	//@ ensures \result > b;
	//@ ensures \result < a;
	//@ ensures \result <= a;
	//@ ensures \result == a;
	//@ ensures \result != a;
	//@ ensures \result >= a;
	//@ ensures \result > a;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures a >= 0 ==> \result >= 0;
	//@ ensures b >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:61: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:170:) in method mulLoop
                __Loop_Invariant_Dummy1(a, b, res, i);
                                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:170: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:61:
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:90: verify: Precondition conjunct is false: b >= 1
    //@ requires b >= 1;
                   ^
3 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a != 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b >= a;
	//@ requires b > a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b == 0;
	//@ requires b >= 0;
	//@ requires b != -1;
	//@ requires b >= -1;
	//@ requires b > -1;
	//@ ensures \result < b;
	//@ ensures \result <= b;
	//@ ensures \result == b;
	//@ ensures \result != b;
	//@ ensures \result >= b;
	//@ ensures \result > b;
	//@ ensures \result < a;
	//@ ensures \result <= a;
	//@ ensures \result == a;
	//@ ensures \result != a;
	//@ ensures \result >= a;
	//@ ensures \result > a;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures a >= 0 ==> \result >= 0;
	//@ ensures b >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:169:) in method mulLoop
            __Loop_Invariant_Dummy1(a, b, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:169: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:64:
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:90: verify: Precondition conjunct is false: b > 1
    //@ requires b > 1;
                   ^
3 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a != 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b >= a;
	//@ requires b > a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b == 0;
	//@ requires b >= 0;
	//@ requires b != -1;
	//@ requires b >= -1;
	//@ requires b > -1;
	//@ ensures \result < b;
	//@ ensures \result <= b;
	//@ ensures \result == b;
	//@ ensures \result != b;
	//@ ensures \result >= b;
	//@ ensures \result > b;
	//@ ensures \result < a;
	//@ ensures \result <= a;
	//@ ensures \result == a;
	//@ ensures \result != a;
	//@ ensures \result >= a;
	//@ ensures \result > a;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures a >= 0 ==> \result >= 0;
	//@ ensures b >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:61: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:168:) in method mulLoop
                __Loop_Invariant_Dummy1(a, b, res, i);
                                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:168: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:61:
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:90: verify: Precondition conjunct is false: b < 0
    //@ requires b < 0;
                   ^
3 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a != 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b >= a;
	//@ requires b > a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b == 0;
	//@ requires b >= 0;
	//@ requires b != -1;
	//@ requires b >= -1;
	//@ requires b > -1;
	//@ ensures \result < b;
	//@ ensures \result <= b;
	//@ ensures \result == b;
	//@ ensures \result != b;
	//@ ensures \result >= b;
	//@ ensures \result > b;
	//@ ensures \result < a;
	//@ ensures \result <= a;
	//@ ensures \result == a;
	//@ ensures \result != a;
	//@ ensures \result >= a;
	//@ ensures \result > a;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures a >= 0 ==> \result >= 0;
	//@ ensures b >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:61: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:167:) in method mulLoop
                __Loop_Invariant_Dummy1(a, b, res, i);
                                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:167: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:61:
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:92: verify: Precondition conjunct is false: b != 0
    //@ requires b != 0;
                   ^
3 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a != 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b >= a;
	//@ requires b > a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b == 0;
	//@ requires b >= 0;
	//@ requires b != -1;
	//@ requires b >= -1;
	//@ requires b > -1;
	//@ ensures \result < b;
	//@ ensures \result <= b;
	//@ ensures \result == b;
	//@ ensures \result != b;
	//@ ensures \result >= b;
	//@ ensures \result > b;
	//@ ensures \result < a;
	//@ ensures \result <= a;
	//@ ensures \result == a;
	//@ ensures \result != a;
	//@ ensures \result >= a;
	//@ ensures \result > a;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures a >= 0 ==> \result >= 0;
	//@ ensures b >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:166:) in method mulLoop
            __Loop_Invariant_Dummy1(a, b, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:166: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:64:
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:93: verify: Precondition conjunct is false: b > 0
    //@ requires b > 0;
                   ^
3 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a != 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b >= a;
	//@ requires b > a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b == 0;
	//@ requires b >= 0;
	//@ requires b != -1;
	//@ requires b >= -1;
	//@ requires b > -1;
	//@ ensures \result < b;
	//@ ensures \result <= b;
	//@ ensures \result == b;
	//@ ensures \result != b;
	//@ ensures \result >= b;
	//@ ensures \result > b;
	//@ ensures \result < a;
	//@ ensures \result <= a;
	//@ ensures \result == a;
	//@ ensures \result != a;
	//@ ensures \result >= a;
	//@ ensures \result > a;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures a >= 0 ==> \result >= 0;
	//@ ensures b >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:165:) in method mulLoop
            __Loop_Invariant_Dummy1(a, b, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:165: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:64:
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:93: verify: Precondition conjunct is false: b < -1
    //@ requires b < -1;
                   ^
3 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a != 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b >= a;
	//@ requires b > a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b == 0;
	//@ requires b >= 0;
	//@ requires b != -1;
	//@ requires b >= -1;
	//@ requires b > -1;
	//@ ensures \result < b;
	//@ ensures \result <= b;
	//@ ensures \result == b;
	//@ ensures \result != b;
	//@ ensures \result >= b;
	//@ ensures \result > b;
	//@ ensures \result < a;
	//@ ensures \result <= a;
	//@ ensures \result == a;
	//@ ensures \result != a;
	//@ ensures \result >= a;
	//@ ensures \result > a;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures a >= 0 ==> \result >= 0;
	//@ ensures b >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:61: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:164:) in method mulLoop
                __Loop_Invariant_Dummy1(a, b, res, i);
                                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:164: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:61:
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:93: verify: Precondition conjunct is false: b <= -1
    //@ requires b <= -1;
                   ^
3 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a != 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b >= a;
	//@ requires b > a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b == 0;
	//@ requires b >= 0;
	//@ requires b != -1;
	//@ requires b >= -1;
	//@ requires b > -1;
	//@ ensures \result < b;
	//@ ensures \result <= b;
	//@ ensures \result == b;
	//@ ensures \result != b;
	//@ ensures \result >= b;
	//@ ensures \result > b;
	//@ ensures \result < a;
	//@ ensures \result <= a;
	//@ ensures \result == a;
	//@ ensures \result != a;
	//@ ensures \result >= a;
	//@ ensures \result > a;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures a >= 0 ==> \result >= 0;
	//@ ensures b >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:163:) in method mulLoop
            __Loop_Invariant_Dummy1(a, b, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:163: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:64:
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:93: verify: Precondition conjunct is false: b == -1
    //@ requires b == -1;
                   ^
3 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a != 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b >= a;
	//@ requires b > a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b == 0;
	//@ requires b >= 0;
	//@ requires b != -1;
	//@ requires b >= -1;
	//@ requires b > -1;
	//@ ensures \result < b;
	//@ ensures \result <= b;
	//@ ensures \result == b;
	//@ ensures \result != b;
	//@ ensures \result >= b;
	//@ ensures \result > b;
	//@ ensures \result < a;
	//@ ensures \result <= a;
	//@ ensures \result == a;
	//@ ensures \result != a;
	//@ ensures \result >= a;
	//@ ensures \result > a;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures a >= 0 ==> \result >= 0;
	//@ ensures b >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:61: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:162:) in method mulLoop
                __Loop_Invariant_Dummy1(a, b, res, i);
                                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:162: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:61:
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:98: verify: Precondition conjunct is false: res == b
    //@ requires res == b;
                     ^
3 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a != 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b >= a;
	//@ requires b > a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b == 0;
	//@ requires b >= 0;
	//@ requires b != -1;
	//@ requires b >= -1;
	//@ requires b > -1;
	//@ ensures \result < b;
	//@ ensures \result <= b;
	//@ ensures \result == b;
	//@ ensures \result != b;
	//@ ensures \result >= b;
	//@ ensures \result > b;
	//@ ensures \result < a;
	//@ ensures \result <= a;
	//@ ensures \result == a;
	//@ ensures \result != a;
	//@ ensures \result >= a;
	//@ ensures \result > a;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures a >= 0 ==> \result >= 0;
	//@ ensures b >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:61: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:161:) in method mulLoop
                __Loop_Invariant_Dummy1(a, b, res, i);
                                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:161: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:61:
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:96: verify: Precondition conjunct is false: res < b
    //@ requires res < b;
                     ^
3 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a != 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b >= a;
	//@ requires b > a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b == 0;
	//@ requires b >= 0;
	//@ requires b != -1;
	//@ requires b >= -1;
	//@ requires b > -1;
	//@ ensures \result < b;
	//@ ensures \result <= b;
	//@ ensures \result == b;
	//@ ensures \result != b;
	//@ ensures \result >= b;
	//@ ensures \result > b;
	//@ ensures \result < a;
	//@ ensures \result <= a;
	//@ ensures \result == a;
	//@ ensures \result != a;
	//@ ensures \result >= a;
	//@ ensures \result > a;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures a >= 0 ==> \result >= 0;
	//@ ensures b >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res <= b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:160:) in method mulLoop
            __Loop_Invariant_Dummy1(a, b, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:160: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:64:
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:98: verify: Precondition conjunct is false: res >= b
    //@ requires res >= b;
                     ^
3 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a != 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b >= a;
	//@ requires b > a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b == 0;
	//@ requires b >= 0;
	//@ requires b != -1;
	//@ requires b >= -1;
	//@ requires b > -1;
	//@ ensures \result < b;
	//@ ensures \result <= b;
	//@ ensures \result == b;
	//@ ensures \result != b;
	//@ ensures \result >= b;
	//@ ensures \result > b;
	//@ ensures \result < a;
	//@ ensures \result <= a;
	//@ ensures \result == a;
	//@ ensures \result != a;
	//@ ensures \result >= a;
	//@ ensures \result > a;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures a >= 0 ==> \result >= 0;
	//@ ensures b >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res <= b;
    //@ requires res != b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:61: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:159:) in method mulLoop
                __Loop_Invariant_Dummy1(a, b, res, i);
                                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:159: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:61:
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:98: verify: Precondition conjunct is false: res > b
    //@ requires res > b;
                     ^
3 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a != 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b >= a;
	//@ requires b > a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b == 0;
	//@ requires b >= 0;
	//@ requires b != -1;
	//@ requires b >= -1;
	//@ requires b > -1;
	//@ ensures \result < b;
	//@ ensures \result <= b;
	//@ ensures \result == b;
	//@ ensures \result != b;
	//@ ensures \result >= b;
	//@ ensures \result > b;
	//@ ensures \result < a;
	//@ ensures \result <= a;
	//@ ensures \result == a;
	//@ ensures \result != a;
	//@ ensures \result >= a;
	//@ ensures \result > a;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures a >= 0 ==> \result >= 0;
	//@ ensures b >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res <= b;
    //@ requires res != b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:158:) in method mulLoop
            __Loop_Invariant_Dummy1(a, b, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:158: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:64:
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:100: verify: Precondition conjunct is false: res == a
    //@ requires res == a;
                     ^
3 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a != 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b >= a;
	//@ requires b > a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b == 0;
	//@ requires b >= 0;
	//@ requires b != -1;
	//@ requires b >= -1;
	//@ requires b > -1;
	//@ ensures \result < b;
	//@ ensures \result <= b;
	//@ ensures \result == b;
	//@ ensures \result != b;
	//@ ensures \result >= b;
	//@ ensures \result > b;
	//@ ensures \result < a;
	//@ ensures \result <= a;
	//@ ensures \result == a;
	//@ ensures \result != a;
	//@ ensures \result >= a;
	//@ ensures \result > a;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures a >= 0 ==> \result >= 0;
	//@ ensures b >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res <= b;
    //@ requires res != b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:61: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:157:) in method mulLoop
                __Loop_Invariant_Dummy1(a, b, res, i);
                                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:157: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:61:
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:97: verify: Precondition conjunct is false: res != b
    //@ requires res != b;
                     ^
3 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a != 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b >= a;
	//@ requires b > a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b == 0;
	//@ requires b >= 0;
	//@ requires b != -1;
	//@ requires b >= -1;
	//@ requires b > -1;
	//@ ensures \result < b;
	//@ ensures \result <= b;
	//@ ensures \result == b;
	//@ ensures \result != b;
	//@ ensures \result >= b;
	//@ ensures \result > b;
	//@ ensures \result < a;
	//@ ensures \result <= a;
	//@ ensures \result == a;
	//@ ensures \result != a;
	//@ ensures \result >= a;
	//@ ensures \result > a;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures a >= 0 ==> \result >= 0;
	//@ ensures b >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res <= b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:61: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:156:) in method mulLoop
                __Loop_Invariant_Dummy1(a, b, res, i);
                                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:156: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:61:
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:97: verify: Precondition conjunct is false: res < a
    //@ requires res < a;
                     ^
3 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a != 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b >= a;
	//@ requires b > a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b == 0;
	//@ requires b >= 0;
	//@ requires b != -1;
	//@ requires b >= -1;
	//@ requires b > -1;
	//@ ensures \result < b;
	//@ ensures \result <= b;
	//@ ensures \result == b;
	//@ ensures \result != b;
	//@ ensures \result >= b;
	//@ ensures \result > b;
	//@ ensures \result < a;
	//@ ensures \result <= a;
	//@ ensures \result == a;
	//@ ensures \result != a;
	//@ ensures \result >= a;
	//@ ensures \result > a;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures a >= 0 ==> \result >= 0;
	//@ ensures b >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res <= b;
    //@ requires res <= a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:155:) in method mulLoop
            __Loop_Invariant_Dummy1(a, b, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:155: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:64:
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:99: verify: Precondition conjunct is false: res >= a
    //@ requires res >= a;
                     ^
3 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a != 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b >= a;
	//@ requires b > a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b == 0;
	//@ requires b >= 0;
	//@ requires b != -1;
	//@ requires b >= -1;
	//@ requires b > -1;
	//@ ensures \result < b;
	//@ ensures \result <= b;
	//@ ensures \result == b;
	//@ ensures \result != b;
	//@ ensures \result >= b;
	//@ ensures \result > b;
	//@ ensures \result < a;
	//@ ensures \result <= a;
	//@ ensures \result == a;
	//@ ensures \result != a;
	//@ ensures \result >= a;
	//@ ensures \result > a;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures a >= 0 ==> \result >= 0;
	//@ ensures b >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res <= b;
    //@ requires res <= a;
    //@ requires res != a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:61: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:154:) in method mulLoop
                __Loop_Invariant_Dummy1(a, b, res, i);
                                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:154: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:61:
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:96: verify: Precondition conjunct is false: res <= b
    //@ requires res <= b;
                     ^
3 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a != 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b >= a;
	//@ requires b > a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b == 0;
	//@ requires b >= 0;
	//@ requires b != -1;
	//@ requires b >= -1;
	//@ requires b > -1;
	//@ ensures \result < b;
	//@ ensures \result <= b;
	//@ ensures \result == b;
	//@ ensures \result != b;
	//@ ensures \result >= b;
	//@ ensures \result > b;
	//@ ensures \result < a;
	//@ ensures \result <= a;
	//@ ensures \result == a;
	//@ ensures \result != a;
	//@ ensures \result >= a;
	//@ ensures \result > a;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures a >= 0 ==> \result >= 0;
	//@ ensures b >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res <= a;
    //@ requires res != a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:153:) in method mulLoop
            __Loop_Invariant_Dummy1(a, b, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:153: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:64:
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:96: verify: Precondition conjunct is false: res <= a
    //@ requires res <= a;
                     ^
3 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a != 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b >= a;
	//@ requires b > a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b == 0;
	//@ requires b >= 0;
	//@ requires b != -1;
	//@ requires b >= -1;
	//@ requires b > -1;
	//@ ensures \result < b;
	//@ ensures \result <= b;
	//@ ensures \result == b;
	//@ ensures \result != b;
	//@ ensures \result >= b;
	//@ ensures \result > b;
	//@ ensures \result < a;
	//@ ensures \result <= a;
	//@ ensures \result == a;
	//@ ensures \result != a;
	//@ ensures \result >= a;
	//@ ensures \result > a;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures a >= 0 ==> \result >= 0;
	//@ ensures b >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res != a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:61: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:152:) in method mulLoop
                __Loop_Invariant_Dummy1(a, b, res, i);
                                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:152: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:61:
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:98: verify: Precondition conjunct is false: res < 1
    //@ requires res < 1;
                     ^
3 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a != 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b >= a;
	//@ requires b > a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b == 0;
	//@ requires b >= 0;
	//@ requires b != -1;
	//@ requires b >= -1;
	//@ requires b > -1;
	//@ ensures \result < b;
	//@ ensures \result <= b;
	//@ ensures \result == b;
	//@ ensures \result != b;
	//@ ensures \result >= b;
	//@ ensures \result > b;
	//@ ensures \result < a;
	//@ ensures \result <= a;
	//@ ensures \result == a;
	//@ ensures \result != a;
	//@ ensures \result >= a;
	//@ ensures \result > a;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures a >= 0 ==> \result >= 0;
	//@ ensures b >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res != a;
    //@ requires res > a;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:61: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:151:) in method mulLoop
                __Loop_Invariant_Dummy1(a, b, res, i);
                                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:151: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:61:
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:100: verify: Precondition conjunct is false: res != 1
    //@ requires res != 1;
                     ^
3 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a != 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b >= a;
	//@ requires b > a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b == 0;
	//@ requires b >= 0;
	//@ requires b != -1;
	//@ requires b >= -1;
	//@ requires b > -1;
	//@ ensures \result < b;
	//@ ensures \result <= b;
	//@ ensures \result == b;
	//@ ensures \result != b;
	//@ ensures \result >= b;
	//@ ensures \result > b;
	//@ ensures \result < a;
	//@ ensures \result <= a;
	//@ ensures \result == a;
	//@ ensures \result != a;
	//@ ensures \result >= a;
	//@ ensures \result > a;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures a >= 0 ==> \result >= 0;
	//@ ensures b >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res != a;
    //@ requires res > a;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:150:) in method mulLoop
            __Loop_Invariant_Dummy1(a, b, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:150: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:64:
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:101: verify: Precondition conjunct is false: res > 1
    //@ requires res > 1;
                     ^
3 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a != 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b >= a;
	//@ requires b > a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b == 0;
	//@ requires b >= 0;
	//@ requires b != -1;
	//@ requires b >= -1;
	//@ requires b > -1;
	//@ ensures \result < b;
	//@ ensures \result <= b;
	//@ ensures \result == b;
	//@ ensures \result != b;
	//@ ensures \result >= b;
	//@ ensures \result > b;
	//@ ensures \result < a;
	//@ ensures \result <= a;
	//@ ensures \result == a;
	//@ ensures \result != a;
	//@ ensures \result >= a;
	//@ ensures \result > a;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures a >= 0 ==> \result >= 0;
	//@ ensures b >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res != a;
    //@ requires res > a;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res >= 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:149:) in method mulLoop
            __Loop_Invariant_Dummy1(a, b, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:149: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:64:
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:101: verify: Precondition conjunct is false: res < 0
    //@ requires res < 0;
                     ^
3 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a != 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b >= a;
	//@ requires b > a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b == 0;
	//@ requires b >= 0;
	//@ requires b != -1;
	//@ requires b >= -1;
	//@ requires b > -1;
	//@ ensures \result < b;
	//@ ensures \result <= b;
	//@ ensures \result == b;
	//@ ensures \result != b;
	//@ ensures \result >= b;
	//@ ensures \result > b;
	//@ ensures \result < a;
	//@ ensures \result <= a;
	//@ ensures \result == a;
	//@ ensures \result != a;
	//@ ensures \result >= a;
	//@ ensures \result > a;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures a >= 0 ==> \result >= 0;
	//@ ensures b >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res != a;
    //@ requires res > a;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res >= 1;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:61: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:148:) in method mulLoop
                __Loop_Invariant_Dummy1(a, b, res, i);
                                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:148: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:61:
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:101: verify: Precondition conjunct is false: res <= 0
    //@ requires res <= 0;
                     ^
3 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a != 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b >= a;
	//@ requires b > a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b == 0;
	//@ requires b >= 0;
	//@ requires b != -1;
	//@ requires b >= -1;
	//@ requires b > -1;
	//@ ensures \result < b;
	//@ ensures \result <= b;
	//@ ensures \result == b;
	//@ ensures \result != b;
	//@ ensures \result >= b;
	//@ ensures \result > b;
	//@ ensures \result < a;
	//@ ensures \result <= a;
	//@ ensures \result == a;
	//@ ensures \result != a;
	//@ ensures \result >= a;
	//@ ensures \result > a;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures a >= 0 ==> \result >= 0;
	//@ ensures b >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res != a;
    //@ requires res > a;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res >= 1;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:147:) in method mulLoop
            __Loop_Invariant_Dummy1(a, b, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:147: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:64:
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:99: verify: Precondition conjunct is false: res == 1
    //@ requires res == 1;
                     ^
3 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a != 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b >= a;
	//@ requires b > a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b == 0;
	//@ requires b >= 0;
	//@ requires b != -1;
	//@ requires b >= -1;
	//@ requires b > -1;
	//@ ensures \result < b;
	//@ ensures \result <= b;
	//@ ensures \result == b;
	//@ ensures \result != b;
	//@ ensures \result >= b;
	//@ ensures \result > b;
	//@ ensures \result < a;
	//@ ensures \result <= a;
	//@ ensures \result == a;
	//@ ensures \result != a;
	//@ ensures \result >= a;
	//@ ensures \result > a;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures a >= 0 ==> \result >= 0;
	//@ ensures b >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res != a;
    //@ requires res > a;
    //@ requires res <= 1;
    //@ requires res >= 1;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:146:) in method mulLoop
            __Loop_Invariant_Dummy1(a, b, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:146: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:64:
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:98: verify: Precondition conjunct is false: res <= 1
    //@ requires res <= 1;
                     ^
3 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a != 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b >= a;
	//@ requires b > a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b == 0;
	//@ requires b >= 0;
	//@ requires b != -1;
	//@ requires b >= -1;
	//@ requires b > -1;
	//@ ensures \result < b;
	//@ ensures \result <= b;
	//@ ensures \result == b;
	//@ ensures \result != b;
	//@ ensures \result >= b;
	//@ ensures \result > b;
	//@ ensures \result < a;
	//@ ensures \result <= a;
	//@ ensures \result == a;
	//@ ensures \result != a;
	//@ ensures \result >= a;
	//@ ensures \result > a;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures a >= 0 ==> \result >= 0;
	//@ ensures b >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res != a;
    //@ requires res > a;
    //@ requires res >= 1;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:145:) in method mulLoop
            __Loop_Invariant_Dummy1(a, b, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:145: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:64:
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:98: verify: Precondition conjunct is false: res >= 1
    //@ requires res >= 1;
                     ^
3 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a != 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b >= a;
	//@ requires b > a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b == 0;
	//@ requires b >= 0;
	//@ requires b != -1;
	//@ requires b >= -1;
	//@ requires b > -1;
	//@ ensures \result < b;
	//@ ensures \result <= b;
	//@ ensures \result == b;
	//@ ensures \result != b;
	//@ ensures \result >= b;
	//@ ensures \result > b;
	//@ ensures \result < a;
	//@ ensures \result <= a;
	//@ ensures \result == a;
	//@ ensures \result != a;
	//@ ensures \result >= a;
	//@ ensures \result > a;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures a >= 0 ==> \result >= 0;
	//@ ensures b >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res != a;
    //@ requires res > a;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:61: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:144:) in method mulLoop
                __Loop_Invariant_Dummy1(a, b, res, i);
                                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:144: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:61:
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:96: verify: Precondition conjunct is false: res != a
    //@ requires res != a;
                     ^
3 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a != 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b >= a;
	//@ requires b > a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b == 0;
	//@ requires b >= 0;
	//@ requires b != -1;
	//@ requires b >= -1;
	//@ requires b > -1;
	//@ ensures \result < b;
	//@ ensures \result <= b;
	//@ ensures \result == b;
	//@ ensures \result != b;
	//@ ensures \result >= b;
	//@ ensures \result > b;
	//@ ensures \result < a;
	//@ ensures \result <= a;
	//@ ensures \result == a;
	//@ ensures \result != a;
	//@ ensures \result >= a;
	//@ ensures \result > a;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures a >= 0 ==> \result >= 0;
	//@ ensures b >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res > a;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:61: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:143:) in method mulLoop
                __Loop_Invariant_Dummy1(a, b, res, i);
                                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:143: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:61:
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:96: verify: Precondition conjunct is false: res > a
    //@ requires res > a;
                     ^
3 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a != 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b >= a;
	//@ requires b > a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b == 0;
	//@ requires b >= 0;
	//@ requires b != -1;
	//@ requires b >= -1;
	//@ requires b > -1;
	//@ ensures \result < b;
	//@ ensures \result <= b;
	//@ ensures \result == b;
	//@ ensures \result != b;
	//@ ensures \result >= b;
	//@ ensures \result > b;
	//@ ensures \result < a;
	//@ ensures \result <= a;
	//@ ensures \result == a;
	//@ ensures \result != a;
	//@ ensures \result >= a;
	//@ ensures \result > a;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures a >= 0 ==> \result >= 0;
	//@ ensures b >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:61: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:142:) in method mulLoop
                __Loop_Invariant_Dummy1(a, b, res, i);
                                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:142: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:61:
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:96: verify: Precondition conjunct is false: res == 0
    //@ requires res == 0;
                     ^
3 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a != 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b >= a;
	//@ requires b > a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b == 0;
	//@ requires b >= 0;
	//@ requires b != -1;
	//@ requires b >= -1;
	//@ requires b > -1;
	//@ ensures \result < b;
	//@ ensures \result <= b;
	//@ ensures \result == b;
	//@ ensures \result != b;
	//@ ensures \result >= b;
	//@ ensures \result > b;
	//@ ensures \result < a;
	//@ ensures \result <= a;
	//@ ensures \result == a;
	//@ ensures \result != a;
	//@ ensures \result >= a;
	//@ ensures \result > a;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures a >= 0 ==> \result >= 0;
	//@ ensures b >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:141:) in method mulLoop
            __Loop_Invariant_Dummy1(a, b, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:141: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:64:
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:99: verify: Precondition conjunct is false: res < -1
    //@ requires res < -1;
                     ^
3 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a != 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b >= a;
	//@ requires b > a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b == 0;
	//@ requires b >= 0;
	//@ requires b != -1;
	//@ requires b >= -1;
	//@ requires b > -1;
	//@ ensures \result < b;
	//@ ensures \result <= b;
	//@ ensures \result == b;
	//@ ensures \result != b;
	//@ ensures \result >= b;
	//@ ensures \result > b;
	//@ ensures \result < a;
	//@ ensures \result <= a;
	//@ ensures \result == a;
	//@ ensures \result != a;
	//@ ensures \result >= a;
	//@ ensures \result > a;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures a >= 0 ==> \result >= 0;
	//@ ensures b >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:61: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:140:) in method mulLoop
                __Loop_Invariant_Dummy1(a, b, res, i);
                                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:140: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:61:
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:97: verify: Precondition conjunct is false: res >= 0
    //@ requires res >= 0;
                     ^
3 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a != 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b >= a;
	//@ requires b > a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b == 0;
	//@ requires b >= 0;
	//@ requires b != -1;
	//@ requires b >= -1;
	//@ requires b > -1;
	//@ ensures \result < b;
	//@ ensures \result <= b;
	//@ ensures \result == b;
	//@ ensures \result != b;
	//@ ensures \result >= b;
	//@ ensures \result > b;
	//@ ensures \result < a;
	//@ ensures \result <= a;
	//@ ensures \result == a;
	//@ ensures \result != a;
	//@ ensures \result >= a;
	//@ ensures \result > a;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures a >= 0 ==> \result >= 0;
	//@ ensures b >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res != 0;
    //@ requires res > 0;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:61: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:139:) in method mulLoop
                __Loop_Invariant_Dummy1(a, b, res, i);
                                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:139: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:61:
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:97: verify: Precondition conjunct is false: res > 0
    //@ requires res > 0;
                     ^
3 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a != 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b >= a;
	//@ requires b > a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b == 0;
	//@ requires b >= 0;
	//@ requires b != -1;
	//@ requires b >= -1;
	//@ requires b > -1;
	//@ ensures \result < b;
	//@ ensures \result <= b;
	//@ ensures \result == b;
	//@ ensures \result != b;
	//@ ensures \result >= b;
	//@ ensures \result > b;
	//@ ensures \result < a;
	//@ ensures \result <= a;
	//@ ensures \result == a;
	//@ ensures \result != a;
	//@ ensures \result >= a;
	//@ ensures \result > a;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures a >= 0 ==> \result >= 0;
	//@ ensures b >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res != 0;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:138:) in method mulLoop
            __Loop_Invariant_Dummy1(a, b, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:138: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:64:
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:97: verify: Precondition conjunct is false: res <= -1
    //@ requires res <= -1;
                     ^
3 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a != 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b >= a;
	//@ requires b > a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b == 0;
	//@ requires b >= 0;
	//@ requires b != -1;
	//@ requires b >= -1;
	//@ requires b > -1;
	//@ ensures \result < b;
	//@ ensures \result <= b;
	//@ ensures \result == b;
	//@ ensures \result != b;
	//@ ensures \result >= b;
	//@ ensures \result > b;
	//@ ensures \result < a;
	//@ ensures \result <= a;
	//@ ensures \result == a;
	//@ ensures \result != a;
	//@ ensures \result >= a;
	//@ ensures \result > a;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures a >= 0 ==> \result >= 0;
	//@ ensures b >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res != 0;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:61: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:137:) in method mulLoop
                __Loop_Invariant_Dummy1(a, b, res, i);
                                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:137: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:61:
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:97: verify: Precondition conjunct is false: res == -1
    //@ requires res == -1;
                     ^
3 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a != 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b >= a;
	//@ requires b > a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b == 0;
	//@ requires b >= 0;
	//@ requires b != -1;
	//@ requires b >= -1;
	//@ requires b > -1;
	//@ ensures \result < b;
	//@ ensures \result <= b;
	//@ ensures \result == b;
	//@ ensures \result != b;
	//@ ensures \result >= b;
	//@ ensures \result > b;
	//@ ensures \result < a;
	//@ ensures \result <= a;
	//@ ensures \result == a;
	//@ ensures \result != a;
	//@ ensures \result >= a;
	//@ ensures \result > a;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures a >= 0 ==> \result >= 0;
	//@ ensures b >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res != 0;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:61: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:136:) in method mulLoop
                __Loop_Invariant_Dummy1(a, b, res, i);
                                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:136: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:61:
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:98: verify: Precondition conjunct is false: res >= -1
    //@ requires res >= -1;
                     ^
3 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a != 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b >= a;
	//@ requires b > a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b == 0;
	//@ requires b >= 0;
	//@ requires b != -1;
	//@ requires b >= -1;
	//@ requires b > -1;
	//@ ensures \result < b;
	//@ ensures \result <= b;
	//@ ensures \result == b;
	//@ ensures \result != b;
	//@ ensures \result >= b;
	//@ ensures \result > b;
	//@ ensures \result < a;
	//@ ensures \result <= a;
	//@ ensures \result == a;
	//@ ensures \result != a;
	//@ ensures \result >= a;
	//@ ensures \result > a;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures a >= 0 ==> \result >= 0;
	//@ ensures b >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res != 0;
    //@ requires res != -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:135:) in method mulLoop
            __Loop_Invariant_Dummy1(a, b, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:135: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:64:
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:96: verify: Precondition conjunct is false: res != 0
    //@ requires res != 0;
                     ^
3 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a != 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b >= a;
	//@ requires b > a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b == 0;
	//@ requires b >= 0;
	//@ requires b != -1;
	//@ requires b >= -1;
	//@ requires b > -1;
	//@ ensures \result < b;
	//@ ensures \result <= b;
	//@ ensures \result == b;
	//@ ensures \result != b;
	//@ ensures \result >= b;
	//@ ensures \result > b;
	//@ ensures \result < a;
	//@ ensures \result <= a;
	//@ ensures \result == a;
	//@ ensures \result != a;
	//@ ensures \result >= a;
	//@ ensures \result > a;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures a >= 0 ==> \result >= 0;
	//@ ensures b >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res != -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:61: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:134:) in method mulLoop
                __Loop_Invariant_Dummy1(a, b, res, i);
                                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:134: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:61:
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:96: verify: Precondition conjunct is false: res != -1
    //@ requires res != -1;
                     ^
3 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a != 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b >= a;
	//@ requires b > a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b == 0;
	//@ requires b >= 0;
	//@ requires b != -1;
	//@ requires b >= -1;
	//@ requires b > -1;
	//@ ensures \result < b;
	//@ ensures \result <= b;
	//@ ensures \result == b;
	//@ ensures \result != b;
	//@ ensures \result >= b;
	//@ ensures \result > b;
	//@ ensures \result < a;
	//@ ensures \result <= a;
	//@ ensures \result == a;
	//@ ensures \result != a;
	//@ ensures \result >= a;
	//@ ensures \result > a;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures a >= 0 ==> \result >= 0;
	//@ ensures b >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:61: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:133:) in method mulLoop
                __Loop_Invariant_Dummy1(a, b, res, i);
                                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:133: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:61:
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:96: verify: Precondition conjunct is false: res > -1
    //@ requires res > -1;
                     ^
3 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a != 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b >= a;
	//@ requires b > a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b == 0;
	//@ requires b >= 0;
	//@ requires b != -1;
	//@ requires b >= -1;
	//@ requires b > -1;
	//@ ensures \result < b;
	//@ ensures \result <= b;
	//@ ensures \result == b;
	//@ ensures \result != b;
	//@ ensures \result >= b;
	//@ ensures \result > b;
	//@ ensures \result < a;
	//@ ensures \result <= a;
	//@ ensures \result == a;
	//@ ensures \result != a;
	//@ ensures \result >= a;
	//@ ensures \result > a;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures a >= 0 ==> \result >= 0;
	//@ ensures b >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:132:) in method mulLoop
            __Loop_Invariant_Dummy1(a, b, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:132: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:64:
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:96: verify: Precondition conjunct is false: i < b
    //@ requires i < b;
                   ^
3 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a != 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b >= a;
	//@ requires b > a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b == 0;
	//@ requires b >= 0;
	//@ requires b != -1;
	//@ requires b >= -1;
	//@ requires b > -1;
	//@ ensures \result < b;
	//@ ensures \result <= b;
	//@ ensures \result == b;
	//@ ensures \result != b;
	//@ ensures \result >= b;
	//@ ensures \result > b;
	//@ ensures \result < a;
	//@ ensures \result <= a;
	//@ ensures \result == a;
	//@ ensures \result != a;
	//@ ensures \result >= a;
	//@ ensures \result > a;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures a >= 0 ==> \result >= 0;
	//@ ensures b >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:61: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:131:) in method mulLoop
                __Loop_Invariant_Dummy1(a, b, res, i);
                                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:131: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:61:
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:97: verify: Precondition conjunct is false: i == b
    //@ requires i == b;
                   ^
3 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a != 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b >= a;
	//@ requires b > a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b == 0;
	//@ requires b >= 0;
	//@ requires b != -1;
	//@ requires b >= -1;
	//@ requires b > -1;
	//@ ensures \result < b;
	//@ ensures \result <= b;
	//@ ensures \result == b;
	//@ ensures \result != b;
	//@ ensures \result >= b;
	//@ ensures \result > b;
	//@ ensures \result < a;
	//@ ensures \result <= a;
	//@ ensures \result == a;
	//@ ensures \result != a;
	//@ ensures \result >= a;
	//@ ensures \result > a;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures a >= 0 ==> \result >= 0;
	//@ ensures b >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:61: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:130:) in method mulLoop
                __Loop_Invariant_Dummy1(a, b, res, i);
                                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:130: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:61:
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:98: verify: Precondition conjunct is false: i >= b
    //@ requires i >= b;
                   ^
3 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a != 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b >= a;
	//@ requires b > a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b == 0;
	//@ requires b >= 0;
	//@ requires b != -1;
	//@ requires b >= -1;
	//@ requires b > -1;
	//@ ensures \result < b;
	//@ ensures \result <= b;
	//@ ensures \result == b;
	//@ ensures \result != b;
	//@ ensures \result >= b;
	//@ ensures \result > b;
	//@ ensures \result < a;
	//@ ensures \result <= a;
	//@ ensures \result == a;
	//@ ensures \result != a;
	//@ ensures \result >= a;
	//@ ensures \result > a;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures a >= 0 ==> \result >= 0;
	//@ ensures b >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:61: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:129:) in method mulLoop
                __Loop_Invariant_Dummy1(a, b, res, i);
                                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:129: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:61:
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:98: verify: Precondition conjunct is false: i > b
    //@ requires i > b;
                   ^
3 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a != 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b >= a;
	//@ requires b > a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b == 0;
	//@ requires b >= 0;
	//@ requires b != -1;
	//@ requires b >= -1;
	//@ requires b > -1;
	//@ ensures \result < b;
	//@ ensures \result <= b;
	//@ ensures \result == b;
	//@ ensures \result != b;
	//@ ensures \result >= b;
	//@ ensures \result > b;
	//@ ensures \result < a;
	//@ ensures \result <= a;
	//@ ensures \result == a;
	//@ ensures \result != a;
	//@ ensures \result >= a;
	//@ ensures \result > a;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures a >= 0 ==> \result >= 0;
	//@ ensures b >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:61: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:128:) in method mulLoop
                __Loop_Invariant_Dummy1(a, b, res, i);
                                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:128: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:61:
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:100: verify: Precondition conjunct is false: i == a
    //@ requires i == a;
                   ^
3 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a != 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b >= a;
	//@ requires b > a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b == 0;
	//@ requires b >= 0;
	//@ requires b != -1;
	//@ requires b >= -1;
	//@ requires b > -1;
	//@ ensures \result < b;
	//@ ensures \result <= b;
	//@ ensures \result == b;
	//@ ensures \result != b;
	//@ ensures \result >= b;
	//@ ensures \result > b;
	//@ ensures \result < a;
	//@ ensures \result <= a;
	//@ ensures \result == a;
	//@ ensures \result != a;
	//@ ensures \result >= a;
	//@ ensures \result > a;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures a >= 0 ==> \result >= 0;
	//@ ensures b >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:61: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:127:) in method mulLoop
                __Loop_Invariant_Dummy1(a, b, res, i);
                                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:127: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:61:
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:98: verify: Precondition conjunct is false: i < a
    //@ requires i < a;
                   ^
3 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a != 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b >= a;
	//@ requires b > a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b == 0;
	//@ requires b >= 0;
	//@ requires b != -1;
	//@ requires b >= -1;
	//@ requires b > -1;
	//@ ensures \result < b;
	//@ ensures \result <= b;
	//@ ensures \result == b;
	//@ ensures \result != b;
	//@ ensures \result >= b;
	//@ ensures \result > b;
	//@ ensures \result < a;
	//@ ensures \result <= a;
	//@ ensures \result == a;
	//@ ensures \result != a;
	//@ ensures \result >= a;
	//@ ensures \result > a;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures a >= 0 ==> \result >= 0;
	//@ ensures b >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i <= a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:61: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:126:) in method mulLoop
                __Loop_Invariant_Dummy1(a, b, res, i);
                                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:126: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:61:
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:100: verify: Precondition conjunct is false: i >= a
    //@ requires i >= a;
                   ^
3 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a != 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b >= a;
	//@ requires b > a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b == 0;
	//@ requires b >= 0;
	//@ requires b != -1;
	//@ requires b >= -1;
	//@ requires b > -1;
	//@ ensures \result < b;
	//@ ensures \result <= b;
	//@ ensures \result == b;
	//@ ensures \result != b;
	//@ ensures \result >= b;
	//@ ensures \result > b;
	//@ ensures \result < a;
	//@ ensures \result <= a;
	//@ ensures \result == a;
	//@ ensures \result != a;
	//@ ensures \result >= a;
	//@ ensures \result > a;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures a >= 0 ==> \result >= 0;
	//@ ensures b >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i <= a;
    //@ requires i != a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:61: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:125:) in method mulLoop
                __Loop_Invariant_Dummy1(a, b, res, i);
                                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:125: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:61:
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:100: verify: Precondition conjunct is false: i > a
    //@ requires i > a;
                   ^
3 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a != 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b >= a;
	//@ requires b > a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b == 0;
	//@ requires b >= 0;
	//@ requires b != -1;
	//@ requires b >= -1;
	//@ requires b > -1;
	//@ ensures \result < b;
	//@ ensures \result <= b;
	//@ ensures \result == b;
	//@ ensures \result != b;
	//@ ensures \result >= b;
	//@ ensures \result > b;
	//@ ensures \result < a;
	//@ ensures \result <= a;
	//@ ensures \result == a;
	//@ ensures \result != a;
	//@ ensures \result >= a;
	//@ ensures \result > a;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures a >= 0 ==> \result >= 0;
	//@ ensures b >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i <= a;
    //@ requires i != a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:124:) in method mulLoop
            __Loop_Invariant_Dummy1(a, b, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:124: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:64:
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:97: verify: Precondition conjunct is false: i != b
    //@ requires i != b;
                   ^
3 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a != 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b >= a;
	//@ requires b > a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b == 0;
	//@ requires b >= 0;
	//@ requires b != -1;
	//@ requires b >= -1;
	//@ requires b > -1;
	//@ ensures \result < b;
	//@ ensures \result <= b;
	//@ ensures \result == b;
	//@ ensures \result != b;
	//@ ensures \result >= b;
	//@ ensures \result > b;
	//@ ensures \result < a;
	//@ ensures \result <= a;
	//@ ensures \result == a;
	//@ ensures \result != a;
	//@ ensures \result >= a;
	//@ ensures \result > a;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures a >= 0 ==> \result >= 0;
	//@ ensures b >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires i <= b;
    //@ requires i <= a;
    //@ requires i != a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:61: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:123:) in method mulLoop
                __Loop_Invariant_Dummy1(a, b, res, i);
                                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:123: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:61:
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:98: verify: Precondition conjunct is false: i != a
    //@ requires i != a;
                   ^
3 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a != 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b >= a;
	//@ requires b > a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b == 0;
	//@ requires b >= 0;
	//@ requires b != -1;
	//@ requires b >= -1;
	//@ requires b > -1;
	//@ ensures \result < b;
	//@ ensures \result <= b;
	//@ ensures \result == b;
	//@ ensures \result != b;
	//@ ensures \result >= b;
	//@ ensures \result > b;
	//@ ensures \result < a;
	//@ ensures \result <= a;
	//@ ensures \result == a;
	//@ ensures \result != a;
	//@ ensures \result >= a;
	//@ ensures \result > a;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures a >= 0 ==> \result >= 0;
	//@ ensures b >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires i <= b;
    //@ requires i <= a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:61: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:122:) in method mulLoop
                __Loop_Invariant_Dummy1(a, b, res, i);
                                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:122: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:61:
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:100: verify: Precondition conjunct is false: i == res
    //@ requires i == res;
                   ^
3 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a != 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b >= a;
	//@ requires b > a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b == 0;
	//@ requires b >= 0;
	//@ requires b != -1;
	//@ requires b >= -1;
	//@ requires b > -1;
	//@ ensures \result < b;
	//@ ensures \result <= b;
	//@ ensures \result == b;
	//@ ensures \result != b;
	//@ ensures \result >= b;
	//@ ensures \result > b;
	//@ ensures \result < a;
	//@ ensures \result <= a;
	//@ ensures \result == a;
	//@ ensures \result != a;
	//@ ensures \result >= a;
	//@ ensures \result > a;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures a >= 0 ==> \result >= 0;
	//@ ensures b >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires i <= b;
    //@ requires i <= a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:61: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:121:) in method mulLoop
                __Loop_Invariant_Dummy1(a, b, res, i);
                                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:121: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:61:
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:97: verify: Precondition conjunct is false: i <= a
    //@ requires i <= a;
                   ^
3 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a != 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b >= a;
	//@ requires b > a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b == 0;
	//@ requires b >= 0;
	//@ requires b != -1;
	//@ requires b >= -1;
	//@ requires b > -1;
	//@ ensures \result < b;
	//@ ensures \result <= b;
	//@ ensures \result == b;
	//@ ensures \result != b;
	//@ ensures \result >= b;
	//@ ensures \result > b;
	//@ ensures \result < a;
	//@ ensures \result <= a;
	//@ ensures \result == a;
	//@ ensures \result != a;
	//@ ensures \result >= a;
	//@ ensures \result > a;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures a >= 0 ==> \result >= 0;
	//@ ensures b >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires i <= b;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:61: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:120:) in method mulLoop
                __Loop_Invariant_Dummy1(a, b, res, i);
                                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:120: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:61:
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:97: verify: Precondition conjunct is false: i < res
    //@ requires i < res;
                   ^
3 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a != 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b >= a;
	//@ requires b > a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b == 0;
	//@ requires b >= 0;
	//@ requires b != -1;
	//@ requires b >= -1;
	//@ requires b > -1;
	//@ ensures \result < b;
	//@ ensures \result <= b;
	//@ ensures \result == b;
	//@ ensures \result != b;
	//@ ensures \result >= b;
	//@ ensures \result > b;
	//@ ensures \result < a;
	//@ ensures \result <= a;
	//@ ensures \result == a;
	//@ ensures \result != a;
	//@ ensures \result >= a;
	//@ ensures \result > a;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures a >= 0 ==> \result >= 0;
	//@ ensures b >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires i <= b;
    //@ requires i <= res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:61: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:119:) in method mulLoop
                __Loop_Invariant_Dummy1(a, b, res, i);
                                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:119: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:61:
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:99: verify: Precondition conjunct is false: i >= res
    //@ requires i >= res;
                   ^
3 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a != 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b >= a;
	//@ requires b > a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b == 0;
	//@ requires b >= 0;
	//@ requires b != -1;
	//@ requires b >= -1;
	//@ requires b > -1;
	//@ ensures \result < b;
	//@ ensures \result <= b;
	//@ ensures \result == b;
	//@ ensures \result != b;
	//@ ensures \result >= b;
	//@ ensures \result > b;
	//@ ensures \result < a;
	//@ ensures \result <= a;
	//@ ensures \result == a;
	//@ ensures \result != a;
	//@ ensures \result >= a;
	//@ ensures \result > a;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures a >= 0 ==> \result >= 0;
	//@ ensures b >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires i <= b;
    //@ requires i <= res;
    //@ requires i != res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:61: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:118:) in method mulLoop
                __Loop_Invariant_Dummy1(a, b, res, i);
                                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:118: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:61:
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:98: verify: Precondition conjunct is false: i != res
    //@ requires i != res;
                   ^
3 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a != 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b >= a;
	//@ requires b > a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b == 0;
	//@ requires b >= 0;
	//@ requires b != -1;
	//@ requires b >= -1;
	//@ requires b > -1;
	//@ ensures \result < b;
	//@ ensures \result <= b;
	//@ ensures \result == b;
	//@ ensures \result != b;
	//@ ensures \result >= b;
	//@ ensures \result > b;
	//@ ensures \result < a;
	//@ ensures \result <= a;
	//@ ensures \result == a;
	//@ ensures \result != a;
	//@ ensures \result >= a;
	//@ ensures \result > a;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures a >= 0 ==> \result >= 0;
	//@ ensures b >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires i <= b;
    //@ requires i <= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:61: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:117:) in method mulLoop
                __Loop_Invariant_Dummy1(a, b, res, i);
                                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:117: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:61:
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:97: verify: Precondition conjunct is false: i <= res
    //@ requires i <= res;
                   ^
3 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a != 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b >= a;
	//@ requires b > a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b == 0;
	//@ requires b >= 0;
	//@ requires b != -1;
	//@ requires b >= -1;
	//@ requires b > -1;
	//@ ensures \result < b;
	//@ ensures \result <= b;
	//@ ensures \result == b;
	//@ ensures \result != b;
	//@ ensures \result >= b;
	//@ ensures \result > b;
	//@ ensures \result < a;
	//@ ensures \result <= a;
	//@ ensures \result == a;
	//@ ensures \result != a;
	//@ ensures \result >= a;
	//@ ensures \result > a;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures a >= 0 ==> \result >= 0;
	//@ ensures b >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires i <= b;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:116:) in method mulLoop
            __Loop_Invariant_Dummy1(a, b, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:116: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:64:
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:96: verify: Precondition conjunct is false: i <= b
    //@ requires i <= b;
                   ^
3 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a != 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b >= a;
	//@ requires b > a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b == 0;
	//@ requires b >= 0;
	//@ requires b != -1;
	//@ requires b >= -1;
	//@ requires b > -1;
	//@ ensures \result < b;
	//@ ensures \result <= b;
	//@ ensures \result == b;
	//@ ensures \result != b;
	//@ ensures \result >= b;
	//@ ensures \result > b;
	//@ ensures \result < a;
	//@ ensures \result <= a;
	//@ ensures \result == a;
	//@ ensures \result != a;
	//@ ensures \result >= a;
	//@ ensures \result > a;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures a >= 0 ==> \result >= 0;
	//@ ensures b >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:61: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:115:) in method mulLoop
                __Loop_Invariant_Dummy1(a, b, res, i);
                                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:115: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:61:
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:96: verify: Precondition conjunct is false: i > res
    //@ requires i > res;
                   ^
3 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a != 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b >= a;
	//@ requires b > a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b == 0;
	//@ requires b >= 0;
	//@ requires b != -1;
	//@ requires b >= -1;
	//@ requires b > -1;
	//@ ensures \result < b;
	//@ ensures \result <= b;
	//@ ensures \result == b;
	//@ ensures \result != b;
	//@ ensures \result >= b;
	//@ ensures \result > b;
	//@ ensures \result < a;
	//@ ensures \result <= a;
	//@ ensures \result == a;
	//@ ensures \result != a;
	//@ ensures \result >= a;
	//@ ensures \result > a;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures a >= 0 ==> \result >= 0;
	//@ ensures b >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:61: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:114:) in method mulLoop
                __Loop_Invariant_Dummy1(a, b, res, i);
                                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:114: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:61:
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:98: verify: Precondition conjunct is false: i == 1
    //@ requires i == 1;
                   ^
3 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a != 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b >= a;
	//@ requires b > a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b == 0;
	//@ requires b >= 0;
	//@ requires b != -1;
	//@ requires b >= -1;
	//@ requires b > -1;
	//@ ensures \result < b;
	//@ ensures \result <= b;
	//@ ensures \result == b;
	//@ ensures \result != b;
	//@ ensures \result >= b;
	//@ ensures \result > b;
	//@ ensures \result < a;
	//@ ensures \result <= a;
	//@ ensures \result == a;
	//@ ensures \result != a;
	//@ ensures \result >= a;
	//@ ensures \result > a;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures a >= 0 ==> \result >= 0;
	//@ ensures b >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:61: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:113:) in method mulLoop
                __Loop_Invariant_Dummy1(a, b, res, i);
                                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:113: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:61:
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:99: verify: Precondition conjunct is false: i >= 1
    //@ requires i >= 1;
                   ^
3 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a != 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b >= a;
	//@ requires b > a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b == 0;
	//@ requires b >= 0;
	//@ requires b != -1;
	//@ requires b >= -1;
	//@ requires b > -1;
	//@ ensures \result < b;
	//@ ensures \result <= b;
	//@ ensures \result == b;
	//@ ensures \result != b;
	//@ ensures \result >= b;
	//@ ensures \result > b;
	//@ ensures \result < a;
	//@ ensures \result <= a;
	//@ ensures \result == a;
	//@ ensures \result != a;
	//@ ensures \result >= a;
	//@ ensures \result > a;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures a >= 0 ==> \result >= 0;
	//@ ensures b >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:61: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:112:) in method mulLoop
                __Loop_Invariant_Dummy1(a, b, res, i);
                                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:112: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:61:
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:99: verify: Precondition conjunct is false: i > 1
    //@ requires i > 1;
                   ^
3 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a != 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b >= a;
	//@ requires b > a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b == 0;
	//@ requires b >= 0;
	//@ requires b != -1;
	//@ requires b >= -1;
	//@ requires b > -1;
	//@ ensures \result < b;
	//@ ensures \result <= b;
	//@ ensures \result == b;
	//@ ensures \result != b;
	//@ ensures \result >= b;
	//@ ensures \result > b;
	//@ ensures \result < a;
	//@ ensures \result <= a;
	//@ ensures \result == a;
	//@ ensures \result != a;
	//@ ensures \result >= a;
	//@ ensures \result > a;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures a >= 0 ==> \result >= 0;
	//@ ensures b >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:61: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:111:) in method mulLoop
                __Loop_Invariant_Dummy1(a, b, res, i);
                                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:111: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:61:
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:101: verify: Precondition conjunct is false: i == 0
    //@ requires i == 0;
                   ^
3 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a != 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b >= a;
	//@ requires b > a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b == 0;
	//@ requires b >= 0;
	//@ requires b != -1;
	//@ requires b >= -1;
	//@ requires b > -1;
	//@ ensures \result < b;
	//@ ensures \result <= b;
	//@ ensures \result == b;
	//@ ensures \result != b;
	//@ ensures \result >= b;
	//@ ensures \result > b;
	//@ ensures \result < a;
	//@ ensures \result <= a;
	//@ ensures \result == a;
	//@ ensures \result != a;
	//@ ensures \result >= a;
	//@ ensures \result > a;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures a >= 0 ==> \result >= 0;
	//@ ensures b >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:61: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:110:) in method mulLoop
                __Loop_Invariant_Dummy1(a, b, res, i);
                                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:110: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:61:
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:102: verify: Precondition conjunct is false: i >= 0
    //@ requires i >= 0;
                   ^
3 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a != 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b >= a;
	//@ requires b > a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b == 0;
	//@ requires b >= 0;
	//@ requires b != -1;
	//@ requires b >= -1;
	//@ requires b > -1;
	//@ ensures \result < b;
	//@ ensures \result <= b;
	//@ ensures \result == b;
	//@ ensures \result != b;
	//@ ensures \result >= b;
	//@ ensures \result > b;
	//@ ensures \result < a;
	//@ ensures \result <= a;
	//@ ensures \result == a;
	//@ ensures \result != a;
	//@ ensures \result >= a;
	//@ ensures \result > a;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures a >= 0 ==> \result >= 0;
	//@ ensures b >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:61: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:109:) in method mulLoop
                __Loop_Invariant_Dummy1(a, b, res, i);
                                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:109: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:61:
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:102: verify: Precondition conjunct is false: i > 0
    //@ requires i > 0;
                   ^
3 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a != 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b >= a;
	//@ requires b > a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b == 0;
	//@ requires b >= 0;
	//@ requires b != -1;
	//@ requires b >= -1;
	//@ requires b > -1;
	//@ ensures \result < b;
	//@ ensures \result <= b;
	//@ ensures \result == b;
	//@ ensures \result != b;
	//@ ensures \result >= b;
	//@ ensures \result > b;
	//@ ensures \result < a;
	//@ ensures \result <= a;
	//@ ensures \result == a;
	//@ ensures \result != a;
	//@ ensures \result >= a;
	//@ ensures \result > a;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures a >= 0 ==> \result >= 0;
	//@ ensures b >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:108:) in method mulLoop
            __Loop_Invariant_Dummy1(a, b, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:108: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:64:
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:99: verify: Precondition conjunct is false: i < 0
    //@ requires i < 0;
                   ^
3 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a != 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b >= a;
	//@ requires b > a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b == 0;
	//@ requires b >= 0;
	//@ requires b != -1;
	//@ requires b >= -1;
	//@ requires b > -1;
	//@ ensures \result < b;
	//@ ensures \result <= b;
	//@ ensures \result == b;
	//@ ensures \result != b;
	//@ ensures \result >= b;
	//@ ensures \result > b;
	//@ ensures \result < a;
	//@ ensures \result <= a;
	//@ ensures \result == a;
	//@ ensures \result != a;
	//@ ensures \result >= a;
	//@ ensures \result > a;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures a >= 0 ==> \result >= 0;
	//@ ensures b >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:61: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:107:) in method mulLoop
                __Loop_Invariant_Dummy1(a, b, res, i);
                                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:107: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:61:
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:103: verify: Precondition conjunct is false: i == -1
    //@ requires i == -1;
                   ^
3 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a != 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b >= a;
	//@ requires b > a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b == 0;
	//@ requires b >= 0;
	//@ requires b != -1;
	//@ requires b >= -1;
	//@ requires b > -1;
	//@ ensures \result < b;
	//@ ensures \result <= b;
	//@ ensures \result == b;
	//@ ensures \result != b;
	//@ ensures \result >= b;
	//@ ensures \result > b;
	//@ ensures \result < a;
	//@ ensures \result <= a;
	//@ ensures \result == a;
	//@ ensures \result != a;
	//@ ensures \result >= a;
	//@ ensures \result > a;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures a >= 0 ==> \result >= 0;
	//@ ensures b >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:61: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:106:) in method mulLoop
                __Loop_Invariant_Dummy1(a, b, res, i);
                                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:106: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:61:
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:101: verify: Precondition conjunct is false: i < -1
    //@ requires i < -1;
                   ^
3 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a != 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b >= a;
	//@ requires b > a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b == 0;
	//@ requires b >= 0;
	//@ requires b != -1;
	//@ requires b >= -1;
	//@ requires b > -1;
	//@ ensures \result < b;
	//@ ensures \result <= b;
	//@ ensures \result == b;
	//@ ensures \result != b;
	//@ ensures \result >= b;
	//@ ensures \result > b;
	//@ ensures \result < a;
	//@ ensures \result <= a;
	//@ ensures \result == a;
	//@ ensures \result != a;
	//@ ensures \result >= a;
	//@ ensures \result > a;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures a >= 0 ==> \result >= 0;
	//@ ensures b >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:61: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:105:) in method mulLoop
                __Loop_Invariant_Dummy1(a, b, res, i);
                                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:105: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:61:
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:103: verify: Precondition conjunct is false: i >= -1
    //@ requires i >= -1;
                   ^
3 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a != 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b >= a;
	//@ requires b > a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b == 0;
	//@ requires b >= 0;
	//@ requires b != -1;
	//@ requires b >= -1;
	//@ requires b > -1;
	//@ ensures \result < b;
	//@ ensures \result <= b;
	//@ ensures \result == b;
	//@ ensures \result != b;
	//@ ensures \result >= b;
	//@ ensures \result > b;
	//@ ensures \result < a;
	//@ ensures \result <= a;
	//@ ensures \result == a;
	//@ ensures \result != a;
	//@ ensures \result >= a;
	//@ ensures \result > a;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures a >= 0 ==> \result >= 0;
	//@ ensures b >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i != -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:104:) in method mulLoop
            __Loop_Invariant_Dummy1(a, b, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:104: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:64:
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:96: verify: Precondition conjunct is false: i < 1
    //@ requires i < 1;
                   ^
3 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a != 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b >= a;
	//@ requires b > a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b == 0;
	//@ requires b >= 0;
	//@ requires b != -1;
	//@ requires b >= -1;
	//@ requires b > -1;
	//@ ensures \result < b;
	//@ ensures \result <= b;
	//@ ensures \result == b;
	//@ ensures \result != b;
	//@ ensures \result >= b;
	//@ ensures \result > b;
	//@ ensures \result < a;
	//@ ensures \result <= a;
	//@ ensures \result == a;
	//@ ensures \result != a;
	//@ ensures \result >= a;
	//@ ensures \result > a;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures a >= 0 ==> \result >= 0;
	//@ ensures b >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i != -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:103:) in method mulLoop
            __Loop_Invariant_Dummy1(a, b, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:103: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:64:
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:96: verify: Precondition conjunct is false: i <= 1
    //@ requires i <= 1;
                   ^
3 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a != 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b >= a;
	//@ requires b > a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b == 0;
	//@ requires b >= 0;
	//@ requires b != -1;
	//@ requires b >= -1;
	//@ requires b > -1;
	//@ ensures \result < b;
	//@ ensures \result <= b;
	//@ ensures \result == b;
	//@ ensures \result != b;
	//@ ensures \result >= b;
	//@ ensures \result > b;
	//@ ensures \result < a;
	//@ ensures \result <= a;
	//@ ensures \result == a;
	//@ ensures \result != a;
	//@ ensures \result >= a;
	//@ ensures \result > a;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures a >= 0 ==> \result >= 0;
	//@ ensures b >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i != -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:61: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:102:) in method mulLoop
                __Loop_Invariant_Dummy1(a, b, res, i);
                                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:102: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:61:
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:100: verify: Precondition conjunct is false: i != -1
    //@ requires i != -1;
                   ^
3 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a != 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b >= a;
	//@ requires b > a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b == 0;
	//@ requires b >= 0;
	//@ requires b != -1;
	//@ requires b >= -1;
	//@ requires b > -1;
	//@ ensures \result < b;
	//@ ensures \result <= b;
	//@ ensures \result == b;
	//@ ensures \result != b;
	//@ ensures \result >= b;
	//@ ensures \result > b;
	//@ ensures \result < a;
	//@ ensures \result <= a;
	//@ ensures \result == a;
	//@ ensures \result != a;
	//@ ensures \result >= a;
	//@ ensures \result > a;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures a >= 0 ==> \result >= 0;
	//@ ensures b >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:61: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:101:) in method mulLoop
                __Loop_Invariant_Dummy1(a, b, res, i);
                                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:101: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:61:
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:100: verify: Precondition conjunct is false: i > -1
    //@ requires i > -1;
                   ^
3 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a != 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b >= a;
	//@ requires b > a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b == 0;
	//@ requires b >= 0;
	//@ requires b != -1;
	//@ requires b >= -1;
	//@ requires b > -1;
	//@ ensures \result < b;
	//@ ensures \result <= b;
	//@ ensures \result == b;
	//@ ensures \result != b;
	//@ ensures \result >= b;
	//@ ensures \result > b;
	//@ ensures \result < a;
	//@ ensures \result <= a;
	//@ ensures \result == a;
	//@ ensures \result != a;
	//@ ensures \result >= a;
	//@ ensures \result > a;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures a >= 0 ==> \result >= 0;
	//@ ensures b >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:100:) in method mulLoop
            __Loop_Invariant_Dummy1(a, b, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:100: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:64:
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:96: verify: Precondition conjunct is false: i != 1
    //@ requires i != 1;
                   ^
3 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a != 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b >= a;
	//@ requires b > a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b == 0;
	//@ requires b >= 0;
	//@ requires b != -1;
	//@ requires b >= -1;
	//@ requires b > -1;
	//@ ensures \result < b;
	//@ ensures \result <= b;
	//@ ensures \result == b;
	//@ ensures \result != b;
	//@ ensures \result >= b;
	//@ ensures \result > b;
	//@ ensures \result < a;
	//@ ensures \result <= a;
	//@ ensures \result == a;
	//@ ensures \result != a;
	//@ ensures \result >= a;
	//@ ensures \result > a;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures a >= 0 ==> \result >= 0;
	//@ ensures b >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:99:) in method mulLoop
            __Loop_Invariant_Dummy1(a, b, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:99: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:64:
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:96: verify: Precondition conjunct is false: i <= 0
    //@ requires i <= 0;
                   ^
3 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a != 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b >= a;
	//@ requires b > a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b == 0;
	//@ requires b >= 0;
	//@ requires b != -1;
	//@ requires b >= -1;
	//@ requires b > -1;
	//@ ensures \result < b;
	//@ ensures \result <= b;
	//@ ensures \result == b;
	//@ ensures \result != b;
	//@ ensures \result >= b;
	//@ ensures \result > b;
	//@ ensures \result < a;
	//@ ensures \result <= a;
	//@ ensures \result == a;
	//@ ensures \result != a;
	//@ ensures \result >= a;
	//@ ensures \result > a;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures a >= 0 ==> \result >= 0;
	//@ ensures b >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires i != 0;
    //@ requires i <= -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:98:) in method mulLoop
            __Loop_Invariant_Dummy1(a, b, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:98: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:64:
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:97: verify: Precondition conjunct is false: i <= -1
    //@ requires i <= -1;
                   ^
3 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a != 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b >= a;
	//@ requires b > a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b == 0;
	//@ requires b >= 0;
	//@ requires b != -1;
	//@ requires b >= -1;
	//@ requires b > -1;
	//@ ensures \result < b;
	//@ ensures \result <= b;
	//@ ensures \result == b;
	//@ ensures \result != b;
	//@ ensures \result >= b;
	//@ ensures \result > b;
	//@ ensures \result < a;
	//@ ensures \result <= a;
	//@ ensures \result == a;
	//@ ensures \result != a;
	//@ ensures \result >= a;
	//@ ensures \result > a;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures a >= 0 ==> \result >= 0;
	//@ ensures b >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires i != 0;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:97:) in method mulLoop
            __Loop_Invariant_Dummy1(a, b, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:97: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:64:
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:96: verify: Precondition conjunct is false: i != 0
    //@ requires i != 0;
                   ^
3 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a != 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b >= a;
	//@ requires b > a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b == 0;
	//@ requires b >= 0;
	//@ requires b != -1;
	//@ requires b >= -1;
	//@ requires b > -1;
	//@ ensures \result < b;
	//@ ensures \result <= b;
	//@ ensures \result == b;
	//@ ensures \result != b;
	//@ ensures \result >= b;
	//@ ensures \result > b;
	//@ ensures \result < a;
	//@ ensures \result <= a;
	//@ ensures \result == a;
	//@ ensures \result != a;
	//@ ensures \result >= a;
	//@ ensures \result > a;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures a >= 0 ==> \result >= 0;
	//@ ensures b >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:72: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:26:) in method mulLoop
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:26: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:72:
	//@ ensures \result == b;
	    ^
2 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a != 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b >= a;
	//@ requires b > a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b == 0;
	//@ requires b >= 0;
	//@ requires b != -1;
	//@ requires b >= -1;
	//@ requires b > -1;
	//@ ensures \result < b;
	//@ ensures \result <= b;
	//@ ensures \result != b;
	//@ ensures \result >= b;
	//@ ensures \result > b;
	//@ ensures \result < a;
	//@ ensures \result <= a;
	//@ ensures \result == a;
	//@ ensures \result != a;
	//@ ensures \result >= a;
	//@ ensures \result > a;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures a >= 0 ==> \result >= 0;
	//@ ensures b >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:71: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:24:) in method mulLoop
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:71:
	//@ ensures \result < b;
	    ^
2 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a != 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b >= a;
	//@ requires b > a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b == 0;
	//@ requires b >= 0;
	//@ requires b != -1;
	//@ requires b >= -1;
	//@ requires b > -1;
	//@ ensures \result <= b;
	//@ ensures \result != b;
	//@ ensures \result >= b;
	//@ ensures \result > b;
	//@ ensures \result < a;
	//@ ensures \result <= a;
	//@ ensures \result == a;
	//@ ensures \result != a;
	//@ ensures \result >= a;
	//@ ensures \result > a;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures a >= 0 ==> \result >= 0;
	//@ ensures b >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:70: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:26:) in method mulLoop
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:26: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:70:
	//@ ensures \result >= b;
	    ^
2 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a != 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b >= a;
	//@ requires b > a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b == 0;
	//@ requires b >= 0;
	//@ requires b != -1;
	//@ requires b >= -1;
	//@ requires b > -1;
	//@ ensures \result <= b;
	//@ ensures \result != b;
	//@ ensures \result > b;
	//@ ensures \result < a;
	//@ ensures \result <= a;
	//@ ensures \result == a;
	//@ ensures \result != a;
	//@ ensures \result >= a;
	//@ ensures \result > a;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures a >= 0 ==> \result >= 0;
	//@ ensures b >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:69: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:26:) in method mulLoop
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:26: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:69:
	//@ ensures \result > b;
	    ^
2 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a != 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b >= a;
	//@ requires b > a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b == 0;
	//@ requires b >= 0;
	//@ requires b != -1;
	//@ requires b >= -1;
	//@ requires b > -1;
	//@ ensures \result <= b;
	//@ ensures \result != b;
	//@ ensures \result < a;
	//@ ensures \result <= a;
	//@ ensures \result == a;
	//@ ensures \result != a;
	//@ ensures \result >= a;
	//@ ensures \result > a;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures a >= 0 ==> \result >= 0;
	//@ ensures b >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:68: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:26:) in method mulLoop
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:26: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:68:
	//@ ensures \result < a;
	    ^
2 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a != 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b >= a;
	//@ requires b > a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b == 0;
	//@ requires b >= 0;
	//@ requires b != -1;
	//@ requires b >= -1;
	//@ requires b > -1;
	//@ ensures \result <= b;
	//@ ensures \result != b;
	//@ ensures \result <= a;
	//@ ensures \result == a;
	//@ ensures \result != a;
	//@ ensures \result >= a;
	//@ ensures \result > a;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures a >= 0 ==> \result >= 0;
	//@ ensures b >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:67: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:26:) in method mulLoop
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:26: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:67:
	//@ ensures \result <= a;
	    ^
2 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a != 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b >= a;
	//@ requires b > a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b == 0;
	//@ requires b >= 0;
	//@ requires b != -1;
	//@ requires b >= -1;
	//@ requires b > -1;
	//@ ensures \result <= b;
	//@ ensures \result != b;
	//@ ensures \result == a;
	//@ ensures \result != a;
	//@ ensures \result >= a;
	//@ ensures \result > a;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures a >= 0 ==> \result >= 0;
	//@ ensures b >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:66: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:26:) in method mulLoop
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:26: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:66:
	//@ ensures \result == a;
	    ^
2 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a != 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b >= a;
	//@ requires b > a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b == 0;
	//@ requires b >= 0;
	//@ requires b != -1;
	//@ requires b >= -1;
	//@ requires b > -1;
	//@ ensures \result <= b;
	//@ ensures \result != b;
	//@ ensures \result != a;
	//@ ensures \result >= a;
	//@ ensures \result > a;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures a >= 0 ==> \result >= 0;
	//@ ensures b >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:65: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:31:) in method mulLoop
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:31: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:65:
	//@ ensures \result == 1;
	    ^
2 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a != 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b >= a;
	//@ requires b > a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b == 0;
	//@ requires b >= 0;
	//@ requires b != -1;
	//@ requires b >= -1;
	//@ requires b > -1;
	//@ ensures \result <= b;
	//@ ensures \result != b;
	//@ ensures \result != a;
	//@ ensures \result >= a;
	//@ ensures \result > a;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures a >= 0 ==> \result >= 0;
	//@ ensures b >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:64: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:27:) in method mulLoop
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:27: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:64:
	//@ ensures \result >= a;
	    ^
2 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a != 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b >= a;
	//@ requires b > a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b == 0;
	//@ requires b >= 0;
	//@ requires b != -1;
	//@ requires b >= -1;
	//@ requires b > -1;
	//@ ensures \result <= b;
	//@ ensures \result != b;
	//@ ensures \result != a;
	//@ ensures \result > a;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures a >= 0 ==> \result >= 0;
	//@ ensures b >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:63: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:31:) in method mulLoop
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:31: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:63:
	//@ ensures \result >= 1;
	    ^
2 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a != 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b >= a;
	//@ requires b > a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b == 0;
	//@ requires b >= 0;
	//@ requires b != -1;
	//@ requires b >= -1;
	//@ requires b > -1;
	//@ ensures \result <= b;
	//@ ensures \result != b;
	//@ ensures \result != a;
	//@ ensures \result > a;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result != 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures a >= 0 ==> \result >= 0;
	//@ ensures b >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:62: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:31:) in method mulLoop
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:31: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:62:
	//@ ensures \result > 1;
	    ^
2 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a != 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b >= a;
	//@ requires b > a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b == 0;
	//@ requires b >= 0;
	//@ requires b != -1;
	//@ requires b >= -1;
	//@ requires b > -1;
	//@ ensures \result <= b;
	//@ ensures \result != b;
	//@ ensures \result != a;
	//@ ensures \result > a;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result != 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures a >= 0 ==> \result >= 0;
	//@ ensures b >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:61: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:24:) in method mulLoop
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:61:
	//@ ensures \result <= b;
	    ^
2 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a != 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b >= a;
	//@ requires b > a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b == 0;
	//@ requires b >= 0;
	//@ requires b != -1;
	//@ requires b >= -1;
	//@ requires b > -1;
	//@ ensures \result != b;
	//@ ensures \result != a;
	//@ ensures \result > a;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result != 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures a >= 0 ==> \result >= 0;
	//@ ensures b >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:60: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:32:) in method mulLoop
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:32: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:60:
	//@ ensures \result == 0;
	    ^
2 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a != 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b >= a;
	//@ requires b > a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b == 0;
	//@ requires b >= 0;
	//@ requires b != -1;
	//@ requires b >= -1;
	//@ requires b > -1;
	//@ ensures \result != b;
	//@ ensures \result != a;
	//@ ensures \result > a;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result != 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures a >= 0 ==> \result >= 0;
	//@ ensures b >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:59: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:33:) in method mulLoop
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:33: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:59:
	//@ ensures \result >= 0;
	    ^
2 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a != 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b >= a;
	//@ requires b > a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b == 0;
	//@ requires b >= 0;
	//@ requires b != -1;
	//@ requires b >= -1;
	//@ requires b > -1;
	//@ ensures \result != b;
	//@ ensures \result != a;
	//@ ensures \result > a;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result != 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result != 0;
	//@ ensures \result > 0;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures a >= 0 ==> \result >= 0;
	//@ ensures b >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:58: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:33:) in method mulLoop
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:33: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:58:
	//@ ensures \result > 0;
	    ^
2 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a != 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b >= a;
	//@ requires b > a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b == 0;
	//@ requires b >= 0;
	//@ requires b != -1;
	//@ requires b >= -1;
	//@ requires b > -1;
	//@ ensures \result != b;
	//@ ensures \result != a;
	//@ ensures \result > a;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result != 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result != 0;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures a >= 0 ==> \result >= 0;
	//@ ensures b >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:57: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:26:) in method mulLoop
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:26: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:57:
	//@ ensures \result > a;
	    ^
2 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a != 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b >= a;
	//@ requires b > a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b == 0;
	//@ requires b >= 0;
	//@ requires b != -1;
	//@ requires b >= -1;
	//@ requires b > -1;
	//@ ensures \result != b;
	//@ ensures \result != a;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result != 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result != 0;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures a >= 0 ==> \result >= 0;
	//@ ensures b >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:56: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:34:) in method mulLoop
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:34: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:56:
	//@ ensures \result == -1;
	    ^
2 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a != 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b >= a;
	//@ requires b > a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b == 0;
	//@ requires b >= 0;
	//@ requires b != -1;
	//@ requires b >= -1;
	//@ requires b > -1;
	//@ ensures \result != b;
	//@ ensures \result != a;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result != 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result != 0;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures a >= 0 ==> \result >= 0;
	//@ ensures b >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:55: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:32:) in method mulLoop
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:32: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:55:
	//@ ensures \result < -1;
	    ^
2 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a != 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b >= a;
	//@ requires b > a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b == 0;
	//@ requires b >= 0;
	//@ requires b != -1;
	//@ requires b >= -1;
	//@ requires b > -1;
	//@ ensures \result != b;
	//@ ensures \result != a;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result != 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result != 0;
	//@ ensures \result <= -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures a >= 0 ==> \result >= 0;
	//@ ensures b >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:54: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:34:) in method mulLoop
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:34: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:54:
	//@ ensures \result >= -1;
	    ^
2 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a != 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b >= a;
	//@ requires b > a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b == 0;
	//@ requires b >= 0;
	//@ requires b != -1;
	//@ requires b >= -1;
	//@ requires b > -1;
	//@ ensures \result != b;
	//@ ensures \result != a;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result != 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result != 0;
	//@ ensures \result <= -1;
	//@ ensures \result != -1;
	//@ ensures \result > -1;
	//@ ensures a >= 0 ==> \result >= 0;
	//@ ensures b >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:53: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:34:) in method mulLoop
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:34: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:53:
	//@ ensures \result > -1;
	    ^
2 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a != 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b >= a;
	//@ requires b > a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b == 0;
	//@ requires b >= 0;
	//@ requires b != -1;
	//@ requires b >= -1;
	//@ requires b > -1;
	//@ ensures \result != b;
	//@ ensures \result != a;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result != 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result != 0;
	//@ ensures \result <= -1;
	//@ ensures \result != -1;
	//@ ensures a >= 0 ==> \result >= 0;
	//@ ensures b >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:52: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:26:) in method mulLoop
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:26: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:52:
	//@ ensures \result < 1;
	    ^
2 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a != 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b >= a;
	//@ requires b > a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b == 0;
	//@ requires b >= 0;
	//@ requires b != -1;
	//@ requires b >= -1;
	//@ requires b > -1;
	//@ ensures \result != b;
	//@ ensures \result != a;
	//@ ensures \result <= 1;
	//@ ensures \result != 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result != 0;
	//@ ensures \result <= -1;
	//@ ensures \result != -1;
	//@ ensures a >= 0 ==> \result >= 0;
	//@ ensures b >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:51: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:34:) in method mulLoop
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:34: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:51:
	//@ ensures b >= 0 ==> \result >= 0;
	    ^
2 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a < 0;
	//@ requires a <= 0;
	//@ requires a != 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b >= a;
	//@ requires b > a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b == 0;
	//@ requires b >= 0;
	//@ requires b != -1;
	//@ requires b >= -1;
	//@ requires b > -1;
	//@ ensures \result != b;
	//@ ensures \result != a;
	//@ ensures \result <= 1;
	//@ ensures \result != 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result != 0;
	//@ ensures \result <= -1;
	//@ ensures \result != -1;
	//@ ensures a >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:189: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:34:) in method main
        mulLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:34: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:189:
	public static int mulLoop(int a, int b) {
	                  ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:6: verify: Precondition conjunct is false: a < 0
	//@ requires a < 0;
	               ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:50: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:32:) in method mulLoop
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:32: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:50:
	//@ ensures \result != -1;
	    ^
5 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a <= 0;
	//@ requires a != 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b >= a;
	//@ requires b > a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b == 0;
	//@ requires b >= 0;
	//@ requires b != -1;
	//@ requires b >= -1;
	//@ requires b > -1;
	//@ ensures \result != b;
	//@ ensures \result != a;
	//@ ensures \result <= 1;
	//@ ensures \result != 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result != 0;
	//@ ensures \result <= -1;
	//@ ensures \result != -1;
	//@ ensures a >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:188: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:33:) in method main
        mulLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:33: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:188:
	public static int mulLoop(int a, int b) {
	                  ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:7: verify: Precondition conjunct is false: a != 0
	//@ requires a != 0;
	               ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:49: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:26:) in method mulLoop
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:26: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:49:
	//@ ensures \result != 1;
	    ^
5 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a <= 0;
	//@ requires a < -1;
	//@ requires a <= -1;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b >= a;
	//@ requires b > a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b == 0;
	//@ requires b >= 0;
	//@ requires b != -1;
	//@ requires b >= -1;
	//@ requires b > -1;
	//@ ensures \result != b;
	//@ ensures \result != a;
	//@ ensures \result <= 1;
	//@ ensures \result != 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result != 0;
	//@ ensures \result <= -1;
	//@ ensures \result != -1;
	//@ ensures a >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:187: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:32:) in method main
        mulLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:32: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:187:
	public static int mulLoop(int a, int b) {
	                  ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:7: verify: Precondition conjunct is false: a < -1
	//@ requires a < -1;
	               ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:48: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:30:) in method mulLoop
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:30: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:48:
	//@ ensures \result != -1;
	    ^
5 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a <= 0;
	//@ requires a <= -1;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b >= a;
	//@ requires b > a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b == 0;
	//@ requires b >= 0;
	//@ requires b != -1;
	//@ requires b >= -1;
	//@ requires b > -1;
	//@ ensures \result != b;
	//@ ensures \result != a;
	//@ ensures \result <= 1;
	//@ ensures \result != 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result != 0;
	//@ ensures \result <= -1;
	//@ ensures \result != -1;
	//@ ensures a >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:186: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:31:) in method main
        mulLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:31: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:186:
	public static int mulLoop(int a, int b) {
	                  ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:7: verify: Precondition conjunct is false: a <= -1
	//@ requires a <= -1;
	               ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:47: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:23:) in method mulLoop
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:23: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:47:
	//@ ensures \result <= 1;
	    ^
5 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a <= 0;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b >= a;
	//@ requires b > a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b == 0;
	//@ requires b >= 0;
	//@ requires b != -1;
	//@ requires b >= -1;
	//@ requires b > -1;
	//@ ensures \result != b;
	//@ ensures \result != a;
	//@ ensures \result <= 1;
	//@ ensures \result != 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result != 0;
	//@ ensures \result <= -1;
	//@ ensures \result != -1;
	//@ ensures a >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:185: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:30:) in method main
        mulLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:30: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:185:
	public static int mulLoop(int a, int b) {
	                  ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:9: verify: Precondition conjunct is false: b >= a
	//@ requires b >= a;
	               ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:46: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:28:) in method mulLoop
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:28: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:46:
	//@ ensures \result != -1;
	    ^
5 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a <= 0;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b > a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b == 0;
	//@ requires b >= 0;
	//@ requires b != -1;
	//@ requires b >= -1;
	//@ requires b > -1;
	//@ ensures \result != b;
	//@ ensures \result != a;
	//@ ensures \result <= 1;
	//@ ensures \result != 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result != 0;
	//@ ensures \result <= -1;
	//@ ensures \result != -1;
	//@ ensures a >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:184: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:29:) in method main
        mulLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:29: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:184:
	public static int mulLoop(int a, int b) {
	                  ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:9: verify: Precondition conjunct is false: b > a
	//@ requires b > a;
	               ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:45: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:21:) in method mulLoop
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:21: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:45:
	//@ ensures \result <= 1;
	    ^
5 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a <= 0;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b == 0;
	//@ requires b >= 0;
	//@ requires b != -1;
	//@ requires b >= -1;
	//@ requires b > -1;
	//@ ensures \result != b;
	//@ ensures \result != a;
	//@ ensures \result <= 1;
	//@ ensures \result != 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result != 0;
	//@ ensures \result <= -1;
	//@ ensures \result != -1;
	//@ ensures a >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:183: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:28:) in method main
        mulLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:28: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:183:
	public static int mulLoop(int a, int b) {
	                  ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:13: verify: Precondition conjunct is false: b == 0
	//@ requires b == 0;
	               ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:44: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:20:) in method mulLoop
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:20: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:44:
	//@ ensures \result <= 1;
	    ^
5 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a <= 0;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b >= 0;
	//@ requires b != -1;
	//@ requires b >= -1;
	//@ requires b > -1;
	//@ ensures \result != b;
	//@ ensures \result != a;
	//@ ensures \result <= 1;
	//@ ensures \result != 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result != 0;
	//@ ensures \result <= -1;
	//@ ensures \result != -1;
	//@ ensures a >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:182: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:27:) in method main
        mulLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:27: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:182:
	public static int mulLoop(int a, int b) {
	                  ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:13: verify: Precondition conjunct is false: b >= 0
	//@ requires b >= 0;
	               ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:43: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:20:) in method mulLoop
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:20: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:43:
	//@ ensures \result != 1;
	    ^
5 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a <= 0;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b != -1;
	//@ requires b >= -1;
	//@ requires b > -1;
	//@ ensures \result != b;
	//@ ensures \result != a;
	//@ ensures \result <= 1;
	//@ ensures \result != 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result != 0;
	//@ ensures \result <= -1;
	//@ ensures \result != -1;
	//@ ensures a >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:181: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:26:) in method main
        mulLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:26: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:181:
	public static int mulLoop(int a, int b) {
	                  ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:14: verify: Precondition conjunct is false: b >= -1
	//@ requires b >= -1;
	               ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:42: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:17:) in method mulLoop
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:17: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:42:
	//@ ensures \result != a;
	    ^
5 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a <= 0;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b != -1;
	//@ requires b > -1;
	//@ ensures \result != b;
	//@ ensures \result != a;
	//@ ensures \result <= 1;
	//@ ensures \result != 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result != 0;
	//@ ensures \result <= -1;
	//@ ensures \result != -1;
	//@ ensures a >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:180: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:25:) in method main
        mulLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:25: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:180:
	public static int mulLoop(int a, int b) {
	                  ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:14: verify: Precondition conjunct is false: b > -1
	//@ requires b > -1;
	               ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:41: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:23:) in method mulLoop
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:23: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:41:
	//@ ensures \result != -1;
	    ^
5 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a <= 0;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b != -1;
	//@ ensures \result != b;
	//@ ensures \result != a;
	//@ ensures \result <= 1;
	//@ ensures \result != 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result != 0;
	//@ ensures \result <= -1;
	//@ ensures \result != -1;
	//@ ensures a >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:35: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:174:) in method mulLoop
                __Loop_Invariant_Dummy2(a, b, res, i);
                                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:174: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:35:
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:68: verify: Precondition conjunct is false: a == 1
    //@ requires a == 1;
                   ^
3 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a <= 0;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b != -1;
	//@ ensures \result != b;
	//@ ensures \result != a;
	//@ ensures \result <= 1;
	//@ ensures \result != 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result != 0;
	//@ ensures \result <= -1;
	//@ ensures \result != -1;
	//@ ensures a >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:35: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:173:) in method mulLoop
                __Loop_Invariant_Dummy2(a, b, res, i);
                                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:173: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:35:
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:69: verify: Precondition conjunct is false: a >= 1
    //@ requires a >= 1;
                   ^
3 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a <= 0;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b != -1;
	//@ ensures \result != b;
	//@ ensures \result != a;
	//@ ensures \result <= 1;
	//@ ensures \result != 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result != 0;
	//@ ensures \result <= -1;
	//@ ensures \result != -1;
	//@ ensures a >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:35: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:172:) in method mulLoop
                __Loop_Invariant_Dummy2(a, b, res, i);
                                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:172: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:35:
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:69: verify: Precondition conjunct is false: a > 1
    //@ requires a > 1;
                   ^
3 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a <= 0;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b != -1;
	//@ ensures \result != b;
	//@ ensures \result != a;
	//@ ensures \result <= 1;
	//@ ensures \result != 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result != 0;
	//@ ensures \result <= -1;
	//@ ensures \result != -1;
	//@ ensures a >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:35: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:171:) in method mulLoop
                __Loop_Invariant_Dummy2(a, b, res, i);
                                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:171: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:35:
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:69: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
3 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a <= 0;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b != -1;
	//@ ensures \result != b;
	//@ ensures \result != a;
	//@ ensures \result <= 1;
	//@ ensures \result != 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result != 0;
	//@ ensures \result <= -1;
	//@ ensures \result != -1;
	//@ ensures a >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:35: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:170:) in method mulLoop
                __Loop_Invariant_Dummy2(a, b, res, i);
                                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:170: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:35:
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:71: verify: Precondition conjunct is false: a != 0
    //@ requires a != 0;
                   ^
3 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a <= 0;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b != -1;
	//@ ensures \result != b;
	//@ ensures \result != a;
	//@ ensures \result <= 1;
	//@ ensures \result != 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result != 0;
	//@ ensures \result <= -1;
	//@ ensures \result != -1;
	//@ ensures a >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:38: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:169:) in method mulLoop
            __Loop_Invariant_Dummy2(a, b, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:169: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:38:
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:70: verify: Precondition conjunct is false: a == 0
    //@ requires a == 0;
                   ^
3 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a <= 0;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b != -1;
	//@ ensures \result != b;
	//@ ensures \result != a;
	//@ ensures \result <= 1;
	//@ ensures \result != 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result != 0;
	//@ ensures \result <= -1;
	//@ ensures \result != -1;
	//@ ensures a >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:35: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:168:) in method mulLoop
                __Loop_Invariant_Dummy2(a, b, res, i);
                                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:168: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:35:
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:71: verify: Precondition conjunct is false: a > 0
    //@ requires a > 0;
                   ^
3 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a <= 0;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b != -1;
	//@ ensures \result != b;
	//@ ensures \result != a;
	//@ ensures \result <= 1;
	//@ ensures \result != 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result != 0;
	//@ ensures \result <= -1;
	//@ ensures \result != -1;
	//@ ensures a >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a >= 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:35: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:167:) in method mulLoop
                __Loop_Invariant_Dummy2(a, b, res, i);
                                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:167: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:35:
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:71: verify: Precondition conjunct is false: a < -1
    //@ requires a < -1;
                   ^
3 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a <= 0;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b != -1;
	//@ ensures \result != b;
	//@ ensures \result != a;
	//@ ensures \result <= 1;
	//@ ensures \result != 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result != 0;
	//@ ensures \result <= -1;
	//@ ensures \result != -1;
	//@ ensures a >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a >= 0;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:35: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:166:) in method mulLoop
                __Loop_Invariant_Dummy2(a, b, res, i);
                                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:166: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:35:
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:71: verify: Precondition conjunct is false: a <= -1
    //@ requires a <= -1;
                   ^
3 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a <= 0;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b != -1;
	//@ ensures \result != b;
	//@ ensures \result != a;
	//@ ensures \result <= 1;
	//@ ensures \result != 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result != 0;
	//@ ensures \result <= -1;
	//@ ensures \result != -1;
	//@ ensures a >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a >= 0;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:35: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:165:) in method mulLoop
                __Loop_Invariant_Dummy2(a, b, res, i);
                                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:165: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:35:
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:71: verify: Precondition conjunct is false: a == -1
    //@ requires a == -1;
                   ^
3 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a <= 0;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b != -1;
	//@ ensures \result != b;
	//@ ensures \result != a;
	//@ ensures \result <= 1;
	//@ ensures \result != 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result != 0;
	//@ ensures \result <= -1;
	//@ ensures \result != -1;
	//@ ensures a >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a >= 0;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:35: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:164:) in method mulLoop
                __Loop_Invariant_Dummy2(a, b, res, i);
                                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:164: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:35:
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:76: verify: Precondition conjunct is false: b == a
    //@ requires b == a;
                   ^
3 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a <= 0;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b != -1;
	//@ ensures \result != b;
	//@ ensures \result != a;
	//@ ensures \result <= 1;
	//@ ensures \result != 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result != 0;
	//@ ensures \result <= -1;
	//@ ensures \result != -1;
	//@ ensures a >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a >= 0;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:38: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:163:) in method mulLoop
            __Loop_Invariant_Dummy2(a, b, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:163: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:38:
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:77: verify: Precondition conjunct is false: b >= a
    //@ requires b >= a;
                   ^
3 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a <= 0;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b != -1;
	//@ ensures \result != b;
	//@ ensures \result != a;
	//@ ensures \result <= 1;
	//@ ensures \result != 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result != 0;
	//@ ensures \result <= -1;
	//@ ensures \result != -1;
	//@ ensures a >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a >= 0;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b != a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:40: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:14:) in method mulLoop
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:14: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:40:
	//@ ensures \result != b;
	    ^
2 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a <= 0;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b != -1;
	//@ ensures \result != a;
	//@ ensures \result <= 1;
	//@ ensures \result != 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result != 0;
	//@ ensures \result <= -1;
	//@ ensures \result != -1;
	//@ ensures a >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a >= 0;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b != a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:34: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:161:) in method mulLoop
                __Loop_Invariant_Dummy2(a, b, res, i);
                                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:161: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:34:
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:76: verify: Precondition conjunct is false: b > a
    //@ requires b > a;
                   ^
3 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a <= 0;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b != -1;
	//@ ensures \result != a;
	//@ ensures \result <= 1;
	//@ ensures \result != 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result != 0;
	//@ ensures \result <= -1;
	//@ ensures \result != -1;
	//@ ensures a >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a >= 0;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:34: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:160:) in method mulLoop
                __Loop_Invariant_Dummy2(a, b, res, i);
                                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:160: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:34:
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:78: verify: Precondition conjunct is false: b == 1
    //@ requires b == 1;
                   ^
3 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a <= 0;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b != -1;
	//@ ensures \result != a;
	//@ ensures \result <= 1;
	//@ ensures \result != 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result != 0;
	//@ ensures \result <= -1;
	//@ ensures \result != -1;
	//@ ensures a >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a >= 0;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:39: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:15:) in method mulLoop
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:15: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:39:
	//@ ensures \result <= 1;
	    ^
2 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a <= 0;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b != -1;
	//@ ensures \result != a;
	//@ ensures \result != 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result != 0;
	//@ ensures \result <= -1;
	//@ ensures \result != -1;
	//@ ensures a >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a >= 0;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:33: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:158:) in method mulLoop
                __Loop_Invariant_Dummy2(a, b, res, i);
                                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:158: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:33:
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:78: verify: Precondition conjunct is false: b >= 1
    //@ requires b >= 1;
                   ^
3 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a <= 0;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b != -1;
	//@ ensures \result != a;
	//@ ensures \result != 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result != 0;
	//@ ensures \result <= -1;
	//@ ensures \result != -1;
	//@ ensures a >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a >= 0;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:36: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:157:) in method mulLoop
            __Loop_Invariant_Dummy2(a, b, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:157: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:36:
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:78: verify: Precondition conjunct is false: b > 1
    //@ requires b > 1;
                   ^
3 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a <= 0;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b != -1;
	//@ ensures \result != a;
	//@ ensures \result != 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result != 0;
	//@ ensures \result <= -1;
	//@ ensures \result != -1;
	//@ ensures a >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a >= 0;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:33: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:156:) in method mulLoop
                __Loop_Invariant_Dummy2(a, b, res, i);
                                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:156: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:33:
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:80: verify: Precondition conjunct is false: b == 0
    //@ requires b == 0;
                   ^
3 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a <= 0;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b != -1;
	//@ ensures \result != a;
	//@ ensures \result != 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result != 0;
	//@ ensures \result <= -1;
	//@ ensures \result != -1;
	//@ ensures a >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a >= 0;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:36: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:155:) in method mulLoop
            __Loop_Invariant_Dummy2(a, b, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:155: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:36:
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:81: verify: Precondition conjunct is false: b >= 0
    //@ requires b >= 0;
                   ^
3 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a <= 0;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b != -1;
	//@ ensures \result != a;
	//@ ensures \result != 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result != 0;
	//@ ensures \result <= -1;
	//@ ensures \result != -1;
	//@ ensures a >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a >= 0;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b != 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:36: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:154:) in method mulLoop
            __Loop_Invariant_Dummy2(a, b, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:154: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:36:
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:81: verify: Precondition conjunct is false: b > 0
    //@ requires b > 0;
                   ^
3 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a <= 0;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b != -1;
	//@ ensures \result != a;
	//@ ensures \result != 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result != 0;
	//@ ensures \result <= -1;
	//@ ensures \result != -1;
	//@ ensures a >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a >= 0;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b != 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:38: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:16:) in method mulLoop
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:16: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:38:
	//@ ensures \result < 0;
	    ^
2 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a <= 0;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b != -1;
	//@ ensures \result != a;
	//@ ensures \result != 1;
	//@ ensures \result <= 0;
	//@ ensures \result != 0;
	//@ ensures \result <= -1;
	//@ ensures \result != -1;
	//@ ensures a >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a >= 0;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b != 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:32: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:152:) in method mulLoop
                __Loop_Invariant_Dummy2(a, b, res, i);
                                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:152: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:32:
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:82: verify: Precondition conjunct is false: b == -1
    //@ requires b == -1;
                   ^
3 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a <= 0;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b != -1;
	//@ ensures \result != a;
	//@ ensures \result != 1;
	//@ ensures \result <= 0;
	//@ ensures \result != 0;
	//@ ensures \result <= -1;
	//@ ensures \result != -1;
	//@ ensures a >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a >= 0;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b != 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:32: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:151:) in method mulLoop
                __Loop_Invariant_Dummy2(a, b, res, i);
                                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:151: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:32:
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:83: verify: Precondition conjunct is false: b >= -1
    //@ requires b >= -1;
                   ^
3 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a <= 0;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b != -1;
	//@ ensures \result != a;
	//@ ensures \result != 1;
	//@ ensures \result <= 0;
	//@ ensures \result != 0;
	//@ ensures \result <= -1;
	//@ ensures \result != -1;
	//@ ensures a >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a >= 0;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b != 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b != -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:35: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:150:) in method mulLoop
            __Loop_Invariant_Dummy2(a, b, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:150: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:35:
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:67: verify: Precondition conjunct is false: a >= 0
    //@ requires a >= 0;
                   ^
3 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a <= 0;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b != -1;
	//@ ensures \result != a;
	//@ ensures \result != 1;
	//@ ensures \result <= 0;
	//@ ensures \result != 0;
	//@ ensures \result <= -1;
	//@ ensures \result != -1;
	//@ ensures a >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b != 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b != -1;
    //@ requires b > -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:32: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:149:) in method mulLoop
                __Loop_Invariant_Dummy2(a, b, res, i);
                                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:149: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:32:
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:82: verify: Precondition conjunct is false: b > -1
    //@ requires b > -1;
                   ^
3 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a <= 0;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b != -1;
	//@ ensures \result != a;
	//@ ensures \result != 1;
	//@ ensures \result <= 0;
	//@ ensures \result != 0;
	//@ ensures \result <= -1;
	//@ ensures \result != -1;
	//@ ensures a >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b != 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b != -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:32: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:148:) in method mulLoop
                __Loop_Invariant_Dummy2(a, b, res, i);
                                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:148: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:32:
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:84: verify: Precondition conjunct is false: res == b
    //@ requires res == b;
                     ^
3 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a <= 0;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b != -1;
	//@ ensures \result != a;
	//@ ensures \result != 1;
	//@ ensures \result <= 0;
	//@ ensures \result != 0;
	//@ ensures \result <= -1;
	//@ ensures \result != -1;
	//@ ensures a >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b != 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b != -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:32: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:147:) in method mulLoop
                __Loop_Invariant_Dummy2(a, b, res, i);
                                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:147: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:32:
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:85: verify: Precondition conjunct is false: res >= b
    //@ requires res >= b;
                     ^
3 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a <= 0;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b != -1;
	//@ ensures \result != a;
	//@ ensures \result != 1;
	//@ ensures \result <= 0;
	//@ ensures \result != 0;
	//@ ensures \result <= -1;
	//@ ensures \result != -1;
	//@ ensures a >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b != 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b != -1;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res != b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:32: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:146:) in method mulLoop
                __Loop_Invariant_Dummy2(a, b, res, i);
                                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:146: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:32:
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:82: verify: Precondition conjunct is false: res < b
    //@ requires res < b;
                     ^
3 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a <= 0;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b != -1;
	//@ ensures \result != a;
	//@ ensures \result != 1;
	//@ ensures \result <= 0;
	//@ ensures \result != 0;
	//@ ensures \result <= -1;
	//@ ensures \result != -1;
	//@ ensures a >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b != 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b != -1;
    //@ requires res <= b;
    //@ requires res != b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:37: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:14:) in method mulLoop
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:14: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:37:
	//@ ensures \result != a;
	    ^
2 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a <= 0;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b != -1;
	//@ ensures \result != 1;
	//@ ensures \result <= 0;
	//@ ensures \result != 0;
	//@ ensures \result <= -1;
	//@ ensures \result != -1;
	//@ ensures a >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b != 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b != -1;
    //@ requires res <= b;
    //@ requires res != b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:36: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:15:) in method mulLoop
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:15: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:36:
	//@ ensures \result <= 0;
	    ^
2 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a <= 0;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b != -1;
	//@ ensures \result != 1;
	//@ ensures \result != 0;
	//@ ensures \result <= -1;
	//@ ensures \result != -1;
	//@ ensures a >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b != 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b != -1;
    //@ requires res <= b;
    //@ requires res != b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:30: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:143:) in method mulLoop
                __Loop_Invariant_Dummy2(a, b, res, i);
                                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:143: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:30:
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:82: verify: Precondition conjunct is false: res > b
    //@ requires res > b;
                     ^
3 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a <= 0;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b != -1;
	//@ ensures \result != 1;
	//@ ensures \result != 0;
	//@ ensures \result <= -1;
	//@ ensures \result != -1;
	//@ ensures a >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b != 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b != -1;
    //@ requires res <= b;
    //@ requires res != b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:30: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:142:) in method mulLoop
                __Loop_Invariant_Dummy2(a, b, res, i);
                                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:142: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:30:
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:81: verify: Precondition conjunct is false: res != b
    //@ requires res != b;
                     ^
3 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a <= 0;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b != -1;
	//@ ensures \result != 1;
	//@ ensures \result != 0;
	//@ ensures \result <= -1;
	//@ ensures \result != -1;
	//@ ensures a >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b != 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b != -1;
    //@ requires res <= b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:35: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:14:) in method mulLoop
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:14: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:35:
	//@ ensures \result != 1;
	    ^
2 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a <= 0;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b != -1;
	//@ ensures \result != 0;
	//@ ensures \result <= -1;
	//@ ensures \result != -1;
	//@ ensures a >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b != 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b != -1;
    //@ requires res <= b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:140:) in method mulLoop
                __Loop_Invariant_Dummy2(a, b, res, i);
                                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:140: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:29:
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:82: verify: Precondition conjunct is false: res == a
    //@ requires res == a;
                     ^
3 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a <= 0;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b != -1;
	//@ ensures \result != 0;
	//@ ensures \result <= -1;
	//@ ensures \result != -1;
	//@ ensures a >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b != 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b != -1;
    //@ requires res <= b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:34: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:15:) in method mulLoop
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:15: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:34:
	//@ ensures \result <= -1;
	    ^
2 verification failures

public class MulLoop {

	//@ requires a < 1;
	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a <= 0;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b != -1;
	//@ ensures \result != 0;
	//@ ensures \result != -1;
	//@ ensures a >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b != 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b != -1;
    //@ requires res <= b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:144: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:17:) in method main
        mulLoop(4, 0);
               ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:17: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:144:
	public static int mulLoop(int a, int b) {
	                  ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:3: verify: Precondition conjunct is false: a < 1
	//@ requires a < 1;
	               ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:31: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:138:) in method mulLoop
            __Loop_Invariant_Dummy2(a, b, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:138: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:31:
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:64: verify: Precondition conjunct is false: a >= -1
    //@ requires a >= -1;
                   ^
6 verification failures

public class MulLoop {

	//@ requires a <= 1;
	//@ requires a != 1;
	//@ requires a <= 0;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b != -1;
	//@ ensures \result != 0;
	//@ ensures \result != -1;
	//@ ensures a >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b != 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b != -1;
    //@ requires res <= b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:143: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:16:) in method main
        mulLoop(4, 0);
               ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:16: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:143:
	public static int mulLoop(int a, int b) {
	                  ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:3: verify: Precondition conjunct is false: a <= 1
	//@ requires a <= 1;
	               ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:30: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:137:) in method mulLoop
            __Loop_Invariant_Dummy2(a, b, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:137: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:30:
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:77: verify: Precondition conjunct is false: res <= b
    //@ requires res <= b;
                     ^
6 verification failures

public class MulLoop {

	//@ requires a != 1;
	//@ requires a <= 0;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b != -1;
	//@ ensures \result != 0;
	//@ ensures \result != -1;
	//@ ensures a >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b != 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b != -1;
    //@ requires res <= b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:142: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:15:) in method main
        mulLoop(4, 0);
               ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:15: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:142:
	public static int mulLoop(int a, int b) {
	                  ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:4: verify: Precondition conjunct is false: a <= 0
	//@ requires a <= 0;
	               ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:136:) in method mulLoop
            __Loop_Invariant_Dummy2(a, b, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:136: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:29:
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:76: verify: Precondition conjunct is false: res <= b
    //@ requires res <= b;
                     ^
6 verification failures

public class MulLoop {

	//@ requires a != 1;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b < 1;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b != -1;
	//@ ensures \result != 0;
	//@ ensures \result != -1;
	//@ ensures a >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b != 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b != -1;
    //@ requires res <= b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:142: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:14:) in method main
        mulLoop(0, 4);
               ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:14: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:142:
	public static int mulLoop(int a, int b) {
	                  ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:6: verify: Precondition conjunct is false: b < 1
	//@ requires b < 1;
	               ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:19: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:54:) in method mulLoop
                __Loop_Invariant_Dummy1(a, b, res, i);
                                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:54: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:19:
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:33: verify: Precondition conjunct is false: a < 1
    //@ requires a < 1;
                   ^
6 verification failures

public class MulLoop {

	//@ requires a != 1;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b <= 1;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b != -1;
	//@ ensures \result != 0;
	//@ ensures \result != -1;
	//@ ensures a >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b != 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b != -1;
    //@ requires res <= b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:141: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:13:) in method main
        mulLoop(0, 4);
               ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:141:
	public static int mulLoop(int a, int b) {
	                  ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:6: verify: Precondition conjunct is false: b <= 1
	//@ requires b <= 1;
	               ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:27: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:134:) in method mulLoop
            __Loop_Invariant_Dummy2(a, b, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:134: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:27:
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:74: verify: Precondition conjunct is false: res <= b
    //@ requires res <= b;
                     ^
6 verification failures

public class MulLoop {

	//@ requires a != 1;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b != 1;
	//@ requires b <= 0;
	//@ requires b != -1;
	//@ ensures \result != 0;
	//@ ensures \result != -1;
	//@ ensures a >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b != 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b != -1;
    //@ requires res <= b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:140: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:12:) in method main
        mulLoop(0, 4);
               ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:12: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:140:
	public static int mulLoop(int a, int b) {
	                  ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:7: verify: Precondition conjunct is false: b <= 0
	//@ requires b <= 0;
	               ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:20: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:52:) in method mulLoop
            __Loop_Invariant_Dummy1(a, b, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:52: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:20:
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:31: verify: Precondition conjunct is false: a < 1
    //@ requires a < 1;
                   ^
6 verification failures

public class MulLoop {

	//@ requires a != 1;
	//@ requires a != -1;
	//@ requires b != a;
	//@ requires b != 1;
	//@ requires b != -1;
	//@ ensures \result != 0;
	//@ ensures \result != -1;
	//@ ensures a >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b != 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b != -1;
    //@ requires res <= b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:140: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:11:) in method main
        mulLoop(-4, -4);
               ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:11: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:140:
	public static int mulLoop(int a, int b) {
	                  ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:5: verify: Precondition conjunct is false: b != a
	//@ requires b != a;
	               ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:16: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:51:) in method mulLoop
                __Loop_Invariant_Dummy1(a, b, res, i);
                                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:51: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:16:
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:30: verify: Precondition conjunct is false: a < 1
    //@ requires a < 1;
                   ^
6 verification failures

public class MulLoop {

	//@ requires a != 1;
	//@ requires a != -1;
	//@ requires b != 1;
	//@ requires b != -1;
	//@ ensures \result != 0;
	//@ ensures \result != -1;
	//@ ensures a >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b != 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b != -1;
    //@ requires res <= b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:144: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:10:) in method main
        mulLoop(1, -1);
               ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:10: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:144:
	public static int mulLoop(int a, int b) {
	                  ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:3: verify: Precondition conjunct is false: a != 1
	//@ requires a != 1;
	               ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:15: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:50:) in method mulLoop
                __Loop_Invariant_Dummy1(a, b, res, i);
                                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:50: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:15:
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:29: verify: Precondition conjunct is false: a < 1
    //@ requires a < 1;
                   ^
6 verification failures

public class MulLoop {

	//@ requires a != -1;
	//@ requires b != 1;
	//@ requires b != -1;
	//@ ensures \result != 0;
	//@ ensures \result != -1;
	//@ ensures a >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b != 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b != -1;
    //@ requires res <= b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:143: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:9:) in method main
        mulLoop(1, -1);
               ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:9: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:143:
	public static int mulLoop(int a, int b) {
	                  ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:5: verify: Precondition conjunct is false: b != -1
	//@ requires b != -1;
	               ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:14: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:49:) in method mulLoop
                __Loop_Invariant_Dummy1(a, b, res, i);
                                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:49: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:14:
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:28: verify: Precondition conjunct is false: a < 1
    //@ requires a < 1;
                   ^
6 verification failures

public class MulLoop {

	//@ requires a != -1;
	//@ requires b != 1;
	//@ ensures \result != 0;
	//@ ensures \result != -1;
	//@ ensures a >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b != 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b != -1;
    //@ requires res <= b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:143: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:8:) in method main
        mulLoop(-1, 1);
               ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:8: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:143:
	public static int mulLoop(int a, int b) {
	                  ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:3: verify: Precondition conjunct is false: a != -1
	//@ requires a != -1;
	               ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:13: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:48:) in method mulLoop
                __Loop_Invariant_Dummy1(a, b, res, i);
                                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:48: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:13:
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:30: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
6 verification failures

public class MulLoop {

	//@ requires b != 1;
	//@ ensures \result != 0;
	//@ ensures \result != -1;
	//@ ensures a >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b != 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b != -1;
    //@ requires res <= b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:142: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:7:) in method main
        mulLoop(-1, 1);
               ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:7: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:142:
	public static int mulLoop(int a, int b) {
	                  ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:3: verify: Precondition conjunct is false: b != 1
	//@ requires b != 1;
	               ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:18: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:128:) in method mulLoop
                __Loop_Invariant_Dummy2(a, b, res, i);
                                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:128: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:18:
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:49: verify: Precondition conjunct is false: a < 1
    //@ requires a < 1;
                   ^
6 verification failures

public class MulLoop {

	//@ ensures \result != 0;
	//@ ensures \result != -1;
	//@ ensures a >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b != 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b != -1;
    //@ requires res <= b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:14: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:46:) in method mulLoop
            __Loop_Invariant_Dummy1(a, b, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:46: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:14:
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:28: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
3 verification failures

public class MulLoop {

	//@ ensures \result != 0;
	//@ ensures \result != -1;
	//@ ensures a >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b != 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b != -1;
    //@ requires res <= b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:17: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:126:) in method mulLoop
                __Loop_Invariant_Dummy2(a, b, res, i);
                                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:126: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:17:
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:47: verify: Precondition conjunct is false: a < 1
    //@ requires a < 1;
                   ^
3 verification failures

public class MulLoop {

	//@ ensures \result != 0;
	//@ ensures \result != -1;
	//@ ensures a >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b != 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b != -1;
    //@ requires res <= b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:17: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:125:) in method mulLoop
                __Loop_Invariant_Dummy2(a, b, res, i);
                                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:125: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:17:
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:65: verify: Precondition conjunct is false: res <= b
    //@ requires res <= b;
                     ^
3 verification failures

public class MulLoop {

	//@ ensures \result != 0;
	//@ ensures \result != -1;
	//@ ensures a >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b != 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b != -1;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:17: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:124:) in method mulLoop
                __Loop_Invariant_Dummy2(a, b, res, i);
                                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:124: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:17:
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:62: verify: Precondition conjunct is false: b < -1
    //@ requires b < -1;
                   ^
3 verification failures

public class MulLoop {

	//@ ensures \result != 0;
	//@ ensures \result != -1;
	//@ ensures a >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b != 0;
    //@ requires b <= -1;
    //@ requires b != -1;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:14: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:45:) in method mulLoop
            __Loop_Invariant_Dummy1(a, b, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:45: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:14:
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:25: verify: Precondition conjunct is false: a < 1
    //@ requires a < 1;
                   ^
3 verification failures

public class MulLoop {

	//@ ensures \result != 0;
	//@ ensures \result != -1;
	//@ ensures a >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b != 0;
    //@ requires b <= -1;
    //@ requires b != -1;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:14: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:44:) in method mulLoop
            __Loop_Invariant_Dummy1(a, b, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:44: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:14:
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:25: verify: Precondition conjunct is false: a <= 1
    //@ requires a <= 1;
                   ^
3 verification failures

public class MulLoop {

	//@ ensures \result != 0;
	//@ ensures \result != -1;
	//@ ensures a >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b != 0;
    //@ requires b <= -1;
    //@ requires b != -1;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:17: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:121:) in method mulLoop
                __Loop_Invariant_Dummy2(a, b, res, i);
                                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:121: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:17:
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:61: verify: Precondition conjunct is false: b != -1
    //@ requires b != -1;
                   ^
3 verification failures

public class MulLoop {

	//@ ensures \result != 0;
	//@ ensures \result != -1;
	//@ ensures a >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b != 0;
    //@ requires b <= -1;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:11: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:43:) in method mulLoop
                __Loop_Invariant_Dummy1(a, b, res, i);
                                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:43: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:11:
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:27: verify: Precondition conjunct is false: a != 0
    //@ requires a != 0;
                   ^
3 verification failures

public class MulLoop {

	//@ ensures \result != 0;
	//@ ensures \result != -1;
	//@ ensures a >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b != 0;
    //@ requires b <= -1;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:11: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:42:) in method mulLoop
                __Loop_Invariant_Dummy1(a, b, res, i);
                                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:42: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:11:
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:27: verify: Precondition conjunct is false: a < -1
    //@ requires a < -1;
                   ^
3 verification failures

public class MulLoop {

	//@ ensures \result != 0;
	//@ ensures \result != -1;
	//@ ensures a >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b != 0;
    //@ requires b <= -1;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:11: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:41:) in method mulLoop
                __Loop_Invariant_Dummy1(a, b, res, i);
                                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:41: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:11:
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:27: verify: Precondition conjunct is false: a <= -1
    //@ requires a <= -1;
                   ^
3 verification failures

public class MulLoop {

	//@ ensures \result != 0;
	//@ ensures \result != -1;
	//@ ensures a >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b != 0;
    //@ requires b <= -1;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:11: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:40:) in method mulLoop
                __Loop_Invariant_Dummy1(a, b, res, i);
                                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:40: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:11:
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:28: verify: Precondition conjunct is false: b != a
    //@ requires b != a;
                   ^
3 verification failures

public class MulLoop {

	//@ ensures \result != 0;
	//@ ensures \result != -1;
	//@ ensures a >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b != 0;
    //@ requires b <= -1;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:17: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:116:) in method mulLoop
                __Loop_Invariant_Dummy2(a, b, res, i);
                                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:116: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:17:
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:60: verify: Precondition conjunct is false: res >= a
    //@ requires res >= a;
                     ^
3 verification failures

public class MulLoop {

	//@ ensures \result != 0;
	//@ ensures \result != -1;
	//@ ensures a >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b != 0;
    //@ requires b <= -1;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res != a;
    //@ requires res > a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:17: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:115:) in method mulLoop
                __Loop_Invariant_Dummy2(a, b, res, i);
                                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:115: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:17:
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:60: verify: Precondition conjunct is false: res > a
    //@ requires res > a;
                     ^
3 verification failures

public class MulLoop {

	//@ ensures \result != 0;
	//@ ensures \result != -1;
	//@ ensures a >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b != 0;
    //@ requires b <= -1;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res != a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:17: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:114:) in method mulLoop
                __Loop_Invariant_Dummy2(a, b, res, i);
                                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:114: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:17:
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:62: verify: Precondition conjunct is false: res == 1
    //@ requires res == 1;
                     ^
3 verification failures

public class MulLoop {

	//@ ensures \result != 0;
	//@ ensures \result != -1;
	//@ ensures a >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b != 0;
    //@ requires b <= -1;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res != a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:11: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:39:) in method mulLoop
                __Loop_Invariant_Dummy1(a, b, res, i);
                                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:39: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:11:
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:26: verify: Precondition conjunct is false: a <= 0
    //@ requires a <= 0;
                   ^
3 verification failures

public class MulLoop {

	//@ ensures \result != 0;
	//@ ensures \result != -1;
	//@ ensures a >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a != 1;
    //@ requires a != -1;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b != 0;
    //@ requires b <= -1;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res != a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:11: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:38:) in method mulLoop
                __Loop_Invariant_Dummy1(a, b, res, i);
                                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:38: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:11:
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:28: verify: Precondition conjunct is false: b > a
    //@ requires b > a;
                   ^
3 verification failures

public class MulLoop {

	//@ ensures \result != 0;
	//@ ensures \result != -1;
	//@ ensures a >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a != 1;
    //@ requires a != -1;
    //@ requires b >= a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b != 0;
    //@ requires b <= -1;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res != a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:17: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:111:) in method mulLoop
                __Loop_Invariant_Dummy2(a, b, res, i);
                                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:111: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:17:
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:61: verify: Precondition conjunct is false: res >= 1
    //@ requires res >= 1;
                     ^
3 verification failures

public class MulLoop {

	//@ ensures \result != 0;
	//@ ensures \result != -1;
	//@ ensures a >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a != 1;
    //@ requires a != -1;
    //@ requires b >= a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b != 0;
    //@ requires b <= -1;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res != a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res != 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:11: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:37:) in method mulLoop
                __Loop_Invariant_Dummy1(a, b, res, i);
                                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:37: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:11:
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:27: verify: Precondition conjunct is false: b >= a
    //@ requires b >= a;
                   ^
3 verification failures

public class MulLoop {

	//@ ensures \result != 0;
	//@ ensures \result != -1;
	//@ ensures a >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a != 1;
    //@ requires a != -1;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b != 0;
    //@ requires b <= -1;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res != a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res != 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:14: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:36:) in method mulLoop
            __Loop_Invariant_Dummy1(a, b, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:36: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:14:
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:25: verify: Precondition conjunct is false: a != 1
    //@ requires a != 1;
                   ^
3 verification failures

public class MulLoop {

	//@ ensures \result != 0;
	//@ ensures \result != -1;
	//@ ensures a >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a != -1;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b != 0;
    //@ requires b <= -1;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res != a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res != 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:14: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:35:) in method mulLoop
            __Loop_Invariant_Dummy1(a, b, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:35: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:14:
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:26: verify: Precondition conjunct is false: b < 1
    //@ requires b < 1;
                   ^
3 verification failures

public class MulLoop {

	//@ ensures \result != 0;
	//@ ensures \result != -1;
	//@ ensures a >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a != -1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b != 0;
    //@ requires b <= -1;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res != a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res != 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:14: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:34:) in method mulLoop
            __Loop_Invariant_Dummy1(a, b, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:34: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:14:
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:27: verify: Precondition conjunct is false: b != 1
    //@ requires b != 1;
                   ^
3 verification failures

public class MulLoop {

	//@ ensures \result != 0;
	//@ ensures \result != -1;
	//@ ensures a >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a != -1;
    //@ requires b <= 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b != 0;
    //@ requires b <= -1;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res != a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res != 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:14: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:33:) in method mulLoop
            __Loop_Invariant_Dummy1(a, b, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:33: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:14:
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:27: verify: Precondition conjunct is false: b <= 0
    //@ requires b <= 0;
                   ^
3 verification failures

public class MulLoop {

	//@ ensures \result != 0;
	//@ ensures \result != -1;
	//@ ensures a >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a != -1;
    //@ requires b <= 1;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b != 0;
    //@ requires b <= -1;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res != a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res != 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:11: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:32:) in method mulLoop
                __Loop_Invariant_Dummy1(a, b, res, i);
                                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:32: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:11:
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:26: verify: Precondition conjunct is false: b <= 1
    //@ requires b <= 1;
                   ^
3 verification failures

public class MulLoop {

	//@ ensures \result != 0;
	//@ ensures \result != -1;
	//@ ensures a >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a != -1;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b != 0;
    //@ requires b <= -1;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res != a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res != 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:14: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:31:) in method mulLoop
            __Loop_Invariant_Dummy1(a, b, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:31: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:14:
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:26: verify: Precondition conjunct is false: b == 0
    //@ requires b == 0;
                   ^
3 verification failures

public class MulLoop {

	//@ ensures \result != 0;
	//@ ensures \result != -1;
	//@ ensures a >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a != -1;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b != 0;
    //@ requires b <= -1;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res != a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res != 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:17: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:103:) in method mulLoop
                __Loop_Invariant_Dummy2(a, b, res, i);
                                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:103: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:17:
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:54: verify: Precondition conjunct is false: res > 1
    //@ requires res > 1;
                     ^
3 verification failures

public class MulLoop {

	//@ ensures \result != 0;
	//@ ensures \result != -1;
	//@ ensures a >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a != -1;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b != 0;
    //@ requires b <= -1;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res != a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res != 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:17: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:102:) in method mulLoop
                __Loop_Invariant_Dummy2(a, b, res, i);
                                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:102: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:17:
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:48: verify: Precondition conjunct is false: res < a
    //@ requires res < a;
                     ^
3 verification failures

public class MulLoop {

	//@ ensures \result != 0;
	//@ ensures \result != -1;
	//@ ensures a >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a != -1;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b != 0;
    //@ requires b <= -1;
    //@ requires res <= a;
    //@ requires res != a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res != 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:17: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:101:) in method mulLoop
                __Loop_Invariant_Dummy2(a, b, res, i);
                                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:101: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:17:
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:32: verify: Precondition conjunct is false: a <= 1
    //@ requires a <= 1;
                   ^
3 verification failures

public class MulLoop {

	//@ ensures \result != 0;
	//@ ensures \result != -1;
	//@ ensures a >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a != -1;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b != 0;
    //@ requires b <= -1;
    //@ requires res <= a;
    //@ requires res != a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res != 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:20: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:100:) in method mulLoop
            __Loop_Invariant_Dummy2(a, b, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:100: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:20:
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:33: verify: Precondition conjunct is false: a <= 0
    //@ requires a <= 0;
                   ^
3 verification failures

public class MulLoop {

	//@ ensures \result != 0;
	//@ ensures \result != -1;
	//@ ensures a >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a != -1;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a != 1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b != 0;
    //@ requires b <= -1;
    //@ requires res <= a;
    //@ requires res != a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res != 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:17: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:99:) in method mulLoop
                __Loop_Invariant_Dummy2(a, b, res, i);
                                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:99: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:17:
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:53: verify: Precondition conjunct is false: res == 0
    //@ requires res == 0;
                     ^
3 verification failures

public class MulLoop {

	//@ ensures \result != 0;
	//@ ensures \result != -1;
	//@ ensures a >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a != -1;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a != 1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b != 0;
    //@ requires b <= -1;
    //@ requires res <= a;
    //@ requires res != a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res != 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:17: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:98:) in method mulLoop
                __Loop_Invariant_Dummy2(a, b, res, i);
                                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:98: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:17:
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:54: verify: Precondition conjunct is false: res >= 0
    //@ requires res >= 0;
                     ^
3 verification failures

public class MulLoop {

	//@ ensures \result != 0;
	//@ ensures \result != -1;
	//@ ensures a >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a != -1;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a != 1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b != 0;
    //@ requires b <= -1;
    //@ requires res <= a;
    //@ requires res != a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res != 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res != 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:20: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:97:) in method mulLoop
            __Loop_Invariant_Dummy2(a, b, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:97: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:20:
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:34: verify: Precondition conjunct is false: a >= -1
    //@ requires a >= -1;
                   ^
3 verification failures

public class MulLoop {

	//@ ensures \result != 0;
	//@ ensures \result != -1;
	//@ ensures a >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires a != -1;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a != 1;
    //@ requires a != -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b != 0;
    //@ requires b <= -1;
    //@ requires res <= a;
    //@ requires res != a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res != 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res != 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:14: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:30:) in method mulLoop
            __Loop_Invariant_Dummy1(a, b, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:30: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:14:
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:25: verify: Precondition conjunct is false: a != -1
    //@ requires a != -1;
                   ^
3 verification failures

public class MulLoop {

	//@ ensures \result != 0;
	//@ ensures \result != -1;
	//@ ensures a >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a != 1;
    //@ requires a != -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b != 0;
    //@ requires b <= -1;
    //@ requires res <= a;
    //@ requires res != a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res != 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res != 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:17: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:95:) in method mulLoop
                __Loop_Invariant_Dummy2(a, b, res, i);
                                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:95: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:17:
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:31: verify: Precondition conjunct is false: a != 1
    //@ requires a != 1;
                   ^
3 verification failures

public class MulLoop {

	//@ ensures \result != 0;
	//@ ensures \result != -1;
	//@ ensures a >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a != -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b != 0;
    //@ requires b <= -1;
    //@ requires res <= a;
    //@ requires res != a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res != 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res != 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:17: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:94:) in method mulLoop
                __Loop_Invariant_Dummy2(a, b, res, i);
                                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:94: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:17:
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:44: verify: Precondition conjunct is false: res != a
    //@ requires res != a;
                     ^
3 verification failures

public class MulLoop {

	//@ ensures \result != 0;
	//@ ensures \result != -1;
	//@ ensures a >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a != -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b != 0;
    //@ requires b <= -1;
    //@ requires res <= a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res != 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res != 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:17: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:93:) in method mulLoop
                __Loop_Invariant_Dummy2(a, b, res, i);
                                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:93: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:17:
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:50: verify: Precondition conjunct is false: res > 0
    //@ requires res > 0;
                     ^
3 verification failures

public class MulLoop {

	//@ ensures \result != 0;
	//@ ensures \result != -1;
	//@ ensures a >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a != -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b != 0;
    //@ requires b <= -1;
    //@ requires res <= a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res != 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res != 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:17: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:92:) in method mulLoop
                __Loop_Invariant_Dummy2(a, b, res, i);
                                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:92: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:17:
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:52: verify: Precondition conjunct is false: res == -1
    //@ requires res == -1;
                     ^
3 verification failures

public class MulLoop {

	//@ ensures \result != 0;
	//@ ensures \result != -1;
	//@ ensures a >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a != -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b != 0;
    //@ requires b <= -1;
    //@ requires res <= a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res != 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res != 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:17: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:91:) in method mulLoop
                __Loop_Invariant_Dummy2(a, b, res, i);
                                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:91: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:17:
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:53: verify: Precondition conjunct is false: res >= -1
    //@ requires res >= -1;
                     ^
3 verification failures

public class MulLoop {

	//@ ensures \result != 0;
	//@ ensures \result != -1;
	//@ ensures a >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a != -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b != 0;
    //@ requires b <= -1;
    //@ requires res <= a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res != 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res != 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res != -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:17: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:90:) in method mulLoop
                __Loop_Invariant_Dummy2(a, b, res, i);
                                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:90: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:17:
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:50: verify: Precondition conjunct is false: res < -1
    //@ requires res < -1;
                     ^
3 verification failures

public class MulLoop {

	//@ ensures \result != 0;
	//@ ensures \result != -1;
	//@ ensures a >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a != -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b != 0;
    //@ requires b <= -1;
    //@ requires res <= a;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res != 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res != 0;
    //@ requires res <= -1;
    //@ requires res != -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:17: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:89:) in method mulLoop
                __Loop_Invariant_Dummy2(a, b, res, i);
                                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:89: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:17:
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:43: verify: Precondition conjunct is false: res <= a
    //@ requires res <= a;
                     ^
3 verification failures

public class MulLoop {

	//@ ensures \result != 0;
	//@ ensures \result != -1;
	//@ ensures a >= 0 ==> \result >= 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a != -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b != 0;
    //@ requires b <= -1;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res != 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res != 0;
    //@ requires res <= -1;
    //@ requires res != -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:22: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:5:) in method mulLoop
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:5: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:22:
	//@ ensures a >= 0 ==> \result >= 0;
	    ^
2 verification failures

public class MulLoop {

	//@ ensures \result != 0;
	//@ ensures \result != -1;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a != -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b != 0;
    //@ requires b <= -1;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res != 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res != 0;
    //@ requires res <= -1;
    //@ requires res != -1;
    //@ requires res > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:16: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:87:) in method mulLoop
                __Loop_Invariant_Dummy2(a, b, res, i);
                                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:87: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:16:
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:50: verify: Precondition conjunct is false: res > -1
    //@ requires res > -1;
                     ^
3 verification failures

public class MulLoop {

	//@ ensures \result != 0;
	//@ ensures \result != -1;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a != -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b != 0;
    //@ requires b <= -1;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res != 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res != 0;
    //@ requires res <= -1;
    //@ requires res != -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:19: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:86:) in method mulLoop
            __Loop_Invariant_Dummy2(a, b, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:86: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:19:
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:42: verify: Precondition conjunct is false: res < 1
    //@ requires res < 1;
                     ^
3 verification failures

public class MulLoop {

	//@ ensures \result != 0;
	//@ ensures \result != -1;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a != -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b != 0;
    //@ requires b <= -1;
    //@ requires res <= 1;
    //@ requires res != 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res != 0;
    //@ requires res <= -1;
    //@ requires res != -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:16: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:85:) in method mulLoop
                __Loop_Invariant_Dummy2(a, b, res, i);
                                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:85: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:16:
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:51: verify: Precondition conjunct is false: i == b
    //@ requires i == b;
                   ^
3 verification failures

public class MulLoop {

	//@ ensures \result != 0;
	//@ ensures \result != -1;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a != -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b != 0;
    //@ requires b <= -1;
    //@ requires res <= 1;
    //@ requires res != 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res != 0;
    //@ requires res <= -1;
    //@ requires res != -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:19: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:84:) in method mulLoop
            __Loop_Invariant_Dummy2(a, b, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:84: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:19:
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:31: verify: Precondition conjunct is false: a > -1
    //@ requires a > -1;
                   ^
3 verification failures

public class MulLoop {

	//@ ensures \result != 0;
	//@ ensures \result != -1;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a != -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b != 0;
    //@ requires b <= -1;
    //@ requires res <= 1;
    //@ requires res != 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res != 0;
    //@ requires res <= -1;
    //@ requires res != -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:19: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:83:) in method mulLoop
            __Loop_Invariant_Dummy2(a, b, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:83: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:19:
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:41: verify: Precondition conjunct is false: res <= 1
    //@ requires res <= 1;
                     ^
3 verification failures

public class MulLoop {

	//@ ensures \result != 0;
	//@ ensures \result != -1;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a != -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b != 0;
    //@ requires b <= -1;
    //@ requires res != 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res != 0;
    //@ requires res <= -1;
    //@ requires res != -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:19: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:82:) in method mulLoop
            __Loop_Invariant_Dummy2(a, b, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:82: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:19:
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:47: verify: Precondition conjunct is false: i < b
    //@ requires i < b;
                   ^
3 verification failures

public class MulLoop {

	//@ ensures \result != 0;
	//@ ensures \result != -1;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a != -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b != 0;
    //@ requires b <= -1;
    //@ requires res != 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res != 0;
    //@ requires res <= -1;
    //@ requires res != -1;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:16: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:81:) in method mulLoop
                __Loop_Invariant_Dummy2(a, b, res, i);
                                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:81: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:16:
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:47: verify: Precondition conjunct is false: i <= b
    //@ requires i <= b;
                   ^
3 verification failures

public class MulLoop {

	//@ ensures \result != 0;
	//@ ensures \result != -1;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a != -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b != 0;
    //@ requires b <= -1;
    //@ requires res != 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res != 0;
    //@ requires res <= -1;
    //@ requires res != -1;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:16: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:80:) in method mulLoop
                __Loop_Invariant_Dummy2(a, b, res, i);
                                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:80: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:16:
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:48: verify: Precondition conjunct is false: i >= b
    //@ requires i >= b;
                   ^
3 verification failures

public class MulLoop {

	//@ ensures \result != 0;
	//@ ensures \result != -1;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a != -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b != 0;
    //@ requires b <= -1;
    //@ requires res != 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res != 0;
    //@ requires res <= -1;
    //@ requires res != -1;
    //@ requires i != b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:16: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:79:) in method mulLoop
                __Loop_Invariant_Dummy2(a, b, res, i);
                                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:79: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:16:
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:51: verify: Precondition conjunct is false: i == a
    //@ requires i == a;
                   ^
3 verification failures

public class MulLoop {

	//@ ensures \result != 0;
	//@ ensures \result != -1;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires a != -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b != 0;
    //@ requires b <= -1;
    //@ requires res != 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res != 0;
    //@ requires res <= -1;
    //@ requires res != -1;
    //@ requires i != b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:16: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:78:) in method mulLoop
                __Loop_Invariant_Dummy2(a, b, res, i);
                                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:78: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:16:
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:30: verify: Precondition conjunct is false: a != -1
    //@ requires a != -1;
                   ^
3 verification failures

public class MulLoop {

	//@ ensures \result != 0;
	//@ ensures \result != -1;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b != 0;
    //@ requires b <= -1;
    //@ requires res != 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res != 0;
    //@ requires res <= -1;
    //@ requires res != -1;
    //@ requires i != b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:19: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:77:) in method mulLoop
            __Loop_Invariant_Dummy2(a, b, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:77: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:19:
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:30: verify: Precondition conjunct is false: b < a
    //@ requires b < a;
                   ^
3 verification failures

public class MulLoop {

	//@ ensures \result != 0;
	//@ ensures \result != -1;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires b <= a;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b != 0;
    //@ requires b <= -1;
    //@ requires res != 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res != 0;
    //@ requires res <= -1;
    //@ requires res != -1;
    //@ requires i != b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:16: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:76:) in method mulLoop
                __Loop_Invariant_Dummy2(a, b, res, i);
                                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:76: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:16:
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:30: verify: Precondition conjunct is false: b <= a
    //@ requires b <= a;
                   ^
3 verification failures

public class MulLoop {

	//@ ensures \result != 0;
	//@ ensures \result != -1;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b != 0;
    //@ requires b <= -1;
    //@ requires res != 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res != 0;
    //@ requires res <= -1;
    //@ requires res != -1;
    //@ requires i != b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:16: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:75:) in method mulLoop
                __Loop_Invariant_Dummy2(a, b, res, i);
                                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:75: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:16:
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:39: verify: Precondition conjunct is false: res < 0
    //@ requires res < 0;
                     ^
3 verification failures

public class MulLoop {

	//@ ensures \result != 0;
	//@ ensures \result != -1;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b != 0;
    //@ requires b <= -1;
    //@ requires res != 1;
    //@ requires res <= 0;
    //@ requires res != 0;
    //@ requires res <= -1;
    //@ requires res != -1;
    //@ requires i != b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:16: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:74:) in method mulLoop
                __Loop_Invariant_Dummy2(a, b, res, i);
                                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:74: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:16:
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:48: verify: Precondition conjunct is false: i >= a
    //@ requires i >= a;
                   ^
3 verification failures

public class MulLoop {

	//@ ensures \result != 0;
	//@ ensures \result != -1;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b != 0;
    //@ requires b <= -1;
    //@ requires res != 1;
    //@ requires res <= 0;
    //@ requires res != 0;
    //@ requires res <= -1;
    //@ requires res != -1;
    //@ requires i != b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i != a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:16: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:73:) in method mulLoop
                __Loop_Invariant_Dummy2(a, b, res, i);
                                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:73: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:16:
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:30: verify: Precondition conjunct is false: b != a
    //@ requires b != a;
                   ^
3 verification failures

public class MulLoop {

	//@ ensures \result != 0;
	//@ ensures \result != -1;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b != 0;
    //@ requires b <= -1;
    //@ requires res != 1;
    //@ requires res <= 0;
    //@ requires res != 0;
    //@ requires res <= -1;
    //@ requires res != -1;
    //@ requires i != b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i != a;
    //@ requires i > a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:19: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:72:) in method mulLoop
            __Loop_Invariant_Dummy2(a, b, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:72: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:19:
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:47: verify: Precondition conjunct is false: i > a
    //@ requires i > a;
                   ^
3 verification failures

public class MulLoop {

	//@ ensures \result != 0;
	//@ ensures \result != -1;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b != 0;
    //@ requires b <= -1;
    //@ requires res != 1;
    //@ requires res <= 0;
    //@ requires res != 0;
    //@ requires res <= -1;
    //@ requires res != -1;
    //@ requires i != b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i != a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:16: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:71:) in method mulLoop
                __Loop_Invariant_Dummy2(a, b, res, i);
                                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:71: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:16:
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:39: verify: Precondition conjunct is false: res != 0
    //@ requires res != 0;
                     ^
3 verification failures

public class MulLoop {

	//@ ensures \result != 0;
	//@ ensures \result != -1;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b != 0;
    //@ requires b <= -1;
    //@ requires res != 1;
    //@ requires res <= 0;
    //@ requires res <= -1;
    //@ requires res != -1;
    //@ requires i != b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i != a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:19: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:70:) in method mulLoop
            __Loop_Invariant_Dummy2(a, b, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:70: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:19:
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:38: verify: Precondition conjunct is false: res <= 0
    //@ requires res <= 0;
                     ^
3 verification failures

public class MulLoop {

	//@ ensures \result != 0;
	//@ ensures \result != -1;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b != 0;
    //@ requires b <= -1;
    //@ requires res != 1;
    //@ requires res <= -1;
    //@ requires res != -1;
    //@ requires i != b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i != a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:16: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:69:) in method mulLoop
                __Loop_Invariant_Dummy2(a, b, res, i);
                                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:69: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:16:
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:42: verify: Precondition conjunct is false: i < a
    //@ requires i < a;
                   ^
3 verification failures

public class MulLoop {

	//@ ensures \result != 0;
	//@ ensures \result != -1;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b != 0;
    //@ requires b <= -1;
    //@ requires res != 1;
    //@ requires res <= -1;
    //@ requires res != -1;
    //@ requires i != b;
    //@ requires i > b;
    //@ requires i <= a;
    //@ requires i != a;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:19: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:68:) in method mulLoop
            __Loop_Invariant_Dummy2(a, b, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:68: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:19:
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:44: verify: Precondition conjunct is false: i < res
    //@ requires i < res;
                   ^
3 verification failures

public class MulLoop {

	//@ ensures \result != 0;
	//@ ensures \result != -1;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b != 0;
    //@ requires b <= -1;
    //@ requires res != 1;
    //@ requires res <= -1;
    //@ requires res != -1;
    //@ requires i != b;
    //@ requires i > b;
    //@ requires i <= a;
    //@ requires i != a;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:16: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:67:) in method mulLoop
                __Loop_Invariant_Dummy2(a, b, res, i);
                                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:67: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:16:
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:38: verify: Precondition conjunct is false: res <= -1
    //@ requires res <= -1;
                     ^
3 verification failures

public class MulLoop {

	//@ ensures \result != 0;
	//@ ensures \result != -1;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b != 0;
    //@ requires b <= -1;
    //@ requires res != 1;
    //@ requires res != -1;
    //@ requires i != b;
    //@ requires i > b;
    //@ requires i <= a;
    //@ requires i != a;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:16: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:66:) in method mulLoop
                __Loop_Invariant_Dummy2(a, b, res, i);
                                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:66: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:16:
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:37: verify: Precondition conjunct is false: res != 1
    //@ requires res != 1;
                     ^
3 verification failures

public class MulLoop {

	//@ ensures \result != 0;
	//@ ensures \result != -1;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b != 0;
    //@ requires b <= -1;
    //@ requires res != -1;
    //@ requires i != b;
    //@ requires i > b;
    //@ requires i <= a;
    //@ requires i != a;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:19: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:65:) in method mulLoop
            __Loop_Invariant_Dummy2(a, b, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:65: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:19:
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:37: verify: Precondition conjunct is false: res != -1
    //@ requires res != -1;
                     ^
3 verification failures

public class MulLoop {

	//@ ensures \result != 0;
	//@ ensures \result != -1;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b != 0;
    //@ requires b <= -1;
    //@ requires i != b;
    //@ requires i > b;
    //@ requires i <= a;
    //@ requires i != a;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:16: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:64:) in method mulLoop
                __Loop_Invariant_Dummy2(a, b, res, i);
                                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:64: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:16:
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:37: verify: Precondition conjunct is false: i != b
    //@ requires i != b;
                   ^
3 verification failures

public class MulLoop {

	//@ ensures \result != 0;
	//@ ensures \result != -1;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b != 0;
    //@ requires b <= -1;
    //@ requires i > b;
    //@ requires i <= a;
    //@ requires i != a;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:16: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:63:) in method mulLoop
                __Loop_Invariant_Dummy2(a, b, res, i);
                                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:63: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:16:
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:37: verify: Precondition conjunct is false: i > b
    //@ requires i > b;
                   ^
3 verification failures

public class MulLoop {

	//@ ensures \result != 0;
	//@ ensures \result != -1;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b != 0;
    //@ requires b <= -1;
    //@ requires i <= a;
    //@ requires i != a;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:16: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:62:) in method mulLoop
                __Loop_Invariant_Dummy2(a, b, res, i);
                                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:62: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:16:
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:38: verify: Precondition conjunct is false: i != a
    //@ requires i != a;
                   ^
3 verification failures

public class MulLoop {

	//@ ensures \result != 0;
	//@ ensures \result != -1;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b != 0;
    //@ requires b <= -1;
    //@ requires i <= a;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:16: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:61:) in method mulLoop
                __Loop_Invariant_Dummy2(a, b, res, i);
                                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:61: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:16:
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:37: verify: Precondition conjunct is false: i <= a
    //@ requires i <= a;
                   ^
3 verification failures

public class MulLoop {

	//@ ensures \result != 0;
	//@ ensures \result != -1;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b != 0;
    //@ requires b <= -1;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:16: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:60:) in method mulLoop
                __Loop_Invariant_Dummy2(a, b, res, i);
                                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:60: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:16:
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:37: verify: Precondition conjunct is false: i <= res
    //@ requires i <= res;
                   ^
3 verification failures

public class MulLoop {

	//@ ensures \result != 0;
	//@ ensures \result != -1;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b != 0;
    //@ requires b <= -1;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:19: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:59:) in method mulLoop
            __Loop_Invariant_Dummy2(a, b, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:59: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:19:
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:37: verify: Precondition conjunct is false: i == res
    //@ requires i == res;
                   ^
3 verification failures

public class MulLoop {

	//@ ensures \result != 0;
	//@ ensures \result != -1;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b != 0;
    //@ requires b <= -1;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:16: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:58:) in method mulLoop
                __Loop_Invariant_Dummy2(a, b, res, i);
                                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:58: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:16:
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:38: verify: Precondition conjunct is false: i >= res
    //@ requires i >= res;
                   ^
3 verification failures

public class MulLoop {

	//@ ensures \result != 0;
	//@ ensures \result != -1;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b != 0;
    //@ requires b <= -1;
    //@ requires i != res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:16: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:57:) in method mulLoop
                __Loop_Invariant_Dummy2(a, b, res, i);
                                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:57: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:16:
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:37: verify: Precondition conjunct is false: i != res
    //@ requires i != res;
                   ^
3 verification failures

public class MulLoop {

	//@ ensures \result != 0;
	//@ ensures \result != -1;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b != 0;
    //@ requires b <= -1;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:16: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:56:) in method mulLoop
                __Loop_Invariant_Dummy2(a, b, res, i);
                                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:56: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:16:
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:37: verify: Precondition conjunct is false: i > res
    //@ requires i > res;
                   ^
3 verification failures

public class MulLoop {

	//@ ensures \result != 0;
	//@ ensures \result != -1;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b != 0;
    //@ requires b <= -1;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:19: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:55:) in method mulLoop
            __Loop_Invariant_Dummy2(a, b, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:55: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:19:
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:37: verify: Precondition conjunct is false: i < 1
    //@ requires i < 1;
                   ^
3 verification failures

public class MulLoop {

	//@ ensures \result != 0;
	//@ ensures \result != -1;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b != 0;
    //@ requires b <= -1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:16: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:54:) in method mulLoop
                __Loop_Invariant_Dummy2(a, b, res, i);
                                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:54: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:16:
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:38: verify: Precondition conjunct is false: i == 1
    //@ requires i == 1;
                   ^
3 verification failures

public class MulLoop {

	//@ ensures \result != 0;
	//@ ensures \result != -1;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b != 0;
    //@ requires b <= -1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:16: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:53:) in method mulLoop
                __Loop_Invariant_Dummy2(a, b, res, i);
                                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:53: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:16:
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:39: verify: Precondition conjunct is false: i >= 1
    //@ requires i >= 1;
                   ^
3 verification failures

public class MulLoop {

	//@ ensures \result != 0;
	//@ ensures \result != -1;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b != 0;
    //@ requires b <= -1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:16: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:52:) in method mulLoop
                __Loop_Invariant_Dummy2(a, b, res, i);
                                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:52: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:16:
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:39: verify: Precondition conjunct is false: i > 1
    //@ requires i > 1;
                   ^
3 verification failures

public class MulLoop {

	//@ ensures \result != 0;
	//@ ensures \result != -1;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b != 0;
    //@ requires b <= -1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:16: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:51:) in method mulLoop
                __Loop_Invariant_Dummy2(a, b, res, i);
                                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:51: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:16:
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:41: verify: Precondition conjunct is false: i == 0
    //@ requires i == 0;
                   ^
3 verification failures

public class MulLoop {

	//@ ensures \result != 0;
	//@ ensures \result != -1;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b != 0;
    //@ requires b <= -1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:16: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:50:) in method mulLoop
                __Loop_Invariant_Dummy2(a, b, res, i);
                                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:50: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:16:
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:42: verify: Precondition conjunct is false: i >= 0
    //@ requires i >= 0;
                   ^
3 verification failures

public class MulLoop {

	//@ ensures \result != 0;
	//@ ensures \result != -1;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b != 0;
    //@ requires b <= -1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:16: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:49:) in method mulLoop
                __Loop_Invariant_Dummy2(a, b, res, i);
                                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:49: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:16:
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:42: verify: Precondition conjunct is false: i > 0
    //@ requires i > 0;
                   ^
3 verification failures

public class MulLoop {

	//@ ensures \result != 0;
	//@ ensures \result != -1;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b != 0;
    //@ requires b <= -1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:16: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:48:) in method mulLoop
                __Loop_Invariant_Dummy2(a, b, res, i);
                                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:48: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:16:
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:44: verify: Precondition conjunct is false: i == -1
    //@ requires i == -1;
                   ^
3 verification failures

public class MulLoop {

	//@ ensures \result != 0;
	//@ ensures \result != -1;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b != 0;
    //@ requires b <= -1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:16: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:47:) in method mulLoop
                __Loop_Invariant_Dummy2(a, b, res, i);
                                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:47: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:16:
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:37: verify: Precondition conjunct is false: i <= 1
    //@ requires i <= 1;
                   ^
3 verification failures

public class MulLoop {

	//@ ensures \result != 0;
	//@ ensures \result != -1;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b != 0;
    //@ requires b <= -1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:16: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:46:) in method mulLoop
                __Loop_Invariant_Dummy2(a, b, res, i);
                                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:46: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:16:
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:44: verify: Precondition conjunct is false: i >= -1
    //@ requires i >= -1;
                   ^
3 verification failures

public class MulLoop {

	//@ ensures \result != 0;
	//@ ensures \result != -1;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b != 0;
    //@ requires b <= -1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i != -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:16: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:45:) in method mulLoop
                __Loop_Invariant_Dummy2(a, b, res, i);
                                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:45: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:16:
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:38: verify: Precondition conjunct is false: i < 0
    //@ requires i < 0;
                   ^
3 verification failures

public class MulLoop {

	//@ ensures \result != 0;
	//@ ensures \result != -1;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b != 0;
    //@ requires b <= -1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i != -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:19: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:44:) in method mulLoop
            __Loop_Invariant_Dummy2(a, b, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:44: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:19:
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:37: verify: Precondition conjunct is false: i != 1
    //@ requires i != 1;
                   ^
3 verification failures

public class MulLoop {

	//@ ensures \result != 0;
	//@ ensures \result != -1;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b != 0;
    //@ requires b <= -1;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i != -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:16: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:43:) in method mulLoop
                __Loop_Invariant_Dummy2(a, b, res, i);
                                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:43: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:16:
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:37: verify: Precondition conjunct is false: i <= 0
    //@ requires i <= 0;
                   ^
3 verification failures

public class MulLoop {

	//@ ensures \result != 0;
	//@ ensures \result != -1;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b != 0;
    //@ requires b <= -1;
    //@ requires i != 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i != -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:16: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:42:) in method mulLoop
                __Loop_Invariant_Dummy2(a, b, res, i);
                                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:42: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:16:
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:38: verify: Precondition conjunct is false: i < -1
    //@ requires i < -1;
                   ^
3 verification failures

public class MulLoop {

	//@ ensures \result != 0;
	//@ ensures \result != -1;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b != 0;
    //@ requires b <= -1;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i != -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:16: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:41:) in method mulLoop
                __Loop_Invariant_Dummy2(a, b, res, i);
                                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:41: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:16:
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:39: verify: Precondition conjunct is false: i != -1
    //@ requires i != -1;
                   ^
3 verification failures

public class MulLoop {

	//@ ensures \result != 0;
	//@ ensures \result != -1;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b != 0;
    //@ requires b <= -1;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:19: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:40:) in method mulLoop
            __Loop_Invariant_Dummy2(a, b, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:40: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:19:
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:38: verify: Precondition conjunct is false: i <= -1
    //@ requires i <= -1;
                   ^
3 verification failures

public class MulLoop {

	//@ ensures \result != 0;
	//@ ensures \result != -1;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b != 0;
    //@ requires b <= -1;
    //@ requires i != 0;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:16: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:39:) in method mulLoop
                __Loop_Invariant_Dummy2(a, b, res, i);
                                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:39: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:16:
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:38: verify: Precondition conjunct is false: i > -1
    //@ requires i > -1;
                   ^
3 verification failures

public class MulLoop {

	//@ ensures \result != 0;
	//@ ensures \result != -1;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b != 0;
    //@ requires b <= -1;
    //@ requires i != 0;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:16: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:38:) in method mulLoop
                __Loop_Invariant_Dummy2(a, b, res, i);
                                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:38: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:16:
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:37: verify: Precondition conjunct is false: i != 0
    //@ requires i != 0;
                   ^
3 verification failures

public class MulLoop {

	//@ ensures \result != 0;
	//@ ensures \result != -1;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b != 0;
    //@ requires b <= -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:21: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:4:) in method mulLoop
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:21:
	//@ ensures \result != -1;
	    ^
2 verification failures

public class MulLoop {

	//@ ensures \result != 0;
	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b != 0;
    //@ requires b <= -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}


/home/max/Documents/JMLGPT/tmp/MulLoop.java:20: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/MulLoop.java:3:) in method mulLoop
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/MulLoop.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MulLoop.java:20:
	//@ ensures \result != 0;
	    ^
2 verification failures

public class MulLoop {

	public static int mulLoop(int a, int b) {
        int res = 0;
        int i = 0;
        if (b >= 0) {
            for(i = 0; i < b; i++) {
                __Loop_Invariant_Dummy1(a, b, res, i);
                res = res + a;
            }
            __Loop_Invariant_Dummy1(a, b, res, i);
        } else {
            for(i = 0; i < -b; i++) {
                __Loop_Invariant_Dummy2(a, b, res, i);
                res = res - a;
            }
            __Loop_Invariant_Dummy2(a, b, res, i);
        }
        return res;
    }

    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    public static void __Loop_Invariant_Dummy1(int a, int b, int res, int i) {}

    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b != 0;
    //@ requires b <= -1;
    public static void __Loop_Invariant_Dummy2(int a, int b, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        mulLoop(-4, 0);
        mulLoop(0, -4);
        mulLoop(4, 0);
        mulLoop(0, 4);
        mulLoop(-4, -4);
        mulLoop(4, 4);
        mulLoop(0, 0);
        mulLoop(-4, 4);
        mulLoop(4, -4);
        mulLoop(1, -1);
        mulLoop(-1, 1);
        mulLoop(1, 1);
        mulLoop(2, 1);
        mulLoop(1, 2);
    }

}



