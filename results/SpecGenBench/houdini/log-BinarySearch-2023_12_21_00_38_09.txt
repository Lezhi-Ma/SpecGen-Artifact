public class BinarySearch {

    //@ non_null
    //@ requires 6 < arr.length;
    //@ requires 6 <= arr.length;
    //@ requires 6 == arr.length;
    //@ requires 6 != arr.length;
    //@ requires 6 >= arr.length;
    //@ requires 6 > arr.length;
    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 10 < arr.length;
    //@ requires 10 <= arr.length;
    //@ requires 10 == arr.length;
    //@ requires 10 != arr.length;
    //@ requires 10 >= arr.length;
    //@ requires 10 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires key < -1;
    //@ requires key <= -1;
    //@ requires key == -1;
    //@ requires key != -1;
    //@ requires key >= -1;
    //@ requires key > -1;
    //@ requires key < arr.length;
    //@ requires key <= arr.length;
    //@ requires key == arr.length;
    //@ requires key != arr.length;
    //@ requires key >= arr.length;
    //@ requires key > arr.length;
    //@ requires key < 6;
    //@ requires key <= 6;
    //@ requires key == 6;
    //@ requires key != 6;
    //@ requires key >= 6;
    //@ requires key > 6;
    //@ requires key < 5;
    //@ requires key <= 5;
    //@ requires key == 5;
    //@ requires key != 5;
    //@ requires key >= 5;
    //@ requires key > 5;
    //@ requires key < 3;
    //@ requires key <= 3;
    //@ requires key == 3;
    //@ requires key != 3;
    //@ requires key >= 3;
    //@ requires key > 3;
    //@ requires key < 2;
    //@ requires key <= 2;
    //@ requires key == 2;
    //@ requires key != 2;
    //@ requires key >= 2;
    //@ requires key > 2;
    //@ requires key < 1;
    //@ requires key <= 1;
    //@ requires key == 1;
    //@ requires key != 1;
    //@ requires key >= 1;
    //@ requires key > 1;
    //@ requires key < 10;
    //@ requires key <= 10;
    //@ requires key == 10;
    //@ requires key != 10;
    //@ requires key >= 10;
    //@ requires key > 10;
    //@ requires key < 0;
    //@ requires key <= 0;
    //@ requires key == 0;
    //@ requires key != 0;
    //@ requires key >= 0;
    //@ requires key > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < arr.length;
    //@ ensures \result <= arr.length;
    //@ ensures \result == arr.length;
    //@ ensures \result != arr.length;
    //@ ensures \result >= arr.length;
    //@ ensures \result > arr.length;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < key;
    //@ ensures \result <= key;
    //@ ensures \result == key;
    //@ ensures \result != key;
    //@ ensures \result >= key;
    //@ ensures \result > key;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 10;
    //@ ensures \result <= 10;
    //@ ensures \result == 10;
    //@ ensures \result != 10;
    //@ ensures \result >= 10;
    //@ ensures \result > 10;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures arr == null ==> \result >= 0;
    //@ ensures arr != null ==> \result >= 0;
    //@ ensures key >= 0 ==> \result >= 0;
    public static int binarySearch(int[] arr, int key) {
        if (arr.length == 0) {
            return -1;
        } else {
            int low = 0;
            int high = arr.length;
            int mid =  high / 2;

            while (low < high && arr[mid] != key) {
                __Loop_Invariant_Dummy1(arr, key, low, high, mid);
                if (arr[mid] < key) {
                    low = mid + 1;
                } else {
                    high = mid;
                }
                mid = low + (high - low) / 2;
            }
	        __Loop_Invariant_Dummy1(arr, key, low, high, mid);
            if (low >= high) {
                return -1;
            }
            return mid;
        }
    }

    //@ non_null
    //@ requires 6 < arr.length;
    //@ requires 6 <= arr.length;
    //@ requires 6 == arr.length;
    //@ requires 6 != arr.length;
    //@ requires 6 >= arr.length;
    //@ requires 6 > arr.length;
    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 10 < arr.length;
    //@ requires 10 <= arr.length;
    //@ requires 10 == arr.length;
    //@ requires 10 != arr.length;
    //@ requires 10 >= arr.length;
    //@ requires 10 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires key < -1;
    //@ requires key <= -1;
    //@ requires key == -1;
    //@ requires key != -1;
    //@ requires key >= -1;
    //@ requires key > -1;
    //@ requires key < arr.length;
    //@ requires key <= arr.length;
    //@ requires key == arr.length;
    //@ requires key != arr.length;
    //@ requires key >= arr.length;
    //@ requires key > arr.length;
    //@ requires key < 6;
    //@ requires key <= 6;
    //@ requires key == 6;
    //@ requires key != 6;
    //@ requires key >= 6;
    //@ requires key > 6;
    //@ requires key < 5;
    //@ requires key <= 5;
    //@ requires key == 5;
    //@ requires key != 5;
    //@ requires key >= 5;
    //@ requires key > 5;
    //@ requires key < 3;
    //@ requires key <= 3;
    //@ requires key == 3;
    //@ requires key != 3;
    //@ requires key >= 3;
    //@ requires key > 3;
    //@ requires key < 2;
    //@ requires key <= 2;
    //@ requires key == 2;
    //@ requires key != 2;
    //@ requires key >= 2;
    //@ requires key > 2;
    //@ requires key < 1;
    //@ requires key <= 1;
    //@ requires key == 1;
    //@ requires key != 1;
    //@ requires key >= 1;
    //@ requires key > 1;
    //@ requires key < 10;
    //@ requires key <= 10;
    //@ requires key == 10;
    //@ requires key != 10;
    //@ requires key >= 10;
    //@ requires key > 10;
    //@ requires key < 0;
    //@ requires key <= 0;
    //@ requires key == 0;
    //@ requires key != 0;
    //@ requires key >= 0;
    //@ requires key > 0;
    //@ requires low < -1;
    //@ requires low <= -1;
    //@ requires low == -1;
    //@ requires low != -1;
    //@ requires low >= -1;
    //@ requires low > -1;
    //@ requires low < arr.length;
    //@ requires low <= arr.length;
    //@ requires low == arr.length;
    //@ requires low != arr.length;
    //@ requires low >= arr.length;
    //@ requires low > arr.length;
    //@ requires low < 6;
    //@ requires low <= 6;
    //@ requires low == 6;
    //@ requires low != 6;
    //@ requires low >= 6;
    //@ requires low > 6;
    //@ requires low < 5;
    //@ requires low <= 5;
    //@ requires low == 5;
    //@ requires low != 5;
    //@ requires low >= 5;
    //@ requires low > 5;
    //@ requires low < 3;
    //@ requires low <= 3;
    //@ requires low == 3;
    //@ requires low != 3;
    //@ requires low >= 3;
    //@ requires low > 3;
    //@ requires low < 2;
    //@ requires low <= 2;
    //@ requires low == 2;
    //@ requires low != 2;
    //@ requires low >= 2;
    //@ requires low > 2;
    //@ requires low < key;
    //@ requires low <= key;
    //@ requires low == key;
    //@ requires low != key;
    //@ requires low >= key;
    //@ requires low > key;
    //@ requires low < 1;
    //@ requires low <= 1;
    //@ requires low == 1;
    //@ requires low != 1;
    //@ requires low >= 1;
    //@ requires low > 1;
    //@ requires low < 10;
    //@ requires low <= 10;
    //@ requires low == 10;
    //@ requires low != 10;
    //@ requires low >= 10;
    //@ requires low > 10;
    //@ requires low < 0;
    //@ requires low <= 0;
    //@ requires low == 0;
    //@ requires low != 0;
    //@ requires low >= 0;
    //@ requires low > 0;
    //@ requires high < -1;
    //@ requires high <= -1;
    //@ requires high == -1;
    //@ requires high != -1;
    //@ requires high >= -1;
    //@ requires high > -1;
    //@ requires high < arr.length;
    //@ requires high <= arr.length;
    //@ requires high == arr.length;
    //@ requires high != arr.length;
    //@ requires high >= arr.length;
    //@ requires high > arr.length;
    //@ requires high < 6;
    //@ requires high <= 6;
    //@ requires high == 6;
    //@ requires high != 6;
    //@ requires high >= 6;
    //@ requires high > 6;
    //@ requires high < low;
    //@ requires high <= low;
    //@ requires high == low;
    //@ requires high != low;
    //@ requires high >= low;
    //@ requires high > low;
    //@ requires high < 5;
    //@ requires high <= 5;
    //@ requires high == 5;
    //@ requires high != 5;
    //@ requires high >= 5;
    //@ requires high > 5;
    //@ requires high < 3;
    //@ requires high <= 3;
    //@ requires high == 3;
    //@ requires high != 3;
    //@ requires high >= 3;
    //@ requires high > 3;
    //@ requires high < 2;
    //@ requires high <= 2;
    //@ requires high == 2;
    //@ requires high != 2;
    //@ requires high >= 2;
    //@ requires high > 2;
    //@ requires high < key;
    //@ requires high <= key;
    //@ requires high == key;
    //@ requires high != key;
    //@ requires high >= key;
    //@ requires high > key;
    //@ requires high < 1;
    //@ requires high <= 1;
    //@ requires high == 1;
    //@ requires high != 1;
    //@ requires high >= 1;
    //@ requires high > 1;
    //@ requires high < 10;
    //@ requires high <= 10;
    //@ requires high == 10;
    //@ requires high != 10;
    //@ requires high >= 10;
    //@ requires high > 10;
    //@ requires high < 0;
    //@ requires high <= 0;
    //@ requires high == 0;
    //@ requires high != 0;
    //@ requires high >= 0;
    //@ requires high > 0;
    //@ requires mid < -1;
    //@ requires mid <= -1;
    //@ requires mid == -1;
    //@ requires mid != -1;
    //@ requires mid >= -1;
    //@ requires mid > -1;
    //@ requires mid < high;
    //@ requires mid <= high;
    //@ requires mid == high;
    //@ requires mid != high;
    //@ requires mid >= high;
    //@ requires mid > high;
    //@ requires mid < arr.length;
    //@ requires mid <= arr.length;
    //@ requires mid == arr.length;
    //@ requires mid != arr.length;
    //@ requires mid >= arr.length;
    //@ requires mid > arr.length;
    //@ requires mid < 6;
    //@ requires mid <= 6;
    //@ requires mid == 6;
    //@ requires mid != 6;
    //@ requires mid >= 6;
    //@ requires mid > 6;
    //@ requires mid < low;
    //@ requires mid <= low;
    //@ requires mid == low;
    //@ requires mid != low;
    //@ requires mid >= low;
    //@ requires mid > low;
    //@ requires mid < 5;
    //@ requires mid <= 5;
    //@ requires mid == 5;
    //@ requires mid != 5;
    //@ requires mid >= 5;
    //@ requires mid > 5;
    //@ requires mid < 3;
    //@ requires mid <= 3;
    //@ requires mid == 3;
    //@ requires mid != 3;
    //@ requires mid >= 3;
    //@ requires mid > 3;
    //@ requires mid < 2;
    //@ requires mid <= 2;
    //@ requires mid == 2;
    //@ requires mid != 2;
    //@ requires mid >= 2;
    //@ requires mid > 2;
    //@ requires mid < key;
    //@ requires mid <= key;
    //@ requires mid == key;
    //@ requires mid != key;
    //@ requires mid >= key;
    //@ requires mid > key;
    //@ requires mid < 1;
    //@ requires mid <= 1;
    //@ requires mid == 1;
    //@ requires mid != 1;
    //@ requires mid >= 1;
    //@ requires mid > 1;
    //@ requires mid < 10;
    //@ requires mid <= 10;
    //@ requires mid == 10;
    //@ requires mid != 10;
    //@ requires mid >= 10;
    //@ requires mid > 10;
    //@ requires mid < 0;
    //@ requires mid <= 0;
    //@ requires mid == 0;
    //@ requires mid != 0;
    //@ requires mid >= 0;
    //@ requires mid > 0;
    public static void __Loop_Invariant_Dummy1(int[] arr, int key, int low, int high, int mid) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        binarySearch(arr, -2);
        arr = new int[]{0};
        binarySearch(arr, 0);
        arr = new int[]{-1, -2};
        binarySearch(arr, -1);
        arr = new int[]{2, 3};
        binarySearch(arr, 2);
        arr = new int[]{0, 1};
        binarySearch(arr, 1);
        arr = new int[]{-2, 3};
        binarySearch(arr, -3);
        arr = new int[]{0, 4};
        binarySearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        binarySearch(arr, 8);
        arr = new int[]{2, 3};
        binarySearch(arr, 90);
        arr = new int[]{0, 1, 213, 703, 713};
        binarySearch(arr, 703);
        arr = new int[]{-2, 2, 114, 514, 810, 114514};
        binarySearch(arr, 810);
        arr = new int[]{-2, 2, 114, 512, 513, 514, 810, 927, 999, 114514};
        binarySearch(arr, 114514);
    }
}


/home/max/Documents/JMLGPT/tmp/BinarySearch.java:3: error: No modifiers are allowed prior to a lightweight specification case
    //@ non_null
        ^
/home/max/Documents/JMLGPT/tmp/BinarySearch.java:188: error: No modifiers are allowed prior to a lightweight specification case
    //@ non_null
        ^
2 errors

public class BinarySearch {

    //@ requires 6 < arr.length;
    //@ requires 6 <= arr.length;
    //@ requires 6 == arr.length;
    //@ requires 6 != arr.length;
    //@ requires 6 >= arr.length;
    //@ requires 6 > arr.length;
    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 10 < arr.length;
    //@ requires 10 <= arr.length;
    //@ requires 10 == arr.length;
    //@ requires 10 != arr.length;
    //@ requires 10 >= arr.length;
    //@ requires 10 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires key < -1;
    //@ requires key <= -1;
    //@ requires key == -1;
    //@ requires key != -1;
    //@ requires key >= -1;
    //@ requires key > -1;
    //@ requires key < arr.length;
    //@ requires key <= arr.length;
    //@ requires key == arr.length;
    //@ requires key != arr.length;
    //@ requires key >= arr.length;
    //@ requires key > arr.length;
    //@ requires key < 6;
    //@ requires key <= 6;
    //@ requires key == 6;
    //@ requires key != 6;
    //@ requires key >= 6;
    //@ requires key > 6;
    //@ requires key < 5;
    //@ requires key <= 5;
    //@ requires key == 5;
    //@ requires key != 5;
    //@ requires key >= 5;
    //@ requires key > 5;
    //@ requires key < 3;
    //@ requires key <= 3;
    //@ requires key == 3;
    //@ requires key != 3;
    //@ requires key >= 3;
    //@ requires key > 3;
    //@ requires key < 2;
    //@ requires key <= 2;
    //@ requires key == 2;
    //@ requires key != 2;
    //@ requires key >= 2;
    //@ requires key > 2;
    //@ requires key < 1;
    //@ requires key <= 1;
    //@ requires key == 1;
    //@ requires key != 1;
    //@ requires key >= 1;
    //@ requires key > 1;
    //@ requires key < 10;
    //@ requires key <= 10;
    //@ requires key == 10;
    //@ requires key != 10;
    //@ requires key >= 10;
    //@ requires key > 10;
    //@ requires key < 0;
    //@ requires key <= 0;
    //@ requires key == 0;
    //@ requires key != 0;
    //@ requires key >= 0;
    //@ requires key > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < arr.length;
    //@ ensures \result <= arr.length;
    //@ ensures \result == arr.length;
    //@ ensures \result != arr.length;
    //@ ensures \result >= arr.length;
    //@ ensures \result > arr.length;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < key;
    //@ ensures \result <= key;
    //@ ensures \result == key;
    //@ ensures \result != key;
    //@ ensures \result >= key;
    //@ ensures \result > key;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 10;
    //@ ensures \result <= 10;
    //@ ensures \result == 10;
    //@ ensures \result != 10;
    //@ ensures \result >= 10;
    //@ ensures \result > 10;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures arr == null ==> \result >= 0;
    //@ ensures arr != null ==> \result >= 0;
    //@ ensures key >= 0 ==> \result >= 0;
    public static int binarySearch(int[] arr, int key) {
        if (arr.length == 0) {
            return -1;
        } else {
            int low = 0;
            int high = arr.length;
            int mid =  high / 2;

            while (low < high && arr[mid] != key) {
                __Loop_Invariant_Dummy1(arr, key, low, high, mid);
                if (arr[mid] < key) {
                    low = mid + 1;
                } else {
                    high = mid;
                }
                mid = low + (high - low) / 2;
            }
	        __Loop_Invariant_Dummy1(arr, key, low, high, mid);
            if (low >= high) {
                return -1;
            }
            return mid;
        }
    }

    //@ non_null
    //@ requires 6 < arr.length;
    //@ requires 6 <= arr.length;
    //@ requires 6 == arr.length;
    //@ requires 6 != arr.length;
    //@ requires 6 >= arr.length;
    //@ requires 6 > arr.length;
    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 10 < arr.length;
    //@ requires 10 <= arr.length;
    //@ requires 10 == arr.length;
    //@ requires 10 != arr.length;
    //@ requires 10 >= arr.length;
    //@ requires 10 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires key < -1;
    //@ requires key <= -1;
    //@ requires key == -1;
    //@ requires key != -1;
    //@ requires key >= -1;
    //@ requires key > -1;
    //@ requires key < arr.length;
    //@ requires key <= arr.length;
    //@ requires key == arr.length;
    //@ requires key != arr.length;
    //@ requires key >= arr.length;
    //@ requires key > arr.length;
    //@ requires key < 6;
    //@ requires key <= 6;
    //@ requires key == 6;
    //@ requires key != 6;
    //@ requires key >= 6;
    //@ requires key > 6;
    //@ requires key < 5;
    //@ requires key <= 5;
    //@ requires key == 5;
    //@ requires key != 5;
    //@ requires key >= 5;
    //@ requires key > 5;
    //@ requires key < 3;
    //@ requires key <= 3;
    //@ requires key == 3;
    //@ requires key != 3;
    //@ requires key >= 3;
    //@ requires key > 3;
    //@ requires key < 2;
    //@ requires key <= 2;
    //@ requires key == 2;
    //@ requires key != 2;
    //@ requires key >= 2;
    //@ requires key > 2;
    //@ requires key < 1;
    //@ requires key <= 1;
    //@ requires key == 1;
    //@ requires key != 1;
    //@ requires key >= 1;
    //@ requires key > 1;
    //@ requires key < 10;
    //@ requires key <= 10;
    //@ requires key == 10;
    //@ requires key != 10;
    //@ requires key >= 10;
    //@ requires key > 10;
    //@ requires key < 0;
    //@ requires key <= 0;
    //@ requires key == 0;
    //@ requires key != 0;
    //@ requires key >= 0;
    //@ requires key > 0;
    //@ requires low < -1;
    //@ requires low <= -1;
    //@ requires low == -1;
    //@ requires low != -1;
    //@ requires low >= -1;
    //@ requires low > -1;
    //@ requires low < arr.length;
    //@ requires low <= arr.length;
    //@ requires low == arr.length;
    //@ requires low != arr.length;
    //@ requires low >= arr.length;
    //@ requires low > arr.length;
    //@ requires low < 6;
    //@ requires low <= 6;
    //@ requires low == 6;
    //@ requires low != 6;
    //@ requires low >= 6;
    //@ requires low > 6;
    //@ requires low < 5;
    //@ requires low <= 5;
    //@ requires low == 5;
    //@ requires low != 5;
    //@ requires low >= 5;
    //@ requires low > 5;
    //@ requires low < 3;
    //@ requires low <= 3;
    //@ requires low == 3;
    //@ requires low != 3;
    //@ requires low >= 3;
    //@ requires low > 3;
    //@ requires low < 2;
    //@ requires low <= 2;
    //@ requires low == 2;
    //@ requires low != 2;
    //@ requires low >= 2;
    //@ requires low > 2;
    //@ requires low < key;
    //@ requires low <= key;
    //@ requires low == key;
    //@ requires low != key;
    //@ requires low >= key;
    //@ requires low > key;
    //@ requires low < 1;
    //@ requires low <= 1;
    //@ requires low == 1;
    //@ requires low != 1;
    //@ requires low >= 1;
    //@ requires low > 1;
    //@ requires low < 10;
    //@ requires low <= 10;
    //@ requires low == 10;
    //@ requires low != 10;
    //@ requires low >= 10;
    //@ requires low > 10;
    //@ requires low < 0;
    //@ requires low <= 0;
    //@ requires low == 0;
    //@ requires low != 0;
    //@ requires low >= 0;
    //@ requires low > 0;
    //@ requires high < -1;
    //@ requires high <= -1;
    //@ requires high == -1;
    //@ requires high != -1;
    //@ requires high >= -1;
    //@ requires high > -1;
    //@ requires high < arr.length;
    //@ requires high <= arr.length;
    //@ requires high == arr.length;
    //@ requires high != arr.length;
    //@ requires high >= arr.length;
    //@ requires high > arr.length;
    //@ requires high < 6;
    //@ requires high <= 6;
    //@ requires high == 6;
    //@ requires high != 6;
    //@ requires high >= 6;
    //@ requires high > 6;
    //@ requires high < low;
    //@ requires high <= low;
    //@ requires high == low;
    //@ requires high != low;
    //@ requires high >= low;
    //@ requires high > low;
    //@ requires high < 5;
    //@ requires high <= 5;
    //@ requires high == 5;
    //@ requires high != 5;
    //@ requires high >= 5;
    //@ requires high > 5;
    //@ requires high < 3;
    //@ requires high <= 3;
    //@ requires high == 3;
    //@ requires high != 3;
    //@ requires high >= 3;
    //@ requires high > 3;
    //@ requires high < 2;
    //@ requires high <= 2;
    //@ requires high == 2;
    //@ requires high != 2;
    //@ requires high >= 2;
    //@ requires high > 2;
    //@ requires high < key;
    //@ requires high <= key;
    //@ requires high == key;
    //@ requires high != key;
    //@ requires high >= key;
    //@ requires high > key;
    //@ requires high < 1;
    //@ requires high <= 1;
    //@ requires high == 1;
    //@ requires high != 1;
    //@ requires high >= 1;
    //@ requires high > 1;
    //@ requires high < 10;
    //@ requires high <= 10;
    //@ requires high == 10;
    //@ requires high != 10;
    //@ requires high >= 10;
    //@ requires high > 10;
    //@ requires high < 0;
    //@ requires high <= 0;
    //@ requires high == 0;
    //@ requires high != 0;
    //@ requires high >= 0;
    //@ requires high > 0;
    //@ requires mid < -1;
    //@ requires mid <= -1;
    //@ requires mid == -1;
    //@ requires mid != -1;
    //@ requires mid >= -1;
    //@ requires mid > -1;
    //@ requires mid < high;
    //@ requires mid <= high;
    //@ requires mid == high;
    //@ requires mid != high;
    //@ requires mid >= high;
    //@ requires mid > high;
    //@ requires mid < arr.length;
    //@ requires mid <= arr.length;
    //@ requires mid == arr.length;
    //@ requires mid != arr.length;
    //@ requires mid >= arr.length;
    //@ requires mid > arr.length;
    //@ requires mid < 6;
    //@ requires mid <= 6;
    //@ requires mid == 6;
    //@ requires mid != 6;
    //@ requires mid >= 6;
    //@ requires mid > 6;
    //@ requires mid < low;
    //@ requires mid <= low;
    //@ requires mid == low;
    //@ requires mid != low;
    //@ requires mid >= low;
    //@ requires mid > low;
    //@ requires mid < 5;
    //@ requires mid <= 5;
    //@ requires mid == 5;
    //@ requires mid != 5;
    //@ requires mid >= 5;
    //@ requires mid > 5;
    //@ requires mid < 3;
    //@ requires mid <= 3;
    //@ requires mid == 3;
    //@ requires mid != 3;
    //@ requires mid >= 3;
    //@ requires mid > 3;
    //@ requires mid < 2;
    //@ requires mid <= 2;
    //@ requires mid == 2;
    //@ requires mid != 2;
    //@ requires mid >= 2;
    //@ requires mid > 2;
    //@ requires mid < key;
    //@ requires mid <= key;
    //@ requires mid == key;
    //@ requires mid != key;
    //@ requires mid >= key;
    //@ requires mid > key;
    //@ requires mid < 1;
    //@ requires mid <= 1;
    //@ requires mid == 1;
    //@ requires mid != 1;
    //@ requires mid >= 1;
    //@ requires mid > 1;
    //@ requires mid < 10;
    //@ requires mid <= 10;
    //@ requires mid == 10;
    //@ requires mid != 10;
    //@ requires mid >= 10;
    //@ requires mid > 10;
    //@ requires mid < 0;
    //@ requires mid <= 0;
    //@ requires mid == 0;
    //@ requires mid != 0;
    //@ requires mid >= 0;
    //@ requires mid > 0;
    public static void __Loop_Invariant_Dummy1(int[] arr, int key, int low, int high, int mid) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        binarySearch(arr, -2);
        arr = new int[]{0};
        binarySearch(arr, 0);
        arr = new int[]{-1, -2};
        binarySearch(arr, -1);
        arr = new int[]{2, 3};
        binarySearch(arr, 2);
        arr = new int[]{0, 1};
        binarySearch(arr, 1);
        arr = new int[]{-2, 3};
        binarySearch(arr, -3);
        arr = new int[]{0, 4};
        binarySearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        binarySearch(arr, 8);
        arr = new int[]{2, 3};
        binarySearch(arr, 90);
        arr = new int[]{0, 1, 213, 703, 713};
        binarySearch(arr, 703);
        arr = new int[]{-2, 2, 114, 514, 810, 114514};
        binarySearch(arr, 810);
        arr = new int[]{-2, 2, 114, 512, 513, 514, 810, 927, 999, 114514};
        binarySearch(arr, 114514);
    }
}


/home/max/Documents/JMLGPT/tmp/BinarySearch.java:187: error: No modifiers are allowed prior to a lightweight specification case
    //@ non_null
        ^
1 error

public class BinarySearch {

    //@ requires 6 < arr.length;
    //@ requires 6 <= arr.length;
    //@ requires 6 == arr.length;
    //@ requires 6 != arr.length;
    //@ requires 6 >= arr.length;
    //@ requires 6 > arr.length;
    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 10 < arr.length;
    //@ requires 10 <= arr.length;
    //@ requires 10 == arr.length;
    //@ requires 10 != arr.length;
    //@ requires 10 >= arr.length;
    //@ requires 10 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires key < -1;
    //@ requires key <= -1;
    //@ requires key == -1;
    //@ requires key != -1;
    //@ requires key >= -1;
    //@ requires key > -1;
    //@ requires key < arr.length;
    //@ requires key <= arr.length;
    //@ requires key == arr.length;
    //@ requires key != arr.length;
    //@ requires key >= arr.length;
    //@ requires key > arr.length;
    //@ requires key < 6;
    //@ requires key <= 6;
    //@ requires key == 6;
    //@ requires key != 6;
    //@ requires key >= 6;
    //@ requires key > 6;
    //@ requires key < 5;
    //@ requires key <= 5;
    //@ requires key == 5;
    //@ requires key != 5;
    //@ requires key >= 5;
    //@ requires key > 5;
    //@ requires key < 3;
    //@ requires key <= 3;
    //@ requires key == 3;
    //@ requires key != 3;
    //@ requires key >= 3;
    //@ requires key > 3;
    //@ requires key < 2;
    //@ requires key <= 2;
    //@ requires key == 2;
    //@ requires key != 2;
    //@ requires key >= 2;
    //@ requires key > 2;
    //@ requires key < 1;
    //@ requires key <= 1;
    //@ requires key == 1;
    //@ requires key != 1;
    //@ requires key >= 1;
    //@ requires key > 1;
    //@ requires key < 10;
    //@ requires key <= 10;
    //@ requires key == 10;
    //@ requires key != 10;
    //@ requires key >= 10;
    //@ requires key > 10;
    //@ requires key < 0;
    //@ requires key <= 0;
    //@ requires key == 0;
    //@ requires key != 0;
    //@ requires key >= 0;
    //@ requires key > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < arr.length;
    //@ ensures \result <= arr.length;
    //@ ensures \result == arr.length;
    //@ ensures \result != arr.length;
    //@ ensures \result >= arr.length;
    //@ ensures \result > arr.length;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < key;
    //@ ensures \result <= key;
    //@ ensures \result == key;
    //@ ensures \result != key;
    //@ ensures \result >= key;
    //@ ensures \result > key;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 10;
    //@ ensures \result <= 10;
    //@ ensures \result == 10;
    //@ ensures \result != 10;
    //@ ensures \result >= 10;
    //@ ensures \result > 10;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures arr == null ==> \result >= 0;
    //@ ensures arr != null ==> \result >= 0;
    //@ ensures key >= 0 ==> \result >= 0;
    public static int binarySearch(int[] arr, int key) {
        if (arr.length == 0) {
            return -1;
        } else {
            int low = 0;
            int high = arr.length;
            int mid =  high / 2;

            while (low < high && arr[mid] != key) {
                __Loop_Invariant_Dummy1(arr, key, low, high, mid);
                if (arr[mid] < key) {
                    low = mid + 1;
                } else {
                    high = mid;
                }
                mid = low + (high - low) / 2;
            }
	        __Loop_Invariant_Dummy1(arr, key, low, high, mid);
            if (low >= high) {
                return -1;
            }
            return mid;
        }
    }

    //@ requires 6 < arr.length;
    //@ requires 6 <= arr.length;
    //@ requires 6 == arr.length;
    //@ requires 6 != arr.length;
    //@ requires 6 >= arr.length;
    //@ requires 6 > arr.length;
    //@ requires 5 < arr.length;
    //@ requires 5 <= arr.length;
    //@ requires 5 == arr.length;
    //@ requires 5 != arr.length;
    //@ requires 5 >= arr.length;
    //@ requires 5 > arr.length;
    //@ requires 3 < arr.length;
    //@ requires 3 <= arr.length;
    //@ requires 3 == arr.length;
    //@ requires 3 != arr.length;
    //@ requires 3 >= arr.length;
    //@ requires 3 > arr.length;
    //@ requires 2 < arr.length;
    //@ requires 2 <= arr.length;
    //@ requires 2 == arr.length;
    //@ requires 2 != arr.length;
    //@ requires 2 >= arr.length;
    //@ requires 2 > arr.length;
    //@ requires 10 < arr.length;
    //@ requires 10 <= arr.length;
    //@ requires 10 == arr.length;
    //@ requires 10 != arr.length;
    //@ requires 10 >= arr.length;
    //@ requires 10 > arr.length;
    //@ requires 1 < arr.length;
    //@ requires 1 <= arr.length;
    //@ requires 1 == arr.length;
    //@ requires 1 != arr.length;
    //@ requires 1 >= arr.length;
    //@ requires 1 > arr.length;
    //@ requires -1 < arr.length;
    //@ requires -1 <= arr.length;
    //@ requires -1 == arr.length;
    //@ requires -1 != arr.length;
    //@ requires -1 >= arr.length;
    //@ requires -1 > arr.length;
    //@ requires key < -1;
    //@ requires key <= -1;
    //@ requires key == -1;
    //@ requires key != -1;
    //@ requires key >= -1;
    //@ requires key > -1;
    //@ requires key < arr.length;
    //@ requires key <= arr.length;
    //@ requires key == arr.length;
    //@ requires key != arr.length;
    //@ requires key >= arr.length;
    //@ requires key > arr.length;
    //@ requires key < 6;
    //@ requires key <= 6;
    //@ requires key == 6;
    //@ requires key != 6;
    //@ requires key >= 6;
    //@ requires key > 6;
    //@ requires key < 5;
    //@ requires key <= 5;
    //@ requires key == 5;
    //@ requires key != 5;
    //@ requires key >= 5;
    //@ requires key > 5;
    //@ requires key < 3;
    //@ requires key <= 3;
    //@ requires key == 3;
    //@ requires key != 3;
    //@ requires key >= 3;
    //@ requires key > 3;
    //@ requires key < 2;
    //@ requires key <= 2;
    //@ requires key == 2;
    //@ requires key != 2;
    //@ requires key >= 2;
    //@ requires key > 2;
    //@ requires key < 1;
    //@ requires key <= 1;
    //@ requires key == 1;
    //@ requires key != 1;
    //@ requires key >= 1;
    //@ requires key > 1;
    //@ requires key < 10;
    //@ requires key <= 10;
    //@ requires key == 10;
    //@ requires key != 10;
    //@ requires key >= 10;
    //@ requires key > 10;
    //@ requires key < 0;
    //@ requires key <= 0;
    //@ requires key == 0;
    //@ requires key != 0;
    //@ requires key >= 0;
    //@ requires key > 0;
    //@ requires low < -1;
    //@ requires low <= -1;
    //@ requires low == -1;
    //@ requires low != -1;
    //@ requires low >= -1;
    //@ requires low > -1;
    //@ requires low < arr.length;
    //@ requires low <= arr.length;
    //@ requires low == arr.length;
    //@ requires low != arr.length;
    //@ requires low >= arr.length;
    //@ requires low > arr.length;
    //@ requires low < 6;
    //@ requires low <= 6;
    //@ requires low == 6;
    //@ requires low != 6;
    //@ requires low >= 6;
    //@ requires low > 6;
    //@ requires low < 5;
    //@ requires low <= 5;
    //@ requires low == 5;
    //@ requires low != 5;
    //@ requires low >= 5;
    //@ requires low > 5;
    //@ requires low < 3;
    //@ requires low <= 3;
    //@ requires low == 3;
    //@ requires low != 3;
    //@ requires low >= 3;
    //@ requires low > 3;
    //@ requires low < 2;
    //@ requires low <= 2;
    //@ requires low == 2;
    //@ requires low != 2;
    //@ requires low >= 2;
    //@ requires low > 2;
    //@ requires low < key;
    //@ requires low <= key;
    //@ requires low == key;
    //@ requires low != key;
    //@ requires low >= key;
    //@ requires low > key;
    //@ requires low < 1;
    //@ requires low <= 1;
    //@ requires low == 1;
    //@ requires low != 1;
    //@ requires low >= 1;
    //@ requires low > 1;
    //@ requires low < 10;
    //@ requires low <= 10;
    //@ requires low == 10;
    //@ requires low != 10;
    //@ requires low >= 10;
    //@ requires low > 10;
    //@ requires low < 0;
    //@ requires low <= 0;
    //@ requires low == 0;
    //@ requires low != 0;
    //@ requires low >= 0;
    //@ requires low > 0;
    //@ requires high < -1;
    //@ requires high <= -1;
    //@ requires high == -1;
    //@ requires high != -1;
    //@ requires high >= -1;
    //@ requires high > -1;
    //@ requires high < arr.length;
    //@ requires high <= arr.length;
    //@ requires high == arr.length;
    //@ requires high != arr.length;
    //@ requires high >= arr.length;
    //@ requires high > arr.length;
    //@ requires high < 6;
    //@ requires high <= 6;
    //@ requires high == 6;
    //@ requires high != 6;
    //@ requires high >= 6;
    //@ requires high > 6;
    //@ requires high < low;
    //@ requires high <= low;
    //@ requires high == low;
    //@ requires high != low;
    //@ requires high >= low;
    //@ requires high > low;
    //@ requires high < 5;
    //@ requires high <= 5;
    //@ requires high == 5;
    //@ requires high != 5;
    //@ requires high >= 5;
    //@ requires high > 5;
    //@ requires high < 3;
    //@ requires high <= 3;
    //@ requires high == 3;
    //@ requires high != 3;
    //@ requires high >= 3;
    //@ requires high > 3;
    //@ requires high < 2;
    //@ requires high <= 2;
    //@ requires high == 2;
    //@ requires high != 2;
    //@ requires high >= 2;
    //@ requires high > 2;
    //@ requires high < key;
    //@ requires high <= key;
    //@ requires high == key;
    //@ requires high != key;
    //@ requires high >= key;
    //@ requires high > key;
    //@ requires high < 1;
    //@ requires high <= 1;
    //@ requires high == 1;
    //@ requires high != 1;
    //@ requires high >= 1;
    //@ requires high > 1;
    //@ requires high < 10;
    //@ requires high <= 10;
    //@ requires high == 10;
    //@ requires high != 10;
    //@ requires high >= 10;
    //@ requires high > 10;
    //@ requires high < 0;
    //@ requires high <= 0;
    //@ requires high == 0;
    //@ requires high != 0;
    //@ requires high >= 0;
    //@ requires high > 0;
    //@ requires mid < -1;
    //@ requires mid <= -1;
    //@ requires mid == -1;
    //@ requires mid != -1;
    //@ requires mid >= -1;
    //@ requires mid > -1;
    //@ requires mid < high;
    //@ requires mid <= high;
    //@ requires mid == high;
    //@ requires mid != high;
    //@ requires mid >= high;
    //@ requires mid > high;
    //@ requires mid < arr.length;
    //@ requires mid <= arr.length;
    //@ requires mid == arr.length;
    //@ requires mid != arr.length;
    //@ requires mid >= arr.length;
    //@ requires mid > arr.length;
    //@ requires mid < 6;
    //@ requires mid <= 6;
    //@ requires mid == 6;
    //@ requires mid != 6;
    //@ requires mid >= 6;
    //@ requires mid > 6;
    //@ requires mid < low;
    //@ requires mid <= low;
    //@ requires mid == low;
    //@ requires mid != low;
    //@ requires mid >= low;
    //@ requires mid > low;
    //@ requires mid < 5;
    //@ requires mid <= 5;
    //@ requires mid == 5;
    //@ requires mid != 5;
    //@ requires mid >= 5;
    //@ requires mid > 5;
    //@ requires mid < 3;
    //@ requires mid <= 3;
    //@ requires mid == 3;
    //@ requires mid != 3;
    //@ requires mid >= 3;
    //@ requires mid > 3;
    //@ requires mid < 2;
    //@ requires mid <= 2;
    //@ requires mid == 2;
    //@ requires mid != 2;
    //@ requires mid >= 2;
    //@ requires mid > 2;
    //@ requires mid < key;
    //@ requires mid <= key;
    //@ requires mid == key;
    //@ requires mid != key;
    //@ requires mid >= key;
    //@ requires mid > key;
    //@ requires mid < 1;
    //@ requires mid <= 1;
    //@ requires mid == 1;
    //@ requires mid != 1;
    //@ requires mid >= 1;
    //@ requires mid > 1;
    //@ requires mid < 10;
    //@ requires mid <= 10;
    //@ requires mid == 10;
    //@ requires mid != 10;
    //@ requires mid >= 10;
    //@ requires mid > 10;
    //@ requires mid < 0;
    //@ requires mid <= 0;
    //@ requires mid == 0;
    //@ requires mid != 0;
    //@ requires mid >= 0;
    //@ requires mid > 0;
    public static void __Loop_Invariant_Dummy1(int[] arr, int key, int low, int high, int mid) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        binarySearch(arr, -2);
        arr = new int[]{0};
        binarySearch(arr, 0);
        arr = new int[]{-1, -2};
        binarySearch(arr, -1);
        arr = new int[]{2, 3};
        binarySearch(arr, 2);
        arr = new int[]{0, 1};
        binarySearch(arr, 1);
        arr = new int[]{-2, 3};
        binarySearch(arr, -3);
        arr = new int[]{0, 4};
        binarySearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        binarySearch(arr, 8);
        arr = new int[]{2, 3};
        binarySearch(arr, 90);
        arr = new int[]{0, 1, 213, 703, 713};
        binarySearch(arr, 703);
        arr = new int[]{-2, 2, 114, 514, 810, 114514};
        binarySearch(arr, 810);
        arr = new int[]{-2, 2, 114, 512, 513, 514, 810, 927, 999, 114514};
        binarySearch(arr, 114514);
    }
}


java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:704)
	at java.base/java.util.HashMap.putVal(HashMap.java:629)
	at java.base/java.util.HashMap.putMapEntries(HashMap.java:516)
	at java.base/java.util.HashMap.putAll(HashMap.java:785)
	at jdk.compiler/org.jmlspecs.openjml.esc.BasicBlocker2$VarMap.putAll(BasicBlocker2.java:2513)
	at jdk.compiler/org.jmlspecs.openjml.esc.BasicBlocker2.initMap(BasicBlocker2.java:792)
	at jdk.compiler/org.jmlspecs.openjml.esc.BasicBlocker2.setCurrentBlock(BasicBlocker2.java:545)
	at jdk.compiler/org.jmlspecs.openjml.esc.BasicBlocker2.setCurrentBlock(BasicBlocker2.java:152)
	at jdk.compiler/org.jmlspecs.openjml.esc.BasicBlockerParent.startBlock(BasicBlockerParent.java:463)
	at jdk.compiler/org.jmlspecs.openjml.esc.BasicBlockerParent.processBlock(BasicBlockerParent.java:404)
	at jdk.compiler/org.jmlspecs.openjml.esc.BasicBlockerParent.processBlocks(BasicBlockerParent.java:352)
	at jdk.compiler/org.jmlspecs.openjml.esc.BasicBlockerParent.visitTry(BasicBlockerParent.java:1048)
	at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCTry.accept(JCTree.java:1401)
	at jdk.compiler/org.jmlspecs.openjml.esc.BasicBlockerParent.processStats(BasicBlockerParent.java:426)
	at jdk.compiler/org.jmlspecs.openjml.esc.BasicBlockerParent.processCurrentBlock(BasicBlockerParent.java:418)
	at jdk.compiler/org.jmlspecs.openjml.esc.BasicBlockerParent.processBlock(BasicBlockerParent.java:405)
	at jdk.compiler/org.jmlspecs.openjml.esc.BasicBlockerParent.processBlocks(BasicBlockerParent.java:352)
	at jdk.compiler/org.jmlspecs.openjml.esc.BasicBlocker2.convertMethodBody(BasicBlocker2.java:617)
	at jdk.compiler/org.jmlspecs.openjml.esc.MethodProverSMT.prove(MethodProverSMT.java:361)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlEsc.doMethod(JmlEsc.java:329)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlEsc.visitMethodDef(JmlEsc.java:221)
	at jdk.compiler/org.jmlspecs.openjml.visitors.JmlTreeScanner.visitJmlMethodDecl(JmlTreeScanner.java:238)
	at jdk.compiler/org.jmlspecs.openjml.JmlTree$JmlMethodDecl.accept(JmlTree.java:1383)
	at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.scan(TreeScanner.java:49)
	at jdk.compiler/org.jmlspecs.openjml.visitors.JmlTreeScanner.scan(JmlTreeScanner.java:70)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlEsc.visitClassDef(JmlEsc.java:169)
	at jdk.compiler/org.jmlspecs.openjml.visitors.JmlTreeScanner.visitJmlClassDecl(JmlTreeScanner.java:106)
	at jdk.compiler/org.jmlspecs.openjml.JmlTree$JmlClassDecl.accept(JmlTree.java:1295)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlEsc.check(JmlEsc.java:117)
	at jdk.compiler/com.sun.tools.javac.main.JmlCompiler.esc(JmlCompiler.java:536)
	at jdk.compiler/com.sun.tools.javac.main.JmlCompiler.flow(JmlCompiler.java:362)
	at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.compile(JavaCompiler.java:936)
/home/max/Documents/JMLGPT/tmp/BinarySearch.java:484: error: A catastrophic JML internal error occurred.  Please report the bug with as much information as you can.
    public static void main(String[] args) {
                       ^
  Reason: Prover aborted with exception: ZZZZZ
1 error

