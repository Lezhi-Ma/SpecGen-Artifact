class IsOneBitCharacter {
    //@ non_null
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 == bits.length;
    //@ requires -1 != bits.length;
    //@ requires -1 >= bits.length;
    //@ requires -1 > bits.length;
    //@ requires 8 < bits.length;
    //@ requires 8 <= bits.length;
    //@ requires 8 == bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 < bits.length;
    //@ requires 7 <= bits.length;
    //@ requires 7 == bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 < bits.length;
    //@ requires 6 <= bits.length;
    //@ requires 6 == bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 < bits.length;
    //@ requires 5 <= bits.length;
    //@ requires 5 == bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 < bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 != bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 4 > bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 == bits.length;
    //@ requires 3 != bits.length;
    //@ requires 3 >= bits.length;
    //@ requires 3 > bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 == bits.length;
    //@ requires 2 != bits.length;
    //@ requires 2 >= bits.length;
    //@ requires 2 > bits.length;
    //@ requires 11 < bits.length;
    //@ requires 11 <= bits.length;
    //@ requires 11 == bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 < bits.length;
    //@ requires 10 <= bits.length;
    //@ requires 10 == bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 == bits.length;
    //@ requires 1 != bits.length;
    //@ requires 1 >= bits.length;
    //@ requires 1 > bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ non_null
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 == bits.length;
    //@ requires -1 != bits.length;
    //@ requires -1 >= bits.length;
    //@ requires -1 > bits.length;
    //@ requires 8 < bits.length;
    //@ requires 8 <= bits.length;
    //@ requires 8 == bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 < bits.length;
    //@ requires 7 <= bits.length;
    //@ requires 7 == bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 < bits.length;
    //@ requires 6 <= bits.length;
    //@ requires 6 == bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 < bits.length;
    //@ requires 5 <= bits.length;
    //@ requires 5 == bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 < bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 != bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 4 > bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 == bits.length;
    //@ requires 3 != bits.length;
    //@ requires 3 >= bits.length;
    //@ requires 3 > bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 == bits.length;
    //@ requires 2 != bits.length;
    //@ requires 2 >= bits.length;
    //@ requires 2 > bits.length;
    //@ requires 11 < bits.length;
    //@ requires 11 <= bits.length;
    //@ requires 11 == bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 < bits.length;
    //@ requires 10 <= bits.length;
    //@ requires 10 == bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 == bits.length;
    //@ requires 1 != bits.length;
    //@ requires 1 >= bits.length;
    //@ requires 1 > bits.length;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n == 8;
    //@ requires n != 8;
    //@ requires n >= 8;
    //@ requires n > 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n == 7;
    //@ requires n != 7;
    //@ requires n >= 7;
    //@ requires n > 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n == 6;
    //@ requires n != 6;
    //@ requires n >= 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n == 11;
    //@ requires n != 11;
    //@ requires n >= 11;
    //@ requires n > 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n == 10;
    //@ requires n != 10;
    //@ requires n >= 10;
    //@ requires n > 10;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < bits.length;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n != bits.length;
    //@ requires n >= bits.length;
    //@ requires n > bits.length;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 8;
    //@ requires i <= 8;
    //@ requires i == 8;
    //@ requires i != 8;
    //@ requires i >= 8;
    //@ requires i > 8;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:2: error: No modifiers are allowed prior to a lightweight specification case
    //@ non_null
        ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:117: error: No modifiers are allowed prior to a lightweight specification case
    //@ non_null
        ^
2 errors

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 == bits.length;
    //@ requires -1 != bits.length;
    //@ requires -1 >= bits.length;
    //@ requires -1 > bits.length;
    //@ requires 8 < bits.length;
    //@ requires 8 <= bits.length;
    //@ requires 8 == bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 < bits.length;
    //@ requires 7 <= bits.length;
    //@ requires 7 == bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 < bits.length;
    //@ requires 6 <= bits.length;
    //@ requires 6 == bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 < bits.length;
    //@ requires 5 <= bits.length;
    //@ requires 5 == bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 < bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 != bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 4 > bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 == bits.length;
    //@ requires 3 != bits.length;
    //@ requires 3 >= bits.length;
    //@ requires 3 > bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 == bits.length;
    //@ requires 2 != bits.length;
    //@ requires 2 >= bits.length;
    //@ requires 2 > bits.length;
    //@ requires 11 < bits.length;
    //@ requires 11 <= bits.length;
    //@ requires 11 == bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 < bits.length;
    //@ requires 10 <= bits.length;
    //@ requires 10 == bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 == bits.length;
    //@ requires 1 != bits.length;
    //@ requires 1 >= bits.length;
    //@ requires 1 > bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ non_null
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 == bits.length;
    //@ requires -1 != bits.length;
    //@ requires -1 >= bits.length;
    //@ requires -1 > bits.length;
    //@ requires 8 < bits.length;
    //@ requires 8 <= bits.length;
    //@ requires 8 == bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 < bits.length;
    //@ requires 7 <= bits.length;
    //@ requires 7 == bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 < bits.length;
    //@ requires 6 <= bits.length;
    //@ requires 6 == bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 < bits.length;
    //@ requires 5 <= bits.length;
    //@ requires 5 == bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 < bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 != bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 4 > bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 == bits.length;
    //@ requires 3 != bits.length;
    //@ requires 3 >= bits.length;
    //@ requires 3 > bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 == bits.length;
    //@ requires 2 != bits.length;
    //@ requires 2 >= bits.length;
    //@ requires 2 > bits.length;
    //@ requires 11 < bits.length;
    //@ requires 11 <= bits.length;
    //@ requires 11 == bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 < bits.length;
    //@ requires 10 <= bits.length;
    //@ requires 10 == bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 == bits.length;
    //@ requires 1 != bits.length;
    //@ requires 1 >= bits.length;
    //@ requires 1 > bits.length;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n == 8;
    //@ requires n != 8;
    //@ requires n >= 8;
    //@ requires n > 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n == 7;
    //@ requires n != 7;
    //@ requires n >= 7;
    //@ requires n > 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n == 6;
    //@ requires n != 6;
    //@ requires n >= 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n == 11;
    //@ requires n != 11;
    //@ requires n >= 11;
    //@ requires n > 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n == 10;
    //@ requires n != 10;
    //@ requires n >= 10;
    //@ requires n > 10;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < bits.length;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n != bits.length;
    //@ requires n >= bits.length;
    //@ requires n > bits.length;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 8;
    //@ requires i <= 8;
    //@ requires i == 8;
    //@ requires i != 8;
    //@ requires i >= 8;
    //@ requires i > 8;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:116: error: No modifiers are allowed prior to a lightweight specification case
    //@ non_null
        ^
1 error

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 == bits.length;
    //@ requires -1 != bits.length;
    //@ requires -1 >= bits.length;
    //@ requires -1 > bits.length;
    //@ requires 8 < bits.length;
    //@ requires 8 <= bits.length;
    //@ requires 8 == bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 < bits.length;
    //@ requires 7 <= bits.length;
    //@ requires 7 == bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 < bits.length;
    //@ requires 6 <= bits.length;
    //@ requires 6 == bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 < bits.length;
    //@ requires 5 <= bits.length;
    //@ requires 5 == bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 < bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 != bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 4 > bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 == bits.length;
    //@ requires 3 != bits.length;
    //@ requires 3 >= bits.length;
    //@ requires 3 > bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 == bits.length;
    //@ requires 2 != bits.length;
    //@ requires 2 >= bits.length;
    //@ requires 2 > bits.length;
    //@ requires 11 < bits.length;
    //@ requires 11 <= bits.length;
    //@ requires 11 == bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 < bits.length;
    //@ requires 10 <= bits.length;
    //@ requires 10 == bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 == bits.length;
    //@ requires 1 != bits.length;
    //@ requires 1 >= bits.length;
    //@ requires 1 > bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 == bits.length;
    //@ requires -1 != bits.length;
    //@ requires -1 >= bits.length;
    //@ requires -1 > bits.length;
    //@ requires 8 < bits.length;
    //@ requires 8 <= bits.length;
    //@ requires 8 == bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 < bits.length;
    //@ requires 7 <= bits.length;
    //@ requires 7 == bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 < bits.length;
    //@ requires 6 <= bits.length;
    //@ requires 6 == bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 < bits.length;
    //@ requires 5 <= bits.length;
    //@ requires 5 == bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 < bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 != bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 4 > bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 == bits.length;
    //@ requires 3 != bits.length;
    //@ requires 3 >= bits.length;
    //@ requires 3 > bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 == bits.length;
    //@ requires 2 != bits.length;
    //@ requires 2 >= bits.length;
    //@ requires 2 > bits.length;
    //@ requires 11 < bits.length;
    //@ requires 11 <= bits.length;
    //@ requires 11 == bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 < bits.length;
    //@ requires 10 <= bits.length;
    //@ requires 10 == bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 == bits.length;
    //@ requires 1 != bits.length;
    //@ requires 1 >= bits.length;
    //@ requires 1 > bits.length;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n == 8;
    //@ requires n != 8;
    //@ requires n >= 8;
    //@ requires n > 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n == 7;
    //@ requires n != 7;
    //@ requires n >= 7;
    //@ requires n > 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n == 6;
    //@ requires n != 6;
    //@ requires n >= 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n == 11;
    //@ requires n != 11;
    //@ requires n >= 11;
    //@ requires n > 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n == 10;
    //@ requires n != 10;
    //@ requires n >= 10;
    //@ requires n > 10;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < bits.length;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n != bits.length;
    //@ requires n >= bits.length;
    //@ requires n > bits.length;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 8;
    //@ requires i <= 8;
    //@ requires i == 8;
    //@ requires i != 8;
    //@ requires i >= 8;
    //@ requires i > 8;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:87: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:74:) in method main
        isOneBitCharacter(arr);
                         ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:74: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:87:
    public static boolean isOneBitCharacter(int[] bits) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:4: verify: Precondition conjunct is false: -1 == bits.length
    //@ requires -1 == bits.length;
                    ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires -1 >= bits.length;
    //@ requires -1 > bits.length;
    //@ requires 8 < bits.length;
    //@ requires 8 <= bits.length;
    //@ requires 8 == bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 < bits.length;
    //@ requires 7 <= bits.length;
    //@ requires 7 == bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 < bits.length;
    //@ requires 6 <= bits.length;
    //@ requires 6 == bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 < bits.length;
    //@ requires 5 <= bits.length;
    //@ requires 5 == bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 < bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 != bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 4 > bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 == bits.length;
    //@ requires 3 != bits.length;
    //@ requires 3 >= bits.length;
    //@ requires 3 > bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 == bits.length;
    //@ requires 2 != bits.length;
    //@ requires 2 >= bits.length;
    //@ requires 2 > bits.length;
    //@ requires 11 < bits.length;
    //@ requires 11 <= bits.length;
    //@ requires 11 == bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 < bits.length;
    //@ requires 10 <= bits.length;
    //@ requires 10 == bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 == bits.length;
    //@ requires 1 != bits.length;
    //@ requires 1 >= bits.length;
    //@ requires 1 > bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 == bits.length;
    //@ requires -1 != bits.length;
    //@ requires -1 >= bits.length;
    //@ requires -1 > bits.length;
    //@ requires 8 < bits.length;
    //@ requires 8 <= bits.length;
    //@ requires 8 == bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 < bits.length;
    //@ requires 7 <= bits.length;
    //@ requires 7 == bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 < bits.length;
    //@ requires 6 <= bits.length;
    //@ requires 6 == bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 < bits.length;
    //@ requires 5 <= bits.length;
    //@ requires 5 == bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 < bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 != bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 4 > bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 == bits.length;
    //@ requires 3 != bits.length;
    //@ requires 3 >= bits.length;
    //@ requires 3 > bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 == bits.length;
    //@ requires 2 != bits.length;
    //@ requires 2 >= bits.length;
    //@ requires 2 > bits.length;
    //@ requires 11 < bits.length;
    //@ requires 11 <= bits.length;
    //@ requires 11 == bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 < bits.length;
    //@ requires 10 <= bits.length;
    //@ requires 10 == bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 == bits.length;
    //@ requires 1 != bits.length;
    //@ requires 1 >= bits.length;
    //@ requires 1 > bits.length;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n == 8;
    //@ requires n != 8;
    //@ requires n >= 8;
    //@ requires n > 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n == 7;
    //@ requires n != 7;
    //@ requires n >= 7;
    //@ requires n > 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n == 6;
    //@ requires n != 6;
    //@ requires n >= 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n == 11;
    //@ requires n != 11;
    //@ requires n >= 11;
    //@ requires n > 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n == 10;
    //@ requires n != 10;
    //@ requires n >= 10;
    //@ requires n > 10;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < bits.length;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n != bits.length;
    //@ requires n >= bits.length;
    //@ requires n > bits.length;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 8;
    //@ requires i <= 8;
    //@ requires i == 8;
    //@ requires i != 8;
    //@ requires i >= 8;
    //@ requires i > 8;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:86: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:73:) in method main
        isOneBitCharacter(arr);
                         ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:73: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:86:
    public static boolean isOneBitCharacter(int[] bits) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:5: verify: Precondition conjunct is false: -1 >= bits.length
    //@ requires -1 >= bits.length;
                    ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires -1 > bits.length;
    //@ requires 8 < bits.length;
    //@ requires 8 <= bits.length;
    //@ requires 8 == bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 < bits.length;
    //@ requires 7 <= bits.length;
    //@ requires 7 == bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 < bits.length;
    //@ requires 6 <= bits.length;
    //@ requires 6 == bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 < bits.length;
    //@ requires 5 <= bits.length;
    //@ requires 5 == bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 < bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 != bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 4 > bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 == bits.length;
    //@ requires 3 != bits.length;
    //@ requires 3 >= bits.length;
    //@ requires 3 > bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 == bits.length;
    //@ requires 2 != bits.length;
    //@ requires 2 >= bits.length;
    //@ requires 2 > bits.length;
    //@ requires 11 < bits.length;
    //@ requires 11 <= bits.length;
    //@ requires 11 == bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 < bits.length;
    //@ requires 10 <= bits.length;
    //@ requires 10 == bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 == bits.length;
    //@ requires 1 != bits.length;
    //@ requires 1 >= bits.length;
    //@ requires 1 > bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 == bits.length;
    //@ requires -1 != bits.length;
    //@ requires -1 >= bits.length;
    //@ requires -1 > bits.length;
    //@ requires 8 < bits.length;
    //@ requires 8 <= bits.length;
    //@ requires 8 == bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 < bits.length;
    //@ requires 7 <= bits.length;
    //@ requires 7 == bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 < bits.length;
    //@ requires 6 <= bits.length;
    //@ requires 6 == bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 < bits.length;
    //@ requires 5 <= bits.length;
    //@ requires 5 == bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 < bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 != bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 4 > bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 == bits.length;
    //@ requires 3 != bits.length;
    //@ requires 3 >= bits.length;
    //@ requires 3 > bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 == bits.length;
    //@ requires 2 != bits.length;
    //@ requires 2 >= bits.length;
    //@ requires 2 > bits.length;
    //@ requires 11 < bits.length;
    //@ requires 11 <= bits.length;
    //@ requires 11 == bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 < bits.length;
    //@ requires 10 <= bits.length;
    //@ requires 10 == bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 == bits.length;
    //@ requires 1 != bits.length;
    //@ requires 1 >= bits.length;
    //@ requires 1 > bits.length;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n == 8;
    //@ requires n != 8;
    //@ requires n >= 8;
    //@ requires n > 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n == 7;
    //@ requires n != 7;
    //@ requires n >= 7;
    //@ requires n > 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n == 6;
    //@ requires n != 6;
    //@ requires n >= 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n == 11;
    //@ requires n != 11;
    //@ requires n >= 11;
    //@ requires n > 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n == 10;
    //@ requires n != 10;
    //@ requires n >= 10;
    //@ requires n > 10;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < bits.length;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n != bits.length;
    //@ requires n >= bits.length;
    //@ requires n > bits.length;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 8;
    //@ requires i <= 8;
    //@ requires i == 8;
    //@ requires i != 8;
    //@ requires i >= 8;
    //@ requires i > 8;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:85: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:72:) in method main
        isOneBitCharacter(arr);
                         ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:72: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:85:
    public static boolean isOneBitCharacter(int[] bits) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:5: verify: Precondition conjunct is false: -1 > bits.length
    //@ requires -1 > bits.length;
                    ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 < bits.length;
    //@ requires 8 <= bits.length;
    //@ requires 8 == bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 < bits.length;
    //@ requires 7 <= bits.length;
    //@ requires 7 == bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 < bits.length;
    //@ requires 6 <= bits.length;
    //@ requires 6 == bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 < bits.length;
    //@ requires 5 <= bits.length;
    //@ requires 5 == bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 < bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 != bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 4 > bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 == bits.length;
    //@ requires 3 != bits.length;
    //@ requires 3 >= bits.length;
    //@ requires 3 > bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 == bits.length;
    //@ requires 2 != bits.length;
    //@ requires 2 >= bits.length;
    //@ requires 2 > bits.length;
    //@ requires 11 < bits.length;
    //@ requires 11 <= bits.length;
    //@ requires 11 == bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 < bits.length;
    //@ requires 10 <= bits.length;
    //@ requires 10 == bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 == bits.length;
    //@ requires 1 != bits.length;
    //@ requires 1 >= bits.length;
    //@ requires 1 > bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 == bits.length;
    //@ requires -1 != bits.length;
    //@ requires -1 >= bits.length;
    //@ requires -1 > bits.length;
    //@ requires 8 < bits.length;
    //@ requires 8 <= bits.length;
    //@ requires 8 == bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 < bits.length;
    //@ requires 7 <= bits.length;
    //@ requires 7 == bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 < bits.length;
    //@ requires 6 <= bits.length;
    //@ requires 6 == bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 < bits.length;
    //@ requires 5 <= bits.length;
    //@ requires 5 == bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 < bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 != bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 4 > bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 == bits.length;
    //@ requires 3 != bits.length;
    //@ requires 3 >= bits.length;
    //@ requires 3 > bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 == bits.length;
    //@ requires 2 != bits.length;
    //@ requires 2 >= bits.length;
    //@ requires 2 > bits.length;
    //@ requires 11 < bits.length;
    //@ requires 11 <= bits.length;
    //@ requires 11 == bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 < bits.length;
    //@ requires 10 <= bits.length;
    //@ requires 10 == bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 == bits.length;
    //@ requires 1 != bits.length;
    //@ requires 1 >= bits.length;
    //@ requires 1 > bits.length;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n == 8;
    //@ requires n != 8;
    //@ requires n >= 8;
    //@ requires n > 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n == 7;
    //@ requires n != 7;
    //@ requires n >= 7;
    //@ requires n > 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n == 6;
    //@ requires n != 6;
    //@ requires n >= 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n == 11;
    //@ requires n != 11;
    //@ requires n >= 11;
    //@ requires n > 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n == 10;
    //@ requires n != 10;
    //@ requires n >= 10;
    //@ requires n > 10;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < bits.length;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n != bits.length;
    //@ requires n >= bits.length;
    //@ requires n > bits.length;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 8;
    //@ requires i <= 8;
    //@ requires i == 8;
    //@ requires i != 8;
    //@ requires i >= 8;
    //@ requires i > 8;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:84: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:71:) in method main
        isOneBitCharacter(arr);
                         ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:71: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:84:
    public static boolean isOneBitCharacter(int[] bits) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:5: verify: Precondition conjunct is false: 8 < bits.length
    //@ requires 8 < bits.length;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 <= bits.length;
    //@ requires 8 == bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 < bits.length;
    //@ requires 7 <= bits.length;
    //@ requires 7 == bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 < bits.length;
    //@ requires 6 <= bits.length;
    //@ requires 6 == bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 < bits.length;
    //@ requires 5 <= bits.length;
    //@ requires 5 == bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 < bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 != bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 4 > bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 == bits.length;
    //@ requires 3 != bits.length;
    //@ requires 3 >= bits.length;
    //@ requires 3 > bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 == bits.length;
    //@ requires 2 != bits.length;
    //@ requires 2 >= bits.length;
    //@ requires 2 > bits.length;
    //@ requires 11 < bits.length;
    //@ requires 11 <= bits.length;
    //@ requires 11 == bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 < bits.length;
    //@ requires 10 <= bits.length;
    //@ requires 10 == bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 == bits.length;
    //@ requires 1 != bits.length;
    //@ requires 1 >= bits.length;
    //@ requires 1 > bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 == bits.length;
    //@ requires -1 != bits.length;
    //@ requires -1 >= bits.length;
    //@ requires -1 > bits.length;
    //@ requires 8 < bits.length;
    //@ requires 8 <= bits.length;
    //@ requires 8 == bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 < bits.length;
    //@ requires 7 <= bits.length;
    //@ requires 7 == bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 < bits.length;
    //@ requires 6 <= bits.length;
    //@ requires 6 == bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 < bits.length;
    //@ requires 5 <= bits.length;
    //@ requires 5 == bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 < bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 != bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 4 > bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 == bits.length;
    //@ requires 3 != bits.length;
    //@ requires 3 >= bits.length;
    //@ requires 3 > bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 == bits.length;
    //@ requires 2 != bits.length;
    //@ requires 2 >= bits.length;
    //@ requires 2 > bits.length;
    //@ requires 11 < bits.length;
    //@ requires 11 <= bits.length;
    //@ requires 11 == bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 < bits.length;
    //@ requires 10 <= bits.length;
    //@ requires 10 == bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 == bits.length;
    //@ requires 1 != bits.length;
    //@ requires 1 >= bits.length;
    //@ requires 1 > bits.length;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n == 8;
    //@ requires n != 8;
    //@ requires n >= 8;
    //@ requires n > 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n == 7;
    //@ requires n != 7;
    //@ requires n >= 7;
    //@ requires n > 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n == 6;
    //@ requires n != 6;
    //@ requires n >= 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n == 11;
    //@ requires n != 11;
    //@ requires n >= 11;
    //@ requires n > 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n == 10;
    //@ requires n != 10;
    //@ requires n >= 10;
    //@ requires n > 10;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < bits.length;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n != bits.length;
    //@ requires n >= bits.length;
    //@ requires n > bits.length;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 8;
    //@ requires i <= 8;
    //@ requires i == 8;
    //@ requires i != 8;
    //@ requires i >= 8;
    //@ requires i > 8;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:83: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:70:) in method main
        isOneBitCharacter(arr);
                         ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:70: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:83:
    public static boolean isOneBitCharacter(int[] bits) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:5: verify: Precondition conjunct is false: 8 <= bits.length
    //@ requires 8 <= bits.length;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 == bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 < bits.length;
    //@ requires 7 <= bits.length;
    //@ requires 7 == bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 < bits.length;
    //@ requires 6 <= bits.length;
    //@ requires 6 == bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 < bits.length;
    //@ requires 5 <= bits.length;
    //@ requires 5 == bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 < bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 != bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 4 > bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 == bits.length;
    //@ requires 3 != bits.length;
    //@ requires 3 >= bits.length;
    //@ requires 3 > bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 == bits.length;
    //@ requires 2 != bits.length;
    //@ requires 2 >= bits.length;
    //@ requires 2 > bits.length;
    //@ requires 11 < bits.length;
    //@ requires 11 <= bits.length;
    //@ requires 11 == bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 < bits.length;
    //@ requires 10 <= bits.length;
    //@ requires 10 == bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 == bits.length;
    //@ requires 1 != bits.length;
    //@ requires 1 >= bits.length;
    //@ requires 1 > bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 == bits.length;
    //@ requires -1 != bits.length;
    //@ requires -1 >= bits.length;
    //@ requires -1 > bits.length;
    //@ requires 8 < bits.length;
    //@ requires 8 <= bits.length;
    //@ requires 8 == bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 < bits.length;
    //@ requires 7 <= bits.length;
    //@ requires 7 == bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 < bits.length;
    //@ requires 6 <= bits.length;
    //@ requires 6 == bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 < bits.length;
    //@ requires 5 <= bits.length;
    //@ requires 5 == bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 < bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 != bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 4 > bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 == bits.length;
    //@ requires 3 != bits.length;
    //@ requires 3 >= bits.length;
    //@ requires 3 > bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 == bits.length;
    //@ requires 2 != bits.length;
    //@ requires 2 >= bits.length;
    //@ requires 2 > bits.length;
    //@ requires 11 < bits.length;
    //@ requires 11 <= bits.length;
    //@ requires 11 == bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 < bits.length;
    //@ requires 10 <= bits.length;
    //@ requires 10 == bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 == bits.length;
    //@ requires 1 != bits.length;
    //@ requires 1 >= bits.length;
    //@ requires 1 > bits.length;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n == 8;
    //@ requires n != 8;
    //@ requires n >= 8;
    //@ requires n > 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n == 7;
    //@ requires n != 7;
    //@ requires n >= 7;
    //@ requires n > 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n == 6;
    //@ requires n != 6;
    //@ requires n >= 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n == 11;
    //@ requires n != 11;
    //@ requires n >= 11;
    //@ requires n > 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n == 10;
    //@ requires n != 10;
    //@ requires n >= 10;
    //@ requires n > 10;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < bits.length;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n != bits.length;
    //@ requires n >= bits.length;
    //@ requires n > bits.length;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 8;
    //@ requires i <= 8;
    //@ requires i == 8;
    //@ requires i != 8;
    //@ requires i >= 8;
    //@ requires i > 8;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:82: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:69:) in method main
        isOneBitCharacter(arr);
                         ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:69: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:82:
    public static boolean isOneBitCharacter(int[] bits) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:5: verify: Precondition conjunct is false: 8 == bits.length
    //@ requires 8 == bits.length;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 < bits.length;
    //@ requires 7 <= bits.length;
    //@ requires 7 == bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 < bits.length;
    //@ requires 6 <= bits.length;
    //@ requires 6 == bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 < bits.length;
    //@ requires 5 <= bits.length;
    //@ requires 5 == bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 < bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 != bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 4 > bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 == bits.length;
    //@ requires 3 != bits.length;
    //@ requires 3 >= bits.length;
    //@ requires 3 > bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 == bits.length;
    //@ requires 2 != bits.length;
    //@ requires 2 >= bits.length;
    //@ requires 2 > bits.length;
    //@ requires 11 < bits.length;
    //@ requires 11 <= bits.length;
    //@ requires 11 == bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 < bits.length;
    //@ requires 10 <= bits.length;
    //@ requires 10 == bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 == bits.length;
    //@ requires 1 != bits.length;
    //@ requires 1 >= bits.length;
    //@ requires 1 > bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 == bits.length;
    //@ requires -1 != bits.length;
    //@ requires -1 >= bits.length;
    //@ requires -1 > bits.length;
    //@ requires 8 < bits.length;
    //@ requires 8 <= bits.length;
    //@ requires 8 == bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 < bits.length;
    //@ requires 7 <= bits.length;
    //@ requires 7 == bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 < bits.length;
    //@ requires 6 <= bits.length;
    //@ requires 6 == bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 < bits.length;
    //@ requires 5 <= bits.length;
    //@ requires 5 == bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 < bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 != bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 4 > bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 == bits.length;
    //@ requires 3 != bits.length;
    //@ requires 3 >= bits.length;
    //@ requires 3 > bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 == bits.length;
    //@ requires 2 != bits.length;
    //@ requires 2 >= bits.length;
    //@ requires 2 > bits.length;
    //@ requires 11 < bits.length;
    //@ requires 11 <= bits.length;
    //@ requires 11 == bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 < bits.length;
    //@ requires 10 <= bits.length;
    //@ requires 10 == bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 == bits.length;
    //@ requires 1 != bits.length;
    //@ requires 1 >= bits.length;
    //@ requires 1 > bits.length;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n == 8;
    //@ requires n != 8;
    //@ requires n >= 8;
    //@ requires n > 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n == 7;
    //@ requires n != 7;
    //@ requires n >= 7;
    //@ requires n > 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n == 6;
    //@ requires n != 6;
    //@ requires n >= 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n == 11;
    //@ requires n != 11;
    //@ requires n >= 11;
    //@ requires n > 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n == 10;
    //@ requires n != 10;
    //@ requires n >= 10;
    //@ requires n > 10;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < bits.length;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n != bits.length;
    //@ requires n >= bits.length;
    //@ requires n > bits.length;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 8;
    //@ requires i <= 8;
    //@ requires i == 8;
    //@ requires i != 8;
    //@ requires i >= 8;
    //@ requires i > 8;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:81: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:68:) in method main
        isOneBitCharacter(arr);
                         ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:68: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:81:
    public static boolean isOneBitCharacter(int[] bits) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:8: verify: Precondition conjunct is false: 7 < bits.length
    //@ requires 7 < bits.length;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 <= bits.length;
    //@ requires 7 == bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 < bits.length;
    //@ requires 6 <= bits.length;
    //@ requires 6 == bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 < bits.length;
    //@ requires 5 <= bits.length;
    //@ requires 5 == bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 < bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 != bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 4 > bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 == bits.length;
    //@ requires 3 != bits.length;
    //@ requires 3 >= bits.length;
    //@ requires 3 > bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 == bits.length;
    //@ requires 2 != bits.length;
    //@ requires 2 >= bits.length;
    //@ requires 2 > bits.length;
    //@ requires 11 < bits.length;
    //@ requires 11 <= bits.length;
    //@ requires 11 == bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 < bits.length;
    //@ requires 10 <= bits.length;
    //@ requires 10 == bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 == bits.length;
    //@ requires 1 != bits.length;
    //@ requires 1 >= bits.length;
    //@ requires 1 > bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 == bits.length;
    //@ requires -1 != bits.length;
    //@ requires -1 >= bits.length;
    //@ requires -1 > bits.length;
    //@ requires 8 < bits.length;
    //@ requires 8 <= bits.length;
    //@ requires 8 == bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 < bits.length;
    //@ requires 7 <= bits.length;
    //@ requires 7 == bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 < bits.length;
    //@ requires 6 <= bits.length;
    //@ requires 6 == bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 < bits.length;
    //@ requires 5 <= bits.length;
    //@ requires 5 == bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 < bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 != bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 4 > bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 == bits.length;
    //@ requires 3 != bits.length;
    //@ requires 3 >= bits.length;
    //@ requires 3 > bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 == bits.length;
    //@ requires 2 != bits.length;
    //@ requires 2 >= bits.length;
    //@ requires 2 > bits.length;
    //@ requires 11 < bits.length;
    //@ requires 11 <= bits.length;
    //@ requires 11 == bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 < bits.length;
    //@ requires 10 <= bits.length;
    //@ requires 10 == bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 == bits.length;
    //@ requires 1 != bits.length;
    //@ requires 1 >= bits.length;
    //@ requires 1 > bits.length;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n == 8;
    //@ requires n != 8;
    //@ requires n >= 8;
    //@ requires n > 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n == 7;
    //@ requires n != 7;
    //@ requires n >= 7;
    //@ requires n > 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n == 6;
    //@ requires n != 6;
    //@ requires n >= 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n == 11;
    //@ requires n != 11;
    //@ requires n >= 11;
    //@ requires n > 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n == 10;
    //@ requires n != 10;
    //@ requires n >= 10;
    //@ requires n > 10;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < bits.length;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n != bits.length;
    //@ requires n >= bits.length;
    //@ requires n > bits.length;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 8;
    //@ requires i <= 8;
    //@ requires i == 8;
    //@ requires i != 8;
    //@ requires i >= 8;
    //@ requires i > 8;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:80: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:67:) in method main
        isOneBitCharacter(arr);
                         ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:67: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:80:
    public static boolean isOneBitCharacter(int[] bits) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:8: verify: Precondition conjunct is false: 7 <= bits.length
    //@ requires 7 <= bits.length;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 == bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 < bits.length;
    //@ requires 6 <= bits.length;
    //@ requires 6 == bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 < bits.length;
    //@ requires 5 <= bits.length;
    //@ requires 5 == bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 < bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 != bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 4 > bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 == bits.length;
    //@ requires 3 != bits.length;
    //@ requires 3 >= bits.length;
    //@ requires 3 > bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 == bits.length;
    //@ requires 2 != bits.length;
    //@ requires 2 >= bits.length;
    //@ requires 2 > bits.length;
    //@ requires 11 < bits.length;
    //@ requires 11 <= bits.length;
    //@ requires 11 == bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 < bits.length;
    //@ requires 10 <= bits.length;
    //@ requires 10 == bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 == bits.length;
    //@ requires 1 != bits.length;
    //@ requires 1 >= bits.length;
    //@ requires 1 > bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 == bits.length;
    //@ requires -1 != bits.length;
    //@ requires -1 >= bits.length;
    //@ requires -1 > bits.length;
    //@ requires 8 < bits.length;
    //@ requires 8 <= bits.length;
    //@ requires 8 == bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 < bits.length;
    //@ requires 7 <= bits.length;
    //@ requires 7 == bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 < bits.length;
    //@ requires 6 <= bits.length;
    //@ requires 6 == bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 < bits.length;
    //@ requires 5 <= bits.length;
    //@ requires 5 == bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 < bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 != bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 4 > bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 == bits.length;
    //@ requires 3 != bits.length;
    //@ requires 3 >= bits.length;
    //@ requires 3 > bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 == bits.length;
    //@ requires 2 != bits.length;
    //@ requires 2 >= bits.length;
    //@ requires 2 > bits.length;
    //@ requires 11 < bits.length;
    //@ requires 11 <= bits.length;
    //@ requires 11 == bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 < bits.length;
    //@ requires 10 <= bits.length;
    //@ requires 10 == bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 == bits.length;
    //@ requires 1 != bits.length;
    //@ requires 1 >= bits.length;
    //@ requires 1 > bits.length;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n == 8;
    //@ requires n != 8;
    //@ requires n >= 8;
    //@ requires n > 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n == 7;
    //@ requires n != 7;
    //@ requires n >= 7;
    //@ requires n > 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n == 6;
    //@ requires n != 6;
    //@ requires n >= 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n == 11;
    //@ requires n != 11;
    //@ requires n >= 11;
    //@ requires n > 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n == 10;
    //@ requires n != 10;
    //@ requires n >= 10;
    //@ requires n > 10;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < bits.length;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n != bits.length;
    //@ requires n >= bits.length;
    //@ requires n > bits.length;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 8;
    //@ requires i <= 8;
    //@ requires i == 8;
    //@ requires i != 8;
    //@ requires i >= 8;
    //@ requires i > 8;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:79: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:66:) in method main
        isOneBitCharacter(arr);
                         ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:66: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:79:
    public static boolean isOneBitCharacter(int[] bits) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:8: verify: Precondition conjunct is false: 7 == bits.length
    //@ requires 7 == bits.length;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 < bits.length;
    //@ requires 6 <= bits.length;
    //@ requires 6 == bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 < bits.length;
    //@ requires 5 <= bits.length;
    //@ requires 5 == bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 < bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 != bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 4 > bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 == bits.length;
    //@ requires 3 != bits.length;
    //@ requires 3 >= bits.length;
    //@ requires 3 > bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 == bits.length;
    //@ requires 2 != bits.length;
    //@ requires 2 >= bits.length;
    //@ requires 2 > bits.length;
    //@ requires 11 < bits.length;
    //@ requires 11 <= bits.length;
    //@ requires 11 == bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 < bits.length;
    //@ requires 10 <= bits.length;
    //@ requires 10 == bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 == bits.length;
    //@ requires 1 != bits.length;
    //@ requires 1 >= bits.length;
    //@ requires 1 > bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 == bits.length;
    //@ requires -1 != bits.length;
    //@ requires -1 >= bits.length;
    //@ requires -1 > bits.length;
    //@ requires 8 < bits.length;
    //@ requires 8 <= bits.length;
    //@ requires 8 == bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 < bits.length;
    //@ requires 7 <= bits.length;
    //@ requires 7 == bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 < bits.length;
    //@ requires 6 <= bits.length;
    //@ requires 6 == bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 < bits.length;
    //@ requires 5 <= bits.length;
    //@ requires 5 == bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 < bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 != bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 4 > bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 == bits.length;
    //@ requires 3 != bits.length;
    //@ requires 3 >= bits.length;
    //@ requires 3 > bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 == bits.length;
    //@ requires 2 != bits.length;
    //@ requires 2 >= bits.length;
    //@ requires 2 > bits.length;
    //@ requires 11 < bits.length;
    //@ requires 11 <= bits.length;
    //@ requires 11 == bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 < bits.length;
    //@ requires 10 <= bits.length;
    //@ requires 10 == bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 == bits.length;
    //@ requires 1 != bits.length;
    //@ requires 1 >= bits.length;
    //@ requires 1 > bits.length;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n == 8;
    //@ requires n != 8;
    //@ requires n >= 8;
    //@ requires n > 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n == 7;
    //@ requires n != 7;
    //@ requires n >= 7;
    //@ requires n > 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n == 6;
    //@ requires n != 6;
    //@ requires n >= 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n == 11;
    //@ requires n != 11;
    //@ requires n >= 11;
    //@ requires n > 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n == 10;
    //@ requires n != 10;
    //@ requires n >= 10;
    //@ requires n > 10;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < bits.length;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n != bits.length;
    //@ requires n >= bits.length;
    //@ requires n > bits.length;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 8;
    //@ requires i <= 8;
    //@ requires i == 8;
    //@ requires i != 8;
    //@ requires i >= 8;
    //@ requires i > 8;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:78: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:65:) in method main
        isOneBitCharacter(arr);
                         ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:65: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:78:
    public static boolean isOneBitCharacter(int[] bits) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:11: verify: Precondition conjunct is false: 6 < bits.length
    //@ requires 6 < bits.length;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 <= bits.length;
    //@ requires 6 == bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 < bits.length;
    //@ requires 5 <= bits.length;
    //@ requires 5 == bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 < bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 != bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 4 > bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 == bits.length;
    //@ requires 3 != bits.length;
    //@ requires 3 >= bits.length;
    //@ requires 3 > bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 == bits.length;
    //@ requires 2 != bits.length;
    //@ requires 2 >= bits.length;
    //@ requires 2 > bits.length;
    //@ requires 11 < bits.length;
    //@ requires 11 <= bits.length;
    //@ requires 11 == bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 < bits.length;
    //@ requires 10 <= bits.length;
    //@ requires 10 == bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 == bits.length;
    //@ requires 1 != bits.length;
    //@ requires 1 >= bits.length;
    //@ requires 1 > bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 == bits.length;
    //@ requires -1 != bits.length;
    //@ requires -1 >= bits.length;
    //@ requires -1 > bits.length;
    //@ requires 8 < bits.length;
    //@ requires 8 <= bits.length;
    //@ requires 8 == bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 < bits.length;
    //@ requires 7 <= bits.length;
    //@ requires 7 == bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 < bits.length;
    //@ requires 6 <= bits.length;
    //@ requires 6 == bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 < bits.length;
    //@ requires 5 <= bits.length;
    //@ requires 5 == bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 < bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 != bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 4 > bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 == bits.length;
    //@ requires 3 != bits.length;
    //@ requires 3 >= bits.length;
    //@ requires 3 > bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 == bits.length;
    //@ requires 2 != bits.length;
    //@ requires 2 >= bits.length;
    //@ requires 2 > bits.length;
    //@ requires 11 < bits.length;
    //@ requires 11 <= bits.length;
    //@ requires 11 == bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 < bits.length;
    //@ requires 10 <= bits.length;
    //@ requires 10 == bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 == bits.length;
    //@ requires 1 != bits.length;
    //@ requires 1 >= bits.length;
    //@ requires 1 > bits.length;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n == 8;
    //@ requires n != 8;
    //@ requires n >= 8;
    //@ requires n > 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n == 7;
    //@ requires n != 7;
    //@ requires n >= 7;
    //@ requires n > 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n == 6;
    //@ requires n != 6;
    //@ requires n >= 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n == 11;
    //@ requires n != 11;
    //@ requires n >= 11;
    //@ requires n > 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n == 10;
    //@ requires n != 10;
    //@ requires n >= 10;
    //@ requires n > 10;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < bits.length;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n != bits.length;
    //@ requires n >= bits.length;
    //@ requires n > bits.length;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 8;
    //@ requires i <= 8;
    //@ requires i == 8;
    //@ requires i != 8;
    //@ requires i >= 8;
    //@ requires i > 8;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:77: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:64:) in method main
        isOneBitCharacter(arr);
                         ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:64: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:77:
    public static boolean isOneBitCharacter(int[] bits) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:11: verify: Precondition conjunct is false: 6 <= bits.length
    //@ requires 6 <= bits.length;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 == bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 < bits.length;
    //@ requires 5 <= bits.length;
    //@ requires 5 == bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 < bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 != bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 4 > bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 == bits.length;
    //@ requires 3 != bits.length;
    //@ requires 3 >= bits.length;
    //@ requires 3 > bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 == bits.length;
    //@ requires 2 != bits.length;
    //@ requires 2 >= bits.length;
    //@ requires 2 > bits.length;
    //@ requires 11 < bits.length;
    //@ requires 11 <= bits.length;
    //@ requires 11 == bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 < bits.length;
    //@ requires 10 <= bits.length;
    //@ requires 10 == bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 == bits.length;
    //@ requires 1 != bits.length;
    //@ requires 1 >= bits.length;
    //@ requires 1 > bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 == bits.length;
    //@ requires -1 != bits.length;
    //@ requires -1 >= bits.length;
    //@ requires -1 > bits.length;
    //@ requires 8 < bits.length;
    //@ requires 8 <= bits.length;
    //@ requires 8 == bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 < bits.length;
    //@ requires 7 <= bits.length;
    //@ requires 7 == bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 < bits.length;
    //@ requires 6 <= bits.length;
    //@ requires 6 == bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 < bits.length;
    //@ requires 5 <= bits.length;
    //@ requires 5 == bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 < bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 != bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 4 > bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 == bits.length;
    //@ requires 3 != bits.length;
    //@ requires 3 >= bits.length;
    //@ requires 3 > bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 == bits.length;
    //@ requires 2 != bits.length;
    //@ requires 2 >= bits.length;
    //@ requires 2 > bits.length;
    //@ requires 11 < bits.length;
    //@ requires 11 <= bits.length;
    //@ requires 11 == bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 < bits.length;
    //@ requires 10 <= bits.length;
    //@ requires 10 == bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 == bits.length;
    //@ requires 1 != bits.length;
    //@ requires 1 >= bits.length;
    //@ requires 1 > bits.length;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n == 8;
    //@ requires n != 8;
    //@ requires n >= 8;
    //@ requires n > 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n == 7;
    //@ requires n != 7;
    //@ requires n >= 7;
    //@ requires n > 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n == 6;
    //@ requires n != 6;
    //@ requires n >= 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n == 11;
    //@ requires n != 11;
    //@ requires n >= 11;
    //@ requires n > 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n == 10;
    //@ requires n != 10;
    //@ requires n >= 10;
    //@ requires n > 10;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < bits.length;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n != bits.length;
    //@ requires n >= bits.length;
    //@ requires n > bits.length;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 8;
    //@ requires i <= 8;
    //@ requires i == 8;
    //@ requires i != 8;
    //@ requires i >= 8;
    //@ requires i > 8;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:76: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:63:) in method main
        isOneBitCharacter(arr);
                         ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:63: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:76:
    public static boolean isOneBitCharacter(int[] bits) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:11: verify: Precondition conjunct is false: 6 == bits.length
    //@ requires 6 == bits.length;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 < bits.length;
    //@ requires 5 <= bits.length;
    //@ requires 5 == bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 < bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 != bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 4 > bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 == bits.length;
    //@ requires 3 != bits.length;
    //@ requires 3 >= bits.length;
    //@ requires 3 > bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 == bits.length;
    //@ requires 2 != bits.length;
    //@ requires 2 >= bits.length;
    //@ requires 2 > bits.length;
    //@ requires 11 < bits.length;
    //@ requires 11 <= bits.length;
    //@ requires 11 == bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 < bits.length;
    //@ requires 10 <= bits.length;
    //@ requires 10 == bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 == bits.length;
    //@ requires 1 != bits.length;
    //@ requires 1 >= bits.length;
    //@ requires 1 > bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 == bits.length;
    //@ requires -1 != bits.length;
    //@ requires -1 >= bits.length;
    //@ requires -1 > bits.length;
    //@ requires 8 < bits.length;
    //@ requires 8 <= bits.length;
    //@ requires 8 == bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 < bits.length;
    //@ requires 7 <= bits.length;
    //@ requires 7 == bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 < bits.length;
    //@ requires 6 <= bits.length;
    //@ requires 6 == bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 < bits.length;
    //@ requires 5 <= bits.length;
    //@ requires 5 == bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 < bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 != bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 4 > bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 == bits.length;
    //@ requires 3 != bits.length;
    //@ requires 3 >= bits.length;
    //@ requires 3 > bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 == bits.length;
    //@ requires 2 != bits.length;
    //@ requires 2 >= bits.length;
    //@ requires 2 > bits.length;
    //@ requires 11 < bits.length;
    //@ requires 11 <= bits.length;
    //@ requires 11 == bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 < bits.length;
    //@ requires 10 <= bits.length;
    //@ requires 10 == bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 == bits.length;
    //@ requires 1 != bits.length;
    //@ requires 1 >= bits.length;
    //@ requires 1 > bits.length;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n == 8;
    //@ requires n != 8;
    //@ requires n >= 8;
    //@ requires n > 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n == 7;
    //@ requires n != 7;
    //@ requires n >= 7;
    //@ requires n > 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n == 6;
    //@ requires n != 6;
    //@ requires n >= 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n == 11;
    //@ requires n != 11;
    //@ requires n >= 11;
    //@ requires n > 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n == 10;
    //@ requires n != 10;
    //@ requires n >= 10;
    //@ requires n > 10;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < bits.length;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n != bits.length;
    //@ requires n >= bits.length;
    //@ requires n > bits.length;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 8;
    //@ requires i <= 8;
    //@ requires i == 8;
    //@ requires i != 8;
    //@ requires i >= 8;
    //@ requires i > 8;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:75: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:62:) in method main
        isOneBitCharacter(arr);
                         ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:62: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:75:
    public static boolean isOneBitCharacter(int[] bits) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:14: verify: Precondition conjunct is false: 5 < bits.length
    //@ requires 5 < bits.length;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 <= bits.length;
    //@ requires 5 == bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 < bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 != bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 4 > bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 == bits.length;
    //@ requires 3 != bits.length;
    //@ requires 3 >= bits.length;
    //@ requires 3 > bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 == bits.length;
    //@ requires 2 != bits.length;
    //@ requires 2 >= bits.length;
    //@ requires 2 > bits.length;
    //@ requires 11 < bits.length;
    //@ requires 11 <= bits.length;
    //@ requires 11 == bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 < bits.length;
    //@ requires 10 <= bits.length;
    //@ requires 10 == bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 == bits.length;
    //@ requires 1 != bits.length;
    //@ requires 1 >= bits.length;
    //@ requires 1 > bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 == bits.length;
    //@ requires -1 != bits.length;
    //@ requires -1 >= bits.length;
    //@ requires -1 > bits.length;
    //@ requires 8 < bits.length;
    //@ requires 8 <= bits.length;
    //@ requires 8 == bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 < bits.length;
    //@ requires 7 <= bits.length;
    //@ requires 7 == bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 < bits.length;
    //@ requires 6 <= bits.length;
    //@ requires 6 == bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 < bits.length;
    //@ requires 5 <= bits.length;
    //@ requires 5 == bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 < bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 != bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 4 > bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 == bits.length;
    //@ requires 3 != bits.length;
    //@ requires 3 >= bits.length;
    //@ requires 3 > bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 == bits.length;
    //@ requires 2 != bits.length;
    //@ requires 2 >= bits.length;
    //@ requires 2 > bits.length;
    //@ requires 11 < bits.length;
    //@ requires 11 <= bits.length;
    //@ requires 11 == bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 < bits.length;
    //@ requires 10 <= bits.length;
    //@ requires 10 == bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 == bits.length;
    //@ requires 1 != bits.length;
    //@ requires 1 >= bits.length;
    //@ requires 1 > bits.length;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n == 8;
    //@ requires n != 8;
    //@ requires n >= 8;
    //@ requires n > 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n == 7;
    //@ requires n != 7;
    //@ requires n >= 7;
    //@ requires n > 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n == 6;
    //@ requires n != 6;
    //@ requires n >= 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n == 11;
    //@ requires n != 11;
    //@ requires n >= 11;
    //@ requires n > 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n == 10;
    //@ requires n != 10;
    //@ requires n >= 10;
    //@ requires n > 10;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < bits.length;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n != bits.length;
    //@ requires n >= bits.length;
    //@ requires n > bits.length;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 8;
    //@ requires i <= 8;
    //@ requires i == 8;
    //@ requires i != 8;
    //@ requires i >= 8;
    //@ requires i > 8;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:74: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:61:) in method main
        isOneBitCharacter(arr);
                         ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:61: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:74:
    public static boolean isOneBitCharacter(int[] bits) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:14: verify: Precondition conjunct is false: 5 <= bits.length
    //@ requires 5 <= bits.length;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 == bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 < bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 != bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 4 > bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 == bits.length;
    //@ requires 3 != bits.length;
    //@ requires 3 >= bits.length;
    //@ requires 3 > bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 == bits.length;
    //@ requires 2 != bits.length;
    //@ requires 2 >= bits.length;
    //@ requires 2 > bits.length;
    //@ requires 11 < bits.length;
    //@ requires 11 <= bits.length;
    //@ requires 11 == bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 < bits.length;
    //@ requires 10 <= bits.length;
    //@ requires 10 == bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 == bits.length;
    //@ requires 1 != bits.length;
    //@ requires 1 >= bits.length;
    //@ requires 1 > bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 == bits.length;
    //@ requires -1 != bits.length;
    //@ requires -1 >= bits.length;
    //@ requires -1 > bits.length;
    //@ requires 8 < bits.length;
    //@ requires 8 <= bits.length;
    //@ requires 8 == bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 < bits.length;
    //@ requires 7 <= bits.length;
    //@ requires 7 == bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 < bits.length;
    //@ requires 6 <= bits.length;
    //@ requires 6 == bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 < bits.length;
    //@ requires 5 <= bits.length;
    //@ requires 5 == bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 < bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 != bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 4 > bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 == bits.length;
    //@ requires 3 != bits.length;
    //@ requires 3 >= bits.length;
    //@ requires 3 > bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 == bits.length;
    //@ requires 2 != bits.length;
    //@ requires 2 >= bits.length;
    //@ requires 2 > bits.length;
    //@ requires 11 < bits.length;
    //@ requires 11 <= bits.length;
    //@ requires 11 == bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 < bits.length;
    //@ requires 10 <= bits.length;
    //@ requires 10 == bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 == bits.length;
    //@ requires 1 != bits.length;
    //@ requires 1 >= bits.length;
    //@ requires 1 > bits.length;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n == 8;
    //@ requires n != 8;
    //@ requires n >= 8;
    //@ requires n > 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n == 7;
    //@ requires n != 7;
    //@ requires n >= 7;
    //@ requires n > 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n == 6;
    //@ requires n != 6;
    //@ requires n >= 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n == 11;
    //@ requires n != 11;
    //@ requires n >= 11;
    //@ requires n > 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n == 10;
    //@ requires n != 10;
    //@ requires n >= 10;
    //@ requires n > 10;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < bits.length;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n != bits.length;
    //@ requires n >= bits.length;
    //@ requires n > bits.length;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 8;
    //@ requires i <= 8;
    //@ requires i == 8;
    //@ requires i != 8;
    //@ requires i >= 8;
    //@ requires i > 8;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:73: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:60:) in method main
        isOneBitCharacter(arr);
                         ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:60: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:73:
    public static boolean isOneBitCharacter(int[] bits) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:14: verify: Precondition conjunct is false: 5 == bits.length
    //@ requires 5 == bits.length;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 < bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 != bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 4 > bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 == bits.length;
    //@ requires 3 != bits.length;
    //@ requires 3 >= bits.length;
    //@ requires 3 > bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 == bits.length;
    //@ requires 2 != bits.length;
    //@ requires 2 >= bits.length;
    //@ requires 2 > bits.length;
    //@ requires 11 < bits.length;
    //@ requires 11 <= bits.length;
    //@ requires 11 == bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 < bits.length;
    //@ requires 10 <= bits.length;
    //@ requires 10 == bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 == bits.length;
    //@ requires 1 != bits.length;
    //@ requires 1 >= bits.length;
    //@ requires 1 > bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 == bits.length;
    //@ requires -1 != bits.length;
    //@ requires -1 >= bits.length;
    //@ requires -1 > bits.length;
    //@ requires 8 < bits.length;
    //@ requires 8 <= bits.length;
    //@ requires 8 == bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 < bits.length;
    //@ requires 7 <= bits.length;
    //@ requires 7 == bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 < bits.length;
    //@ requires 6 <= bits.length;
    //@ requires 6 == bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 < bits.length;
    //@ requires 5 <= bits.length;
    //@ requires 5 == bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 < bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 != bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 4 > bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 == bits.length;
    //@ requires 3 != bits.length;
    //@ requires 3 >= bits.length;
    //@ requires 3 > bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 == bits.length;
    //@ requires 2 != bits.length;
    //@ requires 2 >= bits.length;
    //@ requires 2 > bits.length;
    //@ requires 11 < bits.length;
    //@ requires 11 <= bits.length;
    //@ requires 11 == bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 < bits.length;
    //@ requires 10 <= bits.length;
    //@ requires 10 == bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 == bits.length;
    //@ requires 1 != bits.length;
    //@ requires 1 >= bits.length;
    //@ requires 1 > bits.length;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n == 8;
    //@ requires n != 8;
    //@ requires n >= 8;
    //@ requires n > 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n == 7;
    //@ requires n != 7;
    //@ requires n >= 7;
    //@ requires n > 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n == 6;
    //@ requires n != 6;
    //@ requires n >= 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n == 11;
    //@ requires n != 11;
    //@ requires n >= 11;
    //@ requires n > 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n == 10;
    //@ requires n != 10;
    //@ requires n >= 10;
    //@ requires n > 10;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < bits.length;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n != bits.length;
    //@ requires n >= bits.length;
    //@ requires n > bits.length;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 8;
    //@ requires i <= 8;
    //@ requires i == 8;
    //@ requires i != 8;
    //@ requires i >= 8;
    //@ requires i > 8;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:72: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:59:) in method main
        isOneBitCharacter(arr);
                         ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:59: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:72:
    public static boolean isOneBitCharacter(int[] bits) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:17: verify: Precondition conjunct is false: 4 < bits.length
    //@ requires 4 < bits.length;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 != bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 4 > bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 == bits.length;
    //@ requires 3 != bits.length;
    //@ requires 3 >= bits.length;
    //@ requires 3 > bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 == bits.length;
    //@ requires 2 != bits.length;
    //@ requires 2 >= bits.length;
    //@ requires 2 > bits.length;
    //@ requires 11 < bits.length;
    //@ requires 11 <= bits.length;
    //@ requires 11 == bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 < bits.length;
    //@ requires 10 <= bits.length;
    //@ requires 10 == bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 == bits.length;
    //@ requires 1 != bits.length;
    //@ requires 1 >= bits.length;
    //@ requires 1 > bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 == bits.length;
    //@ requires -1 != bits.length;
    //@ requires -1 >= bits.length;
    //@ requires -1 > bits.length;
    //@ requires 8 < bits.length;
    //@ requires 8 <= bits.length;
    //@ requires 8 == bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 < bits.length;
    //@ requires 7 <= bits.length;
    //@ requires 7 == bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 < bits.length;
    //@ requires 6 <= bits.length;
    //@ requires 6 == bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 < bits.length;
    //@ requires 5 <= bits.length;
    //@ requires 5 == bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 < bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 != bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 4 > bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 == bits.length;
    //@ requires 3 != bits.length;
    //@ requires 3 >= bits.length;
    //@ requires 3 > bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 == bits.length;
    //@ requires 2 != bits.length;
    //@ requires 2 >= bits.length;
    //@ requires 2 > bits.length;
    //@ requires 11 < bits.length;
    //@ requires 11 <= bits.length;
    //@ requires 11 == bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 < bits.length;
    //@ requires 10 <= bits.length;
    //@ requires 10 == bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 == bits.length;
    //@ requires 1 != bits.length;
    //@ requires 1 >= bits.length;
    //@ requires 1 > bits.length;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n == 8;
    //@ requires n != 8;
    //@ requires n >= 8;
    //@ requires n > 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n == 7;
    //@ requires n != 7;
    //@ requires n >= 7;
    //@ requires n > 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n == 6;
    //@ requires n != 6;
    //@ requires n >= 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n == 11;
    //@ requires n != 11;
    //@ requires n >= 11;
    //@ requires n > 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n == 10;
    //@ requires n != 10;
    //@ requires n >= 10;
    //@ requires n > 10;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < bits.length;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n != bits.length;
    //@ requires n >= bits.length;
    //@ requires n > bits.length;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 8;
    //@ requires i <= 8;
    //@ requires i == 8;
    //@ requires i != 8;
    //@ requires i >= 8;
    //@ requires i > 8;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:71: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:58:) in method main
        isOneBitCharacter(arr);
                         ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:58: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:71:
    public static boolean isOneBitCharacter(int[] bits) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:19: verify: Precondition conjunct is false: 4 != bits.length
    //@ requires 4 != bits.length;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 4 > bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 == bits.length;
    //@ requires 3 != bits.length;
    //@ requires 3 >= bits.length;
    //@ requires 3 > bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 == bits.length;
    //@ requires 2 != bits.length;
    //@ requires 2 >= bits.length;
    //@ requires 2 > bits.length;
    //@ requires 11 < bits.length;
    //@ requires 11 <= bits.length;
    //@ requires 11 == bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 < bits.length;
    //@ requires 10 <= bits.length;
    //@ requires 10 == bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 == bits.length;
    //@ requires 1 != bits.length;
    //@ requires 1 >= bits.length;
    //@ requires 1 > bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 == bits.length;
    //@ requires -1 != bits.length;
    //@ requires -1 >= bits.length;
    //@ requires -1 > bits.length;
    //@ requires 8 < bits.length;
    //@ requires 8 <= bits.length;
    //@ requires 8 == bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 < bits.length;
    //@ requires 7 <= bits.length;
    //@ requires 7 == bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 < bits.length;
    //@ requires 6 <= bits.length;
    //@ requires 6 == bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 < bits.length;
    //@ requires 5 <= bits.length;
    //@ requires 5 == bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 < bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 != bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 4 > bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 == bits.length;
    //@ requires 3 != bits.length;
    //@ requires 3 >= bits.length;
    //@ requires 3 > bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 == bits.length;
    //@ requires 2 != bits.length;
    //@ requires 2 >= bits.length;
    //@ requires 2 > bits.length;
    //@ requires 11 < bits.length;
    //@ requires 11 <= bits.length;
    //@ requires 11 == bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 < bits.length;
    //@ requires 10 <= bits.length;
    //@ requires 10 == bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 == bits.length;
    //@ requires 1 != bits.length;
    //@ requires 1 >= bits.length;
    //@ requires 1 > bits.length;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n == 8;
    //@ requires n != 8;
    //@ requires n >= 8;
    //@ requires n > 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n == 7;
    //@ requires n != 7;
    //@ requires n >= 7;
    //@ requires n > 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n == 6;
    //@ requires n != 6;
    //@ requires n >= 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n == 11;
    //@ requires n != 11;
    //@ requires n >= 11;
    //@ requires n > 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n == 10;
    //@ requires n != 10;
    //@ requires n >= 10;
    //@ requires n > 10;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < bits.length;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n != bits.length;
    //@ requires n >= bits.length;
    //@ requires n > bits.length;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 8;
    //@ requires i <= 8;
    //@ requires i == 8;
    //@ requires i != 8;
    //@ requires i >= 8;
    //@ requires i > 8;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:70: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:57:) in method main
        isOneBitCharacter(arr);
                         ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:57: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:70:
    public static boolean isOneBitCharacter(int[] bits) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:20: verify: Precondition conjunct is false: 4 > bits.length
    //@ requires 4 > bits.length;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 == bits.length;
    //@ requires 3 != bits.length;
    //@ requires 3 >= bits.length;
    //@ requires 3 > bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 == bits.length;
    //@ requires 2 != bits.length;
    //@ requires 2 >= bits.length;
    //@ requires 2 > bits.length;
    //@ requires 11 < bits.length;
    //@ requires 11 <= bits.length;
    //@ requires 11 == bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 < bits.length;
    //@ requires 10 <= bits.length;
    //@ requires 10 == bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 == bits.length;
    //@ requires 1 != bits.length;
    //@ requires 1 >= bits.length;
    //@ requires 1 > bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 == bits.length;
    //@ requires -1 != bits.length;
    //@ requires -1 >= bits.length;
    //@ requires -1 > bits.length;
    //@ requires 8 < bits.length;
    //@ requires 8 <= bits.length;
    //@ requires 8 == bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 < bits.length;
    //@ requires 7 <= bits.length;
    //@ requires 7 == bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 < bits.length;
    //@ requires 6 <= bits.length;
    //@ requires 6 == bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 < bits.length;
    //@ requires 5 <= bits.length;
    //@ requires 5 == bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 < bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 != bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 4 > bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 == bits.length;
    //@ requires 3 != bits.length;
    //@ requires 3 >= bits.length;
    //@ requires 3 > bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 == bits.length;
    //@ requires 2 != bits.length;
    //@ requires 2 >= bits.length;
    //@ requires 2 > bits.length;
    //@ requires 11 < bits.length;
    //@ requires 11 <= bits.length;
    //@ requires 11 == bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 < bits.length;
    //@ requires 10 <= bits.length;
    //@ requires 10 == bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 == bits.length;
    //@ requires 1 != bits.length;
    //@ requires 1 >= bits.length;
    //@ requires 1 > bits.length;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n == 8;
    //@ requires n != 8;
    //@ requires n >= 8;
    //@ requires n > 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n == 7;
    //@ requires n != 7;
    //@ requires n >= 7;
    //@ requires n > 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n == 6;
    //@ requires n != 6;
    //@ requires n >= 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n == 11;
    //@ requires n != 11;
    //@ requires n >= 11;
    //@ requires n > 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n == 10;
    //@ requires n != 10;
    //@ requires n >= 10;
    //@ requires n > 10;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < bits.length;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n != bits.length;
    //@ requires n >= bits.length;
    //@ requires n > bits.length;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 8;
    //@ requires i <= 8;
    //@ requires i == 8;
    //@ requires i != 8;
    //@ requires i >= 8;
    //@ requires i > 8;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:69: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:56:) in method main
        isOneBitCharacter(arr);
                         ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:56: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:69:
    public static boolean isOneBitCharacter(int[] bits) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:22: verify: Precondition conjunct is false: 3 == bits.length
    //@ requires 3 == bits.length;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 3 >= bits.length;
    //@ requires 3 > bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 == bits.length;
    //@ requires 2 != bits.length;
    //@ requires 2 >= bits.length;
    //@ requires 2 > bits.length;
    //@ requires 11 < bits.length;
    //@ requires 11 <= bits.length;
    //@ requires 11 == bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 < bits.length;
    //@ requires 10 <= bits.length;
    //@ requires 10 == bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 == bits.length;
    //@ requires 1 != bits.length;
    //@ requires 1 >= bits.length;
    //@ requires 1 > bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 == bits.length;
    //@ requires -1 != bits.length;
    //@ requires -1 >= bits.length;
    //@ requires -1 > bits.length;
    //@ requires 8 < bits.length;
    //@ requires 8 <= bits.length;
    //@ requires 8 == bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 < bits.length;
    //@ requires 7 <= bits.length;
    //@ requires 7 == bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 < bits.length;
    //@ requires 6 <= bits.length;
    //@ requires 6 == bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 < bits.length;
    //@ requires 5 <= bits.length;
    //@ requires 5 == bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 < bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 != bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 4 > bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 == bits.length;
    //@ requires 3 != bits.length;
    //@ requires 3 >= bits.length;
    //@ requires 3 > bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 == bits.length;
    //@ requires 2 != bits.length;
    //@ requires 2 >= bits.length;
    //@ requires 2 > bits.length;
    //@ requires 11 < bits.length;
    //@ requires 11 <= bits.length;
    //@ requires 11 == bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 < bits.length;
    //@ requires 10 <= bits.length;
    //@ requires 10 == bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 == bits.length;
    //@ requires 1 != bits.length;
    //@ requires 1 >= bits.length;
    //@ requires 1 > bits.length;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n == 8;
    //@ requires n != 8;
    //@ requires n >= 8;
    //@ requires n > 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n == 7;
    //@ requires n != 7;
    //@ requires n >= 7;
    //@ requires n > 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n == 6;
    //@ requires n != 6;
    //@ requires n >= 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n == 11;
    //@ requires n != 11;
    //@ requires n >= 11;
    //@ requires n > 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n == 10;
    //@ requires n != 10;
    //@ requires n >= 10;
    //@ requires n > 10;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < bits.length;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n != bits.length;
    //@ requires n >= bits.length;
    //@ requires n > bits.length;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 8;
    //@ requires i <= 8;
    //@ requires i == 8;
    //@ requires i != 8;
    //@ requires i >= 8;
    //@ requires i > 8;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:68: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:55:) in method main
        isOneBitCharacter(arr);
                         ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:55: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:68:
    public static boolean isOneBitCharacter(int[] bits) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:23: verify: Precondition conjunct is false: 3 >= bits.length
    //@ requires 3 >= bits.length;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 3 > bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 == bits.length;
    //@ requires 2 != bits.length;
    //@ requires 2 >= bits.length;
    //@ requires 2 > bits.length;
    //@ requires 11 < bits.length;
    //@ requires 11 <= bits.length;
    //@ requires 11 == bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 < bits.length;
    //@ requires 10 <= bits.length;
    //@ requires 10 == bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 == bits.length;
    //@ requires 1 != bits.length;
    //@ requires 1 >= bits.length;
    //@ requires 1 > bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 == bits.length;
    //@ requires -1 != bits.length;
    //@ requires -1 >= bits.length;
    //@ requires -1 > bits.length;
    //@ requires 8 < bits.length;
    //@ requires 8 <= bits.length;
    //@ requires 8 == bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 < bits.length;
    //@ requires 7 <= bits.length;
    //@ requires 7 == bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 < bits.length;
    //@ requires 6 <= bits.length;
    //@ requires 6 == bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 < bits.length;
    //@ requires 5 <= bits.length;
    //@ requires 5 == bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 < bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 != bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 4 > bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 == bits.length;
    //@ requires 3 != bits.length;
    //@ requires 3 >= bits.length;
    //@ requires 3 > bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 == bits.length;
    //@ requires 2 != bits.length;
    //@ requires 2 >= bits.length;
    //@ requires 2 > bits.length;
    //@ requires 11 < bits.length;
    //@ requires 11 <= bits.length;
    //@ requires 11 == bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 < bits.length;
    //@ requires 10 <= bits.length;
    //@ requires 10 == bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 == bits.length;
    //@ requires 1 != bits.length;
    //@ requires 1 >= bits.length;
    //@ requires 1 > bits.length;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n == 8;
    //@ requires n != 8;
    //@ requires n >= 8;
    //@ requires n > 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n == 7;
    //@ requires n != 7;
    //@ requires n >= 7;
    //@ requires n > 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n == 6;
    //@ requires n != 6;
    //@ requires n >= 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n == 11;
    //@ requires n != 11;
    //@ requires n >= 11;
    //@ requires n > 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n == 10;
    //@ requires n != 10;
    //@ requires n >= 10;
    //@ requires n > 10;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < bits.length;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n != bits.length;
    //@ requires n >= bits.length;
    //@ requires n > bits.length;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 8;
    //@ requires i <= 8;
    //@ requires i == 8;
    //@ requires i != 8;
    //@ requires i >= 8;
    //@ requires i > 8;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:67: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:54:) in method main
        isOneBitCharacter(arr);
                         ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:54: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:67:
    public static boolean isOneBitCharacter(int[] bits) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:23: verify: Precondition conjunct is false: 3 > bits.length
    //@ requires 3 > bits.length;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 == bits.length;
    //@ requires 2 != bits.length;
    //@ requires 2 >= bits.length;
    //@ requires 2 > bits.length;
    //@ requires 11 < bits.length;
    //@ requires 11 <= bits.length;
    //@ requires 11 == bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 < bits.length;
    //@ requires 10 <= bits.length;
    //@ requires 10 == bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 == bits.length;
    //@ requires 1 != bits.length;
    //@ requires 1 >= bits.length;
    //@ requires 1 > bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 == bits.length;
    //@ requires -1 != bits.length;
    //@ requires -1 >= bits.length;
    //@ requires -1 > bits.length;
    //@ requires 8 < bits.length;
    //@ requires 8 <= bits.length;
    //@ requires 8 == bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 < bits.length;
    //@ requires 7 <= bits.length;
    //@ requires 7 == bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 < bits.length;
    //@ requires 6 <= bits.length;
    //@ requires 6 == bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 < bits.length;
    //@ requires 5 <= bits.length;
    //@ requires 5 == bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 < bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 != bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 4 > bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 == bits.length;
    //@ requires 3 != bits.length;
    //@ requires 3 >= bits.length;
    //@ requires 3 > bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 == bits.length;
    //@ requires 2 != bits.length;
    //@ requires 2 >= bits.length;
    //@ requires 2 > bits.length;
    //@ requires 11 < bits.length;
    //@ requires 11 <= bits.length;
    //@ requires 11 == bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 < bits.length;
    //@ requires 10 <= bits.length;
    //@ requires 10 == bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 == bits.length;
    //@ requires 1 != bits.length;
    //@ requires 1 >= bits.length;
    //@ requires 1 > bits.length;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n == 8;
    //@ requires n != 8;
    //@ requires n >= 8;
    //@ requires n > 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n == 7;
    //@ requires n != 7;
    //@ requires n >= 7;
    //@ requires n > 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n == 6;
    //@ requires n != 6;
    //@ requires n >= 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n == 11;
    //@ requires n != 11;
    //@ requires n >= 11;
    //@ requires n > 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n == 10;
    //@ requires n != 10;
    //@ requires n >= 10;
    //@ requires n > 10;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < bits.length;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n != bits.length;
    //@ requires n >= bits.length;
    //@ requires n > bits.length;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 8;
    //@ requires i <= 8;
    //@ requires i == 8;
    //@ requires i != 8;
    //@ requires i >= 8;
    //@ requires i > 8;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:66: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:53:) in method main
        isOneBitCharacter(arr);
                         ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:53: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:66:
    public static boolean isOneBitCharacter(int[] bits) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:25: verify: Precondition conjunct is false: 2 == bits.length
    //@ requires 2 == bits.length;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 2 >= bits.length;
    //@ requires 2 > bits.length;
    //@ requires 11 < bits.length;
    //@ requires 11 <= bits.length;
    //@ requires 11 == bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 < bits.length;
    //@ requires 10 <= bits.length;
    //@ requires 10 == bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 == bits.length;
    //@ requires 1 != bits.length;
    //@ requires 1 >= bits.length;
    //@ requires 1 > bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 == bits.length;
    //@ requires -1 != bits.length;
    //@ requires -1 >= bits.length;
    //@ requires -1 > bits.length;
    //@ requires 8 < bits.length;
    //@ requires 8 <= bits.length;
    //@ requires 8 == bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 < bits.length;
    //@ requires 7 <= bits.length;
    //@ requires 7 == bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 < bits.length;
    //@ requires 6 <= bits.length;
    //@ requires 6 == bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 < bits.length;
    //@ requires 5 <= bits.length;
    //@ requires 5 == bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 < bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 != bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 4 > bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 == bits.length;
    //@ requires 3 != bits.length;
    //@ requires 3 >= bits.length;
    //@ requires 3 > bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 == bits.length;
    //@ requires 2 != bits.length;
    //@ requires 2 >= bits.length;
    //@ requires 2 > bits.length;
    //@ requires 11 < bits.length;
    //@ requires 11 <= bits.length;
    //@ requires 11 == bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 < bits.length;
    //@ requires 10 <= bits.length;
    //@ requires 10 == bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 == bits.length;
    //@ requires 1 != bits.length;
    //@ requires 1 >= bits.length;
    //@ requires 1 > bits.length;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n == 8;
    //@ requires n != 8;
    //@ requires n >= 8;
    //@ requires n > 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n == 7;
    //@ requires n != 7;
    //@ requires n >= 7;
    //@ requires n > 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n == 6;
    //@ requires n != 6;
    //@ requires n >= 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n == 11;
    //@ requires n != 11;
    //@ requires n >= 11;
    //@ requires n > 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n == 10;
    //@ requires n != 10;
    //@ requires n >= 10;
    //@ requires n > 10;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < bits.length;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n != bits.length;
    //@ requires n >= bits.length;
    //@ requires n > bits.length;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 8;
    //@ requires i <= 8;
    //@ requires i == 8;
    //@ requires i != 8;
    //@ requires i >= 8;
    //@ requires i > 8;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:65: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:52:) in method main
        isOneBitCharacter(arr);
                         ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:52: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:65:
    public static boolean isOneBitCharacter(int[] bits) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:26: verify: Precondition conjunct is false: 2 >= bits.length
    //@ requires 2 >= bits.length;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 2 > bits.length;
    //@ requires 11 < bits.length;
    //@ requires 11 <= bits.length;
    //@ requires 11 == bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 < bits.length;
    //@ requires 10 <= bits.length;
    //@ requires 10 == bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 == bits.length;
    //@ requires 1 != bits.length;
    //@ requires 1 >= bits.length;
    //@ requires 1 > bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 == bits.length;
    //@ requires -1 != bits.length;
    //@ requires -1 >= bits.length;
    //@ requires -1 > bits.length;
    //@ requires 8 < bits.length;
    //@ requires 8 <= bits.length;
    //@ requires 8 == bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 < bits.length;
    //@ requires 7 <= bits.length;
    //@ requires 7 == bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 < bits.length;
    //@ requires 6 <= bits.length;
    //@ requires 6 == bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 < bits.length;
    //@ requires 5 <= bits.length;
    //@ requires 5 == bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 < bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 != bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 4 > bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 == bits.length;
    //@ requires 3 != bits.length;
    //@ requires 3 >= bits.length;
    //@ requires 3 > bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 == bits.length;
    //@ requires 2 != bits.length;
    //@ requires 2 >= bits.length;
    //@ requires 2 > bits.length;
    //@ requires 11 < bits.length;
    //@ requires 11 <= bits.length;
    //@ requires 11 == bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 < bits.length;
    //@ requires 10 <= bits.length;
    //@ requires 10 == bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 == bits.length;
    //@ requires 1 != bits.length;
    //@ requires 1 >= bits.length;
    //@ requires 1 > bits.length;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n == 8;
    //@ requires n != 8;
    //@ requires n >= 8;
    //@ requires n > 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n == 7;
    //@ requires n != 7;
    //@ requires n >= 7;
    //@ requires n > 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n == 6;
    //@ requires n != 6;
    //@ requires n >= 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n == 11;
    //@ requires n != 11;
    //@ requires n >= 11;
    //@ requires n > 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n == 10;
    //@ requires n != 10;
    //@ requires n >= 10;
    //@ requires n > 10;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < bits.length;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n != bits.length;
    //@ requires n >= bits.length;
    //@ requires n > bits.length;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 8;
    //@ requires i <= 8;
    //@ requires i == 8;
    //@ requires i != 8;
    //@ requires i >= 8;
    //@ requires i > 8;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:51:) in method main
        isOneBitCharacter(arr);
                         ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:51: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:64:
    public static boolean isOneBitCharacter(int[] bits) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:26: verify: Precondition conjunct is false: 2 > bits.length
    //@ requires 2 > bits.length;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 < bits.length;
    //@ requires 11 <= bits.length;
    //@ requires 11 == bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 < bits.length;
    //@ requires 10 <= bits.length;
    //@ requires 10 == bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 == bits.length;
    //@ requires 1 != bits.length;
    //@ requires 1 >= bits.length;
    //@ requires 1 > bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 == bits.length;
    //@ requires -1 != bits.length;
    //@ requires -1 >= bits.length;
    //@ requires -1 > bits.length;
    //@ requires 8 < bits.length;
    //@ requires 8 <= bits.length;
    //@ requires 8 == bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 < bits.length;
    //@ requires 7 <= bits.length;
    //@ requires 7 == bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 < bits.length;
    //@ requires 6 <= bits.length;
    //@ requires 6 == bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 < bits.length;
    //@ requires 5 <= bits.length;
    //@ requires 5 == bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 < bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 != bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 4 > bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 == bits.length;
    //@ requires 3 != bits.length;
    //@ requires 3 >= bits.length;
    //@ requires 3 > bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 == bits.length;
    //@ requires 2 != bits.length;
    //@ requires 2 >= bits.length;
    //@ requires 2 > bits.length;
    //@ requires 11 < bits.length;
    //@ requires 11 <= bits.length;
    //@ requires 11 == bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 < bits.length;
    //@ requires 10 <= bits.length;
    //@ requires 10 == bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 == bits.length;
    //@ requires 1 != bits.length;
    //@ requires 1 >= bits.length;
    //@ requires 1 > bits.length;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n == 8;
    //@ requires n != 8;
    //@ requires n >= 8;
    //@ requires n > 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n == 7;
    //@ requires n != 7;
    //@ requires n >= 7;
    //@ requires n > 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n == 6;
    //@ requires n != 6;
    //@ requires n >= 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n == 11;
    //@ requires n != 11;
    //@ requires n >= 11;
    //@ requires n > 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n == 10;
    //@ requires n != 10;
    //@ requires n >= 10;
    //@ requires n > 10;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < bits.length;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n != bits.length;
    //@ requires n >= bits.length;
    //@ requires n > bits.length;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 8;
    //@ requires i <= 8;
    //@ requires i == 8;
    //@ requires i != 8;
    //@ requires i >= 8;
    //@ requires i > 8;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:63: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:50:) in method main
        isOneBitCharacter(arr);
                         ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:50: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:63:
    public static boolean isOneBitCharacter(int[] bits) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:26: verify: Precondition conjunct is false: 11 < bits.length
    //@ requires 11 < bits.length;
                    ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 <= bits.length;
    //@ requires 11 == bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 < bits.length;
    //@ requires 10 <= bits.length;
    //@ requires 10 == bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 == bits.length;
    //@ requires 1 != bits.length;
    //@ requires 1 >= bits.length;
    //@ requires 1 > bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 == bits.length;
    //@ requires -1 != bits.length;
    //@ requires -1 >= bits.length;
    //@ requires -1 > bits.length;
    //@ requires 8 < bits.length;
    //@ requires 8 <= bits.length;
    //@ requires 8 == bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 < bits.length;
    //@ requires 7 <= bits.length;
    //@ requires 7 == bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 < bits.length;
    //@ requires 6 <= bits.length;
    //@ requires 6 == bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 < bits.length;
    //@ requires 5 <= bits.length;
    //@ requires 5 == bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 < bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 != bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 4 > bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 == bits.length;
    //@ requires 3 != bits.length;
    //@ requires 3 >= bits.length;
    //@ requires 3 > bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 == bits.length;
    //@ requires 2 != bits.length;
    //@ requires 2 >= bits.length;
    //@ requires 2 > bits.length;
    //@ requires 11 < bits.length;
    //@ requires 11 <= bits.length;
    //@ requires 11 == bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 < bits.length;
    //@ requires 10 <= bits.length;
    //@ requires 10 == bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 == bits.length;
    //@ requires 1 != bits.length;
    //@ requires 1 >= bits.length;
    //@ requires 1 > bits.length;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n == 8;
    //@ requires n != 8;
    //@ requires n >= 8;
    //@ requires n > 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n == 7;
    //@ requires n != 7;
    //@ requires n >= 7;
    //@ requires n > 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n == 6;
    //@ requires n != 6;
    //@ requires n >= 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n == 11;
    //@ requires n != 11;
    //@ requires n >= 11;
    //@ requires n > 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n == 10;
    //@ requires n != 10;
    //@ requires n >= 10;
    //@ requires n > 10;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < bits.length;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n != bits.length;
    //@ requires n >= bits.length;
    //@ requires n > bits.length;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 8;
    //@ requires i <= 8;
    //@ requires i == 8;
    //@ requires i != 8;
    //@ requires i >= 8;
    //@ requires i > 8;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:62: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:49:) in method main
        isOneBitCharacter(arr);
                         ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:49: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:62:
    public static boolean isOneBitCharacter(int[] bits) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:26: verify: Precondition conjunct is false: 11 <= bits.length
    //@ requires 11 <= bits.length;
                    ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 == bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 < bits.length;
    //@ requires 10 <= bits.length;
    //@ requires 10 == bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 == bits.length;
    //@ requires 1 != bits.length;
    //@ requires 1 >= bits.length;
    //@ requires 1 > bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 == bits.length;
    //@ requires -1 != bits.length;
    //@ requires -1 >= bits.length;
    //@ requires -1 > bits.length;
    //@ requires 8 < bits.length;
    //@ requires 8 <= bits.length;
    //@ requires 8 == bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 < bits.length;
    //@ requires 7 <= bits.length;
    //@ requires 7 == bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 < bits.length;
    //@ requires 6 <= bits.length;
    //@ requires 6 == bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 < bits.length;
    //@ requires 5 <= bits.length;
    //@ requires 5 == bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 < bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 != bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 4 > bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 == bits.length;
    //@ requires 3 != bits.length;
    //@ requires 3 >= bits.length;
    //@ requires 3 > bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 == bits.length;
    //@ requires 2 != bits.length;
    //@ requires 2 >= bits.length;
    //@ requires 2 > bits.length;
    //@ requires 11 < bits.length;
    //@ requires 11 <= bits.length;
    //@ requires 11 == bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 < bits.length;
    //@ requires 10 <= bits.length;
    //@ requires 10 == bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 == bits.length;
    //@ requires 1 != bits.length;
    //@ requires 1 >= bits.length;
    //@ requires 1 > bits.length;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n == 8;
    //@ requires n != 8;
    //@ requires n >= 8;
    //@ requires n > 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n == 7;
    //@ requires n != 7;
    //@ requires n >= 7;
    //@ requires n > 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n == 6;
    //@ requires n != 6;
    //@ requires n >= 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n == 11;
    //@ requires n != 11;
    //@ requires n >= 11;
    //@ requires n > 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n == 10;
    //@ requires n != 10;
    //@ requires n >= 10;
    //@ requires n > 10;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < bits.length;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n != bits.length;
    //@ requires n >= bits.length;
    //@ requires n > bits.length;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 8;
    //@ requires i <= 8;
    //@ requires i == 8;
    //@ requires i != 8;
    //@ requires i >= 8;
    //@ requires i > 8;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:61: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:48:) in method main
        isOneBitCharacter(arr);
                         ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:48: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:61:
    public static boolean isOneBitCharacter(int[] bits) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:26: verify: Precondition conjunct is false: 11 == bits.length
    //@ requires 11 == bits.length;
                    ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 < bits.length;
    //@ requires 10 <= bits.length;
    //@ requires 10 == bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 == bits.length;
    //@ requires 1 != bits.length;
    //@ requires 1 >= bits.length;
    //@ requires 1 > bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 == bits.length;
    //@ requires -1 != bits.length;
    //@ requires -1 >= bits.length;
    //@ requires -1 > bits.length;
    //@ requires 8 < bits.length;
    //@ requires 8 <= bits.length;
    //@ requires 8 == bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 < bits.length;
    //@ requires 7 <= bits.length;
    //@ requires 7 == bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 < bits.length;
    //@ requires 6 <= bits.length;
    //@ requires 6 == bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 < bits.length;
    //@ requires 5 <= bits.length;
    //@ requires 5 == bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 < bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 != bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 4 > bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 == bits.length;
    //@ requires 3 != bits.length;
    //@ requires 3 >= bits.length;
    //@ requires 3 > bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 == bits.length;
    //@ requires 2 != bits.length;
    //@ requires 2 >= bits.length;
    //@ requires 2 > bits.length;
    //@ requires 11 < bits.length;
    //@ requires 11 <= bits.length;
    //@ requires 11 == bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 < bits.length;
    //@ requires 10 <= bits.length;
    //@ requires 10 == bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 == bits.length;
    //@ requires 1 != bits.length;
    //@ requires 1 >= bits.length;
    //@ requires 1 > bits.length;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n == 8;
    //@ requires n != 8;
    //@ requires n >= 8;
    //@ requires n > 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n == 7;
    //@ requires n != 7;
    //@ requires n >= 7;
    //@ requires n > 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n == 6;
    //@ requires n != 6;
    //@ requires n >= 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n == 11;
    //@ requires n != 11;
    //@ requires n >= 11;
    //@ requires n > 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n == 10;
    //@ requires n != 10;
    //@ requires n >= 10;
    //@ requires n > 10;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < bits.length;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n != bits.length;
    //@ requires n >= bits.length;
    //@ requires n > bits.length;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 8;
    //@ requires i <= 8;
    //@ requires i == 8;
    //@ requires i != 8;
    //@ requires i >= 8;
    //@ requires i > 8;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:60: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:) in method main
        isOneBitCharacter(arr);
                         ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:60:
    public static boolean isOneBitCharacter(int[] bits) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:29: verify: Precondition conjunct is false: 10 < bits.length
    //@ requires 10 < bits.length;
                    ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 <= bits.length;
    //@ requires 10 == bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 == bits.length;
    //@ requires 1 != bits.length;
    //@ requires 1 >= bits.length;
    //@ requires 1 > bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 == bits.length;
    //@ requires -1 != bits.length;
    //@ requires -1 >= bits.length;
    //@ requires -1 > bits.length;
    //@ requires 8 < bits.length;
    //@ requires 8 <= bits.length;
    //@ requires 8 == bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 < bits.length;
    //@ requires 7 <= bits.length;
    //@ requires 7 == bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 < bits.length;
    //@ requires 6 <= bits.length;
    //@ requires 6 == bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 < bits.length;
    //@ requires 5 <= bits.length;
    //@ requires 5 == bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 < bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 != bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 4 > bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 == bits.length;
    //@ requires 3 != bits.length;
    //@ requires 3 >= bits.length;
    //@ requires 3 > bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 == bits.length;
    //@ requires 2 != bits.length;
    //@ requires 2 >= bits.length;
    //@ requires 2 > bits.length;
    //@ requires 11 < bits.length;
    //@ requires 11 <= bits.length;
    //@ requires 11 == bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 < bits.length;
    //@ requires 10 <= bits.length;
    //@ requires 10 == bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 == bits.length;
    //@ requires 1 != bits.length;
    //@ requires 1 >= bits.length;
    //@ requires 1 > bits.length;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n == 8;
    //@ requires n != 8;
    //@ requires n >= 8;
    //@ requires n > 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n == 7;
    //@ requires n != 7;
    //@ requires n >= 7;
    //@ requires n > 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n == 6;
    //@ requires n != 6;
    //@ requires n >= 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n == 11;
    //@ requires n != 11;
    //@ requires n >= 11;
    //@ requires n > 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n == 10;
    //@ requires n != 10;
    //@ requires n >= 10;
    //@ requires n > 10;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < bits.length;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n != bits.length;
    //@ requires n >= bits.length;
    //@ requires n > bits.length;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 8;
    //@ requires i <= 8;
    //@ requires i == 8;
    //@ requires i != 8;
    //@ requires i >= 8;
    //@ requires i > 8;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:59: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:46:) in method main
        isOneBitCharacter(arr);
                         ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:46: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:59:
    public static boolean isOneBitCharacter(int[] bits) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:29: verify: Precondition conjunct is false: 10 <= bits.length
    //@ requires 10 <= bits.length;
                    ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 == bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 == bits.length;
    //@ requires 1 != bits.length;
    //@ requires 1 >= bits.length;
    //@ requires 1 > bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 == bits.length;
    //@ requires -1 != bits.length;
    //@ requires -1 >= bits.length;
    //@ requires -1 > bits.length;
    //@ requires 8 < bits.length;
    //@ requires 8 <= bits.length;
    //@ requires 8 == bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 < bits.length;
    //@ requires 7 <= bits.length;
    //@ requires 7 == bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 < bits.length;
    //@ requires 6 <= bits.length;
    //@ requires 6 == bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 < bits.length;
    //@ requires 5 <= bits.length;
    //@ requires 5 == bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 < bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 != bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 4 > bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 == bits.length;
    //@ requires 3 != bits.length;
    //@ requires 3 >= bits.length;
    //@ requires 3 > bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 == bits.length;
    //@ requires 2 != bits.length;
    //@ requires 2 >= bits.length;
    //@ requires 2 > bits.length;
    //@ requires 11 < bits.length;
    //@ requires 11 <= bits.length;
    //@ requires 11 == bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 < bits.length;
    //@ requires 10 <= bits.length;
    //@ requires 10 == bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 == bits.length;
    //@ requires 1 != bits.length;
    //@ requires 1 >= bits.length;
    //@ requires 1 > bits.length;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n == 8;
    //@ requires n != 8;
    //@ requires n >= 8;
    //@ requires n > 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n == 7;
    //@ requires n != 7;
    //@ requires n >= 7;
    //@ requires n > 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n == 6;
    //@ requires n != 6;
    //@ requires n >= 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n == 11;
    //@ requires n != 11;
    //@ requires n >= 11;
    //@ requires n > 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n == 10;
    //@ requires n != 10;
    //@ requires n >= 10;
    //@ requires n > 10;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < bits.length;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n != bits.length;
    //@ requires n >= bits.length;
    //@ requires n > bits.length;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 8;
    //@ requires i <= 8;
    //@ requires i == 8;
    //@ requires i != 8;
    //@ requires i >= 8;
    //@ requires i > 8;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:58: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:45:) in method main
        isOneBitCharacter(arr);
                         ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:45: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:58:
    public static boolean isOneBitCharacter(int[] bits) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:29: verify: Precondition conjunct is false: 10 == bits.length
    //@ requires 10 == bits.length;
                    ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 == bits.length;
    //@ requires 1 != bits.length;
    //@ requires 1 >= bits.length;
    //@ requires 1 > bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 == bits.length;
    //@ requires -1 != bits.length;
    //@ requires -1 >= bits.length;
    //@ requires -1 > bits.length;
    //@ requires 8 < bits.length;
    //@ requires 8 <= bits.length;
    //@ requires 8 == bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 < bits.length;
    //@ requires 7 <= bits.length;
    //@ requires 7 == bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 < bits.length;
    //@ requires 6 <= bits.length;
    //@ requires 6 == bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 < bits.length;
    //@ requires 5 <= bits.length;
    //@ requires 5 == bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 < bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 != bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 4 > bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 == bits.length;
    //@ requires 3 != bits.length;
    //@ requires 3 >= bits.length;
    //@ requires 3 > bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 == bits.length;
    //@ requires 2 != bits.length;
    //@ requires 2 >= bits.length;
    //@ requires 2 > bits.length;
    //@ requires 11 < bits.length;
    //@ requires 11 <= bits.length;
    //@ requires 11 == bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 < bits.length;
    //@ requires 10 <= bits.length;
    //@ requires 10 == bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 == bits.length;
    //@ requires 1 != bits.length;
    //@ requires 1 >= bits.length;
    //@ requires 1 > bits.length;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n == 8;
    //@ requires n != 8;
    //@ requires n >= 8;
    //@ requires n > 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n == 7;
    //@ requires n != 7;
    //@ requires n >= 7;
    //@ requires n > 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n == 6;
    //@ requires n != 6;
    //@ requires n >= 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n == 11;
    //@ requires n != 11;
    //@ requires n >= 11;
    //@ requires n > 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n == 10;
    //@ requires n != 10;
    //@ requires n >= 10;
    //@ requires n > 10;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < bits.length;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n != bits.length;
    //@ requires n >= bits.length;
    //@ requires n > bits.length;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 8;
    //@ requires i <= 8;
    //@ requires i == 8;
    //@ requires i != 8;
    //@ requires i >= 8;
    //@ requires i > 8;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:57: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:44:) in method main
        isOneBitCharacter(arr);
                         ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:44: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:57:
    public static boolean isOneBitCharacter(int[] bits) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:34: verify: Precondition conjunct is false: 1 == bits.length
    //@ requires 1 == bits.length;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ requires 1 >= bits.length;
    //@ requires 1 > bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 == bits.length;
    //@ requires -1 != bits.length;
    //@ requires -1 >= bits.length;
    //@ requires -1 > bits.length;
    //@ requires 8 < bits.length;
    //@ requires 8 <= bits.length;
    //@ requires 8 == bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 < bits.length;
    //@ requires 7 <= bits.length;
    //@ requires 7 == bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 < bits.length;
    //@ requires 6 <= bits.length;
    //@ requires 6 == bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 < bits.length;
    //@ requires 5 <= bits.length;
    //@ requires 5 == bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 < bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 != bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 4 > bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 == bits.length;
    //@ requires 3 != bits.length;
    //@ requires 3 >= bits.length;
    //@ requires 3 > bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 == bits.length;
    //@ requires 2 != bits.length;
    //@ requires 2 >= bits.length;
    //@ requires 2 > bits.length;
    //@ requires 11 < bits.length;
    //@ requires 11 <= bits.length;
    //@ requires 11 == bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 < bits.length;
    //@ requires 10 <= bits.length;
    //@ requires 10 == bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 == bits.length;
    //@ requires 1 != bits.length;
    //@ requires 1 >= bits.length;
    //@ requires 1 > bits.length;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n == 8;
    //@ requires n != 8;
    //@ requires n >= 8;
    //@ requires n > 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n == 7;
    //@ requires n != 7;
    //@ requires n >= 7;
    //@ requires n > 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n == 6;
    //@ requires n != 6;
    //@ requires n >= 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n == 11;
    //@ requires n != 11;
    //@ requires n >= 11;
    //@ requires n > 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n == 10;
    //@ requires n != 10;
    //@ requires n >= 10;
    //@ requires n > 10;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < bits.length;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n != bits.length;
    //@ requires n >= bits.length;
    //@ requires n > bits.length;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 8;
    //@ requires i <= 8;
    //@ requires i == 8;
    //@ requires i != 8;
    //@ requires i >= 8;
    //@ requires i > 8;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:56: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:43:) in method main
        isOneBitCharacter(arr);
                         ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:43: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:56:
    public static boolean isOneBitCharacter(int[] bits) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:35: verify: Precondition conjunct is false: 1 >= bits.length
    //@ requires 1 >= bits.length;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ requires 1 > bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 == bits.length;
    //@ requires -1 != bits.length;
    //@ requires -1 >= bits.length;
    //@ requires -1 > bits.length;
    //@ requires 8 < bits.length;
    //@ requires 8 <= bits.length;
    //@ requires 8 == bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 < bits.length;
    //@ requires 7 <= bits.length;
    //@ requires 7 == bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 < bits.length;
    //@ requires 6 <= bits.length;
    //@ requires 6 == bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 < bits.length;
    //@ requires 5 <= bits.length;
    //@ requires 5 == bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 < bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 != bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 4 > bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 == bits.length;
    //@ requires 3 != bits.length;
    //@ requires 3 >= bits.length;
    //@ requires 3 > bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 == bits.length;
    //@ requires 2 != bits.length;
    //@ requires 2 >= bits.length;
    //@ requires 2 > bits.length;
    //@ requires 11 < bits.length;
    //@ requires 11 <= bits.length;
    //@ requires 11 == bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 < bits.length;
    //@ requires 10 <= bits.length;
    //@ requires 10 == bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 == bits.length;
    //@ requires 1 != bits.length;
    //@ requires 1 >= bits.length;
    //@ requires 1 > bits.length;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n == 8;
    //@ requires n != 8;
    //@ requires n >= 8;
    //@ requires n > 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n == 7;
    //@ requires n != 7;
    //@ requires n >= 7;
    //@ requires n > 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n == 6;
    //@ requires n != 6;
    //@ requires n >= 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n == 11;
    //@ requires n != 11;
    //@ requires n >= 11;
    //@ requires n > 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n == 10;
    //@ requires n != 10;
    //@ requires n >= 10;
    //@ requires n > 10;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < bits.length;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n != bits.length;
    //@ requires n >= bits.length;
    //@ requires n > bits.length;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 8;
    //@ requires i <= 8;
    //@ requires i == 8;
    //@ requires i != 8;
    //@ requires i >= 8;
    //@ requires i > 8;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:55: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:42:) in method main
        isOneBitCharacter(arr);
                         ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:42: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:55:
    public static boolean isOneBitCharacter(int[] bits) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:35: verify: Precondition conjunct is false: 1 > bits.length
    //@ requires 1 > bits.length;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 == bits.length;
    //@ requires -1 != bits.length;
    //@ requires -1 >= bits.length;
    //@ requires -1 > bits.length;
    //@ requires 8 < bits.length;
    //@ requires 8 <= bits.length;
    //@ requires 8 == bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 < bits.length;
    //@ requires 7 <= bits.length;
    //@ requires 7 == bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 < bits.length;
    //@ requires 6 <= bits.length;
    //@ requires 6 == bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 < bits.length;
    //@ requires 5 <= bits.length;
    //@ requires 5 == bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 < bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 != bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 4 > bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 == bits.length;
    //@ requires 3 != bits.length;
    //@ requires 3 >= bits.length;
    //@ requires 3 > bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 == bits.length;
    //@ requires 2 != bits.length;
    //@ requires 2 >= bits.length;
    //@ requires 2 > bits.length;
    //@ requires 11 < bits.length;
    //@ requires 11 <= bits.length;
    //@ requires 11 == bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 < bits.length;
    //@ requires 10 <= bits.length;
    //@ requires 10 == bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 == bits.length;
    //@ requires 1 != bits.length;
    //@ requires 1 >= bits.length;
    //@ requires 1 > bits.length;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n == 8;
    //@ requires n != 8;
    //@ requires n >= 8;
    //@ requires n > 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n == 7;
    //@ requires n != 7;
    //@ requires n >= 7;
    //@ requires n > 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n == 6;
    //@ requires n != 6;
    //@ requires n >= 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n == 11;
    //@ requires n != 11;
    //@ requires n >= 11;
    //@ requires n > 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n == 10;
    //@ requires n != 10;
    //@ requires n >= 10;
    //@ requires n > 10;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < bits.length;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n != bits.length;
    //@ requires n >= bits.length;
    //@ requires n > bits.length;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 8;
    //@ requires i <= 8;
    //@ requires i == 8;
    //@ requires i != 8;
    //@ requires i >= 8;
    //@ requires i > 8;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:311:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:311: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:85: verify: Precondition conjunct is false: -1 == bits.length
    //@ requires -1 == bits.length;
                    ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires -1 >= bits.length;
    //@ requires -1 > bits.length;
    //@ requires 8 < bits.length;
    //@ requires 8 <= bits.length;
    //@ requires 8 == bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 < bits.length;
    //@ requires 7 <= bits.length;
    //@ requires 7 == bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 < bits.length;
    //@ requires 6 <= bits.length;
    //@ requires 6 == bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 < bits.length;
    //@ requires 5 <= bits.length;
    //@ requires 5 == bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 < bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 != bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 4 > bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 == bits.length;
    //@ requires 3 != bits.length;
    //@ requires 3 >= bits.length;
    //@ requires 3 > bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 == bits.length;
    //@ requires 2 != bits.length;
    //@ requires 2 >= bits.length;
    //@ requires 2 > bits.length;
    //@ requires 11 < bits.length;
    //@ requires 11 <= bits.length;
    //@ requires 11 == bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 < bits.length;
    //@ requires 10 <= bits.length;
    //@ requires 10 == bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 == bits.length;
    //@ requires 1 != bits.length;
    //@ requires 1 >= bits.length;
    //@ requires 1 > bits.length;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n == 8;
    //@ requires n != 8;
    //@ requires n >= 8;
    //@ requires n > 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n == 7;
    //@ requires n != 7;
    //@ requires n >= 7;
    //@ requires n > 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n == 6;
    //@ requires n != 6;
    //@ requires n >= 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n == 11;
    //@ requires n != 11;
    //@ requires n >= 11;
    //@ requires n > 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n == 10;
    //@ requires n != 10;
    //@ requires n >= 10;
    //@ requires n > 10;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < bits.length;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n != bits.length;
    //@ requires n >= bits.length;
    //@ requires n > bits.length;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 8;
    //@ requires i <= 8;
    //@ requires i == 8;
    //@ requires i != 8;
    //@ requires i >= 8;
    //@ requires i > 8;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:310:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:310: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:86: verify: Precondition conjunct is false: -1 >= bits.length
    //@ requires -1 >= bits.length;
                    ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires -1 > bits.length;
    //@ requires 8 < bits.length;
    //@ requires 8 <= bits.length;
    //@ requires 8 == bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 < bits.length;
    //@ requires 7 <= bits.length;
    //@ requires 7 == bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 < bits.length;
    //@ requires 6 <= bits.length;
    //@ requires 6 == bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 < bits.length;
    //@ requires 5 <= bits.length;
    //@ requires 5 == bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 < bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 != bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 4 > bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 == bits.length;
    //@ requires 3 != bits.length;
    //@ requires 3 >= bits.length;
    //@ requires 3 > bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 == bits.length;
    //@ requires 2 != bits.length;
    //@ requires 2 >= bits.length;
    //@ requires 2 > bits.length;
    //@ requires 11 < bits.length;
    //@ requires 11 <= bits.length;
    //@ requires 11 == bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 < bits.length;
    //@ requires 10 <= bits.length;
    //@ requires 10 == bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 == bits.length;
    //@ requires 1 != bits.length;
    //@ requires 1 >= bits.length;
    //@ requires 1 > bits.length;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n == 8;
    //@ requires n != 8;
    //@ requires n >= 8;
    //@ requires n > 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n == 7;
    //@ requires n != 7;
    //@ requires n >= 7;
    //@ requires n > 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n == 6;
    //@ requires n != 6;
    //@ requires n >= 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n == 11;
    //@ requires n != 11;
    //@ requires n >= 11;
    //@ requires n > 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n == 10;
    //@ requires n != 10;
    //@ requires n >= 10;
    //@ requires n > 10;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < bits.length;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n != bits.length;
    //@ requires n >= bits.length;
    //@ requires n > bits.length;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 8;
    //@ requires i <= 8;
    //@ requires i == 8;
    //@ requires i != 8;
    //@ requires i >= 8;
    //@ requires i > 8;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:309:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:309: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:86: verify: Precondition conjunct is false: -1 > bits.length
    //@ requires -1 > bits.length;
                    ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 < bits.length;
    //@ requires 8 <= bits.length;
    //@ requires 8 == bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 < bits.length;
    //@ requires 7 <= bits.length;
    //@ requires 7 == bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 < bits.length;
    //@ requires 6 <= bits.length;
    //@ requires 6 == bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 < bits.length;
    //@ requires 5 <= bits.length;
    //@ requires 5 == bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 < bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 != bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 4 > bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 == bits.length;
    //@ requires 3 != bits.length;
    //@ requires 3 >= bits.length;
    //@ requires 3 > bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 == bits.length;
    //@ requires 2 != bits.length;
    //@ requires 2 >= bits.length;
    //@ requires 2 > bits.length;
    //@ requires 11 < bits.length;
    //@ requires 11 <= bits.length;
    //@ requires 11 == bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 < bits.length;
    //@ requires 10 <= bits.length;
    //@ requires 10 == bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 == bits.length;
    //@ requires 1 != bits.length;
    //@ requires 1 >= bits.length;
    //@ requires 1 > bits.length;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n == 8;
    //@ requires n != 8;
    //@ requires n >= 8;
    //@ requires n > 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n == 7;
    //@ requires n != 7;
    //@ requires n >= 7;
    //@ requires n > 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n == 6;
    //@ requires n != 6;
    //@ requires n >= 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n == 11;
    //@ requires n != 11;
    //@ requires n >= 11;
    //@ requires n > 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n == 10;
    //@ requires n != 10;
    //@ requires n >= 10;
    //@ requires n > 10;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < bits.length;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n != bits.length;
    //@ requires n >= bits.length;
    //@ requires n > bits.length;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 8;
    //@ requires i <= 8;
    //@ requires i == 8;
    //@ requires i != 8;
    //@ requires i >= 8;
    //@ requires i > 8;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:308:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:308: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:86: verify: Precondition conjunct is false: 8 < bits.length
    //@ requires 8 < bits.length;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 <= bits.length;
    //@ requires 8 == bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 < bits.length;
    //@ requires 7 <= bits.length;
    //@ requires 7 == bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 < bits.length;
    //@ requires 6 <= bits.length;
    //@ requires 6 == bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 < bits.length;
    //@ requires 5 <= bits.length;
    //@ requires 5 == bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 < bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 != bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 4 > bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 == bits.length;
    //@ requires 3 != bits.length;
    //@ requires 3 >= bits.length;
    //@ requires 3 > bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 == bits.length;
    //@ requires 2 != bits.length;
    //@ requires 2 >= bits.length;
    //@ requires 2 > bits.length;
    //@ requires 11 < bits.length;
    //@ requires 11 <= bits.length;
    //@ requires 11 == bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 < bits.length;
    //@ requires 10 <= bits.length;
    //@ requires 10 == bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 == bits.length;
    //@ requires 1 != bits.length;
    //@ requires 1 >= bits.length;
    //@ requires 1 > bits.length;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n == 8;
    //@ requires n != 8;
    //@ requires n >= 8;
    //@ requires n > 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n == 7;
    //@ requires n != 7;
    //@ requires n >= 7;
    //@ requires n > 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n == 6;
    //@ requires n != 6;
    //@ requires n >= 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n == 11;
    //@ requires n != 11;
    //@ requires n >= 11;
    //@ requires n > 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n == 10;
    //@ requires n != 10;
    //@ requires n >= 10;
    //@ requires n > 10;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < bits.length;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n != bits.length;
    //@ requires n >= bits.length;
    //@ requires n > bits.length;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 8;
    //@ requires i <= 8;
    //@ requires i == 8;
    //@ requires i != 8;
    //@ requires i >= 8;
    //@ requires i > 8;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:307:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:307: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:86: verify: Precondition conjunct is false: 8 <= bits.length
    //@ requires 8 <= bits.length;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 == bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 < bits.length;
    //@ requires 7 <= bits.length;
    //@ requires 7 == bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 < bits.length;
    //@ requires 6 <= bits.length;
    //@ requires 6 == bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 < bits.length;
    //@ requires 5 <= bits.length;
    //@ requires 5 == bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 < bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 != bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 4 > bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 == bits.length;
    //@ requires 3 != bits.length;
    //@ requires 3 >= bits.length;
    //@ requires 3 > bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 == bits.length;
    //@ requires 2 != bits.length;
    //@ requires 2 >= bits.length;
    //@ requires 2 > bits.length;
    //@ requires 11 < bits.length;
    //@ requires 11 <= bits.length;
    //@ requires 11 == bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 < bits.length;
    //@ requires 10 <= bits.length;
    //@ requires 10 == bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 == bits.length;
    //@ requires 1 != bits.length;
    //@ requires 1 >= bits.length;
    //@ requires 1 > bits.length;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n == 8;
    //@ requires n != 8;
    //@ requires n >= 8;
    //@ requires n > 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n == 7;
    //@ requires n != 7;
    //@ requires n >= 7;
    //@ requires n > 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n == 6;
    //@ requires n != 6;
    //@ requires n >= 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n == 11;
    //@ requires n != 11;
    //@ requires n >= 11;
    //@ requires n > 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n == 10;
    //@ requires n != 10;
    //@ requires n >= 10;
    //@ requires n > 10;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < bits.length;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n != bits.length;
    //@ requires n >= bits.length;
    //@ requires n > bits.length;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 8;
    //@ requires i <= 8;
    //@ requires i == 8;
    //@ requires i != 8;
    //@ requires i >= 8;
    //@ requires i > 8;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:306:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:306: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:86: verify: Precondition conjunct is false: 8 == bits.length
    //@ requires 8 == bits.length;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 < bits.length;
    //@ requires 7 <= bits.length;
    //@ requires 7 == bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 < bits.length;
    //@ requires 6 <= bits.length;
    //@ requires 6 == bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 < bits.length;
    //@ requires 5 <= bits.length;
    //@ requires 5 == bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 < bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 != bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 4 > bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 == bits.length;
    //@ requires 3 != bits.length;
    //@ requires 3 >= bits.length;
    //@ requires 3 > bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 == bits.length;
    //@ requires 2 != bits.length;
    //@ requires 2 >= bits.length;
    //@ requires 2 > bits.length;
    //@ requires 11 < bits.length;
    //@ requires 11 <= bits.length;
    //@ requires 11 == bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 < bits.length;
    //@ requires 10 <= bits.length;
    //@ requires 10 == bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 == bits.length;
    //@ requires 1 != bits.length;
    //@ requires 1 >= bits.length;
    //@ requires 1 > bits.length;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n == 8;
    //@ requires n != 8;
    //@ requires n >= 8;
    //@ requires n > 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n == 7;
    //@ requires n != 7;
    //@ requires n >= 7;
    //@ requires n > 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n == 6;
    //@ requires n != 6;
    //@ requires n >= 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n == 11;
    //@ requires n != 11;
    //@ requires n >= 11;
    //@ requires n > 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n == 10;
    //@ requires n != 10;
    //@ requires n >= 10;
    //@ requires n > 10;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < bits.length;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n != bits.length;
    //@ requires n >= bits.length;
    //@ requires n > bits.length;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 8;
    //@ requires i <= 8;
    //@ requires i == 8;
    //@ requires i != 8;
    //@ requires i >= 8;
    //@ requires i > 8;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:305:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:305: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:89: verify: Precondition conjunct is false: 7 < bits.length
    //@ requires 7 < bits.length;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 <= bits.length;
    //@ requires 7 == bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 < bits.length;
    //@ requires 6 <= bits.length;
    //@ requires 6 == bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 < bits.length;
    //@ requires 5 <= bits.length;
    //@ requires 5 == bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 < bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 != bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 4 > bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 == bits.length;
    //@ requires 3 != bits.length;
    //@ requires 3 >= bits.length;
    //@ requires 3 > bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 == bits.length;
    //@ requires 2 != bits.length;
    //@ requires 2 >= bits.length;
    //@ requires 2 > bits.length;
    //@ requires 11 < bits.length;
    //@ requires 11 <= bits.length;
    //@ requires 11 == bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 < bits.length;
    //@ requires 10 <= bits.length;
    //@ requires 10 == bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 == bits.length;
    //@ requires 1 != bits.length;
    //@ requires 1 >= bits.length;
    //@ requires 1 > bits.length;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n == 8;
    //@ requires n != 8;
    //@ requires n >= 8;
    //@ requires n > 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n == 7;
    //@ requires n != 7;
    //@ requires n >= 7;
    //@ requires n > 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n == 6;
    //@ requires n != 6;
    //@ requires n >= 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n == 11;
    //@ requires n != 11;
    //@ requires n >= 11;
    //@ requires n > 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n == 10;
    //@ requires n != 10;
    //@ requires n >= 10;
    //@ requires n > 10;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < bits.length;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n != bits.length;
    //@ requires n >= bits.length;
    //@ requires n > bits.length;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 8;
    //@ requires i <= 8;
    //@ requires i == 8;
    //@ requires i != 8;
    //@ requires i >= 8;
    //@ requires i > 8;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:304:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:304: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:89: verify: Precondition conjunct is false: 7 <= bits.length
    //@ requires 7 <= bits.length;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 == bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 < bits.length;
    //@ requires 6 <= bits.length;
    //@ requires 6 == bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 < bits.length;
    //@ requires 5 <= bits.length;
    //@ requires 5 == bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 < bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 != bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 4 > bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 == bits.length;
    //@ requires 3 != bits.length;
    //@ requires 3 >= bits.length;
    //@ requires 3 > bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 == bits.length;
    //@ requires 2 != bits.length;
    //@ requires 2 >= bits.length;
    //@ requires 2 > bits.length;
    //@ requires 11 < bits.length;
    //@ requires 11 <= bits.length;
    //@ requires 11 == bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 < bits.length;
    //@ requires 10 <= bits.length;
    //@ requires 10 == bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 == bits.length;
    //@ requires 1 != bits.length;
    //@ requires 1 >= bits.length;
    //@ requires 1 > bits.length;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n == 8;
    //@ requires n != 8;
    //@ requires n >= 8;
    //@ requires n > 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n == 7;
    //@ requires n != 7;
    //@ requires n >= 7;
    //@ requires n > 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n == 6;
    //@ requires n != 6;
    //@ requires n >= 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n == 11;
    //@ requires n != 11;
    //@ requires n >= 11;
    //@ requires n > 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n == 10;
    //@ requires n != 10;
    //@ requires n >= 10;
    //@ requires n > 10;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < bits.length;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n != bits.length;
    //@ requires n >= bits.length;
    //@ requires n > bits.length;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 8;
    //@ requires i <= 8;
    //@ requires i == 8;
    //@ requires i != 8;
    //@ requires i >= 8;
    //@ requires i > 8;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:303:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:303: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:89: verify: Precondition conjunct is false: 7 == bits.length
    //@ requires 7 == bits.length;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 < bits.length;
    //@ requires 6 <= bits.length;
    //@ requires 6 == bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 < bits.length;
    //@ requires 5 <= bits.length;
    //@ requires 5 == bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 < bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 != bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 4 > bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 == bits.length;
    //@ requires 3 != bits.length;
    //@ requires 3 >= bits.length;
    //@ requires 3 > bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 == bits.length;
    //@ requires 2 != bits.length;
    //@ requires 2 >= bits.length;
    //@ requires 2 > bits.length;
    //@ requires 11 < bits.length;
    //@ requires 11 <= bits.length;
    //@ requires 11 == bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 < bits.length;
    //@ requires 10 <= bits.length;
    //@ requires 10 == bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 == bits.length;
    //@ requires 1 != bits.length;
    //@ requires 1 >= bits.length;
    //@ requires 1 > bits.length;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n == 8;
    //@ requires n != 8;
    //@ requires n >= 8;
    //@ requires n > 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n == 7;
    //@ requires n != 7;
    //@ requires n >= 7;
    //@ requires n > 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n == 6;
    //@ requires n != 6;
    //@ requires n >= 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n == 11;
    //@ requires n != 11;
    //@ requires n >= 11;
    //@ requires n > 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n == 10;
    //@ requires n != 10;
    //@ requires n >= 10;
    //@ requires n > 10;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < bits.length;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n != bits.length;
    //@ requires n >= bits.length;
    //@ requires n > bits.length;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 8;
    //@ requires i <= 8;
    //@ requires i == 8;
    //@ requires i != 8;
    //@ requires i >= 8;
    //@ requires i > 8;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:302:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:302: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:92: verify: Precondition conjunct is false: 6 < bits.length
    //@ requires 6 < bits.length;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 <= bits.length;
    //@ requires 6 == bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 < bits.length;
    //@ requires 5 <= bits.length;
    //@ requires 5 == bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 < bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 != bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 4 > bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 == bits.length;
    //@ requires 3 != bits.length;
    //@ requires 3 >= bits.length;
    //@ requires 3 > bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 == bits.length;
    //@ requires 2 != bits.length;
    //@ requires 2 >= bits.length;
    //@ requires 2 > bits.length;
    //@ requires 11 < bits.length;
    //@ requires 11 <= bits.length;
    //@ requires 11 == bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 < bits.length;
    //@ requires 10 <= bits.length;
    //@ requires 10 == bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 == bits.length;
    //@ requires 1 != bits.length;
    //@ requires 1 >= bits.length;
    //@ requires 1 > bits.length;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n == 8;
    //@ requires n != 8;
    //@ requires n >= 8;
    //@ requires n > 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n == 7;
    //@ requires n != 7;
    //@ requires n >= 7;
    //@ requires n > 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n == 6;
    //@ requires n != 6;
    //@ requires n >= 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n == 11;
    //@ requires n != 11;
    //@ requires n >= 11;
    //@ requires n > 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n == 10;
    //@ requires n != 10;
    //@ requires n >= 10;
    //@ requires n > 10;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < bits.length;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n != bits.length;
    //@ requires n >= bits.length;
    //@ requires n > bits.length;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 8;
    //@ requires i <= 8;
    //@ requires i == 8;
    //@ requires i != 8;
    //@ requires i >= 8;
    //@ requires i > 8;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:301:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:301: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:92: verify: Precondition conjunct is false: 6 <= bits.length
    //@ requires 6 <= bits.length;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 == bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 < bits.length;
    //@ requires 5 <= bits.length;
    //@ requires 5 == bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 < bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 != bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 4 > bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 == bits.length;
    //@ requires 3 != bits.length;
    //@ requires 3 >= bits.length;
    //@ requires 3 > bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 == bits.length;
    //@ requires 2 != bits.length;
    //@ requires 2 >= bits.length;
    //@ requires 2 > bits.length;
    //@ requires 11 < bits.length;
    //@ requires 11 <= bits.length;
    //@ requires 11 == bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 < bits.length;
    //@ requires 10 <= bits.length;
    //@ requires 10 == bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 == bits.length;
    //@ requires 1 != bits.length;
    //@ requires 1 >= bits.length;
    //@ requires 1 > bits.length;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n == 8;
    //@ requires n != 8;
    //@ requires n >= 8;
    //@ requires n > 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n == 7;
    //@ requires n != 7;
    //@ requires n >= 7;
    //@ requires n > 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n == 6;
    //@ requires n != 6;
    //@ requires n >= 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n == 11;
    //@ requires n != 11;
    //@ requires n >= 11;
    //@ requires n > 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n == 10;
    //@ requires n != 10;
    //@ requires n >= 10;
    //@ requires n > 10;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < bits.length;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n != bits.length;
    //@ requires n >= bits.length;
    //@ requires n > bits.length;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 8;
    //@ requires i <= 8;
    //@ requires i == 8;
    //@ requires i != 8;
    //@ requires i >= 8;
    //@ requires i > 8;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:300:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:300: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:92: verify: Precondition conjunct is false: 6 == bits.length
    //@ requires 6 == bits.length;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 < bits.length;
    //@ requires 5 <= bits.length;
    //@ requires 5 == bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 < bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 != bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 4 > bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 == bits.length;
    //@ requires 3 != bits.length;
    //@ requires 3 >= bits.length;
    //@ requires 3 > bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 == bits.length;
    //@ requires 2 != bits.length;
    //@ requires 2 >= bits.length;
    //@ requires 2 > bits.length;
    //@ requires 11 < bits.length;
    //@ requires 11 <= bits.length;
    //@ requires 11 == bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 < bits.length;
    //@ requires 10 <= bits.length;
    //@ requires 10 == bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 == bits.length;
    //@ requires 1 != bits.length;
    //@ requires 1 >= bits.length;
    //@ requires 1 > bits.length;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n == 8;
    //@ requires n != 8;
    //@ requires n >= 8;
    //@ requires n > 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n == 7;
    //@ requires n != 7;
    //@ requires n >= 7;
    //@ requires n > 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n == 6;
    //@ requires n != 6;
    //@ requires n >= 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n == 11;
    //@ requires n != 11;
    //@ requires n >= 11;
    //@ requires n > 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n == 10;
    //@ requires n != 10;
    //@ requires n >= 10;
    //@ requires n > 10;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < bits.length;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n != bits.length;
    //@ requires n >= bits.length;
    //@ requires n > bits.length;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 8;
    //@ requires i <= 8;
    //@ requires i == 8;
    //@ requires i != 8;
    //@ requires i >= 8;
    //@ requires i > 8;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:299:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:299: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:95: verify: Precondition conjunct is false: 5 < bits.length
    //@ requires 5 < bits.length;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 <= bits.length;
    //@ requires 5 == bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 < bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 != bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 4 > bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 == bits.length;
    //@ requires 3 != bits.length;
    //@ requires 3 >= bits.length;
    //@ requires 3 > bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 == bits.length;
    //@ requires 2 != bits.length;
    //@ requires 2 >= bits.length;
    //@ requires 2 > bits.length;
    //@ requires 11 < bits.length;
    //@ requires 11 <= bits.length;
    //@ requires 11 == bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 < bits.length;
    //@ requires 10 <= bits.length;
    //@ requires 10 == bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 == bits.length;
    //@ requires 1 != bits.length;
    //@ requires 1 >= bits.length;
    //@ requires 1 > bits.length;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n == 8;
    //@ requires n != 8;
    //@ requires n >= 8;
    //@ requires n > 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n == 7;
    //@ requires n != 7;
    //@ requires n >= 7;
    //@ requires n > 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n == 6;
    //@ requires n != 6;
    //@ requires n >= 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n == 11;
    //@ requires n != 11;
    //@ requires n >= 11;
    //@ requires n > 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n == 10;
    //@ requires n != 10;
    //@ requires n >= 10;
    //@ requires n > 10;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < bits.length;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n != bits.length;
    //@ requires n >= bits.length;
    //@ requires n > bits.length;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 8;
    //@ requires i <= 8;
    //@ requires i == 8;
    //@ requires i != 8;
    //@ requires i >= 8;
    //@ requires i > 8;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:298:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:298: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:95: verify: Precondition conjunct is false: 5 <= bits.length
    //@ requires 5 <= bits.length;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 == bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 < bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 != bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 4 > bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 == bits.length;
    //@ requires 3 != bits.length;
    //@ requires 3 >= bits.length;
    //@ requires 3 > bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 == bits.length;
    //@ requires 2 != bits.length;
    //@ requires 2 >= bits.length;
    //@ requires 2 > bits.length;
    //@ requires 11 < bits.length;
    //@ requires 11 <= bits.length;
    //@ requires 11 == bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 < bits.length;
    //@ requires 10 <= bits.length;
    //@ requires 10 == bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 == bits.length;
    //@ requires 1 != bits.length;
    //@ requires 1 >= bits.length;
    //@ requires 1 > bits.length;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n == 8;
    //@ requires n != 8;
    //@ requires n >= 8;
    //@ requires n > 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n == 7;
    //@ requires n != 7;
    //@ requires n >= 7;
    //@ requires n > 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n == 6;
    //@ requires n != 6;
    //@ requires n >= 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n == 11;
    //@ requires n != 11;
    //@ requires n >= 11;
    //@ requires n > 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n == 10;
    //@ requires n != 10;
    //@ requires n >= 10;
    //@ requires n > 10;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < bits.length;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n != bits.length;
    //@ requires n >= bits.length;
    //@ requires n > bits.length;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 8;
    //@ requires i <= 8;
    //@ requires i == 8;
    //@ requires i != 8;
    //@ requires i >= 8;
    //@ requires i > 8;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:297:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:297: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:95: verify: Precondition conjunct is false: 5 == bits.length
    //@ requires 5 == bits.length;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 < bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 != bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 4 > bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 == bits.length;
    //@ requires 3 != bits.length;
    //@ requires 3 >= bits.length;
    //@ requires 3 > bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 == bits.length;
    //@ requires 2 != bits.length;
    //@ requires 2 >= bits.length;
    //@ requires 2 > bits.length;
    //@ requires 11 < bits.length;
    //@ requires 11 <= bits.length;
    //@ requires 11 == bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 < bits.length;
    //@ requires 10 <= bits.length;
    //@ requires 10 == bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 == bits.length;
    //@ requires 1 != bits.length;
    //@ requires 1 >= bits.length;
    //@ requires 1 > bits.length;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n == 8;
    //@ requires n != 8;
    //@ requires n >= 8;
    //@ requires n > 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n == 7;
    //@ requires n != 7;
    //@ requires n >= 7;
    //@ requires n > 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n == 6;
    //@ requires n != 6;
    //@ requires n >= 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n == 11;
    //@ requires n != 11;
    //@ requires n >= 11;
    //@ requires n > 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n == 10;
    //@ requires n != 10;
    //@ requires n >= 10;
    //@ requires n > 10;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < bits.length;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n != bits.length;
    //@ requires n >= bits.length;
    //@ requires n > bits.length;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 8;
    //@ requires i <= 8;
    //@ requires i == 8;
    //@ requires i != 8;
    //@ requires i >= 8;
    //@ requires i > 8;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:296:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:296: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:98: verify: Precondition conjunct is false: 4 < bits.length
    //@ requires 4 < bits.length;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 != bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 4 > bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 == bits.length;
    //@ requires 3 != bits.length;
    //@ requires 3 >= bits.length;
    //@ requires 3 > bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 == bits.length;
    //@ requires 2 != bits.length;
    //@ requires 2 >= bits.length;
    //@ requires 2 > bits.length;
    //@ requires 11 < bits.length;
    //@ requires 11 <= bits.length;
    //@ requires 11 == bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 < bits.length;
    //@ requires 10 <= bits.length;
    //@ requires 10 == bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 == bits.length;
    //@ requires 1 != bits.length;
    //@ requires 1 >= bits.length;
    //@ requires 1 > bits.length;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n == 8;
    //@ requires n != 8;
    //@ requires n >= 8;
    //@ requires n > 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n == 7;
    //@ requires n != 7;
    //@ requires n >= 7;
    //@ requires n > 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n == 6;
    //@ requires n != 6;
    //@ requires n >= 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n == 11;
    //@ requires n != 11;
    //@ requires n >= 11;
    //@ requires n > 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n == 10;
    //@ requires n != 10;
    //@ requires n >= 10;
    //@ requires n > 10;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < bits.length;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n != bits.length;
    //@ requires n >= bits.length;
    //@ requires n > bits.length;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 8;
    //@ requires i <= 8;
    //@ requires i == 8;
    //@ requires i != 8;
    //@ requires i >= 8;
    //@ requires i > 8;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:295:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:295: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:100: verify: Precondition conjunct is false: 4 != bits.length
    //@ requires 4 != bits.length;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 4 > bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 == bits.length;
    //@ requires 3 != bits.length;
    //@ requires 3 >= bits.length;
    //@ requires 3 > bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 == bits.length;
    //@ requires 2 != bits.length;
    //@ requires 2 >= bits.length;
    //@ requires 2 > bits.length;
    //@ requires 11 < bits.length;
    //@ requires 11 <= bits.length;
    //@ requires 11 == bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 < bits.length;
    //@ requires 10 <= bits.length;
    //@ requires 10 == bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 == bits.length;
    //@ requires 1 != bits.length;
    //@ requires 1 >= bits.length;
    //@ requires 1 > bits.length;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n == 8;
    //@ requires n != 8;
    //@ requires n >= 8;
    //@ requires n > 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n == 7;
    //@ requires n != 7;
    //@ requires n >= 7;
    //@ requires n > 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n == 6;
    //@ requires n != 6;
    //@ requires n >= 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n == 11;
    //@ requires n != 11;
    //@ requires n >= 11;
    //@ requires n > 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n == 10;
    //@ requires n != 10;
    //@ requires n >= 10;
    //@ requires n > 10;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < bits.length;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n != bits.length;
    //@ requires n >= bits.length;
    //@ requires n > bits.length;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 8;
    //@ requires i <= 8;
    //@ requires i == 8;
    //@ requires i != 8;
    //@ requires i >= 8;
    //@ requires i > 8;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:294:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:294: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:101: verify: Precondition conjunct is false: 4 > bits.length
    //@ requires 4 > bits.length;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 == bits.length;
    //@ requires 3 != bits.length;
    //@ requires 3 >= bits.length;
    //@ requires 3 > bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 == bits.length;
    //@ requires 2 != bits.length;
    //@ requires 2 >= bits.length;
    //@ requires 2 > bits.length;
    //@ requires 11 < bits.length;
    //@ requires 11 <= bits.length;
    //@ requires 11 == bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 < bits.length;
    //@ requires 10 <= bits.length;
    //@ requires 10 == bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 == bits.length;
    //@ requires 1 != bits.length;
    //@ requires 1 >= bits.length;
    //@ requires 1 > bits.length;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n == 8;
    //@ requires n != 8;
    //@ requires n >= 8;
    //@ requires n > 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n == 7;
    //@ requires n != 7;
    //@ requires n >= 7;
    //@ requires n > 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n == 6;
    //@ requires n != 6;
    //@ requires n >= 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n == 11;
    //@ requires n != 11;
    //@ requires n >= 11;
    //@ requires n > 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n == 10;
    //@ requires n != 10;
    //@ requires n >= 10;
    //@ requires n > 10;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < bits.length;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n != bits.length;
    //@ requires n >= bits.length;
    //@ requires n > bits.length;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 8;
    //@ requires i <= 8;
    //@ requires i == 8;
    //@ requires i != 8;
    //@ requires i >= 8;
    //@ requires i > 8;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:293:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:293: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:103: verify: Precondition conjunct is false: 3 == bits.length
    //@ requires 3 == bits.length;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 3 >= bits.length;
    //@ requires 3 > bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 == bits.length;
    //@ requires 2 != bits.length;
    //@ requires 2 >= bits.length;
    //@ requires 2 > bits.length;
    //@ requires 11 < bits.length;
    //@ requires 11 <= bits.length;
    //@ requires 11 == bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 < bits.length;
    //@ requires 10 <= bits.length;
    //@ requires 10 == bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 == bits.length;
    //@ requires 1 != bits.length;
    //@ requires 1 >= bits.length;
    //@ requires 1 > bits.length;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n == 8;
    //@ requires n != 8;
    //@ requires n >= 8;
    //@ requires n > 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n == 7;
    //@ requires n != 7;
    //@ requires n >= 7;
    //@ requires n > 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n == 6;
    //@ requires n != 6;
    //@ requires n >= 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n == 11;
    //@ requires n != 11;
    //@ requires n >= 11;
    //@ requires n > 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n == 10;
    //@ requires n != 10;
    //@ requires n >= 10;
    //@ requires n > 10;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < bits.length;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n != bits.length;
    //@ requires n >= bits.length;
    //@ requires n > bits.length;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 8;
    //@ requires i <= 8;
    //@ requires i == 8;
    //@ requires i != 8;
    //@ requires i >= 8;
    //@ requires i > 8;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:292:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:292: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:104: verify: Precondition conjunct is false: 3 >= bits.length
    //@ requires 3 >= bits.length;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 3 > bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 == bits.length;
    //@ requires 2 != bits.length;
    //@ requires 2 >= bits.length;
    //@ requires 2 > bits.length;
    //@ requires 11 < bits.length;
    //@ requires 11 <= bits.length;
    //@ requires 11 == bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 < bits.length;
    //@ requires 10 <= bits.length;
    //@ requires 10 == bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 == bits.length;
    //@ requires 1 != bits.length;
    //@ requires 1 >= bits.length;
    //@ requires 1 > bits.length;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n == 8;
    //@ requires n != 8;
    //@ requires n >= 8;
    //@ requires n > 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n == 7;
    //@ requires n != 7;
    //@ requires n >= 7;
    //@ requires n > 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n == 6;
    //@ requires n != 6;
    //@ requires n >= 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n == 11;
    //@ requires n != 11;
    //@ requires n >= 11;
    //@ requires n > 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n == 10;
    //@ requires n != 10;
    //@ requires n >= 10;
    //@ requires n > 10;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < bits.length;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n != bits.length;
    //@ requires n >= bits.length;
    //@ requires n > bits.length;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 8;
    //@ requires i <= 8;
    //@ requires i == 8;
    //@ requires i != 8;
    //@ requires i >= 8;
    //@ requires i > 8;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:291:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:291: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:104: verify: Precondition conjunct is false: 3 > bits.length
    //@ requires 3 > bits.length;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 == bits.length;
    //@ requires 2 != bits.length;
    //@ requires 2 >= bits.length;
    //@ requires 2 > bits.length;
    //@ requires 11 < bits.length;
    //@ requires 11 <= bits.length;
    //@ requires 11 == bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 < bits.length;
    //@ requires 10 <= bits.length;
    //@ requires 10 == bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 == bits.length;
    //@ requires 1 != bits.length;
    //@ requires 1 >= bits.length;
    //@ requires 1 > bits.length;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n == 8;
    //@ requires n != 8;
    //@ requires n >= 8;
    //@ requires n > 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n == 7;
    //@ requires n != 7;
    //@ requires n >= 7;
    //@ requires n > 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n == 6;
    //@ requires n != 6;
    //@ requires n >= 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n == 11;
    //@ requires n != 11;
    //@ requires n >= 11;
    //@ requires n > 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n == 10;
    //@ requires n != 10;
    //@ requires n >= 10;
    //@ requires n > 10;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < bits.length;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n != bits.length;
    //@ requires n >= bits.length;
    //@ requires n > bits.length;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 8;
    //@ requires i <= 8;
    //@ requires i == 8;
    //@ requires i != 8;
    //@ requires i >= 8;
    //@ requires i > 8;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:290:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:290: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:106: verify: Precondition conjunct is false: 2 == bits.length
    //@ requires 2 == bits.length;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 2 >= bits.length;
    //@ requires 2 > bits.length;
    //@ requires 11 < bits.length;
    //@ requires 11 <= bits.length;
    //@ requires 11 == bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 < bits.length;
    //@ requires 10 <= bits.length;
    //@ requires 10 == bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 == bits.length;
    //@ requires 1 != bits.length;
    //@ requires 1 >= bits.length;
    //@ requires 1 > bits.length;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n == 8;
    //@ requires n != 8;
    //@ requires n >= 8;
    //@ requires n > 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n == 7;
    //@ requires n != 7;
    //@ requires n >= 7;
    //@ requires n > 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n == 6;
    //@ requires n != 6;
    //@ requires n >= 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n == 11;
    //@ requires n != 11;
    //@ requires n >= 11;
    //@ requires n > 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n == 10;
    //@ requires n != 10;
    //@ requires n >= 10;
    //@ requires n > 10;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < bits.length;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n != bits.length;
    //@ requires n >= bits.length;
    //@ requires n > bits.length;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 8;
    //@ requires i <= 8;
    //@ requires i == 8;
    //@ requires i != 8;
    //@ requires i >= 8;
    //@ requires i > 8;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:289:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:289: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:107: verify: Precondition conjunct is false: 2 >= bits.length
    //@ requires 2 >= bits.length;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 2 > bits.length;
    //@ requires 11 < bits.length;
    //@ requires 11 <= bits.length;
    //@ requires 11 == bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 < bits.length;
    //@ requires 10 <= bits.length;
    //@ requires 10 == bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 == bits.length;
    //@ requires 1 != bits.length;
    //@ requires 1 >= bits.length;
    //@ requires 1 > bits.length;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n == 8;
    //@ requires n != 8;
    //@ requires n >= 8;
    //@ requires n > 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n == 7;
    //@ requires n != 7;
    //@ requires n >= 7;
    //@ requires n > 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n == 6;
    //@ requires n != 6;
    //@ requires n >= 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n == 11;
    //@ requires n != 11;
    //@ requires n >= 11;
    //@ requires n > 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n == 10;
    //@ requires n != 10;
    //@ requires n >= 10;
    //@ requires n > 10;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < bits.length;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n != bits.length;
    //@ requires n >= bits.length;
    //@ requires n > bits.length;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 8;
    //@ requires i <= 8;
    //@ requires i == 8;
    //@ requires i != 8;
    //@ requires i >= 8;
    //@ requires i > 8;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:288:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:288: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:107: verify: Precondition conjunct is false: 2 > bits.length
    //@ requires 2 > bits.length;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 < bits.length;
    //@ requires 11 <= bits.length;
    //@ requires 11 == bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 < bits.length;
    //@ requires 10 <= bits.length;
    //@ requires 10 == bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 == bits.length;
    //@ requires 1 != bits.length;
    //@ requires 1 >= bits.length;
    //@ requires 1 > bits.length;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n == 8;
    //@ requires n != 8;
    //@ requires n >= 8;
    //@ requires n > 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n == 7;
    //@ requires n != 7;
    //@ requires n >= 7;
    //@ requires n > 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n == 6;
    //@ requires n != 6;
    //@ requires n >= 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n == 11;
    //@ requires n != 11;
    //@ requires n >= 11;
    //@ requires n > 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n == 10;
    //@ requires n != 10;
    //@ requires n >= 10;
    //@ requires n > 10;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < bits.length;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n != bits.length;
    //@ requires n >= bits.length;
    //@ requires n > bits.length;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 8;
    //@ requires i <= 8;
    //@ requires i == 8;
    //@ requires i != 8;
    //@ requires i >= 8;
    //@ requires i > 8;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:287:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:287: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:107: verify: Precondition conjunct is false: 11 < bits.length
    //@ requires 11 < bits.length;
                    ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 <= bits.length;
    //@ requires 11 == bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 < bits.length;
    //@ requires 10 <= bits.length;
    //@ requires 10 == bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 == bits.length;
    //@ requires 1 != bits.length;
    //@ requires 1 >= bits.length;
    //@ requires 1 > bits.length;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n == 8;
    //@ requires n != 8;
    //@ requires n >= 8;
    //@ requires n > 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n == 7;
    //@ requires n != 7;
    //@ requires n >= 7;
    //@ requires n > 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n == 6;
    //@ requires n != 6;
    //@ requires n >= 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n == 11;
    //@ requires n != 11;
    //@ requires n >= 11;
    //@ requires n > 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n == 10;
    //@ requires n != 10;
    //@ requires n >= 10;
    //@ requires n > 10;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < bits.length;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n != bits.length;
    //@ requires n >= bits.length;
    //@ requires n > bits.length;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 8;
    //@ requires i <= 8;
    //@ requires i == 8;
    //@ requires i != 8;
    //@ requires i >= 8;
    //@ requires i > 8;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:286:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:286: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:107: verify: Precondition conjunct is false: 11 <= bits.length
    //@ requires 11 <= bits.length;
                    ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 == bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 < bits.length;
    //@ requires 10 <= bits.length;
    //@ requires 10 == bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 == bits.length;
    //@ requires 1 != bits.length;
    //@ requires 1 >= bits.length;
    //@ requires 1 > bits.length;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n == 8;
    //@ requires n != 8;
    //@ requires n >= 8;
    //@ requires n > 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n == 7;
    //@ requires n != 7;
    //@ requires n >= 7;
    //@ requires n > 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n == 6;
    //@ requires n != 6;
    //@ requires n >= 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n == 11;
    //@ requires n != 11;
    //@ requires n >= 11;
    //@ requires n > 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n == 10;
    //@ requires n != 10;
    //@ requires n >= 10;
    //@ requires n > 10;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < bits.length;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n != bits.length;
    //@ requires n >= bits.length;
    //@ requires n > bits.length;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 8;
    //@ requires i <= 8;
    //@ requires i == 8;
    //@ requires i != 8;
    //@ requires i >= 8;
    //@ requires i > 8;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:285:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:285: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:107: verify: Precondition conjunct is false: 11 == bits.length
    //@ requires 11 == bits.length;
                    ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 < bits.length;
    //@ requires 10 <= bits.length;
    //@ requires 10 == bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 == bits.length;
    //@ requires 1 != bits.length;
    //@ requires 1 >= bits.length;
    //@ requires 1 > bits.length;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n == 8;
    //@ requires n != 8;
    //@ requires n >= 8;
    //@ requires n > 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n == 7;
    //@ requires n != 7;
    //@ requires n >= 7;
    //@ requires n > 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n == 6;
    //@ requires n != 6;
    //@ requires n >= 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n == 11;
    //@ requires n != 11;
    //@ requires n >= 11;
    //@ requires n > 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n == 10;
    //@ requires n != 10;
    //@ requires n >= 10;
    //@ requires n > 10;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < bits.length;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n != bits.length;
    //@ requires n >= bits.length;
    //@ requires n > bits.length;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 8;
    //@ requires i <= 8;
    //@ requires i == 8;
    //@ requires i != 8;
    //@ requires i >= 8;
    //@ requires i > 8;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:284:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:284: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:110: verify: Precondition conjunct is false: 10 < bits.length
    //@ requires 10 < bits.length;
                    ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 <= bits.length;
    //@ requires 10 == bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 == bits.length;
    //@ requires 1 != bits.length;
    //@ requires 1 >= bits.length;
    //@ requires 1 > bits.length;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n == 8;
    //@ requires n != 8;
    //@ requires n >= 8;
    //@ requires n > 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n == 7;
    //@ requires n != 7;
    //@ requires n >= 7;
    //@ requires n > 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n == 6;
    //@ requires n != 6;
    //@ requires n >= 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n == 11;
    //@ requires n != 11;
    //@ requires n >= 11;
    //@ requires n > 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n == 10;
    //@ requires n != 10;
    //@ requires n >= 10;
    //@ requires n > 10;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < bits.length;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n != bits.length;
    //@ requires n >= bits.length;
    //@ requires n > bits.length;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 8;
    //@ requires i <= 8;
    //@ requires i == 8;
    //@ requires i != 8;
    //@ requires i >= 8;
    //@ requires i > 8;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:283:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:283: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:110: verify: Precondition conjunct is false: 10 <= bits.length
    //@ requires 10 <= bits.length;
                    ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 == bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 == bits.length;
    //@ requires 1 != bits.length;
    //@ requires 1 >= bits.length;
    //@ requires 1 > bits.length;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n == 8;
    //@ requires n != 8;
    //@ requires n >= 8;
    //@ requires n > 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n == 7;
    //@ requires n != 7;
    //@ requires n >= 7;
    //@ requires n > 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n == 6;
    //@ requires n != 6;
    //@ requires n >= 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n == 11;
    //@ requires n != 11;
    //@ requires n >= 11;
    //@ requires n > 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n == 10;
    //@ requires n != 10;
    //@ requires n >= 10;
    //@ requires n > 10;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < bits.length;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n != bits.length;
    //@ requires n >= bits.length;
    //@ requires n > bits.length;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 8;
    //@ requires i <= 8;
    //@ requires i == 8;
    //@ requires i != 8;
    //@ requires i >= 8;
    //@ requires i > 8;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:282:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:282: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:110: verify: Precondition conjunct is false: 10 == bits.length
    //@ requires 10 == bits.length;
                    ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 == bits.length;
    //@ requires 1 != bits.length;
    //@ requires 1 >= bits.length;
    //@ requires 1 > bits.length;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n == 8;
    //@ requires n != 8;
    //@ requires n >= 8;
    //@ requires n > 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n == 7;
    //@ requires n != 7;
    //@ requires n >= 7;
    //@ requires n > 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n == 6;
    //@ requires n != 6;
    //@ requires n >= 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n == 11;
    //@ requires n != 11;
    //@ requires n >= 11;
    //@ requires n > 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n == 10;
    //@ requires n != 10;
    //@ requires n >= 10;
    //@ requires n > 10;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < bits.length;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n != bits.length;
    //@ requires n >= bits.length;
    //@ requires n > bits.length;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 8;
    //@ requires i <= 8;
    //@ requires i == 8;
    //@ requires i != 8;
    //@ requires i >= 8;
    //@ requires i > 8;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:281:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:281: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:115: verify: Precondition conjunct is false: 1 == bits.length
    //@ requires 1 == bits.length;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ requires 1 >= bits.length;
    //@ requires 1 > bits.length;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n == 8;
    //@ requires n != 8;
    //@ requires n >= 8;
    //@ requires n > 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n == 7;
    //@ requires n != 7;
    //@ requires n >= 7;
    //@ requires n > 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n == 6;
    //@ requires n != 6;
    //@ requires n >= 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n == 11;
    //@ requires n != 11;
    //@ requires n >= 11;
    //@ requires n > 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n == 10;
    //@ requires n != 10;
    //@ requires n >= 10;
    //@ requires n > 10;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < bits.length;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n != bits.length;
    //@ requires n >= bits.length;
    //@ requires n > bits.length;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 8;
    //@ requires i <= 8;
    //@ requires i == 8;
    //@ requires i != 8;
    //@ requires i >= 8;
    //@ requires i > 8;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:280:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:280: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:116: verify: Precondition conjunct is false: 1 >= bits.length
    //@ requires 1 >= bits.length;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ requires 1 > bits.length;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n == 8;
    //@ requires n != 8;
    //@ requires n >= 8;
    //@ requires n > 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n == 7;
    //@ requires n != 7;
    //@ requires n >= 7;
    //@ requires n > 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n == 6;
    //@ requires n != 6;
    //@ requires n >= 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n == 11;
    //@ requires n != 11;
    //@ requires n >= 11;
    //@ requires n > 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n == 10;
    //@ requires n != 10;
    //@ requires n >= 10;
    //@ requires n > 10;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < bits.length;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n != bits.length;
    //@ requires n >= bits.length;
    //@ requires n > bits.length;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 8;
    //@ requires i <= 8;
    //@ requires i == 8;
    //@ requires i != 8;
    //@ requires i >= 8;
    //@ requires i > 8;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:279:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:279: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:116: verify: Precondition conjunct is false: 1 > bits.length
    //@ requires 1 > bits.length;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n == 8;
    //@ requires n != 8;
    //@ requires n >= 8;
    //@ requires n > 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n == 7;
    //@ requires n != 7;
    //@ requires n >= 7;
    //@ requires n > 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n == 6;
    //@ requires n != 6;
    //@ requires n >= 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n == 11;
    //@ requires n != 11;
    //@ requires n >= 11;
    //@ requires n > 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n == 10;
    //@ requires n != 10;
    //@ requires n >= 10;
    //@ requires n > 10;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < bits.length;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n != bits.length;
    //@ requires n >= bits.length;
    //@ requires n > bits.length;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 8;
    //@ requires i <= 8;
    //@ requires i == 8;
    //@ requires i != 8;
    //@ requires i >= 8;
    //@ requires i > 8;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:278:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:278: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:116: verify: Precondition conjunct is false: n < -1
    //@ requires n < -1;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n == 8;
    //@ requires n != 8;
    //@ requires n >= 8;
    //@ requires n > 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n == 7;
    //@ requires n != 7;
    //@ requires n >= 7;
    //@ requires n > 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n == 6;
    //@ requires n != 6;
    //@ requires n >= 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n == 11;
    //@ requires n != 11;
    //@ requires n >= 11;
    //@ requires n > 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n == 10;
    //@ requires n != 10;
    //@ requires n >= 10;
    //@ requires n > 10;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < bits.length;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n != bits.length;
    //@ requires n >= bits.length;
    //@ requires n > bits.length;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 8;
    //@ requires i <= 8;
    //@ requires i == 8;
    //@ requires i != 8;
    //@ requires i >= 8;
    //@ requires i > 8;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:277:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:277: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:116: verify: Precondition conjunct is false: n <= -1
    //@ requires n <= -1;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n == 8;
    //@ requires n != 8;
    //@ requires n >= 8;
    //@ requires n > 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n == 7;
    //@ requires n != 7;
    //@ requires n >= 7;
    //@ requires n > 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n == 6;
    //@ requires n != 6;
    //@ requires n >= 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n == 11;
    //@ requires n != 11;
    //@ requires n >= 11;
    //@ requires n > 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n == 10;
    //@ requires n != 10;
    //@ requires n >= 10;
    //@ requires n > 10;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < bits.length;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n != bits.length;
    //@ requires n >= bits.length;
    //@ requires n > bits.length;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 8;
    //@ requires i <= 8;
    //@ requires i == 8;
    //@ requires i != 8;
    //@ requires i >= 8;
    //@ requires i > 8;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:276:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:276: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:116: verify: Precondition conjunct is false: n == -1
    //@ requires n == -1;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n == 8;
    //@ requires n != 8;
    //@ requires n >= 8;
    //@ requires n > 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n == 7;
    //@ requires n != 7;
    //@ requires n >= 7;
    //@ requires n > 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n == 6;
    //@ requires n != 6;
    //@ requires n >= 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n == 11;
    //@ requires n != 11;
    //@ requires n >= 11;
    //@ requires n > 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n == 10;
    //@ requires n != 10;
    //@ requires n >= 10;
    //@ requires n > 10;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < bits.length;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n != bits.length;
    //@ requires n >= bits.length;
    //@ requires n > bits.length;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 8;
    //@ requires i <= 8;
    //@ requires i == 8;
    //@ requires i != 8;
    //@ requires i >= 8;
    //@ requires i > 8;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:275:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:275: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:121: verify: Precondition conjunct is false: n == 8
    //@ requires n == 8;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n >= 8;
    //@ requires n > 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n == 7;
    //@ requires n != 7;
    //@ requires n >= 7;
    //@ requires n > 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n == 6;
    //@ requires n != 6;
    //@ requires n >= 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n == 11;
    //@ requires n != 11;
    //@ requires n >= 11;
    //@ requires n > 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n == 10;
    //@ requires n != 10;
    //@ requires n >= 10;
    //@ requires n > 10;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < bits.length;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n != bits.length;
    //@ requires n >= bits.length;
    //@ requires n > bits.length;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 8;
    //@ requires i <= 8;
    //@ requires i == 8;
    //@ requires i != 8;
    //@ requires i >= 8;
    //@ requires i > 8;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:274:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:274: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:122: verify: Precondition conjunct is false: n >= 8
    //@ requires n >= 8;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n > 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n == 7;
    //@ requires n != 7;
    //@ requires n >= 7;
    //@ requires n > 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n == 6;
    //@ requires n != 6;
    //@ requires n >= 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n == 11;
    //@ requires n != 11;
    //@ requires n >= 11;
    //@ requires n > 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n == 10;
    //@ requires n != 10;
    //@ requires n >= 10;
    //@ requires n > 10;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < bits.length;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n != bits.length;
    //@ requires n >= bits.length;
    //@ requires n > bits.length;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 8;
    //@ requires i <= 8;
    //@ requires i == 8;
    //@ requires i != 8;
    //@ requires i >= 8;
    //@ requires i > 8;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:273:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:273: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:122: verify: Precondition conjunct is false: n > 8
    //@ requires n > 8;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n == 7;
    //@ requires n != 7;
    //@ requires n >= 7;
    //@ requires n > 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n == 6;
    //@ requires n != 6;
    //@ requires n >= 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n == 11;
    //@ requires n != 11;
    //@ requires n >= 11;
    //@ requires n > 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n == 10;
    //@ requires n != 10;
    //@ requires n >= 10;
    //@ requires n > 10;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < bits.length;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n != bits.length;
    //@ requires n >= bits.length;
    //@ requires n > bits.length;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 8;
    //@ requires i <= 8;
    //@ requires i == 8;
    //@ requires i != 8;
    //@ requires i >= 8;
    //@ requires i > 8;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:272:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:272: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:124: verify: Precondition conjunct is false: n == 7
    //@ requires n == 7;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n >= 7;
    //@ requires n > 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n == 6;
    //@ requires n != 6;
    //@ requires n >= 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n == 11;
    //@ requires n != 11;
    //@ requires n >= 11;
    //@ requires n > 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n == 10;
    //@ requires n != 10;
    //@ requires n >= 10;
    //@ requires n > 10;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < bits.length;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n != bits.length;
    //@ requires n >= bits.length;
    //@ requires n > bits.length;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 8;
    //@ requires i <= 8;
    //@ requires i == 8;
    //@ requires i != 8;
    //@ requires i >= 8;
    //@ requires i > 8;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:271:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:271: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:125: verify: Precondition conjunct is false: n >= 7
    //@ requires n >= 7;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n > 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n == 6;
    //@ requires n != 6;
    //@ requires n >= 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n == 11;
    //@ requires n != 11;
    //@ requires n >= 11;
    //@ requires n > 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n == 10;
    //@ requires n != 10;
    //@ requires n >= 10;
    //@ requires n > 10;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < bits.length;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n != bits.length;
    //@ requires n >= bits.length;
    //@ requires n > bits.length;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 8;
    //@ requires i <= 8;
    //@ requires i == 8;
    //@ requires i != 8;
    //@ requires i >= 8;
    //@ requires i > 8;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:270:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:270: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:125: verify: Precondition conjunct is false: n > 7
    //@ requires n > 7;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n == 6;
    //@ requires n != 6;
    //@ requires n >= 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n == 11;
    //@ requires n != 11;
    //@ requires n >= 11;
    //@ requires n > 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n == 10;
    //@ requires n != 10;
    //@ requires n >= 10;
    //@ requires n > 10;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < bits.length;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n != bits.length;
    //@ requires n >= bits.length;
    //@ requires n > bits.length;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 8;
    //@ requires i <= 8;
    //@ requires i == 8;
    //@ requires i != 8;
    //@ requires i >= 8;
    //@ requires i > 8;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:269:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:269: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:127: verify: Precondition conjunct is false: n == 6
    //@ requires n == 6;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n >= 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n == 11;
    //@ requires n != 11;
    //@ requires n >= 11;
    //@ requires n > 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n == 10;
    //@ requires n != 10;
    //@ requires n >= 10;
    //@ requires n > 10;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < bits.length;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n != bits.length;
    //@ requires n >= bits.length;
    //@ requires n > bits.length;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 8;
    //@ requires i <= 8;
    //@ requires i == 8;
    //@ requires i != 8;
    //@ requires i >= 8;
    //@ requires i > 8;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:268:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:268: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:128: verify: Precondition conjunct is false: n >= 6
    //@ requires n >= 6;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n == 11;
    //@ requires n != 11;
    //@ requires n >= 11;
    //@ requires n > 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n == 10;
    //@ requires n != 10;
    //@ requires n >= 10;
    //@ requires n > 10;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < bits.length;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n != bits.length;
    //@ requires n >= bits.length;
    //@ requires n > bits.length;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 8;
    //@ requires i <= 8;
    //@ requires i == 8;
    //@ requires i != 8;
    //@ requires i >= 8;
    //@ requires i > 8;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:267:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:267: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:128: verify: Precondition conjunct is false: n > 6
    //@ requires n > 6;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n == 11;
    //@ requires n != 11;
    //@ requires n >= 11;
    //@ requires n > 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n == 10;
    //@ requires n != 10;
    //@ requires n >= 10;
    //@ requires n > 10;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < bits.length;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n != bits.length;
    //@ requires n >= bits.length;
    //@ requires n > bits.length;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 8;
    //@ requires i <= 8;
    //@ requires i == 8;
    //@ requires i != 8;
    //@ requires i >= 8;
    //@ requires i > 8;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:266:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:266: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:130: verify: Precondition conjunct is false: n == 5
    //@ requires n == 5;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n == 11;
    //@ requires n != 11;
    //@ requires n >= 11;
    //@ requires n > 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n == 10;
    //@ requires n != 10;
    //@ requires n >= 10;
    //@ requires n > 10;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < bits.length;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n != bits.length;
    //@ requires n >= bits.length;
    //@ requires n > bits.length;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 8;
    //@ requires i <= 8;
    //@ requires i == 8;
    //@ requires i != 8;
    //@ requires i >= 8;
    //@ requires i > 8;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:265:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:265: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:131: verify: Precondition conjunct is false: n >= 5
    //@ requires n >= 5;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n == 11;
    //@ requires n != 11;
    //@ requires n >= 11;
    //@ requires n > 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n == 10;
    //@ requires n != 10;
    //@ requires n >= 10;
    //@ requires n > 10;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < bits.length;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n != bits.length;
    //@ requires n >= bits.length;
    //@ requires n > bits.length;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 8;
    //@ requires i <= 8;
    //@ requires i == 8;
    //@ requires i != 8;
    //@ requires i >= 8;
    //@ requires i > 8;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:264:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:264: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:131: verify: Precondition conjunct is false: n > 5
    //@ requires n > 5;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n == 11;
    //@ requires n != 11;
    //@ requires n >= 11;
    //@ requires n > 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n == 10;
    //@ requires n != 10;
    //@ requires n >= 10;
    //@ requires n > 10;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < bits.length;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n != bits.length;
    //@ requires n >= bits.length;
    //@ requires n > bits.length;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 8;
    //@ requires i <= 8;
    //@ requires i == 8;
    //@ requires i != 8;
    //@ requires i >= 8;
    //@ requires i > 8;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:263:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:263: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:131: verify: Precondition conjunct is false: n < 4
    //@ requires n < 4;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n == 11;
    //@ requires n != 11;
    //@ requires n >= 11;
    //@ requires n > 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n == 10;
    //@ requires n != 10;
    //@ requires n >= 10;
    //@ requires n > 10;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < bits.length;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n != bits.length;
    //@ requires n >= bits.length;
    //@ requires n > bits.length;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 8;
    //@ requires i <= 8;
    //@ requires i == 8;
    //@ requires i != 8;
    //@ requires i >= 8;
    //@ requires i > 8;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:262:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:262: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:133: verify: Precondition conjunct is false: n != 4
    //@ requires n != 4;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n == 11;
    //@ requires n != 11;
    //@ requires n >= 11;
    //@ requires n > 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n == 10;
    //@ requires n != 10;
    //@ requires n >= 10;
    //@ requires n > 10;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < bits.length;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n != bits.length;
    //@ requires n >= bits.length;
    //@ requires n > bits.length;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 8;
    //@ requires i <= 8;
    //@ requires i == 8;
    //@ requires i != 8;
    //@ requires i >= 8;
    //@ requires i > 8;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:261:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:261: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:134: verify: Precondition conjunct is false: n > 4
    //@ requires n > 4;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n >= 4;
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n == 11;
    //@ requires n != 11;
    //@ requires n >= 11;
    //@ requires n > 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n == 10;
    //@ requires n != 10;
    //@ requires n >= 10;
    //@ requires n > 10;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < bits.length;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n != bits.length;
    //@ requires n >= bits.length;
    //@ requires n > bits.length;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 8;
    //@ requires i <= 8;
    //@ requires i == 8;
    //@ requires i != 8;
    //@ requires i >= 8;
    //@ requires i > 8;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:260:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:260: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:134: verify: Precondition conjunct is false: n < 3
    //@ requires n < 3;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n >= 4;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n == 11;
    //@ requires n != 11;
    //@ requires n >= 11;
    //@ requires n > 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n == 10;
    //@ requires n != 10;
    //@ requires n >= 10;
    //@ requires n > 10;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < bits.length;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n != bits.length;
    //@ requires n >= bits.length;
    //@ requires n > bits.length;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 8;
    //@ requires i <= 8;
    //@ requires i == 8;
    //@ requires i != 8;
    //@ requires i >= 8;
    //@ requires i > 8;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:259:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:259: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:134: verify: Precondition conjunct is false: n <= 3
    //@ requires n <= 3;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n >= 4;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n == 11;
    //@ requires n != 11;
    //@ requires n >= 11;
    //@ requires n > 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n == 10;
    //@ requires n != 10;
    //@ requires n >= 10;
    //@ requires n > 10;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < bits.length;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n != bits.length;
    //@ requires n >= bits.length;
    //@ requires n > bits.length;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 8;
    //@ requires i <= 8;
    //@ requires i == 8;
    //@ requires i != 8;
    //@ requires i >= 8;
    //@ requires i > 8;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:258:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:258: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:134: verify: Precondition conjunct is false: n == 3
    //@ requires n == 3;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n >= 4;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n == 11;
    //@ requires n != 11;
    //@ requires n >= 11;
    //@ requires n > 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n == 10;
    //@ requires n != 10;
    //@ requires n >= 10;
    //@ requires n > 10;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < bits.length;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n != bits.length;
    //@ requires n >= bits.length;
    //@ requires n > bits.length;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 8;
    //@ requires i <= 8;
    //@ requires i == 8;
    //@ requires i != 8;
    //@ requires i >= 8;
    //@ requires i > 8;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:257:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:257: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:137: verify: Precondition conjunct is false: n < 2
    //@ requires n < 2;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n >= 4;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n == 11;
    //@ requires n != 11;
    //@ requires n >= 11;
    //@ requires n > 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n == 10;
    //@ requires n != 10;
    //@ requires n >= 10;
    //@ requires n > 10;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < bits.length;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n != bits.length;
    //@ requires n >= bits.length;
    //@ requires n > bits.length;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 8;
    //@ requires i <= 8;
    //@ requires i == 8;
    //@ requires i != 8;
    //@ requires i >= 8;
    //@ requires i > 8;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:256:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:256: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:137: verify: Precondition conjunct is false: n <= 2
    //@ requires n <= 2;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n >= 4;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n == 11;
    //@ requires n != 11;
    //@ requires n >= 11;
    //@ requires n > 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n == 10;
    //@ requires n != 10;
    //@ requires n >= 10;
    //@ requires n > 10;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < bits.length;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n != bits.length;
    //@ requires n >= bits.length;
    //@ requires n > bits.length;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 8;
    //@ requires i <= 8;
    //@ requires i == 8;
    //@ requires i != 8;
    //@ requires i >= 8;
    //@ requires i > 8;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:255:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:255: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:137: verify: Precondition conjunct is false: n == 2
    //@ requires n == 2;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n >= 4;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n == 11;
    //@ requires n != 11;
    //@ requires n >= 11;
    //@ requires n > 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n == 10;
    //@ requires n != 10;
    //@ requires n >= 10;
    //@ requires n > 10;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < bits.length;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n != bits.length;
    //@ requires n >= bits.length;
    //@ requires n > bits.length;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 8;
    //@ requires i <= 8;
    //@ requires i == 8;
    //@ requires i != 8;
    //@ requires i >= 8;
    //@ requires i > 8;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:254:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:254: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:142: verify: Precondition conjunct is false: n == 11
    //@ requires n == 11;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n >= 4;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n >= 11;
    //@ requires n > 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n == 10;
    //@ requires n != 10;
    //@ requires n >= 10;
    //@ requires n > 10;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < bits.length;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n != bits.length;
    //@ requires n >= bits.length;
    //@ requires n > bits.length;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 8;
    //@ requires i <= 8;
    //@ requires i == 8;
    //@ requires i != 8;
    //@ requires i >= 8;
    //@ requires i > 8;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:253:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:253: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:143: verify: Precondition conjunct is false: n >= 11
    //@ requires n >= 11;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n >= 4;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n > 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n == 10;
    //@ requires n != 10;
    //@ requires n >= 10;
    //@ requires n > 10;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < bits.length;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n != bits.length;
    //@ requires n >= bits.length;
    //@ requires n > bits.length;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 8;
    //@ requires i <= 8;
    //@ requires i == 8;
    //@ requires i != 8;
    //@ requires i >= 8;
    //@ requires i > 8;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:252:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:252: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:143: verify: Precondition conjunct is false: n > 11
    //@ requires n > 11;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n >= 4;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n == 10;
    //@ requires n != 10;
    //@ requires n >= 10;
    //@ requires n > 10;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < bits.length;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n != bits.length;
    //@ requires n >= bits.length;
    //@ requires n > bits.length;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 8;
    //@ requires i <= 8;
    //@ requires i == 8;
    //@ requires i != 8;
    //@ requires i >= 8;
    //@ requires i > 8;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:251:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:251: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:145: verify: Precondition conjunct is false: n == 10
    //@ requires n == 10;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n >= 4;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n >= 10;
    //@ requires n > 10;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < bits.length;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n != bits.length;
    //@ requires n >= bits.length;
    //@ requires n > bits.length;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 8;
    //@ requires i <= 8;
    //@ requires i == 8;
    //@ requires i != 8;
    //@ requires i >= 8;
    //@ requires i > 8;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:250:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:250: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:146: verify: Precondition conjunct is false: n >= 10
    //@ requires n >= 10;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n >= 4;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n > 10;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < bits.length;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n != bits.length;
    //@ requires n >= bits.length;
    //@ requires n > bits.length;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 8;
    //@ requires i <= 8;
    //@ requires i == 8;
    //@ requires i != 8;
    //@ requires i >= 8;
    //@ requires i > 8;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:249:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:249: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:146: verify: Precondition conjunct is false: n > 10
    //@ requires n > 10;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n >= 4;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < bits.length;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n != bits.length;
    //@ requires n >= bits.length;
    //@ requires n > bits.length;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 8;
    //@ requires i <= 8;
    //@ requires i == 8;
    //@ requires i != 8;
    //@ requires i >= 8;
    //@ requires i > 8;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:248:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:248: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:146: verify: Precondition conjunct is false: n < 1
    //@ requires n < 1;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n >= 4;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < bits.length;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n != bits.length;
    //@ requires n >= bits.length;
    //@ requires n > bits.length;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 8;
    //@ requires i <= 8;
    //@ requires i == 8;
    //@ requires i != 8;
    //@ requires i >= 8;
    //@ requires i > 8;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:247:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:247: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:146: verify: Precondition conjunct is false: n <= 1
    //@ requires n <= 1;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n >= 4;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < bits.length;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n != bits.length;
    //@ requires n >= bits.length;
    //@ requires n > bits.length;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 8;
    //@ requires i <= 8;
    //@ requires i == 8;
    //@ requires i != 8;
    //@ requires i >= 8;
    //@ requires i > 8;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:246:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:246: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:146: verify: Precondition conjunct is false: n == 1
    //@ requires n == 1;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n >= 4;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < bits.length;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n != bits.length;
    //@ requires n >= bits.length;
    //@ requires n > bits.length;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 8;
    //@ requires i <= 8;
    //@ requires i == 8;
    //@ requires i != 8;
    //@ requires i >= 8;
    //@ requires i > 8;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:245:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:245: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:149: verify: Precondition conjunct is false: n < bits.length
    //@ requires n < bits.length;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n >= 4;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n != bits.length;
    //@ requires n >= bits.length;
    //@ requires n > bits.length;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 8;
    //@ requires i <= 8;
    //@ requires i == 8;
    //@ requires i != 8;
    //@ requires i >= 8;
    //@ requires i > 8;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:244:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:244: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:151: verify: Precondition conjunct is false: n != bits.length
    //@ requires n != bits.length;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n >= 4;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n > bits.length;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 8;
    //@ requires i <= 8;
    //@ requires i == 8;
    //@ requires i != 8;
    //@ requires i >= 8;
    //@ requires i > 8;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:243:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:243: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:152: verify: Precondition conjunct is false: n > bits.length
    //@ requires n > bits.length;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n >= 4;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 8;
    //@ requires i <= 8;
    //@ requires i == 8;
    //@ requires i != 8;
    //@ requires i >= 8;
    //@ requires i > 8;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:242:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:242: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:152: verify: Precondition conjunct is false: n < 0
    //@ requires n < 0;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n >= 4;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 8;
    //@ requires i <= 8;
    //@ requires i == 8;
    //@ requires i != 8;
    //@ requires i >= 8;
    //@ requires i > 8;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:241:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:241: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:152: verify: Precondition conjunct is false: n <= 0
    //@ requires n <= 0;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n >= 4;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 8;
    //@ requires i <= 8;
    //@ requires i == 8;
    //@ requires i != 8;
    //@ requires i >= 8;
    //@ requires i > 8;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:240:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:240: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:152: verify: Precondition conjunct is false: n == 0
    //@ requires n == 0;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n >= 4;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 8;
    //@ requires i <= 8;
    //@ requires i == 8;
    //@ requires i != 8;
    //@ requires i >= 8;
    //@ requires i > 8;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:239:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:239: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:155: verify: Precondition conjunct is false: i < n
    //@ requires i < n;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n >= 4;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 8;
    //@ requires i <= 8;
    //@ requires i == 8;
    //@ requires i != 8;
    //@ requires i >= 8;
    //@ requires i > 8;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:238:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:238: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:155: verify: Precondition conjunct is false: i <= n
    //@ requires i <= n;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n >= 4;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 8;
    //@ requires i <= 8;
    //@ requires i == 8;
    //@ requires i != 8;
    //@ requires i >= 8;
    //@ requires i > 8;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:237:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:237: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:155: verify: Precondition conjunct is false: i == n
    //@ requires i == n;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n >= 4;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 8;
    //@ requires i <= 8;
    //@ requires i == 8;
    //@ requires i != 8;
    //@ requires i >= 8;
    //@ requires i > 8;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:236:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:236: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:155: verify: Precondition conjunct is false: i != n
    //@ requires i != n;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n >= 4;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 8;
    //@ requires i <= 8;
    //@ requires i == 8;
    //@ requires i != 8;
    //@ requires i >= 8;
    //@ requires i > 8;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:235:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:235: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:155: verify: Precondition conjunct is false: i >= n
    //@ requires i >= n;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n >= 4;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i > n;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 8;
    //@ requires i <= 8;
    //@ requires i == 8;
    //@ requires i != 8;
    //@ requires i >= 8;
    //@ requires i > 8;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:234:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:234: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:155: verify: Precondition conjunct is false: i > n
    //@ requires i > n;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n >= 4;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 8;
    //@ requires i <= 8;
    //@ requires i == 8;
    //@ requires i != 8;
    //@ requires i >= 8;
    //@ requires i > 8;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:233:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:233: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:155: verify: Precondition conjunct is false: i < -1
    //@ requires i < -1;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n >= 4;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 8;
    //@ requires i <= 8;
    //@ requires i == 8;
    //@ requires i != 8;
    //@ requires i >= 8;
    //@ requires i > 8;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:232:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:232: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:155: verify: Precondition conjunct is false: i <= -1
    //@ requires i <= -1;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n >= 4;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 8;
    //@ requires i <= 8;
    //@ requires i == 8;
    //@ requires i != 8;
    //@ requires i >= 8;
    //@ requires i > 8;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:231:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:231: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:155: verify: Precondition conjunct is false: i == -1
    //@ requires i == -1;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n >= 4;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 8;
    //@ requires i <= 8;
    //@ requires i == 8;
    //@ requires i != 8;
    //@ requires i >= 8;
    //@ requires i > 8;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:230:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:230: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:158: verify: Precondition conjunct is false: i < 8
    //@ requires i < 8;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n >= 4;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i <= 8;
    //@ requires i == 8;
    //@ requires i != 8;
    //@ requires i >= 8;
    //@ requires i > 8;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:229:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:229: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:158: verify: Precondition conjunct is false: i <= 8
    //@ requires i <= 8;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n >= 4;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i == 8;
    //@ requires i != 8;
    //@ requires i >= 8;
    //@ requires i > 8;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:228:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:228: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:158: verify: Precondition conjunct is false: i == 8
    //@ requires i == 8;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n >= 4;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i != 8;
    //@ requires i >= 8;
    //@ requires i > 8;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:227:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:227: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:158: verify: Precondition conjunct is false: i != 8
    //@ requires i != 8;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n >= 4;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i >= 8;
    //@ requires i > 8;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:226:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:226: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:158: verify: Precondition conjunct is false: i >= 8
    //@ requires i >= 8;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n >= 4;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i > 8;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:225:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:225: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:158: verify: Precondition conjunct is false: i > 8
    //@ requires i > 8;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n >= 4;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:224:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:224: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:158: verify: Precondition conjunct is false: i < 7
    //@ requires i < 7;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n >= 4;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:223:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:223: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:158: verify: Precondition conjunct is false: i <= 7
    //@ requires i <= 7;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n >= 4;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:222:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:222: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:158: verify: Precondition conjunct is false: i == 7
    //@ requires i == 7;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n >= 4;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:221:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:221: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:158: verify: Precondition conjunct is false: i != 7
    //@ requires i != 7;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n >= 4;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:220:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:220: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:158: verify: Precondition conjunct is false: i >= 7
    //@ requires i >= 7;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n >= 4;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i > 7;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:219:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:219: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:158: verify: Precondition conjunct is false: i > 7
    //@ requires i > 7;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n >= 4;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:218:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:218: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:158: verify: Precondition conjunct is false: i < 6
    //@ requires i < 6;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n >= 4;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:217:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:217: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:158: verify: Precondition conjunct is false: i <= 6
    //@ requires i <= 6;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n >= 4;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:216:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:216: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:158: verify: Precondition conjunct is false: i == 6
    //@ requires i == 6;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n >= 4;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:215:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:215: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:158: verify: Precondition conjunct is false: i != 6
    //@ requires i != 6;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n >= 4;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:214:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:214: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:158: verify: Precondition conjunct is false: i >= 6
    //@ requires i >= 6;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n >= 4;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:213:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:213: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:158: verify: Precondition conjunct is false: i > 6
    //@ requires i > 6;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n >= 4;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:212:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:212: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:158: verify: Precondition conjunct is false: i < 5
    //@ requires i < 5;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n >= 4;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:211:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:211: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:158: verify: Precondition conjunct is false: i <= 5
    //@ requires i <= 5;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n >= 4;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:210:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:210: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:158: verify: Precondition conjunct is false: i == 5
    //@ requires i == 5;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n >= 4;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:209:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:209: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:158: verify: Precondition conjunct is false: i != 5
    //@ requires i != 5;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n >= 4;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:208:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:208: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:158: verify: Precondition conjunct is false: i >= 5
    //@ requires i >= 5;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n >= 4;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:207:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:207: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:158: verify: Precondition conjunct is false: i > 5
    //@ requires i > 5;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n >= 4;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:206:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:206: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:158: verify: Precondition conjunct is false: i < 4
    //@ requires i < 4;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n >= 4;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:205:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:205: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:158: verify: Precondition conjunct is false: i <= 4
    //@ requires i <= 4;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n >= 4;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:204:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:204: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:158: verify: Precondition conjunct is false: i == 4
    //@ requires i == 4;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n >= 4;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:203:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:203: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:158: verify: Precondition conjunct is false: i != 4
    //@ requires i != 4;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n >= 4;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:202:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:202: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:158: verify: Precondition conjunct is false: i >= 4
    //@ requires i >= 4;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n >= 4;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:201:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:201: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:158: verify: Precondition conjunct is false: i > 4
    //@ requires i > 4;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n >= 4;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:200:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:200: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:158: verify: Precondition conjunct is false: i < 3
    //@ requires i < 3;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n >= 4;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:199:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:199: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:158: verify: Precondition conjunct is false: i <= 3
    //@ requires i <= 3;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n >= 4;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:198:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:198: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:158: verify: Precondition conjunct is false: i == 3
    //@ requires i == 3;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n >= 4;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:197:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:197: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:158: verify: Precondition conjunct is false: i != 3
    //@ requires i != 3;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n >= 4;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:196:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:196: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:159: verify: Precondition conjunct is false: i > 3
    //@ requires i > 3;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n >= 4;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i >= 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:195:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:195: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:159: verify: Precondition conjunct is false: i < 2
    //@ requires i < 2;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n >= 4;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i >= 3;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:194:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:194: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:159: verify: Precondition conjunct is false: i <= 2
    //@ requires i <= 2;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n >= 4;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i >= 3;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:193:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:193: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:159: verify: Precondition conjunct is false: i == 2
    //@ requires i == 2;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n >= 4;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i >= 3;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 11;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:192:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:192: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:162: verify: Precondition conjunct is false: i < 11
    //@ requires i < 11;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n >= 4;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i >= 3;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i <= 11;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:191:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:191: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:162: verify: Precondition conjunct is false: i <= 11
    //@ requires i <= 11;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n >= 4;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i >= 3;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i == 11;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:190:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:190: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:162: verify: Precondition conjunct is false: i == 11
    //@ requires i == 11;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n >= 4;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i >= 3;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i != 11;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:189:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:189: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:162: verify: Precondition conjunct is false: i != 11
    //@ requires i != 11;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n >= 4;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i >= 3;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i >= 11;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:188:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:188: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:162: verify: Precondition conjunct is false: i >= 11
    //@ requires i >= 11;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n >= 4;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i >= 3;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i > 11;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:187:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:187: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:162: verify: Precondition conjunct is false: i > 11
    //@ requires i > 11;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n >= 4;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i >= 3;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 10;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:186:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:186: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:162: verify: Precondition conjunct is false: i < 10
    //@ requires i < 10;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n >= 4;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i >= 3;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i <= 10;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:185:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:185: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:162: verify: Precondition conjunct is false: i <= 10
    //@ requires i <= 10;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n >= 4;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i >= 3;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i == 10;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:184:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:184: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:162: verify: Precondition conjunct is false: i == 10
    //@ requires i == 10;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n >= 4;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i >= 3;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i != 10;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:183:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:183: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:162: verify: Precondition conjunct is false: i != 10
    //@ requires i != 10;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n >= 4;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i >= 3;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i >= 10;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:182:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:182: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:162: verify: Precondition conjunct is false: i >= 10
    //@ requires i >= 10;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n >= 4;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i >= 3;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i > 10;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:181:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:181: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:162: verify: Precondition conjunct is false: i > 10
    //@ requires i > 10;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n >= 4;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i >= 3;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:180:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:180: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:162: verify: Precondition conjunct is false: i < 1
    //@ requires i < 1;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n >= 4;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i >= 3;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:179:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:179: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:162: verify: Precondition conjunct is false: i <= 1
    //@ requires i <= 1;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n >= 4;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i >= 3;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:178:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:178: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:162: verify: Precondition conjunct is false: i == 1
    //@ requires i == 1;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n >= 4;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i >= 3;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < bits.length;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:177:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:177: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:165: verify: Precondition conjunct is false: i < bits.length
    //@ requires i < bits.length;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n >= 4;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i >= 3;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i <= bits.length;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:176:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:176: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:165: verify: Precondition conjunct is false: i <= bits.length
    //@ requires i <= bits.length;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n >= 4;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i >= 3;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i == bits.length;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:175:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:175: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:165: verify: Precondition conjunct is false: i == bits.length
    //@ requires i == bits.length;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n >= 4;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i >= 3;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i != bits.length;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:174:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:174: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:165: verify: Precondition conjunct is false: i != bits.length
    //@ requires i != bits.length;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n >= 4;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i >= 3;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i >= bits.length;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:173:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:173: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:165: verify: Precondition conjunct is false: i >= bits.length
    //@ requires i >= bits.length;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n >= 4;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i >= 3;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i > bits.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:172:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:172: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:165: verify: Precondition conjunct is false: i > bits.length
    //@ requires i > bits.length;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n >= 4;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i >= 3;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:171:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:171: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:165: verify: Precondition conjunct is false: i < 0
    //@ requires i < 0;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n >= 4;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i >= 3;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:170:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:170: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:165: verify: Precondition conjunct is false: i <= 0
    //@ requires i <= 0;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n >= 4;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i >= 3;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:169:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:169: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:165: verify: Precondition conjunct is false: i == 0
    //@ requires i == 0;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n >= 4;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i >= 3;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:48: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:35:) in method isOneBitCharacter
        return i == n - 1;
        ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:35: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:48:
    //@ ensures \result;
        ^
2 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> \result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n >= 4;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i >= 3;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:38:) in method isOneBitCharacter
        return i == n - 1;
        ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:38: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    //@ ensures bits != null ==> \result;
        ^
2 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures !\result;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n >= 4;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i >= 3;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:46: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:35:) in method isOneBitCharacter
        return i == n - 1;
        ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:35: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:46:
    //@ ensures !\result;
        ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:54: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:39:) in method main
        isOneBitCharacter(arr);
                         ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:39: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:54:
    public static boolean isOneBitCharacter(int[] bits) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:17: verify: Precondition conjunct is false: 4 <= bits.length
    //@ requires 4 <= bits.length;
                   ^
5 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    //@ ensures bits != null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n >= 4;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i >= 3;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:45: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:37:) in method isOneBitCharacter
        return i == n - 1;
        ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:37: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:45:
    //@ ensures bits != null ==> !\result;
        ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:53: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:38:) in method main
        isOneBitCharacter(arr);
                         ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:38: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:53:
    public static boolean isOneBitCharacter(int[] bits) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:17: verify: Precondition conjunct is false: 4 <= bits.length
    //@ requires 4 <= bits.length;
                   ^
5 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n >= 4;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i >= 3;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:40: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:164:) in method isOneBitCharacter
            __Loop_Invariant_Dummy1(bits, n, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:164: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:40:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:151: verify: Precondition conjunct is false: i != -1
    //@ requires i != -1;
                   ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:52: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:37:) in method main
        isOneBitCharacter(arr);
                         ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:37: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:52:
    public static boolean isOneBitCharacter(int[] bits) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:17: verify: Precondition conjunct is false: 4 <= bits.length
    //@ requires 4 <= bits.length;
                   ^
6 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n >= 4;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i >= 3;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:40: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:163:) in method isOneBitCharacter
            __Loop_Invariant_Dummy1(bits, n, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:163: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:40:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:151: verify: Precondition conjunct is false: i >= -1
    //@ requires i >= -1;
                   ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:52: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:37:) in method main
        isOneBitCharacter(arr);
                         ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:37: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:52:
    public static boolean isOneBitCharacter(int[] bits) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:17: verify: Precondition conjunct is false: 4 <= bits.length
    //@ requires 4 <= bits.length;
                   ^
6 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n >= 4;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i > -1;
    //@ requires i >= 3;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:40: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:162:) in method isOneBitCharacter
            __Loop_Invariant_Dummy1(bits, n, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:162: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:40:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:151: verify: Precondition conjunct is false: i > -1
    //@ requires i > -1;
                   ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:52: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:37:) in method main
        isOneBitCharacter(arr);
                         ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:37: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:52:
    public static boolean isOneBitCharacter(int[] bits) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:17: verify: Precondition conjunct is false: 4 <= bits.length
    //@ requires 4 <= bits.length;
                   ^
6 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n >= 4;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i >= 3;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:40: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:161:) in method isOneBitCharacter
            __Loop_Invariant_Dummy1(bits, n, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:161: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:40:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:151: verify: Precondition conjunct is false: i >= 3
    //@ requires i >= 3;
                   ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:52: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:37:) in method main
        isOneBitCharacter(arr);
                         ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:37: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:52:
    public static boolean isOneBitCharacter(int[] bits) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:17: verify: Precondition conjunct is false: 4 <= bits.length
    //@ requires 4 <= bits.length;
                   ^
6 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n >= 4;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:40: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:160:) in method isOneBitCharacter
            __Loop_Invariant_Dummy1(bits, n, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:160: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:40:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:151: verify: Precondition conjunct is false: i != 2
    //@ requires i != 2;
                   ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:52: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:37:) in method main
        isOneBitCharacter(arr);
                         ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:37: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:52:
    public static boolean isOneBitCharacter(int[] bits) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:17: verify: Precondition conjunct is false: 4 <= bits.length
    //@ requires 4 <= bits.length;
                   ^
6 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n >= 4;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:40: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:159:) in method isOneBitCharacter
            __Loop_Invariant_Dummy1(bits, n, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:159: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:40:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:151: verify: Precondition conjunct is false: i >= 2
    //@ requires i >= 2;
                   ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:52: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:37:) in method main
        isOneBitCharacter(arr);
                         ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:37: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:52:
    public static boolean isOneBitCharacter(int[] bits) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:17: verify: Precondition conjunct is false: 4 <= bits.length
    //@ requires 4 <= bits.length;
                   ^
6 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n >= 4;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i > 2;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:40: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:158:) in method isOneBitCharacter
            __Loop_Invariant_Dummy1(bits, n, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:158: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:40:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:151: verify: Precondition conjunct is false: i > 2
    //@ requires i > 2;
                   ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:52: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:37:) in method main
        isOneBitCharacter(arr);
                         ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:37: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:52:
    public static boolean isOneBitCharacter(int[] bits) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:17: verify: Precondition conjunct is false: 4 <= bits.length
    //@ requires 4 <= bits.length;
                   ^
6 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n >= 4;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:40: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:157:) in method isOneBitCharacter
            __Loop_Invariant_Dummy1(bits, n, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:157: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:40:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:151: verify: Precondition conjunct is false: i != 1
    //@ requires i != 1;
                   ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:52: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:37:) in method main
        isOneBitCharacter(arr);
                         ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:37: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:52:
    public static boolean isOneBitCharacter(int[] bits) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:17: verify: Precondition conjunct is false: 4 <= bits.length
    //@ requires 4 <= bits.length;
                   ^
6 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n >= 4;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:40: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:156:) in method isOneBitCharacter
            __Loop_Invariant_Dummy1(bits, n, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:156: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:40:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:151: verify: Precondition conjunct is false: i >= 1
    //@ requires i >= 1;
                   ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:52: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:37:) in method main
        isOneBitCharacter(arr);
                         ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:37: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:52:
    public static boolean isOneBitCharacter(int[] bits) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:17: verify: Precondition conjunct is false: 4 <= bits.length
    //@ requires 4 <= bits.length;
                   ^
6 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n >= 4;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i > 1;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:40: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:155:) in method isOneBitCharacter
            __Loop_Invariant_Dummy1(bits, n, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:155: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:40:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:151: verify: Precondition conjunct is false: i > 1
    //@ requires i > 1;
                   ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:52: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:37:) in method main
        isOneBitCharacter(arr);
                         ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:37: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:52:
    public static boolean isOneBitCharacter(int[] bits) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:17: verify: Precondition conjunct is false: 4 <= bits.length
    //@ requires 4 <= bits.length;
                   ^
6 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n >= 4;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:40: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:154:) in method isOneBitCharacter
            __Loop_Invariant_Dummy1(bits, n, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:154: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:40:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:151: verify: Precondition conjunct is false: i != 0
    //@ requires i != 0;
                   ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:52: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:37:) in method main
        isOneBitCharacter(arr);
                         ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:37: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:52:
    public static boolean isOneBitCharacter(int[] bits) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:17: verify: Precondition conjunct is false: 4 <= bits.length
    //@ requires 4 <= bits.length;
                   ^
6 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n >= 4;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:40: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:153:) in method isOneBitCharacter
            __Loop_Invariant_Dummy1(bits, n, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:153: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:40:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:151: verify: Precondition conjunct is false: i >= 0
    //@ requires i >= 0;
                   ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:52: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:37:) in method main
        isOneBitCharacter(arr);
                         ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:37: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:52:
    public static boolean isOneBitCharacter(int[] bits) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:17: verify: Precondition conjunct is false: 4 <= bits.length
    //@ requires 4 <= bits.length;
                   ^
6 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n >= 4;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:40: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:152:) in method isOneBitCharacter
            __Loop_Invariant_Dummy1(bits, n, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:152: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:40:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:151: verify: Precondition conjunct is false: i > 0
    //@ requires i > 0;
                   ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:52: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:37:) in method main
        isOneBitCharacter(arr);
                         ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:37: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:52:
    public static boolean isOneBitCharacter(int[] bits) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:17: verify: Precondition conjunct is false: 4 <= bits.length
    //@ requires 4 <= bits.length;
                   ^
6 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n >= 4;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:41: verify: The prover cannot establish an assertion (PossiblyNegativeIndex) in method isOneBitCharacter
            i += bits[i] + 1;
                     ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:52: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:37:) in method main
        isOneBitCharacter(arr);
                         ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:37: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:52:
    public static boolean isOneBitCharacter(int[] bits) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:17: verify: Precondition conjunct is false: 4 <= bits.length
    //@ requires 4 <= bits.length;
                   ^
4 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n >= 4;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:40: verify: The prover cannot establish an assertion (PossiblyNegativeIndex) in method isOneBitCharacter
            i += bits[i] + 1;
                     ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:51: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:36:) in method main
        isOneBitCharacter(arr);
                         ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:36: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:51:
    public static boolean isOneBitCharacter(int[] bits) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:17: verify: Precondition conjunct is false: 4 == bits.length
    //@ requires 4 == bits.length;
                   ^
4 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n >= 4;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:39: verify: The prover cannot establish an assertion (PossiblyNegativeIndex) in method isOneBitCharacter
            i += bits[i] + 1;
                     ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:50: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:35:) in method main
        isOneBitCharacter(arr);
                         ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:35: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:50:
    public static boolean isOneBitCharacter(int[] bits) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:18: verify: Precondition conjunct is false: 3 < bits.length
    //@ requires 3 < bits.length;
                   ^
4 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n >= 4;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:38: verify: The prover cannot establish an assertion (PossiblyNegativeIndex) in method isOneBitCharacter
            i += bits[i] + 1;
                     ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:49: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:34:) in method main
        isOneBitCharacter(arr);
                         ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:34: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:49:
    public static boolean isOneBitCharacter(int[] bits) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:18: verify: Precondition conjunct is false: 3 <= bits.length
    //@ requires 3 <= bits.length;
                   ^
4 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n >= 4;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:37: verify: The prover cannot establish an assertion (PossiblyNegativeIndex) in method isOneBitCharacter
            i += bits[i] + 1;
                     ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:48: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:33:) in method main
        isOneBitCharacter(arr);
                         ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:33: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:48:
    public static boolean isOneBitCharacter(int[] bits) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:19: verify: Precondition conjunct is false: 2 < bits.length
    //@ requires 2 < bits.length;
                   ^
4 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n >= 4;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:36: verify: The prover cannot establish an assertion (PossiblyNegativeIndex) in method isOneBitCharacter
            i += bits[i] + 1;
                     ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:32:) in method main
        isOneBitCharacter(arr);
                         ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:32: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    public static boolean isOneBitCharacter(int[] bits) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:19: verify: Precondition conjunct is false: 2 <= bits.length
    //@ requires 2 <= bits.length;
                   ^
4 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n >= 4;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:35: verify: The prover cannot establish an assertion (PossiblyNegativeIndex) in method isOneBitCharacter
            i += bits[i] + 1;
                     ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:46: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:31:) in method main
        isOneBitCharacter(arr);
                         ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:31: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:46:
    public static boolean isOneBitCharacter(int[] bits) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:26: verify: Precondition conjunct is false: 1 < bits.length
    //@ requires 1 < bits.length;
                   ^
4 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n >= 4;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:34: verify: The prover cannot establish an assertion (PossiblyNegativeIndex) in method isOneBitCharacter
            i += bits[i] + 1;
                     ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:45: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:30:) in method main
        isOneBitCharacter(arr);
                         ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:30: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:45:
    public static boolean isOneBitCharacter(int[] bits) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:27: verify: Precondition conjunct is false: 1 != bits.length
    //@ requires 1 != bits.length;
                   ^
4 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 <= bits.length;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 <= bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n >= 4;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:35: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:143:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:143: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:35:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:86: verify: Precondition conjunct is false: 4 <= bits.length
    //@ requires 4 <= bits.length;
                   ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:48: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:29:) in method main
        isOneBitCharacter(arr);
                         ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:29: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:48:
    public static boolean isOneBitCharacter(int[] bits) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:18: verify: Precondition conjunct is false: 3 != bits.length
    //@ requires 3 != bits.length;
                   ^
6 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 <= bits.length;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 == bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n >= 4;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:35: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:142:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:142: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:35:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:86: verify: Precondition conjunct is false: 4 == bits.length
    //@ requires 4 == bits.length;
                   ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:48: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:29:) in method main
        isOneBitCharacter(arr);
                         ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:29: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:48:
    public static boolean isOneBitCharacter(int[] bits) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:18: verify: Precondition conjunct is false: 3 != bits.length
    //@ requires 3 != bits.length;
                   ^
6 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 <= bits.length;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 < bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n >= 4;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:35: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:141:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:141: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:35:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:87: verify: Precondition conjunct is false: 3 < bits.length
    //@ requires 3 < bits.length;
                   ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:48: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:29:) in method main
        isOneBitCharacter(arr);
                         ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:29: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:48:
    public static boolean isOneBitCharacter(int[] bits) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:18: verify: Precondition conjunct is false: 3 != bits.length
    //@ requires 3 != bits.length;
                   ^
6 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 <= bits.length;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 <= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n >= 4;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:35: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:140:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:140: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:35:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:87: verify: Precondition conjunct is false: 3 <= bits.length
    //@ requires 3 <= bits.length;
                   ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:48: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:29:) in method main
        isOneBitCharacter(arr);
                         ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:29: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:48:
    public static boolean isOneBitCharacter(int[] bits) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:18: verify: Precondition conjunct is false: 3 != bits.length
    //@ requires 3 != bits.length;
                   ^
6 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 <= bits.length;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 < bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n >= 4;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:35: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:139:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:139: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:35:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:88: verify: Precondition conjunct is false: 2 < bits.length
    //@ requires 2 < bits.length;
                   ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:48: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:29:) in method main
        isOneBitCharacter(arr);
                         ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:29: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:48:
    public static boolean isOneBitCharacter(int[] bits) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:18: verify: Precondition conjunct is false: 3 != bits.length
    //@ requires 3 != bits.length;
                   ^
6 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 <= bits.length;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 <= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n >= 4;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:35: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:138:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:138: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:35:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:88: verify: Precondition conjunct is false: 2 <= bits.length
    //@ requires 2 <= bits.length;
                   ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:48: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:29:) in method main
        isOneBitCharacter(arr);
                         ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:29: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:48:
    public static boolean isOneBitCharacter(int[] bits) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:18: verify: Precondition conjunct is false: 3 != bits.length
    //@ requires 3 != bits.length;
                   ^
6 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 <= bits.length;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 < bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n >= 4;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:35: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:137:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:137: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:35:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:95: verify: Precondition conjunct is false: 1 < bits.length
    //@ requires 1 < bits.length;
                   ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:48: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:29:) in method main
        isOneBitCharacter(arr);
                         ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:29: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:48:
    public static boolean isOneBitCharacter(int[] bits) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:18: verify: Precondition conjunct is false: 3 != bits.length
    //@ requires 3 != bits.length;
                   ^
6 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 <= bits.length;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 <= bits.length;
    //@ requires 1 != bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n >= 4;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:35: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:136:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:136: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:35:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:96: verify: Precondition conjunct is false: 1 != bits.length
    //@ requires 1 != bits.length;
                   ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:48: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:29:) in method main
        isOneBitCharacter(arr);
                         ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:29: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:48:
    public static boolean isOneBitCharacter(int[] bits) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:18: verify: Precondition conjunct is false: 3 != bits.length
    //@ requires 3 != bits.length;
                   ^
6 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 <= bits.length;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 <= bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n >= 4;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:35: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:135:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:135: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:35:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:112: verify: Precondition conjunct is false: n == 4
    //@ requires n == 4;
                   ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:48: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:29:) in method main
        isOneBitCharacter(arr);
                         ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:29: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:48:
    public static boolean isOneBitCharacter(int[] bits) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:18: verify: Precondition conjunct is false: 3 != bits.length
    //@ requires 3 != bits.length;
                   ^
6 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 <= bits.length;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 <= bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n >= 4;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:35: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:134:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:134: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:35:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:112: verify: Precondition conjunct is false: n >= 4
    //@ requires n >= 4;
                   ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:48: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:29:) in method main
        isOneBitCharacter(arr);
                         ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:29: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:48:
    public static boolean isOneBitCharacter(int[] bits) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:18: verify: Precondition conjunct is false: 3 != bits.length
    //@ requires 3 != bits.length;
                   ^
6 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 <= bits.length;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 <= bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:35: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:133:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:133: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:35:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:113: verify: Precondition conjunct is false: n >= 3
    //@ requires n >= 3;
                   ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:48: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:29:) in method main
        isOneBitCharacter(arr);
                         ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:29: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:48:
    public static boolean isOneBitCharacter(int[] bits) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:18: verify: Precondition conjunct is false: 3 != bits.length
    //@ requires 3 != bits.length;
                   ^
6 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 <= bits.length;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 <= bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n != 3;
    //@ requires n > 3;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:35: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:132:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:132: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:35:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:113: verify: Precondition conjunct is false: n > 3
    //@ requires n > 3;
                   ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:48: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:29:) in method main
        isOneBitCharacter(arr);
                         ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:29: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:48:
    public static boolean isOneBitCharacter(int[] bits) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:18: verify: Precondition conjunct is false: 3 != bits.length
    //@ requires 3 != bits.length;
                   ^
6 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 <= bits.length;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 <= bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n != 3;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:35: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:131:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:131: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:35:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:114: verify: Precondition conjunct is false: n >= 2
    //@ requires n >= 2;
                   ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:48: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:29:) in method main
        isOneBitCharacter(arr);
                         ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:29: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:48:
    public static boolean isOneBitCharacter(int[] bits) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:18: verify: Precondition conjunct is false: 3 != bits.length
    //@ requires 3 != bits.length;
                   ^
6 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 <= bits.length;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 <= bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n != 3;
    //@ requires n != 2;
    //@ requires n > 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:35: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:130:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:130: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:35:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:114: verify: Precondition conjunct is false: n > 2
    //@ requires n > 2;
                   ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:48: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:29:) in method main
        isOneBitCharacter(arr);
                         ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:29: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:48:
    public static boolean isOneBitCharacter(int[] bits) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:18: verify: Precondition conjunct is false: 3 != bits.length
    //@ requires 3 != bits.length;
                   ^
6 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 <= bits.length;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 <= bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n != 3;
    //@ requires n != 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:35: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:129:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:129: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:35:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:120: verify: Precondition conjunct is false: n != 1
    //@ requires n != 1;
                   ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:48: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:29:) in method main
        isOneBitCharacter(arr);
                         ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:29: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:48:
    public static boolean isOneBitCharacter(int[] bits) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:18: verify: Precondition conjunct is false: 3 != bits.length
    //@ requires 3 != bits.length;
                   ^
6 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 <= bits.length;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 <= bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n != 3;
    //@ requires n != 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:35: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:128:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:128: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:35:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:121: verify: Precondition conjunct is false: n > 1
    //@ requires n > 1;
                   ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:48: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:29:) in method main
        isOneBitCharacter(arr);
                         ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:29: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:48:
    public static boolean isOneBitCharacter(int[] bits) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:18: verify: Precondition conjunct is false: 3 != bits.length
    //@ requires 3 != bits.length;
                   ^
6 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 <= bits.length;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 <= bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n != 3;
    //@ requires n != 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n >= 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:33: verify: The prover cannot establish an assertion (PossiblyNegativeIndex) in method isOneBitCharacter
            i += bits[i] + 1;
                     ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:48: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:29:) in method main
        isOneBitCharacter(arr);
                         ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:29: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:48:
    public static boolean isOneBitCharacter(int[] bits) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:18: verify: Precondition conjunct is false: 3 != bits.length
    //@ requires 3 != bits.length;
                   ^
4 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 <= bits.length;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 3 != bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 <= bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n != 3;
    //@ requires n != 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n >= 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:34: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:126:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:126: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:34:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:86: verify: Precondition conjunct is false: 3 != bits.length
    //@ requires 3 != bits.length;
                   ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:49: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:28:) in method main
        isOneBitCharacter(arr);
                         ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:28: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:49:
    public static boolean isOneBitCharacter(int[] bits) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:11: verify: Precondition conjunct is false: 6 != bits.length
    //@ requires 6 != bits.length;
                   ^
6 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 <= bits.length;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 <= bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n != 3;
    //@ requires n != 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n >= 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:34: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:125:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:125: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:34:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:110: verify: Precondition conjunct is false: n != 3
    //@ requires n != 3;
                   ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:49: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:28:) in method main
        isOneBitCharacter(arr);
                         ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:28: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:49:
    public static boolean isOneBitCharacter(int[] bits) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:11: verify: Precondition conjunct is false: 6 != bits.length
    //@ requires 6 != bits.length;
                   ^
6 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 <= bits.length;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 <= bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n != 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n >= 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:32: verify: The prover cannot establish an assertion (PossiblyNegativeIndex) in method isOneBitCharacter
            i += bits[i] + 1;
                     ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:49: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:28:) in method main
        isOneBitCharacter(arr);
                         ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:28: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:49:
    public static boolean isOneBitCharacter(int[] bits) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:11: verify: Precondition conjunct is false: 6 != bits.length
    //@ requires 6 != bits.length;
                   ^
4 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 <= bits.length;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 <= bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n != 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n >= 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:31: verify: The prover cannot establish an assertion (PossiblyNegativeIndex) in method isOneBitCharacter
            i += bits[i] + 1;
                     ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:48: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:27:) in method main
        isOneBitCharacter(arr);
                         ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:27: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:48:
    public static boolean isOneBitCharacter(int[] bits) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:12: verify: Precondition conjunct is false: 6 > bits.length
    //@ requires 6 > bits.length;
                   ^
4 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 <= bits.length;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 <= bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n != 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n >= 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:30: verify: The prover cannot establish an assertion (PossiblyNegativeIndex) in method isOneBitCharacter
            i += bits[i] + 1;
                     ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:26:) in method main
        isOneBitCharacter(arr);
                         ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:26: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    public static boolean isOneBitCharacter(int[] bits) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:13: verify: Precondition conjunct is false: 5 >= bits.length
    //@ requires 5 >= bits.length;
                   ^
4 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 <= bits.length;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 <= bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n != 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n >= 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:29: verify: The prover cannot establish an assertion (PossiblyNegativeIndex) in method isOneBitCharacter
            i += bits[i] + 1;
                     ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:46: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:25:) in method main
        isOneBitCharacter(arr);
                         ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:25: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:46:
    public static boolean isOneBitCharacter(int[] bits) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:13: verify: Precondition conjunct is false: 5 > bits.length
    //@ requires 5 > bits.length;
                   ^
4 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 5 != bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 <= bits.length;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 <= bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n != 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n >= 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:28: verify: The prover cannot establish an assertion (PossiblyNegativeIndex) in method isOneBitCharacter
            i += bits[i] + 1;
                     ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:45: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:24:) in method main
        isOneBitCharacter(arr);
                         ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:45:
    public static boolean isOneBitCharacter(int[] bits) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:13: verify: Precondition conjunct is false: 4 >= bits.length
    //@ requires 4 >= bits.length;
                   ^
4 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 5 != bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 <= bits.length;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 != bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 <= bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n != 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n >= 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:119:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:119: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:29:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:74: verify: Precondition conjunct is false: 6 != bits.length
    //@ requires 6 != bits.length;
                   ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:46: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:23:) in method main
        isOneBitCharacter(arr);
                         ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:23: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:46:
    public static boolean isOneBitCharacter(int[] bits) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:8: verify: Precondition conjunct is false: 7 != bits.length
    //@ requires 7 != bits.length;
                   ^
6 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 5 != bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 <= bits.length;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 6 > bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 <= bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n != 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n >= 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:118:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:118: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:29:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:75: verify: Precondition conjunct is false: 6 > bits.length
    //@ requires 6 > bits.length;
                   ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:46: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:23:) in method main
        isOneBitCharacter(arr);
                         ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:23: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:46:
    public static boolean isOneBitCharacter(int[] bits) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:8: verify: Precondition conjunct is false: 7 != bits.length
    //@ requires 7 != bits.length;
                   ^
6 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 5 != bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 <= bits.length;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 >= bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 <= bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n != 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n >= 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:117:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:117: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:29:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:76: verify: Precondition conjunct is false: 5 >= bits.length
    //@ requires 5 >= bits.length;
                   ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:46: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:23:) in method main
        isOneBitCharacter(arr);
                         ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:23: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:46:
    public static boolean isOneBitCharacter(int[] bits) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:8: verify: Precondition conjunct is false: 7 != bits.length
    //@ requires 7 != bits.length;
                   ^
6 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 5 != bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 <= bits.length;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 5 != bits.length;
    //@ requires 5 > bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 <= bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n != 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n >= 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:116:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:116: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:29:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:76: verify: Precondition conjunct is false: 5 > bits.length
    //@ requires 5 > bits.length;
                   ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:46: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:23:) in method main
        isOneBitCharacter(arr);
                         ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:23: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:46:
    public static boolean isOneBitCharacter(int[] bits) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:8: verify: Precondition conjunct is false: 7 != bits.length
    //@ requires 7 != bits.length;
                   ^
6 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 5 != bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 <= bits.length;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 5 != bits.length;
    //@ requires 4 >= bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 <= bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n != 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n >= 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:115:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:115: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:29:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:76: verify: Precondition conjunct is false: 4 >= bits.length
    //@ requires 4 >= bits.length;
                   ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:46: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:23:) in method main
        isOneBitCharacter(arr);
                         ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:23: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:46:
    public static boolean isOneBitCharacter(int[] bits) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:8: verify: Precondition conjunct is false: 7 != bits.length
    //@ requires 7 != bits.length;
                   ^
6 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 5 != bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 <= bits.length;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 5 != bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 <= bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n != 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n >= 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:114:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:114: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:29:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:93: verify: Precondition conjunct is false: n < 6
    //@ requires n < 6;
                   ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:46: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:23:) in method main
        isOneBitCharacter(arr);
                         ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:23: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:46:
    public static boolean isOneBitCharacter(int[] bits) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:8: verify: Precondition conjunct is false: 7 != bits.length
    //@ requires 7 != bits.length;
                   ^
6 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 5 != bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 <= bits.length;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 5 != bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 <= bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n <= 6;
    //@ requires n != 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n != 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n >= 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:113:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:113: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:29:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:94: verify: Precondition conjunct is false: n != 6
    //@ requires n != 6;
                   ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:46: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:23:) in method main
        isOneBitCharacter(arr);
                         ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:23: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:46:
    public static boolean isOneBitCharacter(int[] bits) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:8: verify: Precondition conjunct is false: 7 != bits.length
    //@ requires 7 != bits.length;
                   ^
6 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 5 != bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 <= bits.length;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 5 != bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 <= bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n <= 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n != 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n >= 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:112:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:112: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:29:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:94: verify: Precondition conjunct is false: n < 5
    //@ requires n < 5;
                   ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:46: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:23:) in method main
        isOneBitCharacter(arr);
                         ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:23: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:46:
    public static boolean isOneBitCharacter(int[] bits) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:8: verify: Precondition conjunct is false: 7 != bits.length
    //@ requires 7 != bits.length;
                   ^
6 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 5 != bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 <= bits.length;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 5 != bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 <= bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n <= 6;
    //@ requires n <= 5;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n != 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n >= 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:111:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:111: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:29:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:94: verify: Precondition conjunct is false: n <= 5
    //@ requires n <= 5;
                   ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:46: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:23:) in method main
        isOneBitCharacter(arr);
                         ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:23: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:46:
    public static boolean isOneBitCharacter(int[] bits) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:8: verify: Precondition conjunct is false: 7 != bits.length
    //@ requires 7 != bits.length;
                   ^
6 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 5 != bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 <= bits.length;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 5 != bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 <= bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n <= 6;
    //@ requires n != 5;
    //@ requires n <= 4;
    //@ requires n != 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n >= 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:110:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:110: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:29:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:95: verify: Precondition conjunct is false: n <= 4
    //@ requires n <= 4;
                   ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:46: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:23:) in method main
        isOneBitCharacter(arr);
                         ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:23: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:46:
    public static boolean isOneBitCharacter(int[] bits) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:8: verify: Precondition conjunct is false: 7 != bits.length
    //@ requires 7 != bits.length;
                   ^
6 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 5 != bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 <= bits.length;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 5 != bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 <= bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n <= 6;
    //@ requires n != 5;
    //@ requires n != 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n >= 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:27: verify: The prover cannot establish an assertion (PossiblyNegativeIndex) in method isOneBitCharacter
            i += bits[i] + 1;
                     ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:46: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:23:) in method main
        isOneBitCharacter(arr);
                         ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:23: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:46:
    public static boolean isOneBitCharacter(int[] bits) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:8: verify: Precondition conjunct is false: 7 != bits.length
    //@ requires 7 != bits.length;
                   ^
4 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 5 != bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 <= bits.length;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 5 != bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 <= bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n <= 6;
    //@ requires n != 5;
    //@ requires n != 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n >= 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:26: verify: The prover cannot establish an assertion (PossiblyNegativeIndex) in method isOneBitCharacter
            i += bits[i] + 1;
                     ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:45: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:22:) in method main
        isOneBitCharacter(arr);
                         ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:22: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:45:
    public static boolean isOneBitCharacter(int[] bits) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:9: verify: Precondition conjunct is false: 7 > bits.length
    //@ requires 7 > bits.length;
                   ^
4 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 5 != bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 <= bits.length;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 5 != bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 <= bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n <= 6;
    //@ requires n != 5;
    //@ requires n != 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n >= 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:25: verify: The prover cannot establish an assertion (PossiblyNegativeIndex) in method isOneBitCharacter
            i += bits[i] + 1;
                     ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:44: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:21:) in method main
        isOneBitCharacter(arr);
                         ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:21: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:44:
    public static boolean isOneBitCharacter(int[] bits) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:9: verify: Precondition conjunct is false: 6 >= bits.length
    //@ requires 6 >= bits.length;
                   ^
4 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 5 != bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 <= bits.length;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 != bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 5 != bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 <= bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n <= 6;
    //@ requires n != 5;
    //@ requires n != 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n >= 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:106:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:106: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:26:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:68: verify: Precondition conjunct is false: 7 != bits.length
    //@ requires 7 != bits.length;
                   ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:45: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:20:) in method main
        isOneBitCharacter(arr);
                         ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:20: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:45:
    public static boolean isOneBitCharacter(int[] bits) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:5: verify: Precondition conjunct is false: 8 != bits.length
    //@ requires 8 != bits.length;
                   ^
6 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 5 != bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 <= bits.length;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 7 > bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 5 != bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 <= bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n <= 6;
    //@ requires n != 5;
    //@ requires n != 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n >= 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:105:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:105: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:26:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:69: verify: Precondition conjunct is false: 7 > bits.length
    //@ requires 7 > bits.length;
                   ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:45: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:20:) in method main
        isOneBitCharacter(arr);
                         ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:20: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:45:
    public static boolean isOneBitCharacter(int[] bits) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:5: verify: Precondition conjunct is false: 8 != bits.length
    //@ requires 8 != bits.length;
                   ^
6 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 5 != bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 <= bits.length;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 6 >= bits.length;
    //@ requires 5 != bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 <= bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n <= 6;
    //@ requires n != 5;
    //@ requires n != 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n >= 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:104:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:104: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:26:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:69: verify: Precondition conjunct is false: 6 >= bits.length
    //@ requires 6 >= bits.length;
                   ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:45: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:20:) in method main
        isOneBitCharacter(arr);
                         ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:20: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:45:
    public static boolean isOneBitCharacter(int[] bits) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:5: verify: Precondition conjunct is false: 8 != bits.length
    //@ requires 8 != bits.length;
                   ^
6 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 5 != bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 <= bits.length;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 5 != bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 <= bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n <= 6;
    //@ requires n != 5;
    //@ requires n != 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n >= 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:103:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:103: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:26:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:84: verify: Precondition conjunct is false: n < 7
    //@ requires n < 7;
                   ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:45: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:20:) in method main
        isOneBitCharacter(arr);
                         ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:20: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:45:
    public static boolean isOneBitCharacter(int[] bits) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:5: verify: Precondition conjunct is false: 8 != bits.length
    //@ requires 8 != bits.length;
                   ^
6 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 5 != bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 <= bits.length;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 5 != bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 <= bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n <= 7;
    //@ requires n != 7;
    //@ requires n <= 6;
    //@ requires n != 5;
    //@ requires n != 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n >= 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:102:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:102: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:26:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:85: verify: Precondition conjunct is false: n != 7
    //@ requires n != 7;
                   ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:45: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:20:) in method main
        isOneBitCharacter(arr);
                         ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:20: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:45:
    public static boolean isOneBitCharacter(int[] bits) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:5: verify: Precondition conjunct is false: 8 != bits.length
    //@ requires 8 != bits.length;
                   ^
6 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 5 != bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 <= bits.length;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 5 != bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 <= bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n <= 7;
    //@ requires n <= 6;
    //@ requires n != 5;
    //@ requires n != 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n >= 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:101:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:101: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:26:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:85: verify: Precondition conjunct is false: n <= 6
    //@ requires n <= 6;
                   ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:45: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:20:) in method main
        isOneBitCharacter(arr);
                         ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:20: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:45:
    public static boolean isOneBitCharacter(int[] bits) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:5: verify: Precondition conjunct is false: 8 != bits.length
    //@ requires 8 != bits.length;
                   ^
6 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 5 != bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 <= bits.length;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 5 != bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 <= bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n <= 7;
    //@ requires n != 5;
    //@ requires n != 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n >= 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:24: verify: The prover cannot establish an assertion (PossiblyNegativeIndex) in method isOneBitCharacter
            i += bits[i] + 1;
                     ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:45: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:20:) in method main
        isOneBitCharacter(arr);
                         ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:20: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:45:
    public static boolean isOneBitCharacter(int[] bits) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:5: verify: Precondition conjunct is false: 8 != bits.length
    //@ requires 8 != bits.length;
                   ^
4 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 5 != bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 <= bits.length;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 5 != bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 <= bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n <= 7;
    //@ requires n != 5;
    //@ requires n != 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n >= 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:23: verify: The prover cannot establish an assertion (PossiblyNegativeIndex) in method isOneBitCharacter
            i += bits[i] + 1;
                     ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:44: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:19:) in method main
        isOneBitCharacter(arr);
                         ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:19: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:44:
    public static boolean isOneBitCharacter(int[] bits) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:6: verify: Precondition conjunct is false: 8 > bits.length
    //@ requires 8 > bits.length;
                   ^
4 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 5 != bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 <= bits.length;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 5 != bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 <= bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n <= 7;
    //@ requires n != 5;
    //@ requires n != 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n >= 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:22: verify: The prover cannot establish an assertion (PossiblyNegativeIndex) in method isOneBitCharacter
            i += bits[i] + 1;
                     ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:43: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:18:) in method main
        isOneBitCharacter(arr);
                         ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:18: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:43:
    public static boolean isOneBitCharacter(int[] bits) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:6: verify: Precondition conjunct is false: 7 >= bits.length
    //@ requires 7 >= bits.length;
                   ^
4 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 5 != bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 <= bits.length;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 5 != bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 <= bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n <= 7;
    //@ requires n != 5;
    //@ requires n != 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n >= 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:97:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:97: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:23:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:62: verify: Precondition conjunct is false: 8 != bits.length
    //@ requires 8 != bits.length;
                   ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:44: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:17:) in method main
        isOneBitCharacter(arr);
                         ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:17: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:44:
    public static boolean isOneBitCharacter(int[] bits) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:5: verify: Precondition conjunct is false: 8 >= bits.length
    //@ requires 8 >= bits.length;
                   ^
6 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 5 != bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 <= bits.length;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 8 > bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 5 != bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 <= bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n <= 7;
    //@ requires n != 5;
    //@ requires n != 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n >= 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:96:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:96: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:23:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:63: verify: Precondition conjunct is false: 8 > bits.length
    //@ requires 8 > bits.length;
                   ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:44: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:17:) in method main
        isOneBitCharacter(arr);
                         ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:17: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:44:
    public static boolean isOneBitCharacter(int[] bits) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:5: verify: Precondition conjunct is false: 8 >= bits.length
    //@ requires 8 >= bits.length;
                   ^
6 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 5 != bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 <= bits.length;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 7 >= bits.length;
    //@ requires 5 != bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 <= bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n <= 7;
    //@ requires n != 5;
    //@ requires n != 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n >= 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:95:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:95: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:23:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:63: verify: Precondition conjunct is false: 7 >= bits.length
    //@ requires 7 >= bits.length;
                   ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:44: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:17:) in method main
        isOneBitCharacter(arr);
                         ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:17: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:44:
    public static boolean isOneBitCharacter(int[] bits) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:5: verify: Precondition conjunct is false: 8 >= bits.length
    //@ requires 8 >= bits.length;
                   ^
6 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 5 != bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 <= bits.length;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 5 != bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 <= bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n <= 7;
    //@ requires n != 5;
    //@ requires n != 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n >= 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:94:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:94: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:23:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:75: verify: Precondition conjunct is false: n < 8
    //@ requires n < 8;
                   ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:44: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:17:) in method main
        isOneBitCharacter(arr);
                         ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:17: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:44:
    public static boolean isOneBitCharacter(int[] bits) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:5: verify: Precondition conjunct is false: 8 >= bits.length
    //@ requires 8 >= bits.length;
                   ^
6 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 5 != bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 <= bits.length;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 5 != bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 <= bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n <= 8;
    //@ requires n != 8;
    //@ requires n <= 7;
    //@ requires n != 5;
    //@ requires n != 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n >= 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:93:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:93: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:23:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:76: verify: Precondition conjunct is false: n != 8
    //@ requires n != 8;
                   ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:44: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:17:) in method main
        isOneBitCharacter(arr);
                         ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:17: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:44:
    public static boolean isOneBitCharacter(int[] bits) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:5: verify: Precondition conjunct is false: 8 >= bits.length
    //@ requires 8 >= bits.length;
                   ^
6 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 5 != bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 <= bits.length;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 5 != bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 <= bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n <= 8;
    //@ requires n <= 7;
    //@ requires n != 5;
    //@ requires n != 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n >= 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:92:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:92: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:23:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:76: verify: Precondition conjunct is false: n <= 7
    //@ requires n <= 7;
                   ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:44: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:17:) in method main
        isOneBitCharacter(arr);
                         ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:17: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:44:
    public static boolean isOneBitCharacter(int[] bits) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:5: verify: Precondition conjunct is false: 8 >= bits.length
    //@ requires 8 >= bits.length;
                   ^
6 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 5 != bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 <= bits.length;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 5 != bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 <= bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n <= 8;
    //@ requires n != 5;
    //@ requires n != 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n >= 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:21: verify: The prover cannot establish an assertion (PossiblyNegativeIndex) in method isOneBitCharacter
            i += bits[i] + 1;
                     ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:44: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:17:) in method main
        isOneBitCharacter(arr);
                         ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:17: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:44:
    public static boolean isOneBitCharacter(int[] bits) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:5: verify: Precondition conjunct is false: 8 >= bits.length
    //@ requires 8 >= bits.length;
                   ^
4 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 5 != bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 <= bits.length;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 8 >= bits.length;
    //@ requires 5 != bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 <= bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n <= 8;
    //@ requires n != 5;
    //@ requires n != 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n >= 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:22: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:90:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:90: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:22:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:61: verify: Precondition conjunct is false: 8 >= bits.length
    //@ requires 8 >= bits.length;
                   ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:43: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:16:) in method main
        isOneBitCharacter(arr);
                         ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:16: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:43:
    public static boolean isOneBitCharacter(int[] bits) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:10: verify: Precondition conjunct is false: 10 != bits.length
    //@ requires 10 != bits.length;
                    ^
6 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 5 != bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 <= bits.length;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 5 != bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 <= bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n <= 8;
    //@ requires n != 5;
    //@ requires n != 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n >= 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:22: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:89:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:89: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:22:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:73: verify: Precondition conjunct is false: n <= 8
    //@ requires n <= 8;
                   ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:43: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:16:) in method main
        isOneBitCharacter(arr);
                         ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:16: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:43:
    public static boolean isOneBitCharacter(int[] bits) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:10: verify: Precondition conjunct is false: 10 != bits.length
    //@ requires 10 != bits.length;
                    ^
6 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 5 != bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 <= bits.length;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 5 != bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 <= bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != 5;
    //@ requires n != 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n >= 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:20: verify: The prover cannot establish an assertion (PossiblyNegativeIndex) in method isOneBitCharacter
            i += bits[i] + 1;
                     ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:43: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:16:) in method main
        isOneBitCharacter(arr);
                         ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:16: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:43:
    public static boolean isOneBitCharacter(int[] bits) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:10: verify: Precondition conjunct is false: 10 != bits.length
    //@ requires 10 != bits.length;
                    ^
4 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 5 != bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 <= bits.length;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 5 != bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 <= bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != 5;
    //@ requires n != 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n >= 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:19: verify: The prover cannot establish an assertion (PossiblyNegativeIndex) in method isOneBitCharacter
            i += bits[i] + 1;
                     ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:42: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:15:) in method main
        isOneBitCharacter(arr);
                         ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:15: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:42:
    public static boolean isOneBitCharacter(int[] bits) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:11: verify: Precondition conjunct is false: 10 > bits.length
    //@ requires 10 > bits.length;
                    ^
4 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 5 != bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 1 <= bits.length;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 5 != bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 != bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 <= bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != 5;
    //@ requires n != 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n >= 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:20: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:86:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:86: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:20:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:64: verify: Precondition conjunct is false: 10 != bits.length
    //@ requires 10 != bits.length;
                    ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:45: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:14:) in method main
        isOneBitCharacter(arr);
                         ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:14: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:45:
    public static boolean isOneBitCharacter(int[] bits) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:7: verify: Precondition conjunct is false: 11 != bits.length
    //@ requires 11 != bits.length;
                    ^
6 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 5 != bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 1 <= bits.length;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 5 != bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 10 > bits.length;
    //@ requires 1 <= bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != 5;
    //@ requires n != 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n >= 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:20: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:85:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:85: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:20:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:65: verify: Precondition conjunct is false: 10 > bits.length
    //@ requires 10 > bits.length;
                    ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:45: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:14:) in method main
        isOneBitCharacter(arr);
                         ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:14: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:45:
    public static boolean isOneBitCharacter(int[] bits) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:7: verify: Precondition conjunct is false: 11 != bits.length
    //@ requires 11 != bits.length;
                    ^
6 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 5 != bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 1 <= bits.length;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 5 != bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 1 <= bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != 5;
    //@ requires n != 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n < 10;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n >= 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:20: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:84:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:84: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:20:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:74: verify: Precondition conjunct is false: n < 10
    //@ requires n < 10;
                   ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:45: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:14:) in method main
        isOneBitCharacter(arr);
                         ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:14: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:45:
    public static boolean isOneBitCharacter(int[] bits) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:7: verify: Precondition conjunct is false: 11 != bits.length
    //@ requires 11 != bits.length;
                    ^
6 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 5 != bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 1 <= bits.length;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 5 != bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 1 <= bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != 5;
    //@ requires n != 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n <= 10;
    //@ requires n != 10;
    //@ requires n >= 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:20: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:83:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:83: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:20:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:75: verify: Precondition conjunct is false: n != 10
    //@ requires n != 10;
                   ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:45: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:14:) in method main
        isOneBitCharacter(arr);
                         ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:14: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:45:
    public static boolean isOneBitCharacter(int[] bits) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:7: verify: Precondition conjunct is false: 11 != bits.length
    //@ requires 11 != bits.length;
                    ^
6 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 5 != bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 1 <= bits.length;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 5 != bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 1 <= bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != 5;
    //@ requires n != 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n <= 10;
    //@ requires n >= 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:18: verify: The prover cannot establish an assertion (PossiblyNegativeIndex) in method isOneBitCharacter
            i += bits[i] + 1;
                     ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:45: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:14:) in method main
        isOneBitCharacter(arr);
                         ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:14: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:45:
    public static boolean isOneBitCharacter(int[] bits) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:7: verify: Precondition conjunct is false: 11 != bits.length
    //@ requires 11 != bits.length;
                    ^
4 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 5 != bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 1 <= bits.length;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 5 != bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 1 <= bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != 5;
    //@ requires n != 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n <= 10;
    //@ requires n >= 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:17: verify: The prover cannot establish an assertion (PossiblyNegativeIndex) in method isOneBitCharacter
            i += bits[i] + 1;
                     ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:44: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:13:) in method main
        isOneBitCharacter(arr);
                         ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:44:
    public static boolean isOneBitCharacter(int[] bits) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:8: verify: Precondition conjunct is false: 11 > bits.length
    //@ requires 11 > bits.length;
                    ^
4 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 5 != bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 1 <= bits.length;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 5 != bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 1 <= bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != 5;
    //@ requires n != 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n <= 10;
    //@ requires n >= 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:16: verify: The prover cannot establish an assertion (PossiblyNegativeIndex) in method isOneBitCharacter
            i += bits[i] + 1;
                     ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:43: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:12:) in method main
        isOneBitCharacter(arr);
                         ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:12: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:43:
    public static boolean isOneBitCharacter(int[] bits) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:8: verify: Precondition conjunct is false: 10 >= bits.length
    //@ requires 10 >= bits.length;
                    ^
4 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 5 != bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 1 <= bits.length;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 5 != bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 1 <= bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != 5;
    //@ requires n != 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n <= 10;
    //@ requires n >= 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:17: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:79:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:79: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:17:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:58: verify: Precondition conjunct is false: 11 != bits.length
    //@ requires 11 != bits.length;
                    ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:44: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:11:) in method main
        isOneBitCharacter(arr);
                         ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:11: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:44:
    public static boolean isOneBitCharacter(int[] bits) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:6: verify: Precondition conjunct is false: 2 != bits.length
    //@ requires 2 != bits.length;
                   ^
6 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 5 != bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 1 <= bits.length;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 5 != bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 11 > bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 1 <= bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != 5;
    //@ requires n != 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n <= 10;
    //@ requires n >= 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:17: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:78:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:78: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:17:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:59: verify: Precondition conjunct is false: 11 > bits.length
    //@ requires 11 > bits.length;
                    ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:44: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:11:) in method main
        isOneBitCharacter(arr);
                         ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:11: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:44:
    public static boolean isOneBitCharacter(int[] bits) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:6: verify: Precondition conjunct is false: 2 != bits.length
    //@ requires 2 != bits.length;
                   ^
6 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 5 != bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 1 <= bits.length;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 5 != bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 10 >= bits.length;
    //@ requires 1 <= bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != 5;
    //@ requires n != 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n <= 10;
    //@ requires n >= 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:17: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:77:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:77: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:17:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:59: verify: Precondition conjunct is false: 10 >= bits.length
    //@ requires 10 >= bits.length;
                    ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:44: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:11:) in method main
        isOneBitCharacter(arr);
                         ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:11: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:44:
    public static boolean isOneBitCharacter(int[] bits) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:6: verify: Precondition conjunct is false: 2 != bits.length
    //@ requires 2 != bits.length;
                   ^
6 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 5 != bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 1 <= bits.length;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 5 != bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 1 <= bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != 5;
    //@ requires n != 2;
    //@ requires n < 11;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n <= 10;
    //@ requires n >= 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:17: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:76:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:76: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:17:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:65: verify: Precondition conjunct is false: n < 11
    //@ requires n < 11;
                   ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:44: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:11:) in method main
        isOneBitCharacter(arr);
                         ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:11: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:44:
    public static boolean isOneBitCharacter(int[] bits) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:6: verify: Precondition conjunct is false: 2 != bits.length
    //@ requires 2 != bits.length;
                   ^
6 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 5 != bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 1 <= bits.length;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 5 != bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 1 <= bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != 5;
    //@ requires n != 2;
    //@ requires n <= 11;
    //@ requires n != 11;
    //@ requires n <= 10;
    //@ requires n >= 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:17: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:75:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:75: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:17:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:66: verify: Precondition conjunct is false: n != 11
    //@ requires n != 11;
                   ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:44: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:11:) in method main
        isOneBitCharacter(arr);
                         ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:11: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:44:
    public static boolean isOneBitCharacter(int[] bits) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:6: verify: Precondition conjunct is false: 2 != bits.length
    //@ requires 2 != bits.length;
                   ^
6 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 5 != bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 1 <= bits.length;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 5 != bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 1 <= bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != 5;
    //@ requires n != 2;
    //@ requires n <= 11;
    //@ requires n <= 10;
    //@ requires n >= 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:17: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:74:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:74: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:17:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:66: verify: Precondition conjunct is false: n <= 10
    //@ requires n <= 10;
                   ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:44: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:11:) in method main
        isOneBitCharacter(arr);
                         ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:11: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:44:
    public static boolean isOneBitCharacter(int[] bits) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:6: verify: Precondition conjunct is false: 2 != bits.length
    //@ requires 2 != bits.length;
                   ^
6 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 5 != bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 1 <= bits.length;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 5 != bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 1 <= bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != 5;
    //@ requires n != 2;
    //@ requires n <= 11;
    //@ requires n >= 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:15: verify: The prover cannot establish an assertion (PossiblyNegativeIndex) in method isOneBitCharacter
            i += bits[i] + 1;
                     ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:44: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:11:) in method main
        isOneBitCharacter(arr);
                         ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:11: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:44:
    public static boolean isOneBitCharacter(int[] bits) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:6: verify: Precondition conjunct is false: 2 != bits.length
    //@ requires 2 != bits.length;
                   ^
4 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 5 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 1 <= bits.length;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 5 != bits.length;
    //@ requires 2 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 1 <= bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != 5;
    //@ requires n != 2;
    //@ requires n <= 11;
    //@ requires n >= 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:16: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:72:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:72: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:16:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:56: verify: Precondition conjunct is false: 2 != bits.length
    //@ requires 2 != bits.length;
                   ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:10:) in method main
        isOneBitCharacter(arr);
                         ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:10: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    public static boolean isOneBitCharacter(int[] bits) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:5: verify: Precondition conjunct is false: 5 != bits.length
    //@ requires 5 != bits.length;
                   ^
6 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 5 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 1 <= bits.length;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 5 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 1 <= bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != 5;
    //@ requires n != 2;
    //@ requires n <= 11;
    //@ requires n >= 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:16: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:71:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:71: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:16:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:62: verify: Precondition conjunct is false: n != 2
    //@ requires n != 2;
                   ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:10:) in method main
        isOneBitCharacter(arr);
                         ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:10: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    public static boolean isOneBitCharacter(int[] bits) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:5: verify: Precondition conjunct is false: 5 != bits.length
    //@ requires 5 != bits.length;
                   ^
6 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 5 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 1 <= bits.length;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 5 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 1 <= bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != 5;
    //@ requires n <= 11;
    //@ requires n >= 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:14: verify: The prover cannot establish an assertion (PossiblyNegativeIndex) in method isOneBitCharacter
            i += bits[i] + 1;
                     ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:10:) in method main
        isOneBitCharacter(arr);
                         ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:10: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:47:
    public static boolean isOneBitCharacter(int[] bits) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:5: verify: Precondition conjunct is false: 5 != bits.length
    //@ requires 5 != bits.length;
                   ^
4 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 1 <= bits.length;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 5 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 1 <= bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != 5;
    //@ requires n <= 11;
    //@ requires n >= 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:15: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:69:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:69: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:15:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:54: verify: Precondition conjunct is false: 5 != bits.length
    //@ requires 5 != bits.length;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 1 <= bits.length;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 1 <= bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n != 5;
    //@ requires n <= 11;
    //@ requires n >= 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:15: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:68:) in method isOneBitCharacter
        __Loop_Invariant_Dummy1(bits, n, i);
                               ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:68: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:15:
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:59: verify: Precondition conjunct is false: n != 5
    //@ requires n != 5;
                   ^
3 verification failures

class IsOneBitCharacter {
    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 1 <= bits.length;
    //@ ensures bits == null ==> \result;
    //@ ensures bits == null ==> !\result;
    public static boolean isOneBitCharacter(int[] bits) {
        int n = bits.length, i = 0;
        while (i < n - 1) {
            __Loop_Invariant_Dummy1(bits, n, i);
            i += bits[i] + 1;
        }
        __Loop_Invariant_Dummy1(bits, n, i);
        return i == n - 1;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{1, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0};
        isOneBitCharacter(arr);
        arr = new int[]{1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 1, 0, 1, 1, 1, 1};
        isOneBitCharacter(arr);
        arr = new int[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0, 0};
        isOneBitCharacter(arr);
        arr = new int[]{0, 0, 0, 0};
        isOneBitCharacter(arr);
    }

    //@ requires -1 < bits.length;
    //@ requires -1 <= bits.length;
    //@ requires -1 != bits.length;
    //@ requires 11 >= bits.length;
    //@ requires 1 <= bits.length;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n <= 11;
    //@ requires n >= 1;
    //@ requires n <= bits.length;
    //@ requires n == bits.length;
    //@ requires n >= bits.length;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    public static void __Loop_Invariant_Dummy1(int[] bits, int n, int i) {}
}

/home/max/Documents/JMLGPT/tmp/IsOneBitCharacter.java:13: verify: The prover cannot establish an assertion (PossiblyNegativeIndex) in method isOneBitCharacter
            i += bits[i] + 1;
                     ^
1 verification failure

