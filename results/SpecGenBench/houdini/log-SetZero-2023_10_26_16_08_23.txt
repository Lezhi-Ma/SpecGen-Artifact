public class SetZero {

	//@ non_null
	//@ requires 5 < a.length;
	//@ requires 5 <= a.length;
	//@ requires 5 == a.length;
	//@ requires 5 != a.length;
	//@ requires 5 >= a.length;
	//@ requires 5 > a.length;
	//@ requires 2 < a.length;
	//@ requires 2 <= a.length;
	//@ requires 2 == a.length;
	//@ requires 2 != a.length;
	//@ requires 2 >= a.length;
	//@ requires 2 > a.length;
	//@ requires 1 < a.length;
	//@ requires 1 <= a.length;
	//@ requires 1 == a.length;
	//@ requires 1 != a.length;
	//@ requires 1 >= a.length;
	//@ requires 1 > a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 == a.length;
	//@ requires -1 != a.length;
	//@ requires -1 >= a.length;
	//@ requires -1 > a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin == a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin >= a.length;
	//@ requires iBegin > a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin == 5;
	//@ requires iBegin != 5;
	//@ requires iBegin >= 5;
	//@ requires iBegin > 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin == 2;
	//@ requires iBegin != 2;
	//@ requires iBegin >= 2;
	//@ requires iBegin > 2;
	//@ requires iBegin < 1;
	//@ requires iBegin <= 1;
	//@ requires iBegin == 1;
	//@ requires iBegin != 1;
	//@ requires iBegin >= 1;
	//@ requires iBegin > 1;
	//@ requires iBegin < 0;
	//@ requires iBegin <= 0;
	//@ requires iBegin == 0;
	//@ requires iBegin != 0;
	//@ requires iBegin >= 0;
	//@ requires iBegin > 0;
	//@ requires iBegin < -1;
	//@ requires iBegin <= -1;
	//@ requires iBegin == -1;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd < a.length;
	//@ requires iEnd <= a.length;
	//@ requires iEnd == a.length;
	//@ requires iEnd != a.length;
	//@ requires iEnd >= a.length;
	//@ requires iEnd > a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd == 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 5;
	//@ requires iEnd > 5;
	//@ requires iEnd < 2;
	//@ requires iEnd <= 2;
	//@ requires iEnd == 2;
	//@ requires iEnd != 2;
	//@ requires iEnd >= 2;
	//@ requires iEnd > 2;
	//@ requires iEnd < 1;
	//@ requires iEnd <= 1;
	//@ requires iEnd == 1;
	//@ requires iEnd != 1;
	//@ requires iEnd >= 1;
	//@ requires iEnd > 1;
	//@ requires iEnd < 0;
	//@ requires iEnd <= 0;
	//@ requires iEnd == 0;
	//@ requires iEnd != 0;
	//@ requires iEnd >= 0;
	//@ requires iEnd > 0;
	//@ requires iEnd < iBegin;
	//@ requires iEnd <= iBegin;
	//@ requires iEnd == iBegin;
	//@ requires iEnd != iBegin;
	//@ requires iEnd >= iBegin;
	//@ requires iEnd > iBegin;
	//@ requires iEnd < -1;
	//@ requires iEnd <= -1;
	//@ requires iEnd == -1;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ non_null
    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin == a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin >= a.length;
    //@ requires iBegin > a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin == 5;
    //@ requires iBegin != 5;
    //@ requires iBegin >= 5;
    //@ requires iBegin > 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin == 2;
    //@ requires iBegin != 2;
    //@ requires iBegin >= 2;
    //@ requires iBegin > 2;
    //@ requires iBegin < 1;
    //@ requires iBegin <= 1;
    //@ requires iBegin == 1;
    //@ requires iBegin != 1;
    //@ requires iBegin >= 1;
    //@ requires iBegin > 1;
    //@ requires iBegin < 0;
    //@ requires iBegin <= 0;
    //@ requires iBegin == 0;
    //@ requires iBegin != 0;
    //@ requires iBegin >= 0;
    //@ requires iBegin > 0;
    //@ requires iBegin < -1;
    //@ requires iBegin <= -1;
    //@ requires iBegin == -1;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd < a.length;
    //@ requires iEnd <= a.length;
    //@ requires iEnd == a.length;
    //@ requires iEnd != a.length;
    //@ requires iEnd >= a.length;
    //@ requires iEnd > a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd == 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 5;
    //@ requires iEnd > 5;
    //@ requires iEnd < 2;
    //@ requires iEnd <= 2;
    //@ requires iEnd == 2;
    //@ requires iEnd != 2;
    //@ requires iEnd >= 2;
    //@ requires iEnd > 2;
    //@ requires iEnd < 1;
    //@ requires iEnd <= 1;
    //@ requires iEnd == 1;
    //@ requires iEnd != 1;
    //@ requires iEnd >= 1;
    //@ requires iEnd > 1;
    //@ requires iEnd < 0;
    //@ requires iEnd <= 0;
    //@ requires iEnd == 0;
    //@ requires iEnd != 0;
    //@ requires iEnd >= 0;
    //@ requires iEnd > 0;
    //@ requires iEnd < iBegin;
    //@ requires iEnd <= iBegin;
    //@ requires iEnd == iBegin;
    //@ requires iEnd != iBegin;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd < -1;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:3: error: No modifiers are allowed prior to a lightweight specification case
	//@ non_null
	    ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:116: error: No modifiers are allowed prior to a lightweight specification case
    //@ non_null
        ^
2 errors

public class SetZero {

	//@ requires 5 < a.length;
	//@ requires 5 <= a.length;
	//@ requires 5 == a.length;
	//@ requires 5 != a.length;
	//@ requires 5 >= a.length;
	//@ requires 5 > a.length;
	//@ requires 2 < a.length;
	//@ requires 2 <= a.length;
	//@ requires 2 == a.length;
	//@ requires 2 != a.length;
	//@ requires 2 >= a.length;
	//@ requires 2 > a.length;
	//@ requires 1 < a.length;
	//@ requires 1 <= a.length;
	//@ requires 1 == a.length;
	//@ requires 1 != a.length;
	//@ requires 1 >= a.length;
	//@ requires 1 > a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 == a.length;
	//@ requires -1 != a.length;
	//@ requires -1 >= a.length;
	//@ requires -1 > a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin == a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin >= a.length;
	//@ requires iBegin > a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin == 5;
	//@ requires iBegin != 5;
	//@ requires iBegin >= 5;
	//@ requires iBegin > 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin == 2;
	//@ requires iBegin != 2;
	//@ requires iBegin >= 2;
	//@ requires iBegin > 2;
	//@ requires iBegin < 1;
	//@ requires iBegin <= 1;
	//@ requires iBegin == 1;
	//@ requires iBegin != 1;
	//@ requires iBegin >= 1;
	//@ requires iBegin > 1;
	//@ requires iBegin < 0;
	//@ requires iBegin <= 0;
	//@ requires iBegin == 0;
	//@ requires iBegin != 0;
	//@ requires iBegin >= 0;
	//@ requires iBegin > 0;
	//@ requires iBegin < -1;
	//@ requires iBegin <= -1;
	//@ requires iBegin == -1;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd < a.length;
	//@ requires iEnd <= a.length;
	//@ requires iEnd == a.length;
	//@ requires iEnd != a.length;
	//@ requires iEnd >= a.length;
	//@ requires iEnd > a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd == 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 5;
	//@ requires iEnd > 5;
	//@ requires iEnd < 2;
	//@ requires iEnd <= 2;
	//@ requires iEnd == 2;
	//@ requires iEnd != 2;
	//@ requires iEnd >= 2;
	//@ requires iEnd > 2;
	//@ requires iEnd < 1;
	//@ requires iEnd <= 1;
	//@ requires iEnd == 1;
	//@ requires iEnd != 1;
	//@ requires iEnd >= 1;
	//@ requires iEnd > 1;
	//@ requires iEnd < 0;
	//@ requires iEnd <= 0;
	//@ requires iEnd == 0;
	//@ requires iEnd != 0;
	//@ requires iEnd >= 0;
	//@ requires iEnd > 0;
	//@ requires iEnd < iBegin;
	//@ requires iEnd <= iBegin;
	//@ requires iEnd == iBegin;
	//@ requires iEnd != iBegin;
	//@ requires iEnd >= iBegin;
	//@ requires iEnd > iBegin;
	//@ requires iEnd < -1;
	//@ requires iEnd <= -1;
	//@ requires iEnd == -1;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ non_null
    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin == a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin >= a.length;
    //@ requires iBegin > a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin == 5;
    //@ requires iBegin != 5;
    //@ requires iBegin >= 5;
    //@ requires iBegin > 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin == 2;
    //@ requires iBegin != 2;
    //@ requires iBegin >= 2;
    //@ requires iBegin > 2;
    //@ requires iBegin < 1;
    //@ requires iBegin <= 1;
    //@ requires iBegin == 1;
    //@ requires iBegin != 1;
    //@ requires iBegin >= 1;
    //@ requires iBegin > 1;
    //@ requires iBegin < 0;
    //@ requires iBegin <= 0;
    //@ requires iBegin == 0;
    //@ requires iBegin != 0;
    //@ requires iBegin >= 0;
    //@ requires iBegin > 0;
    //@ requires iBegin < -1;
    //@ requires iBegin <= -1;
    //@ requires iBegin == -1;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd < a.length;
    //@ requires iEnd <= a.length;
    //@ requires iEnd == a.length;
    //@ requires iEnd != a.length;
    //@ requires iEnd >= a.length;
    //@ requires iEnd > a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd == 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 5;
    //@ requires iEnd > 5;
    //@ requires iEnd < 2;
    //@ requires iEnd <= 2;
    //@ requires iEnd == 2;
    //@ requires iEnd != 2;
    //@ requires iEnd >= 2;
    //@ requires iEnd > 2;
    //@ requires iEnd < 1;
    //@ requires iEnd <= 1;
    //@ requires iEnd == 1;
    //@ requires iEnd != 1;
    //@ requires iEnd >= 1;
    //@ requires iEnd > 1;
    //@ requires iEnd < 0;
    //@ requires iEnd <= 0;
    //@ requires iEnd == 0;
    //@ requires iEnd != 0;
    //@ requires iEnd >= 0;
    //@ requires iEnd > 0;
    //@ requires iEnd < iBegin;
    //@ requires iEnd <= iBegin;
    //@ requires iEnd == iBegin;
    //@ requires iEnd != iBegin;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd < -1;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:115: error: No modifiers are allowed prior to a lightweight specification case
    //@ non_null
        ^
1 error

public class SetZero {

	//@ requires 5 < a.length;
	//@ requires 5 <= a.length;
	//@ requires 5 == a.length;
	//@ requires 5 != a.length;
	//@ requires 5 >= a.length;
	//@ requires 5 > a.length;
	//@ requires 2 < a.length;
	//@ requires 2 <= a.length;
	//@ requires 2 == a.length;
	//@ requires 2 != a.length;
	//@ requires 2 >= a.length;
	//@ requires 2 > a.length;
	//@ requires 1 < a.length;
	//@ requires 1 <= a.length;
	//@ requires 1 == a.length;
	//@ requires 1 != a.length;
	//@ requires 1 >= a.length;
	//@ requires 1 > a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 == a.length;
	//@ requires -1 != a.length;
	//@ requires -1 >= a.length;
	//@ requires -1 > a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin == a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin >= a.length;
	//@ requires iBegin > a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin == 5;
	//@ requires iBegin != 5;
	//@ requires iBegin >= 5;
	//@ requires iBegin > 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin == 2;
	//@ requires iBegin != 2;
	//@ requires iBegin >= 2;
	//@ requires iBegin > 2;
	//@ requires iBegin < 1;
	//@ requires iBegin <= 1;
	//@ requires iBegin == 1;
	//@ requires iBegin != 1;
	//@ requires iBegin >= 1;
	//@ requires iBegin > 1;
	//@ requires iBegin < 0;
	//@ requires iBegin <= 0;
	//@ requires iBegin == 0;
	//@ requires iBegin != 0;
	//@ requires iBegin >= 0;
	//@ requires iBegin > 0;
	//@ requires iBegin < -1;
	//@ requires iBegin <= -1;
	//@ requires iBegin == -1;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd < a.length;
	//@ requires iEnd <= a.length;
	//@ requires iEnd == a.length;
	//@ requires iEnd != a.length;
	//@ requires iEnd >= a.length;
	//@ requires iEnd > a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd == 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 5;
	//@ requires iEnd > 5;
	//@ requires iEnd < 2;
	//@ requires iEnd <= 2;
	//@ requires iEnd == 2;
	//@ requires iEnd != 2;
	//@ requires iEnd >= 2;
	//@ requires iEnd > 2;
	//@ requires iEnd < 1;
	//@ requires iEnd <= 1;
	//@ requires iEnd == 1;
	//@ requires iEnd != 1;
	//@ requires iEnd >= 1;
	//@ requires iEnd > 1;
	//@ requires iEnd < 0;
	//@ requires iEnd <= 0;
	//@ requires iEnd == 0;
	//@ requires iEnd != 0;
	//@ requires iEnd >= 0;
	//@ requires iEnd > 0;
	//@ requires iEnd < iBegin;
	//@ requires iEnd <= iBegin;
	//@ requires iEnd == iBegin;
	//@ requires iEnd != iBegin;
	//@ requires iEnd >= iBegin;
	//@ requires iEnd > iBegin;
	//@ requires iEnd < -1;
	//@ requires iEnd <= -1;
	//@ requires iEnd == -1;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin == a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin >= a.length;
    //@ requires iBegin > a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin == 5;
    //@ requires iBegin != 5;
    //@ requires iBegin >= 5;
    //@ requires iBegin > 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin == 2;
    //@ requires iBegin != 2;
    //@ requires iBegin >= 2;
    //@ requires iBegin > 2;
    //@ requires iBegin < 1;
    //@ requires iBegin <= 1;
    //@ requires iBegin == 1;
    //@ requires iBegin != 1;
    //@ requires iBegin >= 1;
    //@ requires iBegin > 1;
    //@ requires iBegin < 0;
    //@ requires iBegin <= 0;
    //@ requires iBegin == 0;
    //@ requires iBegin != 0;
    //@ requires iBegin >= 0;
    //@ requires iBegin > 0;
    //@ requires iBegin < -1;
    //@ requires iBegin <= -1;
    //@ requires iBegin == -1;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd < a.length;
    //@ requires iEnd <= a.length;
    //@ requires iEnd == a.length;
    //@ requires iEnd != a.length;
    //@ requires iEnd >= a.length;
    //@ requires iEnd > a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd == 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 5;
    //@ requires iEnd > 5;
    //@ requires iEnd < 2;
    //@ requires iEnd <= 2;
    //@ requires iEnd == 2;
    //@ requires iEnd != 2;
    //@ requires iEnd >= 2;
    //@ requires iEnd > 2;
    //@ requires iEnd < 1;
    //@ requires iEnd <= 1;
    //@ requires iEnd == 1;
    //@ requires iEnd != 1;
    //@ requires iEnd >= 1;
    //@ requires iEnd > 1;
    //@ requires iEnd < 0;
    //@ requires iEnd <= 0;
    //@ requires iEnd == 0;
    //@ requires iEnd != 0;
    //@ requires iEnd >= 0;
    //@ requires iEnd > 0;
    //@ requires iEnd < iBegin;
    //@ requires iEnd <= iBegin;
    //@ requires iEnd == iBegin;
    //@ requires iEnd != iBegin;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd < -1;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:269: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:105:) in method __HoudiniInvoker
        SetZero(arr, 0, 4);
               ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:105: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:269:
	public static void SetZero(int[] a, int iBegin, int iEnd) {
	                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:3: verify: Precondition conjunct is false: 5 < a.length
	//@ requires 5 < a.length;
	               ^
3 verification failures

public class SetZero {

	//@ requires 5 <= a.length;
	//@ requires 5 == a.length;
	//@ requires 5 != a.length;
	//@ requires 5 >= a.length;
	//@ requires 5 > a.length;
	//@ requires 2 < a.length;
	//@ requires 2 <= a.length;
	//@ requires 2 == a.length;
	//@ requires 2 != a.length;
	//@ requires 2 >= a.length;
	//@ requires 2 > a.length;
	//@ requires 1 < a.length;
	//@ requires 1 <= a.length;
	//@ requires 1 == a.length;
	//@ requires 1 != a.length;
	//@ requires 1 >= a.length;
	//@ requires 1 > a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 == a.length;
	//@ requires -1 != a.length;
	//@ requires -1 >= a.length;
	//@ requires -1 > a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin == a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin >= a.length;
	//@ requires iBegin > a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin == 5;
	//@ requires iBegin != 5;
	//@ requires iBegin >= 5;
	//@ requires iBegin > 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin == 2;
	//@ requires iBegin != 2;
	//@ requires iBegin >= 2;
	//@ requires iBegin > 2;
	//@ requires iBegin < 1;
	//@ requires iBegin <= 1;
	//@ requires iBegin == 1;
	//@ requires iBegin != 1;
	//@ requires iBegin >= 1;
	//@ requires iBegin > 1;
	//@ requires iBegin < 0;
	//@ requires iBegin <= 0;
	//@ requires iBegin == 0;
	//@ requires iBegin != 0;
	//@ requires iBegin >= 0;
	//@ requires iBegin > 0;
	//@ requires iBegin < -1;
	//@ requires iBegin <= -1;
	//@ requires iBegin == -1;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd < a.length;
	//@ requires iEnd <= a.length;
	//@ requires iEnd == a.length;
	//@ requires iEnd != a.length;
	//@ requires iEnd >= a.length;
	//@ requires iEnd > a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd == 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 5;
	//@ requires iEnd > 5;
	//@ requires iEnd < 2;
	//@ requires iEnd <= 2;
	//@ requires iEnd == 2;
	//@ requires iEnd != 2;
	//@ requires iEnd >= 2;
	//@ requires iEnd > 2;
	//@ requires iEnd < 1;
	//@ requires iEnd <= 1;
	//@ requires iEnd == 1;
	//@ requires iEnd != 1;
	//@ requires iEnd >= 1;
	//@ requires iEnd > 1;
	//@ requires iEnd < 0;
	//@ requires iEnd <= 0;
	//@ requires iEnd == 0;
	//@ requires iEnd != 0;
	//@ requires iEnd >= 0;
	//@ requires iEnd > 0;
	//@ requires iEnd < iBegin;
	//@ requires iEnd <= iBegin;
	//@ requires iEnd == iBegin;
	//@ requires iEnd != iBegin;
	//@ requires iEnd >= iBegin;
	//@ requires iEnd > iBegin;
	//@ requires iEnd < -1;
	//@ requires iEnd <= -1;
	//@ requires iEnd == -1;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin == a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin >= a.length;
    //@ requires iBegin > a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin == 5;
    //@ requires iBegin != 5;
    //@ requires iBegin >= 5;
    //@ requires iBegin > 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin == 2;
    //@ requires iBegin != 2;
    //@ requires iBegin >= 2;
    //@ requires iBegin > 2;
    //@ requires iBegin < 1;
    //@ requires iBegin <= 1;
    //@ requires iBegin == 1;
    //@ requires iBegin != 1;
    //@ requires iBegin >= 1;
    //@ requires iBegin > 1;
    //@ requires iBegin < 0;
    //@ requires iBegin <= 0;
    //@ requires iBegin == 0;
    //@ requires iBegin != 0;
    //@ requires iBegin >= 0;
    //@ requires iBegin > 0;
    //@ requires iBegin < -1;
    //@ requires iBegin <= -1;
    //@ requires iBegin == -1;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd < a.length;
    //@ requires iEnd <= a.length;
    //@ requires iEnd == a.length;
    //@ requires iEnd != a.length;
    //@ requires iEnd >= a.length;
    //@ requires iEnd > a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd == 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 5;
    //@ requires iEnd > 5;
    //@ requires iEnd < 2;
    //@ requires iEnd <= 2;
    //@ requires iEnd == 2;
    //@ requires iEnd != 2;
    //@ requires iEnd >= 2;
    //@ requires iEnd > 2;
    //@ requires iEnd < 1;
    //@ requires iEnd <= 1;
    //@ requires iEnd == 1;
    //@ requires iEnd != 1;
    //@ requires iEnd >= 1;
    //@ requires iEnd > 1;
    //@ requires iEnd < 0;
    //@ requires iEnd <= 0;
    //@ requires iEnd == 0;
    //@ requires iEnd != 0;
    //@ requires iEnd >= 0;
    //@ requires iEnd > 0;
    //@ requires iEnd < iBegin;
    //@ requires iEnd <= iBegin;
    //@ requires iEnd == iBegin;
    //@ requires iEnd != iBegin;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd < -1;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:268: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:104:) in method __HoudiniInvoker
        SetZero(arr, 0, 4);
               ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:104: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:268:
	public static void SetZero(int[] a, int iBegin, int iEnd) {
	                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:5: verify: Precondition conjunct is false: 5 != a.length
	//@ requires 5 != a.length;
	               ^
3 verification failures

public class SetZero {

	//@ requires 5 <= a.length;
	//@ requires 5 == a.length;
	//@ requires 5 >= a.length;
	//@ requires 5 > a.length;
	//@ requires 2 < a.length;
	//@ requires 2 <= a.length;
	//@ requires 2 == a.length;
	//@ requires 2 != a.length;
	//@ requires 2 >= a.length;
	//@ requires 2 > a.length;
	//@ requires 1 < a.length;
	//@ requires 1 <= a.length;
	//@ requires 1 == a.length;
	//@ requires 1 != a.length;
	//@ requires 1 >= a.length;
	//@ requires 1 > a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 == a.length;
	//@ requires -1 != a.length;
	//@ requires -1 >= a.length;
	//@ requires -1 > a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin == a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin >= a.length;
	//@ requires iBegin > a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin == 5;
	//@ requires iBegin != 5;
	//@ requires iBegin >= 5;
	//@ requires iBegin > 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin == 2;
	//@ requires iBegin != 2;
	//@ requires iBegin >= 2;
	//@ requires iBegin > 2;
	//@ requires iBegin < 1;
	//@ requires iBegin <= 1;
	//@ requires iBegin == 1;
	//@ requires iBegin != 1;
	//@ requires iBegin >= 1;
	//@ requires iBegin > 1;
	//@ requires iBegin < 0;
	//@ requires iBegin <= 0;
	//@ requires iBegin == 0;
	//@ requires iBegin != 0;
	//@ requires iBegin >= 0;
	//@ requires iBegin > 0;
	//@ requires iBegin < -1;
	//@ requires iBegin <= -1;
	//@ requires iBegin == -1;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd < a.length;
	//@ requires iEnd <= a.length;
	//@ requires iEnd == a.length;
	//@ requires iEnd != a.length;
	//@ requires iEnd >= a.length;
	//@ requires iEnd > a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd == 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 5;
	//@ requires iEnd > 5;
	//@ requires iEnd < 2;
	//@ requires iEnd <= 2;
	//@ requires iEnd == 2;
	//@ requires iEnd != 2;
	//@ requires iEnd >= 2;
	//@ requires iEnd > 2;
	//@ requires iEnd < 1;
	//@ requires iEnd <= 1;
	//@ requires iEnd == 1;
	//@ requires iEnd != 1;
	//@ requires iEnd >= 1;
	//@ requires iEnd > 1;
	//@ requires iEnd < 0;
	//@ requires iEnd <= 0;
	//@ requires iEnd == 0;
	//@ requires iEnd != 0;
	//@ requires iEnd >= 0;
	//@ requires iEnd > 0;
	//@ requires iEnd < iBegin;
	//@ requires iEnd <= iBegin;
	//@ requires iEnd == iBegin;
	//@ requires iEnd != iBegin;
	//@ requires iEnd >= iBegin;
	//@ requires iEnd > iBegin;
	//@ requires iEnd < -1;
	//@ requires iEnd <= -1;
	//@ requires iEnd == -1;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin == a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin >= a.length;
    //@ requires iBegin > a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin == 5;
    //@ requires iBegin != 5;
    //@ requires iBegin >= 5;
    //@ requires iBegin > 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin == 2;
    //@ requires iBegin != 2;
    //@ requires iBegin >= 2;
    //@ requires iBegin > 2;
    //@ requires iBegin < 1;
    //@ requires iBegin <= 1;
    //@ requires iBegin == 1;
    //@ requires iBegin != 1;
    //@ requires iBegin >= 1;
    //@ requires iBegin > 1;
    //@ requires iBegin < 0;
    //@ requires iBegin <= 0;
    //@ requires iBegin == 0;
    //@ requires iBegin != 0;
    //@ requires iBegin >= 0;
    //@ requires iBegin > 0;
    //@ requires iBegin < -1;
    //@ requires iBegin <= -1;
    //@ requires iBegin == -1;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd < a.length;
    //@ requires iEnd <= a.length;
    //@ requires iEnd == a.length;
    //@ requires iEnd != a.length;
    //@ requires iEnd >= a.length;
    //@ requires iEnd > a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd == 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 5;
    //@ requires iEnd > 5;
    //@ requires iEnd < 2;
    //@ requires iEnd <= 2;
    //@ requires iEnd == 2;
    //@ requires iEnd != 2;
    //@ requires iEnd >= 2;
    //@ requires iEnd > 2;
    //@ requires iEnd < 1;
    //@ requires iEnd <= 1;
    //@ requires iEnd == 1;
    //@ requires iEnd != 1;
    //@ requires iEnd >= 1;
    //@ requires iEnd > 1;
    //@ requires iEnd < 0;
    //@ requires iEnd <= 0;
    //@ requires iEnd == 0;
    //@ requires iEnd != 0;
    //@ requires iEnd >= 0;
    //@ requires iEnd > 0;
    //@ requires iEnd < iBegin;
    //@ requires iEnd <= iBegin;
    //@ requires iEnd == iBegin;
    //@ requires iEnd != iBegin;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd < -1;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:267: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:103:) in method __HoudiniInvoker
        SetZero(arr, 0, 4);
               ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:103: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:267:
	public static void SetZero(int[] a, int iBegin, int iEnd) {
	                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:6: verify: Precondition conjunct is false: 5 > a.length
	//@ requires 5 > a.length;
	               ^
3 verification failures

public class SetZero {

	//@ requires 5 <= a.length;
	//@ requires 5 == a.length;
	//@ requires 5 >= a.length;
	//@ requires 2 < a.length;
	//@ requires 2 <= a.length;
	//@ requires 2 == a.length;
	//@ requires 2 != a.length;
	//@ requires 2 >= a.length;
	//@ requires 2 > a.length;
	//@ requires 1 < a.length;
	//@ requires 1 <= a.length;
	//@ requires 1 == a.length;
	//@ requires 1 != a.length;
	//@ requires 1 >= a.length;
	//@ requires 1 > a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 == a.length;
	//@ requires -1 != a.length;
	//@ requires -1 >= a.length;
	//@ requires -1 > a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin == a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin >= a.length;
	//@ requires iBegin > a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin == 5;
	//@ requires iBegin != 5;
	//@ requires iBegin >= 5;
	//@ requires iBegin > 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin == 2;
	//@ requires iBegin != 2;
	//@ requires iBegin >= 2;
	//@ requires iBegin > 2;
	//@ requires iBegin < 1;
	//@ requires iBegin <= 1;
	//@ requires iBegin == 1;
	//@ requires iBegin != 1;
	//@ requires iBegin >= 1;
	//@ requires iBegin > 1;
	//@ requires iBegin < 0;
	//@ requires iBegin <= 0;
	//@ requires iBegin == 0;
	//@ requires iBegin != 0;
	//@ requires iBegin >= 0;
	//@ requires iBegin > 0;
	//@ requires iBegin < -1;
	//@ requires iBegin <= -1;
	//@ requires iBegin == -1;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd < a.length;
	//@ requires iEnd <= a.length;
	//@ requires iEnd == a.length;
	//@ requires iEnd != a.length;
	//@ requires iEnd >= a.length;
	//@ requires iEnd > a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd == 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 5;
	//@ requires iEnd > 5;
	//@ requires iEnd < 2;
	//@ requires iEnd <= 2;
	//@ requires iEnd == 2;
	//@ requires iEnd != 2;
	//@ requires iEnd >= 2;
	//@ requires iEnd > 2;
	//@ requires iEnd < 1;
	//@ requires iEnd <= 1;
	//@ requires iEnd == 1;
	//@ requires iEnd != 1;
	//@ requires iEnd >= 1;
	//@ requires iEnd > 1;
	//@ requires iEnd < 0;
	//@ requires iEnd <= 0;
	//@ requires iEnd == 0;
	//@ requires iEnd != 0;
	//@ requires iEnd >= 0;
	//@ requires iEnd > 0;
	//@ requires iEnd < iBegin;
	//@ requires iEnd <= iBegin;
	//@ requires iEnd == iBegin;
	//@ requires iEnd != iBegin;
	//@ requires iEnd >= iBegin;
	//@ requires iEnd > iBegin;
	//@ requires iEnd < -1;
	//@ requires iEnd <= -1;
	//@ requires iEnd == -1;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin == a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin >= a.length;
    //@ requires iBegin > a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin == 5;
    //@ requires iBegin != 5;
    //@ requires iBegin >= 5;
    //@ requires iBegin > 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin == 2;
    //@ requires iBegin != 2;
    //@ requires iBegin >= 2;
    //@ requires iBegin > 2;
    //@ requires iBegin < 1;
    //@ requires iBegin <= 1;
    //@ requires iBegin == 1;
    //@ requires iBegin != 1;
    //@ requires iBegin >= 1;
    //@ requires iBegin > 1;
    //@ requires iBegin < 0;
    //@ requires iBegin <= 0;
    //@ requires iBegin == 0;
    //@ requires iBegin != 0;
    //@ requires iBegin >= 0;
    //@ requires iBegin > 0;
    //@ requires iBegin < -1;
    //@ requires iBegin <= -1;
    //@ requires iBegin == -1;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd < a.length;
    //@ requires iEnd <= a.length;
    //@ requires iEnd == a.length;
    //@ requires iEnd != a.length;
    //@ requires iEnd >= a.length;
    //@ requires iEnd > a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd == 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 5;
    //@ requires iEnd > 5;
    //@ requires iEnd < 2;
    //@ requires iEnd <= 2;
    //@ requires iEnd == 2;
    //@ requires iEnd != 2;
    //@ requires iEnd >= 2;
    //@ requires iEnd > 2;
    //@ requires iEnd < 1;
    //@ requires iEnd <= 1;
    //@ requires iEnd == 1;
    //@ requires iEnd != 1;
    //@ requires iEnd >= 1;
    //@ requires iEnd > 1;
    //@ requires iEnd < 0;
    //@ requires iEnd <= 0;
    //@ requires iEnd == 0;
    //@ requires iEnd != 0;
    //@ requires iEnd >= 0;
    //@ requires iEnd > 0;
    //@ requires iEnd < iBegin;
    //@ requires iEnd <= iBegin;
    //@ requires iEnd == iBegin;
    //@ requires iEnd != iBegin;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd < -1;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:266: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:102:) in method __HoudiniInvoker
        SetZero(arr, 0, 4);
               ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:102: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:266:
	public static void SetZero(int[] a, int iBegin, int iEnd) {
	                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:8: verify: Precondition conjunct is false: 2 == a.length
	//@ requires 2 == a.length;
	               ^
3 verification failures

public class SetZero {

	//@ requires 5 <= a.length;
	//@ requires 5 == a.length;
	//@ requires 5 >= a.length;
	//@ requires 2 < a.length;
	//@ requires 2 <= a.length;
	//@ requires 2 != a.length;
	//@ requires 2 >= a.length;
	//@ requires 2 > a.length;
	//@ requires 1 < a.length;
	//@ requires 1 <= a.length;
	//@ requires 1 == a.length;
	//@ requires 1 != a.length;
	//@ requires 1 >= a.length;
	//@ requires 1 > a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 == a.length;
	//@ requires -1 != a.length;
	//@ requires -1 >= a.length;
	//@ requires -1 > a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin == a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin >= a.length;
	//@ requires iBegin > a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin == 5;
	//@ requires iBegin != 5;
	//@ requires iBegin >= 5;
	//@ requires iBegin > 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin == 2;
	//@ requires iBegin != 2;
	//@ requires iBegin >= 2;
	//@ requires iBegin > 2;
	//@ requires iBegin < 1;
	//@ requires iBegin <= 1;
	//@ requires iBegin == 1;
	//@ requires iBegin != 1;
	//@ requires iBegin >= 1;
	//@ requires iBegin > 1;
	//@ requires iBegin < 0;
	//@ requires iBegin <= 0;
	//@ requires iBegin == 0;
	//@ requires iBegin != 0;
	//@ requires iBegin >= 0;
	//@ requires iBegin > 0;
	//@ requires iBegin < -1;
	//@ requires iBegin <= -1;
	//@ requires iBegin == -1;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd < a.length;
	//@ requires iEnd <= a.length;
	//@ requires iEnd == a.length;
	//@ requires iEnd != a.length;
	//@ requires iEnd >= a.length;
	//@ requires iEnd > a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd == 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 5;
	//@ requires iEnd > 5;
	//@ requires iEnd < 2;
	//@ requires iEnd <= 2;
	//@ requires iEnd == 2;
	//@ requires iEnd != 2;
	//@ requires iEnd >= 2;
	//@ requires iEnd > 2;
	//@ requires iEnd < 1;
	//@ requires iEnd <= 1;
	//@ requires iEnd == 1;
	//@ requires iEnd != 1;
	//@ requires iEnd >= 1;
	//@ requires iEnd > 1;
	//@ requires iEnd < 0;
	//@ requires iEnd <= 0;
	//@ requires iEnd == 0;
	//@ requires iEnd != 0;
	//@ requires iEnd >= 0;
	//@ requires iEnd > 0;
	//@ requires iEnd < iBegin;
	//@ requires iEnd <= iBegin;
	//@ requires iEnd == iBegin;
	//@ requires iEnd != iBegin;
	//@ requires iEnd >= iBegin;
	//@ requires iEnd > iBegin;
	//@ requires iEnd < -1;
	//@ requires iEnd <= -1;
	//@ requires iEnd == -1;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin == a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin >= a.length;
    //@ requires iBegin > a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin == 5;
    //@ requires iBegin != 5;
    //@ requires iBegin >= 5;
    //@ requires iBegin > 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin == 2;
    //@ requires iBegin != 2;
    //@ requires iBegin >= 2;
    //@ requires iBegin > 2;
    //@ requires iBegin < 1;
    //@ requires iBegin <= 1;
    //@ requires iBegin == 1;
    //@ requires iBegin != 1;
    //@ requires iBegin >= 1;
    //@ requires iBegin > 1;
    //@ requires iBegin < 0;
    //@ requires iBegin <= 0;
    //@ requires iBegin == 0;
    //@ requires iBegin != 0;
    //@ requires iBegin >= 0;
    //@ requires iBegin > 0;
    //@ requires iBegin < -1;
    //@ requires iBegin <= -1;
    //@ requires iBegin == -1;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd < a.length;
    //@ requires iEnd <= a.length;
    //@ requires iEnd == a.length;
    //@ requires iEnd != a.length;
    //@ requires iEnd >= a.length;
    //@ requires iEnd > a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd == 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 5;
    //@ requires iEnd > 5;
    //@ requires iEnd < 2;
    //@ requires iEnd <= 2;
    //@ requires iEnd == 2;
    //@ requires iEnd != 2;
    //@ requires iEnd >= 2;
    //@ requires iEnd > 2;
    //@ requires iEnd < 1;
    //@ requires iEnd <= 1;
    //@ requires iEnd == 1;
    //@ requires iEnd != 1;
    //@ requires iEnd >= 1;
    //@ requires iEnd > 1;
    //@ requires iEnd < 0;
    //@ requires iEnd <= 0;
    //@ requires iEnd == 0;
    //@ requires iEnd != 0;
    //@ requires iEnd >= 0;
    //@ requires iEnd > 0;
    //@ requires iEnd < iBegin;
    //@ requires iEnd <= iBegin;
    //@ requires iEnd == iBegin;
    //@ requires iEnd != iBegin;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd < -1;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:265: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:101:) in method __HoudiniInvoker
        SetZero(arr, 0, 4);
               ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:101: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:265:
	public static void SetZero(int[] a, int iBegin, int iEnd) {
	                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:9: verify: Precondition conjunct is false: 2 >= a.length
	//@ requires 2 >= a.length;
	               ^
3 verification failures

public class SetZero {

	//@ requires 5 <= a.length;
	//@ requires 5 == a.length;
	//@ requires 5 >= a.length;
	//@ requires 2 < a.length;
	//@ requires 2 <= a.length;
	//@ requires 2 != a.length;
	//@ requires 2 > a.length;
	//@ requires 1 < a.length;
	//@ requires 1 <= a.length;
	//@ requires 1 == a.length;
	//@ requires 1 != a.length;
	//@ requires 1 >= a.length;
	//@ requires 1 > a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 == a.length;
	//@ requires -1 != a.length;
	//@ requires -1 >= a.length;
	//@ requires -1 > a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin == a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin >= a.length;
	//@ requires iBegin > a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin == 5;
	//@ requires iBegin != 5;
	//@ requires iBegin >= 5;
	//@ requires iBegin > 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin == 2;
	//@ requires iBegin != 2;
	//@ requires iBegin >= 2;
	//@ requires iBegin > 2;
	//@ requires iBegin < 1;
	//@ requires iBegin <= 1;
	//@ requires iBegin == 1;
	//@ requires iBegin != 1;
	//@ requires iBegin >= 1;
	//@ requires iBegin > 1;
	//@ requires iBegin < 0;
	//@ requires iBegin <= 0;
	//@ requires iBegin == 0;
	//@ requires iBegin != 0;
	//@ requires iBegin >= 0;
	//@ requires iBegin > 0;
	//@ requires iBegin < -1;
	//@ requires iBegin <= -1;
	//@ requires iBegin == -1;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd < a.length;
	//@ requires iEnd <= a.length;
	//@ requires iEnd == a.length;
	//@ requires iEnd != a.length;
	//@ requires iEnd >= a.length;
	//@ requires iEnd > a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd == 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 5;
	//@ requires iEnd > 5;
	//@ requires iEnd < 2;
	//@ requires iEnd <= 2;
	//@ requires iEnd == 2;
	//@ requires iEnd != 2;
	//@ requires iEnd >= 2;
	//@ requires iEnd > 2;
	//@ requires iEnd < 1;
	//@ requires iEnd <= 1;
	//@ requires iEnd == 1;
	//@ requires iEnd != 1;
	//@ requires iEnd >= 1;
	//@ requires iEnd > 1;
	//@ requires iEnd < 0;
	//@ requires iEnd <= 0;
	//@ requires iEnd == 0;
	//@ requires iEnd != 0;
	//@ requires iEnd >= 0;
	//@ requires iEnd > 0;
	//@ requires iEnd < iBegin;
	//@ requires iEnd <= iBegin;
	//@ requires iEnd == iBegin;
	//@ requires iEnd != iBegin;
	//@ requires iEnd >= iBegin;
	//@ requires iEnd > iBegin;
	//@ requires iEnd < -1;
	//@ requires iEnd <= -1;
	//@ requires iEnd == -1;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin == a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin >= a.length;
    //@ requires iBegin > a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin == 5;
    //@ requires iBegin != 5;
    //@ requires iBegin >= 5;
    //@ requires iBegin > 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin == 2;
    //@ requires iBegin != 2;
    //@ requires iBegin >= 2;
    //@ requires iBegin > 2;
    //@ requires iBegin < 1;
    //@ requires iBegin <= 1;
    //@ requires iBegin == 1;
    //@ requires iBegin != 1;
    //@ requires iBegin >= 1;
    //@ requires iBegin > 1;
    //@ requires iBegin < 0;
    //@ requires iBegin <= 0;
    //@ requires iBegin == 0;
    //@ requires iBegin != 0;
    //@ requires iBegin >= 0;
    //@ requires iBegin > 0;
    //@ requires iBegin < -1;
    //@ requires iBegin <= -1;
    //@ requires iBegin == -1;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd < a.length;
    //@ requires iEnd <= a.length;
    //@ requires iEnd == a.length;
    //@ requires iEnd != a.length;
    //@ requires iEnd >= a.length;
    //@ requires iEnd > a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd == 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 5;
    //@ requires iEnd > 5;
    //@ requires iEnd < 2;
    //@ requires iEnd <= 2;
    //@ requires iEnd == 2;
    //@ requires iEnd != 2;
    //@ requires iEnd >= 2;
    //@ requires iEnd > 2;
    //@ requires iEnd < 1;
    //@ requires iEnd <= 1;
    //@ requires iEnd == 1;
    //@ requires iEnd != 1;
    //@ requires iEnd >= 1;
    //@ requires iEnd > 1;
    //@ requires iEnd < 0;
    //@ requires iEnd <= 0;
    //@ requires iEnd == 0;
    //@ requires iEnd != 0;
    //@ requires iEnd >= 0;
    //@ requires iEnd > 0;
    //@ requires iEnd < iBegin;
    //@ requires iEnd <= iBegin;
    //@ requires iEnd == iBegin;
    //@ requires iEnd != iBegin;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd < -1;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:264: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:100:) in method __HoudiniInvoker
        SetZero(arr, 0, 4);
               ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:100: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:264:
	public static void SetZero(int[] a, int iBegin, int iEnd) {
	                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:9: verify: Precondition conjunct is false: 2 > a.length
	//@ requires 2 > a.length;
	               ^
3 verification failures

public class SetZero {

	//@ requires 5 <= a.length;
	//@ requires 5 == a.length;
	//@ requires 5 >= a.length;
	//@ requires 2 < a.length;
	//@ requires 2 <= a.length;
	//@ requires 2 != a.length;
	//@ requires 1 < a.length;
	//@ requires 1 <= a.length;
	//@ requires 1 == a.length;
	//@ requires 1 != a.length;
	//@ requires 1 >= a.length;
	//@ requires 1 > a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 == a.length;
	//@ requires -1 != a.length;
	//@ requires -1 >= a.length;
	//@ requires -1 > a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin == a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin >= a.length;
	//@ requires iBegin > a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin == 5;
	//@ requires iBegin != 5;
	//@ requires iBegin >= 5;
	//@ requires iBegin > 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin == 2;
	//@ requires iBegin != 2;
	//@ requires iBegin >= 2;
	//@ requires iBegin > 2;
	//@ requires iBegin < 1;
	//@ requires iBegin <= 1;
	//@ requires iBegin == 1;
	//@ requires iBegin != 1;
	//@ requires iBegin >= 1;
	//@ requires iBegin > 1;
	//@ requires iBegin < 0;
	//@ requires iBegin <= 0;
	//@ requires iBegin == 0;
	//@ requires iBegin != 0;
	//@ requires iBegin >= 0;
	//@ requires iBegin > 0;
	//@ requires iBegin < -1;
	//@ requires iBegin <= -1;
	//@ requires iBegin == -1;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd < a.length;
	//@ requires iEnd <= a.length;
	//@ requires iEnd == a.length;
	//@ requires iEnd != a.length;
	//@ requires iEnd >= a.length;
	//@ requires iEnd > a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd == 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 5;
	//@ requires iEnd > 5;
	//@ requires iEnd < 2;
	//@ requires iEnd <= 2;
	//@ requires iEnd == 2;
	//@ requires iEnd != 2;
	//@ requires iEnd >= 2;
	//@ requires iEnd > 2;
	//@ requires iEnd < 1;
	//@ requires iEnd <= 1;
	//@ requires iEnd == 1;
	//@ requires iEnd != 1;
	//@ requires iEnd >= 1;
	//@ requires iEnd > 1;
	//@ requires iEnd < 0;
	//@ requires iEnd <= 0;
	//@ requires iEnd == 0;
	//@ requires iEnd != 0;
	//@ requires iEnd >= 0;
	//@ requires iEnd > 0;
	//@ requires iEnd < iBegin;
	//@ requires iEnd <= iBegin;
	//@ requires iEnd == iBegin;
	//@ requires iEnd != iBegin;
	//@ requires iEnd >= iBegin;
	//@ requires iEnd > iBegin;
	//@ requires iEnd < -1;
	//@ requires iEnd <= -1;
	//@ requires iEnd == -1;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin == a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin >= a.length;
    //@ requires iBegin > a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin == 5;
    //@ requires iBegin != 5;
    //@ requires iBegin >= 5;
    //@ requires iBegin > 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin == 2;
    //@ requires iBegin != 2;
    //@ requires iBegin >= 2;
    //@ requires iBegin > 2;
    //@ requires iBegin < 1;
    //@ requires iBegin <= 1;
    //@ requires iBegin == 1;
    //@ requires iBegin != 1;
    //@ requires iBegin >= 1;
    //@ requires iBegin > 1;
    //@ requires iBegin < 0;
    //@ requires iBegin <= 0;
    //@ requires iBegin == 0;
    //@ requires iBegin != 0;
    //@ requires iBegin >= 0;
    //@ requires iBegin > 0;
    //@ requires iBegin < -1;
    //@ requires iBegin <= -1;
    //@ requires iBegin == -1;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd < a.length;
    //@ requires iEnd <= a.length;
    //@ requires iEnd == a.length;
    //@ requires iEnd != a.length;
    //@ requires iEnd >= a.length;
    //@ requires iEnd > a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd == 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 5;
    //@ requires iEnd > 5;
    //@ requires iEnd < 2;
    //@ requires iEnd <= 2;
    //@ requires iEnd == 2;
    //@ requires iEnd != 2;
    //@ requires iEnd >= 2;
    //@ requires iEnd > 2;
    //@ requires iEnd < 1;
    //@ requires iEnd <= 1;
    //@ requires iEnd == 1;
    //@ requires iEnd != 1;
    //@ requires iEnd >= 1;
    //@ requires iEnd > 1;
    //@ requires iEnd < 0;
    //@ requires iEnd <= 0;
    //@ requires iEnd == 0;
    //@ requires iEnd != 0;
    //@ requires iEnd >= 0;
    //@ requires iEnd > 0;
    //@ requires iEnd < iBegin;
    //@ requires iEnd <= iBegin;
    //@ requires iEnd == iBegin;
    //@ requires iEnd != iBegin;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd < -1;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:263: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:99:) in method __HoudiniInvoker
        SetZero(arr, 0, 4);
               ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:99: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:263:
	public static void SetZero(int[] a, int iBegin, int iEnd) {
	                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:11: verify: Precondition conjunct is false: 1 == a.length
	//@ requires 1 == a.length;
	               ^
3 verification failures

public class SetZero {

	//@ requires 5 <= a.length;
	//@ requires 5 == a.length;
	//@ requires 5 >= a.length;
	//@ requires 2 < a.length;
	//@ requires 2 <= a.length;
	//@ requires 2 != a.length;
	//@ requires 1 < a.length;
	//@ requires 1 <= a.length;
	//@ requires 1 != a.length;
	//@ requires 1 >= a.length;
	//@ requires 1 > a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 == a.length;
	//@ requires -1 != a.length;
	//@ requires -1 >= a.length;
	//@ requires -1 > a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin == a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin >= a.length;
	//@ requires iBegin > a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin == 5;
	//@ requires iBegin != 5;
	//@ requires iBegin >= 5;
	//@ requires iBegin > 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin == 2;
	//@ requires iBegin != 2;
	//@ requires iBegin >= 2;
	//@ requires iBegin > 2;
	//@ requires iBegin < 1;
	//@ requires iBegin <= 1;
	//@ requires iBegin == 1;
	//@ requires iBegin != 1;
	//@ requires iBegin >= 1;
	//@ requires iBegin > 1;
	//@ requires iBegin < 0;
	//@ requires iBegin <= 0;
	//@ requires iBegin == 0;
	//@ requires iBegin != 0;
	//@ requires iBegin >= 0;
	//@ requires iBegin > 0;
	//@ requires iBegin < -1;
	//@ requires iBegin <= -1;
	//@ requires iBegin == -1;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd < a.length;
	//@ requires iEnd <= a.length;
	//@ requires iEnd == a.length;
	//@ requires iEnd != a.length;
	//@ requires iEnd >= a.length;
	//@ requires iEnd > a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd == 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 5;
	//@ requires iEnd > 5;
	//@ requires iEnd < 2;
	//@ requires iEnd <= 2;
	//@ requires iEnd == 2;
	//@ requires iEnd != 2;
	//@ requires iEnd >= 2;
	//@ requires iEnd > 2;
	//@ requires iEnd < 1;
	//@ requires iEnd <= 1;
	//@ requires iEnd == 1;
	//@ requires iEnd != 1;
	//@ requires iEnd >= 1;
	//@ requires iEnd > 1;
	//@ requires iEnd < 0;
	//@ requires iEnd <= 0;
	//@ requires iEnd == 0;
	//@ requires iEnd != 0;
	//@ requires iEnd >= 0;
	//@ requires iEnd > 0;
	//@ requires iEnd < iBegin;
	//@ requires iEnd <= iBegin;
	//@ requires iEnd == iBegin;
	//@ requires iEnd != iBegin;
	//@ requires iEnd >= iBegin;
	//@ requires iEnd > iBegin;
	//@ requires iEnd < -1;
	//@ requires iEnd <= -1;
	//@ requires iEnd == -1;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin == a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin >= a.length;
    //@ requires iBegin > a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin == 5;
    //@ requires iBegin != 5;
    //@ requires iBegin >= 5;
    //@ requires iBegin > 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin == 2;
    //@ requires iBegin != 2;
    //@ requires iBegin >= 2;
    //@ requires iBegin > 2;
    //@ requires iBegin < 1;
    //@ requires iBegin <= 1;
    //@ requires iBegin == 1;
    //@ requires iBegin != 1;
    //@ requires iBegin >= 1;
    //@ requires iBegin > 1;
    //@ requires iBegin < 0;
    //@ requires iBegin <= 0;
    //@ requires iBegin == 0;
    //@ requires iBegin != 0;
    //@ requires iBegin >= 0;
    //@ requires iBegin > 0;
    //@ requires iBegin < -1;
    //@ requires iBegin <= -1;
    //@ requires iBegin == -1;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd < a.length;
    //@ requires iEnd <= a.length;
    //@ requires iEnd == a.length;
    //@ requires iEnd != a.length;
    //@ requires iEnd >= a.length;
    //@ requires iEnd > a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd == 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 5;
    //@ requires iEnd > 5;
    //@ requires iEnd < 2;
    //@ requires iEnd <= 2;
    //@ requires iEnd == 2;
    //@ requires iEnd != 2;
    //@ requires iEnd >= 2;
    //@ requires iEnd > 2;
    //@ requires iEnd < 1;
    //@ requires iEnd <= 1;
    //@ requires iEnd == 1;
    //@ requires iEnd != 1;
    //@ requires iEnd >= 1;
    //@ requires iEnd > 1;
    //@ requires iEnd < 0;
    //@ requires iEnd <= 0;
    //@ requires iEnd == 0;
    //@ requires iEnd != 0;
    //@ requires iEnd >= 0;
    //@ requires iEnd > 0;
    //@ requires iEnd < iBegin;
    //@ requires iEnd <= iBegin;
    //@ requires iEnd == iBegin;
    //@ requires iEnd != iBegin;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd < -1;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:262: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:98:) in method __HoudiniInvoker
        SetZero(arr, 0, 4);
               ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:98: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:262:
	public static void SetZero(int[] a, int iBegin, int iEnd) {
	                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:12: verify: Precondition conjunct is false: 1 >= a.length
	//@ requires 1 >= a.length;
	               ^
3 verification failures

public class SetZero {

	//@ requires 5 <= a.length;
	//@ requires 5 == a.length;
	//@ requires 5 >= a.length;
	//@ requires 2 < a.length;
	//@ requires 2 <= a.length;
	//@ requires 2 != a.length;
	//@ requires 1 < a.length;
	//@ requires 1 <= a.length;
	//@ requires 1 != a.length;
	//@ requires 1 > a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 == a.length;
	//@ requires -1 != a.length;
	//@ requires -1 >= a.length;
	//@ requires -1 > a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin == a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin >= a.length;
	//@ requires iBegin > a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin == 5;
	//@ requires iBegin != 5;
	//@ requires iBegin >= 5;
	//@ requires iBegin > 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin == 2;
	//@ requires iBegin != 2;
	//@ requires iBegin >= 2;
	//@ requires iBegin > 2;
	//@ requires iBegin < 1;
	//@ requires iBegin <= 1;
	//@ requires iBegin == 1;
	//@ requires iBegin != 1;
	//@ requires iBegin >= 1;
	//@ requires iBegin > 1;
	//@ requires iBegin < 0;
	//@ requires iBegin <= 0;
	//@ requires iBegin == 0;
	//@ requires iBegin != 0;
	//@ requires iBegin >= 0;
	//@ requires iBegin > 0;
	//@ requires iBegin < -1;
	//@ requires iBegin <= -1;
	//@ requires iBegin == -1;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd < a.length;
	//@ requires iEnd <= a.length;
	//@ requires iEnd == a.length;
	//@ requires iEnd != a.length;
	//@ requires iEnd >= a.length;
	//@ requires iEnd > a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd == 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 5;
	//@ requires iEnd > 5;
	//@ requires iEnd < 2;
	//@ requires iEnd <= 2;
	//@ requires iEnd == 2;
	//@ requires iEnd != 2;
	//@ requires iEnd >= 2;
	//@ requires iEnd > 2;
	//@ requires iEnd < 1;
	//@ requires iEnd <= 1;
	//@ requires iEnd == 1;
	//@ requires iEnd != 1;
	//@ requires iEnd >= 1;
	//@ requires iEnd > 1;
	//@ requires iEnd < 0;
	//@ requires iEnd <= 0;
	//@ requires iEnd == 0;
	//@ requires iEnd != 0;
	//@ requires iEnd >= 0;
	//@ requires iEnd > 0;
	//@ requires iEnd < iBegin;
	//@ requires iEnd <= iBegin;
	//@ requires iEnd == iBegin;
	//@ requires iEnd != iBegin;
	//@ requires iEnd >= iBegin;
	//@ requires iEnd > iBegin;
	//@ requires iEnd < -1;
	//@ requires iEnd <= -1;
	//@ requires iEnd == -1;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin == a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin >= a.length;
    //@ requires iBegin > a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin == 5;
    //@ requires iBegin != 5;
    //@ requires iBegin >= 5;
    //@ requires iBegin > 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin == 2;
    //@ requires iBegin != 2;
    //@ requires iBegin >= 2;
    //@ requires iBegin > 2;
    //@ requires iBegin < 1;
    //@ requires iBegin <= 1;
    //@ requires iBegin == 1;
    //@ requires iBegin != 1;
    //@ requires iBegin >= 1;
    //@ requires iBegin > 1;
    //@ requires iBegin < 0;
    //@ requires iBegin <= 0;
    //@ requires iBegin == 0;
    //@ requires iBegin != 0;
    //@ requires iBegin >= 0;
    //@ requires iBegin > 0;
    //@ requires iBegin < -1;
    //@ requires iBegin <= -1;
    //@ requires iBegin == -1;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd < a.length;
    //@ requires iEnd <= a.length;
    //@ requires iEnd == a.length;
    //@ requires iEnd != a.length;
    //@ requires iEnd >= a.length;
    //@ requires iEnd > a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd == 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 5;
    //@ requires iEnd > 5;
    //@ requires iEnd < 2;
    //@ requires iEnd <= 2;
    //@ requires iEnd == 2;
    //@ requires iEnd != 2;
    //@ requires iEnd >= 2;
    //@ requires iEnd > 2;
    //@ requires iEnd < 1;
    //@ requires iEnd <= 1;
    //@ requires iEnd == 1;
    //@ requires iEnd != 1;
    //@ requires iEnd >= 1;
    //@ requires iEnd > 1;
    //@ requires iEnd < 0;
    //@ requires iEnd <= 0;
    //@ requires iEnd == 0;
    //@ requires iEnd != 0;
    //@ requires iEnd >= 0;
    //@ requires iEnd > 0;
    //@ requires iEnd < iBegin;
    //@ requires iEnd <= iBegin;
    //@ requires iEnd == iBegin;
    //@ requires iEnd != iBegin;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd < -1;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:261: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:97:) in method __HoudiniInvoker
        SetZero(arr, 0, 4);
               ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:97: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:261:
	public static void SetZero(int[] a, int iBegin, int iEnd) {
	                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:12: verify: Precondition conjunct is false: 1 > a.length
	//@ requires 1 > a.length;
	               ^
3 verification failures

public class SetZero {

	//@ requires 5 <= a.length;
	//@ requires 5 == a.length;
	//@ requires 5 >= a.length;
	//@ requires 2 < a.length;
	//@ requires 2 <= a.length;
	//@ requires 2 != a.length;
	//@ requires 1 < a.length;
	//@ requires 1 <= a.length;
	//@ requires 1 != a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 == a.length;
	//@ requires -1 != a.length;
	//@ requires -1 >= a.length;
	//@ requires -1 > a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin == a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin >= a.length;
	//@ requires iBegin > a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin == 5;
	//@ requires iBegin != 5;
	//@ requires iBegin >= 5;
	//@ requires iBegin > 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin == 2;
	//@ requires iBegin != 2;
	//@ requires iBegin >= 2;
	//@ requires iBegin > 2;
	//@ requires iBegin < 1;
	//@ requires iBegin <= 1;
	//@ requires iBegin == 1;
	//@ requires iBegin != 1;
	//@ requires iBegin >= 1;
	//@ requires iBegin > 1;
	//@ requires iBegin < 0;
	//@ requires iBegin <= 0;
	//@ requires iBegin == 0;
	//@ requires iBegin != 0;
	//@ requires iBegin >= 0;
	//@ requires iBegin > 0;
	//@ requires iBegin < -1;
	//@ requires iBegin <= -1;
	//@ requires iBegin == -1;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd < a.length;
	//@ requires iEnd <= a.length;
	//@ requires iEnd == a.length;
	//@ requires iEnd != a.length;
	//@ requires iEnd >= a.length;
	//@ requires iEnd > a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd == 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 5;
	//@ requires iEnd > 5;
	//@ requires iEnd < 2;
	//@ requires iEnd <= 2;
	//@ requires iEnd == 2;
	//@ requires iEnd != 2;
	//@ requires iEnd >= 2;
	//@ requires iEnd > 2;
	//@ requires iEnd < 1;
	//@ requires iEnd <= 1;
	//@ requires iEnd == 1;
	//@ requires iEnd != 1;
	//@ requires iEnd >= 1;
	//@ requires iEnd > 1;
	//@ requires iEnd < 0;
	//@ requires iEnd <= 0;
	//@ requires iEnd == 0;
	//@ requires iEnd != 0;
	//@ requires iEnd >= 0;
	//@ requires iEnd > 0;
	//@ requires iEnd < iBegin;
	//@ requires iEnd <= iBegin;
	//@ requires iEnd == iBegin;
	//@ requires iEnd != iBegin;
	//@ requires iEnd >= iBegin;
	//@ requires iEnd > iBegin;
	//@ requires iEnd < -1;
	//@ requires iEnd <= -1;
	//@ requires iEnd == -1;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin == a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin >= a.length;
    //@ requires iBegin > a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin == 5;
    //@ requires iBegin != 5;
    //@ requires iBegin >= 5;
    //@ requires iBegin > 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin == 2;
    //@ requires iBegin != 2;
    //@ requires iBegin >= 2;
    //@ requires iBegin > 2;
    //@ requires iBegin < 1;
    //@ requires iBegin <= 1;
    //@ requires iBegin == 1;
    //@ requires iBegin != 1;
    //@ requires iBegin >= 1;
    //@ requires iBegin > 1;
    //@ requires iBegin < 0;
    //@ requires iBegin <= 0;
    //@ requires iBegin == 0;
    //@ requires iBegin != 0;
    //@ requires iBegin >= 0;
    //@ requires iBegin > 0;
    //@ requires iBegin < -1;
    //@ requires iBegin <= -1;
    //@ requires iBegin == -1;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd < a.length;
    //@ requires iEnd <= a.length;
    //@ requires iEnd == a.length;
    //@ requires iEnd != a.length;
    //@ requires iEnd >= a.length;
    //@ requires iEnd > a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd == 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 5;
    //@ requires iEnd > 5;
    //@ requires iEnd < 2;
    //@ requires iEnd <= 2;
    //@ requires iEnd == 2;
    //@ requires iEnd != 2;
    //@ requires iEnd >= 2;
    //@ requires iEnd > 2;
    //@ requires iEnd < 1;
    //@ requires iEnd <= 1;
    //@ requires iEnd == 1;
    //@ requires iEnd != 1;
    //@ requires iEnd >= 1;
    //@ requires iEnd > 1;
    //@ requires iEnd < 0;
    //@ requires iEnd <= 0;
    //@ requires iEnd == 0;
    //@ requires iEnd != 0;
    //@ requires iEnd >= 0;
    //@ requires iEnd > 0;
    //@ requires iEnd < iBegin;
    //@ requires iEnd <= iBegin;
    //@ requires iEnd == iBegin;
    //@ requires iEnd != iBegin;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd < -1;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:260: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:96:) in method __HoudiniInvoker
        SetZero(arr, 0, 4);
               ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:96: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:260:
	public static void SetZero(int[] a, int iBegin, int iEnd) {
	                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:14: verify: Precondition conjunct is false: -1 == a.length
	//@ requires -1 == a.length;
	                ^
3 verification failures

public class SetZero {

	//@ requires 5 <= a.length;
	//@ requires 5 == a.length;
	//@ requires 5 >= a.length;
	//@ requires 2 < a.length;
	//@ requires 2 <= a.length;
	//@ requires 2 != a.length;
	//@ requires 1 < a.length;
	//@ requires 1 <= a.length;
	//@ requires 1 != a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires -1 >= a.length;
	//@ requires -1 > a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin == a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin >= a.length;
	//@ requires iBegin > a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin == 5;
	//@ requires iBegin != 5;
	//@ requires iBegin >= 5;
	//@ requires iBegin > 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin == 2;
	//@ requires iBegin != 2;
	//@ requires iBegin >= 2;
	//@ requires iBegin > 2;
	//@ requires iBegin < 1;
	//@ requires iBegin <= 1;
	//@ requires iBegin == 1;
	//@ requires iBegin != 1;
	//@ requires iBegin >= 1;
	//@ requires iBegin > 1;
	//@ requires iBegin < 0;
	//@ requires iBegin <= 0;
	//@ requires iBegin == 0;
	//@ requires iBegin != 0;
	//@ requires iBegin >= 0;
	//@ requires iBegin > 0;
	//@ requires iBegin < -1;
	//@ requires iBegin <= -1;
	//@ requires iBegin == -1;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd < a.length;
	//@ requires iEnd <= a.length;
	//@ requires iEnd == a.length;
	//@ requires iEnd != a.length;
	//@ requires iEnd >= a.length;
	//@ requires iEnd > a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd == 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 5;
	//@ requires iEnd > 5;
	//@ requires iEnd < 2;
	//@ requires iEnd <= 2;
	//@ requires iEnd == 2;
	//@ requires iEnd != 2;
	//@ requires iEnd >= 2;
	//@ requires iEnd > 2;
	//@ requires iEnd < 1;
	//@ requires iEnd <= 1;
	//@ requires iEnd == 1;
	//@ requires iEnd != 1;
	//@ requires iEnd >= 1;
	//@ requires iEnd > 1;
	//@ requires iEnd < 0;
	//@ requires iEnd <= 0;
	//@ requires iEnd == 0;
	//@ requires iEnd != 0;
	//@ requires iEnd >= 0;
	//@ requires iEnd > 0;
	//@ requires iEnd < iBegin;
	//@ requires iEnd <= iBegin;
	//@ requires iEnd == iBegin;
	//@ requires iEnd != iBegin;
	//@ requires iEnd >= iBegin;
	//@ requires iEnd > iBegin;
	//@ requires iEnd < -1;
	//@ requires iEnd <= -1;
	//@ requires iEnd == -1;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin == a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin >= a.length;
    //@ requires iBegin > a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin == 5;
    //@ requires iBegin != 5;
    //@ requires iBegin >= 5;
    //@ requires iBegin > 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin == 2;
    //@ requires iBegin != 2;
    //@ requires iBegin >= 2;
    //@ requires iBegin > 2;
    //@ requires iBegin < 1;
    //@ requires iBegin <= 1;
    //@ requires iBegin == 1;
    //@ requires iBegin != 1;
    //@ requires iBegin >= 1;
    //@ requires iBegin > 1;
    //@ requires iBegin < 0;
    //@ requires iBegin <= 0;
    //@ requires iBegin == 0;
    //@ requires iBegin != 0;
    //@ requires iBegin >= 0;
    //@ requires iBegin > 0;
    //@ requires iBegin < -1;
    //@ requires iBegin <= -1;
    //@ requires iBegin == -1;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd < a.length;
    //@ requires iEnd <= a.length;
    //@ requires iEnd == a.length;
    //@ requires iEnd != a.length;
    //@ requires iEnd >= a.length;
    //@ requires iEnd > a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd == 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 5;
    //@ requires iEnd > 5;
    //@ requires iEnd < 2;
    //@ requires iEnd <= 2;
    //@ requires iEnd == 2;
    //@ requires iEnd != 2;
    //@ requires iEnd >= 2;
    //@ requires iEnd > 2;
    //@ requires iEnd < 1;
    //@ requires iEnd <= 1;
    //@ requires iEnd == 1;
    //@ requires iEnd != 1;
    //@ requires iEnd >= 1;
    //@ requires iEnd > 1;
    //@ requires iEnd < 0;
    //@ requires iEnd <= 0;
    //@ requires iEnd == 0;
    //@ requires iEnd != 0;
    //@ requires iEnd >= 0;
    //@ requires iEnd > 0;
    //@ requires iEnd < iBegin;
    //@ requires iEnd <= iBegin;
    //@ requires iEnd == iBegin;
    //@ requires iEnd != iBegin;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd < -1;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:259: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:95:) in method __HoudiniInvoker
        SetZero(arr, 0, 4);
               ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:95: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:259:
	public static void SetZero(int[] a, int iBegin, int iEnd) {
	                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:15: verify: Precondition conjunct is false: -1 >= a.length
	//@ requires -1 >= a.length;
	                ^
3 verification failures

public class SetZero {

	//@ requires 5 <= a.length;
	//@ requires 5 == a.length;
	//@ requires 5 >= a.length;
	//@ requires 2 < a.length;
	//@ requires 2 <= a.length;
	//@ requires 2 != a.length;
	//@ requires 1 < a.length;
	//@ requires 1 <= a.length;
	//@ requires 1 != a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires -1 > a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin == a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin >= a.length;
	//@ requires iBegin > a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin == 5;
	//@ requires iBegin != 5;
	//@ requires iBegin >= 5;
	//@ requires iBegin > 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin == 2;
	//@ requires iBegin != 2;
	//@ requires iBegin >= 2;
	//@ requires iBegin > 2;
	//@ requires iBegin < 1;
	//@ requires iBegin <= 1;
	//@ requires iBegin == 1;
	//@ requires iBegin != 1;
	//@ requires iBegin >= 1;
	//@ requires iBegin > 1;
	//@ requires iBegin < 0;
	//@ requires iBegin <= 0;
	//@ requires iBegin == 0;
	//@ requires iBegin != 0;
	//@ requires iBegin >= 0;
	//@ requires iBegin > 0;
	//@ requires iBegin < -1;
	//@ requires iBegin <= -1;
	//@ requires iBegin == -1;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd < a.length;
	//@ requires iEnd <= a.length;
	//@ requires iEnd == a.length;
	//@ requires iEnd != a.length;
	//@ requires iEnd >= a.length;
	//@ requires iEnd > a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd == 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 5;
	//@ requires iEnd > 5;
	//@ requires iEnd < 2;
	//@ requires iEnd <= 2;
	//@ requires iEnd == 2;
	//@ requires iEnd != 2;
	//@ requires iEnd >= 2;
	//@ requires iEnd > 2;
	//@ requires iEnd < 1;
	//@ requires iEnd <= 1;
	//@ requires iEnd == 1;
	//@ requires iEnd != 1;
	//@ requires iEnd >= 1;
	//@ requires iEnd > 1;
	//@ requires iEnd < 0;
	//@ requires iEnd <= 0;
	//@ requires iEnd == 0;
	//@ requires iEnd != 0;
	//@ requires iEnd >= 0;
	//@ requires iEnd > 0;
	//@ requires iEnd < iBegin;
	//@ requires iEnd <= iBegin;
	//@ requires iEnd == iBegin;
	//@ requires iEnd != iBegin;
	//@ requires iEnd >= iBegin;
	//@ requires iEnd > iBegin;
	//@ requires iEnd < -1;
	//@ requires iEnd <= -1;
	//@ requires iEnd == -1;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin == a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin >= a.length;
    //@ requires iBegin > a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin == 5;
    //@ requires iBegin != 5;
    //@ requires iBegin >= 5;
    //@ requires iBegin > 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin == 2;
    //@ requires iBegin != 2;
    //@ requires iBegin >= 2;
    //@ requires iBegin > 2;
    //@ requires iBegin < 1;
    //@ requires iBegin <= 1;
    //@ requires iBegin == 1;
    //@ requires iBegin != 1;
    //@ requires iBegin >= 1;
    //@ requires iBegin > 1;
    //@ requires iBegin < 0;
    //@ requires iBegin <= 0;
    //@ requires iBegin == 0;
    //@ requires iBegin != 0;
    //@ requires iBegin >= 0;
    //@ requires iBegin > 0;
    //@ requires iBegin < -1;
    //@ requires iBegin <= -1;
    //@ requires iBegin == -1;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd < a.length;
    //@ requires iEnd <= a.length;
    //@ requires iEnd == a.length;
    //@ requires iEnd != a.length;
    //@ requires iEnd >= a.length;
    //@ requires iEnd > a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd == 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 5;
    //@ requires iEnd > 5;
    //@ requires iEnd < 2;
    //@ requires iEnd <= 2;
    //@ requires iEnd == 2;
    //@ requires iEnd != 2;
    //@ requires iEnd >= 2;
    //@ requires iEnd > 2;
    //@ requires iEnd < 1;
    //@ requires iEnd <= 1;
    //@ requires iEnd == 1;
    //@ requires iEnd != 1;
    //@ requires iEnd >= 1;
    //@ requires iEnd > 1;
    //@ requires iEnd < 0;
    //@ requires iEnd <= 0;
    //@ requires iEnd == 0;
    //@ requires iEnd != 0;
    //@ requires iEnd >= 0;
    //@ requires iEnd > 0;
    //@ requires iEnd < iBegin;
    //@ requires iEnd <= iBegin;
    //@ requires iEnd == iBegin;
    //@ requires iEnd != iBegin;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd < -1;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:258: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:94:) in method __HoudiniInvoker
        SetZero(arr, 0, 4);
               ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:94: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:258:
	public static void SetZero(int[] a, int iBegin, int iEnd) {
	                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:15: verify: Precondition conjunct is false: -1 > a.length
	//@ requires -1 > a.length;
	                ^
3 verification failures

public class SetZero {

	//@ requires 5 <= a.length;
	//@ requires 5 == a.length;
	//@ requires 5 >= a.length;
	//@ requires 2 < a.length;
	//@ requires 2 <= a.length;
	//@ requires 2 != a.length;
	//@ requires 1 < a.length;
	//@ requires 1 <= a.length;
	//@ requires 1 != a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin == a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin >= a.length;
	//@ requires iBegin > a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin == 5;
	//@ requires iBegin != 5;
	//@ requires iBegin >= 5;
	//@ requires iBegin > 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin == 2;
	//@ requires iBegin != 2;
	//@ requires iBegin >= 2;
	//@ requires iBegin > 2;
	//@ requires iBegin < 1;
	//@ requires iBegin <= 1;
	//@ requires iBegin == 1;
	//@ requires iBegin != 1;
	//@ requires iBegin >= 1;
	//@ requires iBegin > 1;
	//@ requires iBegin < 0;
	//@ requires iBegin <= 0;
	//@ requires iBegin == 0;
	//@ requires iBegin != 0;
	//@ requires iBegin >= 0;
	//@ requires iBegin > 0;
	//@ requires iBegin < -1;
	//@ requires iBegin <= -1;
	//@ requires iBegin == -1;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd < a.length;
	//@ requires iEnd <= a.length;
	//@ requires iEnd == a.length;
	//@ requires iEnd != a.length;
	//@ requires iEnd >= a.length;
	//@ requires iEnd > a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd == 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 5;
	//@ requires iEnd > 5;
	//@ requires iEnd < 2;
	//@ requires iEnd <= 2;
	//@ requires iEnd == 2;
	//@ requires iEnd != 2;
	//@ requires iEnd >= 2;
	//@ requires iEnd > 2;
	//@ requires iEnd < 1;
	//@ requires iEnd <= 1;
	//@ requires iEnd == 1;
	//@ requires iEnd != 1;
	//@ requires iEnd >= 1;
	//@ requires iEnd > 1;
	//@ requires iEnd < 0;
	//@ requires iEnd <= 0;
	//@ requires iEnd == 0;
	//@ requires iEnd != 0;
	//@ requires iEnd >= 0;
	//@ requires iEnd > 0;
	//@ requires iEnd < iBegin;
	//@ requires iEnd <= iBegin;
	//@ requires iEnd == iBegin;
	//@ requires iEnd != iBegin;
	//@ requires iEnd >= iBegin;
	//@ requires iEnd > iBegin;
	//@ requires iEnd < -1;
	//@ requires iEnd <= -1;
	//@ requires iEnd == -1;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin == a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin >= a.length;
    //@ requires iBegin > a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin == 5;
    //@ requires iBegin != 5;
    //@ requires iBegin >= 5;
    //@ requires iBegin > 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin == 2;
    //@ requires iBegin != 2;
    //@ requires iBegin >= 2;
    //@ requires iBegin > 2;
    //@ requires iBegin < 1;
    //@ requires iBegin <= 1;
    //@ requires iBegin == 1;
    //@ requires iBegin != 1;
    //@ requires iBegin >= 1;
    //@ requires iBegin > 1;
    //@ requires iBegin < 0;
    //@ requires iBegin <= 0;
    //@ requires iBegin == 0;
    //@ requires iBegin != 0;
    //@ requires iBegin >= 0;
    //@ requires iBegin > 0;
    //@ requires iBegin < -1;
    //@ requires iBegin <= -1;
    //@ requires iBegin == -1;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd < a.length;
    //@ requires iEnd <= a.length;
    //@ requires iEnd == a.length;
    //@ requires iEnd != a.length;
    //@ requires iEnd >= a.length;
    //@ requires iEnd > a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd == 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 5;
    //@ requires iEnd > 5;
    //@ requires iEnd < 2;
    //@ requires iEnd <= 2;
    //@ requires iEnd == 2;
    //@ requires iEnd != 2;
    //@ requires iEnd >= 2;
    //@ requires iEnd > 2;
    //@ requires iEnd < 1;
    //@ requires iEnd <= 1;
    //@ requires iEnd == 1;
    //@ requires iEnd != 1;
    //@ requires iEnd >= 1;
    //@ requires iEnd > 1;
    //@ requires iEnd < 0;
    //@ requires iEnd <= 0;
    //@ requires iEnd == 0;
    //@ requires iEnd != 0;
    //@ requires iEnd >= 0;
    //@ requires iEnd > 0;
    //@ requires iEnd < iBegin;
    //@ requires iEnd <= iBegin;
    //@ requires iEnd == iBegin;
    //@ requires iEnd != iBegin;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd < -1;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:257: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:93:) in method __HoudiniInvoker
        SetZero(arr, 0, 4);
               ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:93: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:257:
	public static void SetZero(int[] a, int iBegin, int iEnd) {
	                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:17: verify: Precondition conjunct is false: iBegin == a.length
	//@ requires iBegin == a.length;
	                    ^
3 verification failures

public class SetZero {

	//@ requires 5 <= a.length;
	//@ requires 5 == a.length;
	//@ requires 5 >= a.length;
	//@ requires 2 < a.length;
	//@ requires 2 <= a.length;
	//@ requires 2 != a.length;
	//@ requires 1 < a.length;
	//@ requires 1 <= a.length;
	//@ requires 1 != a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin >= a.length;
	//@ requires iBegin > a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin == 5;
	//@ requires iBegin != 5;
	//@ requires iBegin >= 5;
	//@ requires iBegin > 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin == 2;
	//@ requires iBegin != 2;
	//@ requires iBegin >= 2;
	//@ requires iBegin > 2;
	//@ requires iBegin < 1;
	//@ requires iBegin <= 1;
	//@ requires iBegin == 1;
	//@ requires iBegin != 1;
	//@ requires iBegin >= 1;
	//@ requires iBegin > 1;
	//@ requires iBegin < 0;
	//@ requires iBegin <= 0;
	//@ requires iBegin == 0;
	//@ requires iBegin != 0;
	//@ requires iBegin >= 0;
	//@ requires iBegin > 0;
	//@ requires iBegin < -1;
	//@ requires iBegin <= -1;
	//@ requires iBegin == -1;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd < a.length;
	//@ requires iEnd <= a.length;
	//@ requires iEnd == a.length;
	//@ requires iEnd != a.length;
	//@ requires iEnd >= a.length;
	//@ requires iEnd > a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd == 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 5;
	//@ requires iEnd > 5;
	//@ requires iEnd < 2;
	//@ requires iEnd <= 2;
	//@ requires iEnd == 2;
	//@ requires iEnd != 2;
	//@ requires iEnd >= 2;
	//@ requires iEnd > 2;
	//@ requires iEnd < 1;
	//@ requires iEnd <= 1;
	//@ requires iEnd == 1;
	//@ requires iEnd != 1;
	//@ requires iEnd >= 1;
	//@ requires iEnd > 1;
	//@ requires iEnd < 0;
	//@ requires iEnd <= 0;
	//@ requires iEnd == 0;
	//@ requires iEnd != 0;
	//@ requires iEnd >= 0;
	//@ requires iEnd > 0;
	//@ requires iEnd < iBegin;
	//@ requires iEnd <= iBegin;
	//@ requires iEnd == iBegin;
	//@ requires iEnd != iBegin;
	//@ requires iEnd >= iBegin;
	//@ requires iEnd > iBegin;
	//@ requires iEnd < -1;
	//@ requires iEnd <= -1;
	//@ requires iEnd == -1;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin == a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin >= a.length;
    //@ requires iBegin > a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin == 5;
    //@ requires iBegin != 5;
    //@ requires iBegin >= 5;
    //@ requires iBegin > 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin == 2;
    //@ requires iBegin != 2;
    //@ requires iBegin >= 2;
    //@ requires iBegin > 2;
    //@ requires iBegin < 1;
    //@ requires iBegin <= 1;
    //@ requires iBegin == 1;
    //@ requires iBegin != 1;
    //@ requires iBegin >= 1;
    //@ requires iBegin > 1;
    //@ requires iBegin < 0;
    //@ requires iBegin <= 0;
    //@ requires iBegin == 0;
    //@ requires iBegin != 0;
    //@ requires iBegin >= 0;
    //@ requires iBegin > 0;
    //@ requires iBegin < -1;
    //@ requires iBegin <= -1;
    //@ requires iBegin == -1;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd < a.length;
    //@ requires iEnd <= a.length;
    //@ requires iEnd == a.length;
    //@ requires iEnd != a.length;
    //@ requires iEnd >= a.length;
    //@ requires iEnd > a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd == 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 5;
    //@ requires iEnd > 5;
    //@ requires iEnd < 2;
    //@ requires iEnd <= 2;
    //@ requires iEnd == 2;
    //@ requires iEnd != 2;
    //@ requires iEnd >= 2;
    //@ requires iEnd > 2;
    //@ requires iEnd < 1;
    //@ requires iEnd <= 1;
    //@ requires iEnd == 1;
    //@ requires iEnd != 1;
    //@ requires iEnd >= 1;
    //@ requires iEnd > 1;
    //@ requires iEnd < 0;
    //@ requires iEnd <= 0;
    //@ requires iEnd == 0;
    //@ requires iEnd != 0;
    //@ requires iEnd >= 0;
    //@ requires iEnd > 0;
    //@ requires iEnd < iBegin;
    //@ requires iEnd <= iBegin;
    //@ requires iEnd == iBegin;
    //@ requires iEnd != iBegin;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd < -1;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:256: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:92:) in method __HoudiniInvoker
        SetZero(arr, 0, 4);
               ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:92: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:256:
	public static void SetZero(int[] a, int iBegin, int iEnd) {
	                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:18: verify: Precondition conjunct is false: iBegin >= a.length
	//@ requires iBegin >= a.length;
	                    ^
3 verification failures

public class SetZero {

	//@ requires 5 <= a.length;
	//@ requires 5 == a.length;
	//@ requires 5 >= a.length;
	//@ requires 2 < a.length;
	//@ requires 2 <= a.length;
	//@ requires 2 != a.length;
	//@ requires 1 < a.length;
	//@ requires 1 <= a.length;
	//@ requires 1 != a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin > a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin == 5;
	//@ requires iBegin != 5;
	//@ requires iBegin >= 5;
	//@ requires iBegin > 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin == 2;
	//@ requires iBegin != 2;
	//@ requires iBegin >= 2;
	//@ requires iBegin > 2;
	//@ requires iBegin < 1;
	//@ requires iBegin <= 1;
	//@ requires iBegin == 1;
	//@ requires iBegin != 1;
	//@ requires iBegin >= 1;
	//@ requires iBegin > 1;
	//@ requires iBegin < 0;
	//@ requires iBegin <= 0;
	//@ requires iBegin == 0;
	//@ requires iBegin != 0;
	//@ requires iBegin >= 0;
	//@ requires iBegin > 0;
	//@ requires iBegin < -1;
	//@ requires iBegin <= -1;
	//@ requires iBegin == -1;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd < a.length;
	//@ requires iEnd <= a.length;
	//@ requires iEnd == a.length;
	//@ requires iEnd != a.length;
	//@ requires iEnd >= a.length;
	//@ requires iEnd > a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd == 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 5;
	//@ requires iEnd > 5;
	//@ requires iEnd < 2;
	//@ requires iEnd <= 2;
	//@ requires iEnd == 2;
	//@ requires iEnd != 2;
	//@ requires iEnd >= 2;
	//@ requires iEnd > 2;
	//@ requires iEnd < 1;
	//@ requires iEnd <= 1;
	//@ requires iEnd == 1;
	//@ requires iEnd != 1;
	//@ requires iEnd >= 1;
	//@ requires iEnd > 1;
	//@ requires iEnd < 0;
	//@ requires iEnd <= 0;
	//@ requires iEnd == 0;
	//@ requires iEnd != 0;
	//@ requires iEnd >= 0;
	//@ requires iEnd > 0;
	//@ requires iEnd < iBegin;
	//@ requires iEnd <= iBegin;
	//@ requires iEnd == iBegin;
	//@ requires iEnd != iBegin;
	//@ requires iEnd >= iBegin;
	//@ requires iEnd > iBegin;
	//@ requires iEnd < -1;
	//@ requires iEnd <= -1;
	//@ requires iEnd == -1;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin == a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin >= a.length;
    //@ requires iBegin > a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin == 5;
    //@ requires iBegin != 5;
    //@ requires iBegin >= 5;
    //@ requires iBegin > 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin == 2;
    //@ requires iBegin != 2;
    //@ requires iBegin >= 2;
    //@ requires iBegin > 2;
    //@ requires iBegin < 1;
    //@ requires iBegin <= 1;
    //@ requires iBegin == 1;
    //@ requires iBegin != 1;
    //@ requires iBegin >= 1;
    //@ requires iBegin > 1;
    //@ requires iBegin < 0;
    //@ requires iBegin <= 0;
    //@ requires iBegin == 0;
    //@ requires iBegin != 0;
    //@ requires iBegin >= 0;
    //@ requires iBegin > 0;
    //@ requires iBegin < -1;
    //@ requires iBegin <= -1;
    //@ requires iBegin == -1;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd < a.length;
    //@ requires iEnd <= a.length;
    //@ requires iEnd == a.length;
    //@ requires iEnd != a.length;
    //@ requires iEnd >= a.length;
    //@ requires iEnd > a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd == 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 5;
    //@ requires iEnd > 5;
    //@ requires iEnd < 2;
    //@ requires iEnd <= 2;
    //@ requires iEnd == 2;
    //@ requires iEnd != 2;
    //@ requires iEnd >= 2;
    //@ requires iEnd > 2;
    //@ requires iEnd < 1;
    //@ requires iEnd <= 1;
    //@ requires iEnd == 1;
    //@ requires iEnd != 1;
    //@ requires iEnd >= 1;
    //@ requires iEnd > 1;
    //@ requires iEnd < 0;
    //@ requires iEnd <= 0;
    //@ requires iEnd == 0;
    //@ requires iEnd != 0;
    //@ requires iEnd >= 0;
    //@ requires iEnd > 0;
    //@ requires iEnd < iBegin;
    //@ requires iEnd <= iBegin;
    //@ requires iEnd == iBegin;
    //@ requires iEnd != iBegin;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd < -1;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:255: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:91:) in method __HoudiniInvoker
        SetZero(arr, 0, 4);
               ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:91: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:255:
	public static void SetZero(int[] a, int iBegin, int iEnd) {
	                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:18: verify: Precondition conjunct is false: iBegin > a.length
	//@ requires iBegin > a.length;
	                    ^
3 verification failures

public class SetZero {

	//@ requires 5 <= a.length;
	//@ requires 5 == a.length;
	//@ requires 5 >= a.length;
	//@ requires 2 < a.length;
	//@ requires 2 <= a.length;
	//@ requires 2 != a.length;
	//@ requires 1 < a.length;
	//@ requires 1 <= a.length;
	//@ requires 1 != a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin == 5;
	//@ requires iBegin != 5;
	//@ requires iBegin >= 5;
	//@ requires iBegin > 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin == 2;
	//@ requires iBegin != 2;
	//@ requires iBegin >= 2;
	//@ requires iBegin > 2;
	//@ requires iBegin < 1;
	//@ requires iBegin <= 1;
	//@ requires iBegin == 1;
	//@ requires iBegin != 1;
	//@ requires iBegin >= 1;
	//@ requires iBegin > 1;
	//@ requires iBegin < 0;
	//@ requires iBegin <= 0;
	//@ requires iBegin == 0;
	//@ requires iBegin != 0;
	//@ requires iBegin >= 0;
	//@ requires iBegin > 0;
	//@ requires iBegin < -1;
	//@ requires iBegin <= -1;
	//@ requires iBegin == -1;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd < a.length;
	//@ requires iEnd <= a.length;
	//@ requires iEnd == a.length;
	//@ requires iEnd != a.length;
	//@ requires iEnd >= a.length;
	//@ requires iEnd > a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd == 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 5;
	//@ requires iEnd > 5;
	//@ requires iEnd < 2;
	//@ requires iEnd <= 2;
	//@ requires iEnd == 2;
	//@ requires iEnd != 2;
	//@ requires iEnd >= 2;
	//@ requires iEnd > 2;
	//@ requires iEnd < 1;
	//@ requires iEnd <= 1;
	//@ requires iEnd == 1;
	//@ requires iEnd != 1;
	//@ requires iEnd >= 1;
	//@ requires iEnd > 1;
	//@ requires iEnd < 0;
	//@ requires iEnd <= 0;
	//@ requires iEnd == 0;
	//@ requires iEnd != 0;
	//@ requires iEnd >= 0;
	//@ requires iEnd > 0;
	//@ requires iEnd < iBegin;
	//@ requires iEnd <= iBegin;
	//@ requires iEnd == iBegin;
	//@ requires iEnd != iBegin;
	//@ requires iEnd >= iBegin;
	//@ requires iEnd > iBegin;
	//@ requires iEnd < -1;
	//@ requires iEnd <= -1;
	//@ requires iEnd == -1;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin == a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin >= a.length;
    //@ requires iBegin > a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin == 5;
    //@ requires iBegin != 5;
    //@ requires iBegin >= 5;
    //@ requires iBegin > 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin == 2;
    //@ requires iBegin != 2;
    //@ requires iBegin >= 2;
    //@ requires iBegin > 2;
    //@ requires iBegin < 1;
    //@ requires iBegin <= 1;
    //@ requires iBegin == 1;
    //@ requires iBegin != 1;
    //@ requires iBegin >= 1;
    //@ requires iBegin > 1;
    //@ requires iBegin < 0;
    //@ requires iBegin <= 0;
    //@ requires iBegin == 0;
    //@ requires iBegin != 0;
    //@ requires iBegin >= 0;
    //@ requires iBegin > 0;
    //@ requires iBegin < -1;
    //@ requires iBegin <= -1;
    //@ requires iBegin == -1;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd < a.length;
    //@ requires iEnd <= a.length;
    //@ requires iEnd == a.length;
    //@ requires iEnd != a.length;
    //@ requires iEnd >= a.length;
    //@ requires iEnd > a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd == 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 5;
    //@ requires iEnd > 5;
    //@ requires iEnd < 2;
    //@ requires iEnd <= 2;
    //@ requires iEnd == 2;
    //@ requires iEnd != 2;
    //@ requires iEnd >= 2;
    //@ requires iEnd > 2;
    //@ requires iEnd < 1;
    //@ requires iEnd <= 1;
    //@ requires iEnd == 1;
    //@ requires iEnd != 1;
    //@ requires iEnd >= 1;
    //@ requires iEnd > 1;
    //@ requires iEnd < 0;
    //@ requires iEnd <= 0;
    //@ requires iEnd == 0;
    //@ requires iEnd != 0;
    //@ requires iEnd >= 0;
    //@ requires iEnd > 0;
    //@ requires iEnd < iBegin;
    //@ requires iEnd <= iBegin;
    //@ requires iEnd == iBegin;
    //@ requires iEnd != iBegin;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd < -1;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:254: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:90:) in method __HoudiniInvoker
        SetZero(arr, 0, 4);
               ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:90: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:254:
	public static void SetZero(int[] a, int iBegin, int iEnd) {
	                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:20: verify: Precondition conjunct is false: iBegin == 5
	//@ requires iBegin == 5;
	                    ^
3 verification failures

public class SetZero {

	//@ requires 5 <= a.length;
	//@ requires 5 == a.length;
	//@ requires 5 >= a.length;
	//@ requires 2 < a.length;
	//@ requires 2 <= a.length;
	//@ requires 2 != a.length;
	//@ requires 1 < a.length;
	//@ requires 1 <= a.length;
	//@ requires 1 != a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin >= 5;
	//@ requires iBegin > 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin == 2;
	//@ requires iBegin != 2;
	//@ requires iBegin >= 2;
	//@ requires iBegin > 2;
	//@ requires iBegin < 1;
	//@ requires iBegin <= 1;
	//@ requires iBegin == 1;
	//@ requires iBegin != 1;
	//@ requires iBegin >= 1;
	//@ requires iBegin > 1;
	//@ requires iBegin < 0;
	//@ requires iBegin <= 0;
	//@ requires iBegin == 0;
	//@ requires iBegin != 0;
	//@ requires iBegin >= 0;
	//@ requires iBegin > 0;
	//@ requires iBegin < -1;
	//@ requires iBegin <= -1;
	//@ requires iBegin == -1;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd < a.length;
	//@ requires iEnd <= a.length;
	//@ requires iEnd == a.length;
	//@ requires iEnd != a.length;
	//@ requires iEnd >= a.length;
	//@ requires iEnd > a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd == 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 5;
	//@ requires iEnd > 5;
	//@ requires iEnd < 2;
	//@ requires iEnd <= 2;
	//@ requires iEnd == 2;
	//@ requires iEnd != 2;
	//@ requires iEnd >= 2;
	//@ requires iEnd > 2;
	//@ requires iEnd < 1;
	//@ requires iEnd <= 1;
	//@ requires iEnd == 1;
	//@ requires iEnd != 1;
	//@ requires iEnd >= 1;
	//@ requires iEnd > 1;
	//@ requires iEnd < 0;
	//@ requires iEnd <= 0;
	//@ requires iEnd == 0;
	//@ requires iEnd != 0;
	//@ requires iEnd >= 0;
	//@ requires iEnd > 0;
	//@ requires iEnd < iBegin;
	//@ requires iEnd <= iBegin;
	//@ requires iEnd == iBegin;
	//@ requires iEnd != iBegin;
	//@ requires iEnd >= iBegin;
	//@ requires iEnd > iBegin;
	//@ requires iEnd < -1;
	//@ requires iEnd <= -1;
	//@ requires iEnd == -1;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin == a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin >= a.length;
    //@ requires iBegin > a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin == 5;
    //@ requires iBegin != 5;
    //@ requires iBegin >= 5;
    //@ requires iBegin > 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin == 2;
    //@ requires iBegin != 2;
    //@ requires iBegin >= 2;
    //@ requires iBegin > 2;
    //@ requires iBegin < 1;
    //@ requires iBegin <= 1;
    //@ requires iBegin == 1;
    //@ requires iBegin != 1;
    //@ requires iBegin >= 1;
    //@ requires iBegin > 1;
    //@ requires iBegin < 0;
    //@ requires iBegin <= 0;
    //@ requires iBegin == 0;
    //@ requires iBegin != 0;
    //@ requires iBegin >= 0;
    //@ requires iBegin > 0;
    //@ requires iBegin < -1;
    //@ requires iBegin <= -1;
    //@ requires iBegin == -1;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd < a.length;
    //@ requires iEnd <= a.length;
    //@ requires iEnd == a.length;
    //@ requires iEnd != a.length;
    //@ requires iEnd >= a.length;
    //@ requires iEnd > a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd == 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 5;
    //@ requires iEnd > 5;
    //@ requires iEnd < 2;
    //@ requires iEnd <= 2;
    //@ requires iEnd == 2;
    //@ requires iEnd != 2;
    //@ requires iEnd >= 2;
    //@ requires iEnd > 2;
    //@ requires iEnd < 1;
    //@ requires iEnd <= 1;
    //@ requires iEnd == 1;
    //@ requires iEnd != 1;
    //@ requires iEnd >= 1;
    //@ requires iEnd > 1;
    //@ requires iEnd < 0;
    //@ requires iEnd <= 0;
    //@ requires iEnd == 0;
    //@ requires iEnd != 0;
    //@ requires iEnd >= 0;
    //@ requires iEnd > 0;
    //@ requires iEnd < iBegin;
    //@ requires iEnd <= iBegin;
    //@ requires iEnd == iBegin;
    //@ requires iEnd != iBegin;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd < -1;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:253: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:89:) in method __HoudiniInvoker
        SetZero(arr, 0, 4);
               ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:89: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:253:
	public static void SetZero(int[] a, int iBegin, int iEnd) {
	                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:21: verify: Precondition conjunct is false: iBegin >= 5
	//@ requires iBegin >= 5;
	                    ^
3 verification failures

public class SetZero {

	//@ requires 5 <= a.length;
	//@ requires 5 == a.length;
	//@ requires 5 >= a.length;
	//@ requires 2 < a.length;
	//@ requires 2 <= a.length;
	//@ requires 2 != a.length;
	//@ requires 1 < a.length;
	//@ requires 1 <= a.length;
	//@ requires 1 != a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin > 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin == 2;
	//@ requires iBegin != 2;
	//@ requires iBegin >= 2;
	//@ requires iBegin > 2;
	//@ requires iBegin < 1;
	//@ requires iBegin <= 1;
	//@ requires iBegin == 1;
	//@ requires iBegin != 1;
	//@ requires iBegin >= 1;
	//@ requires iBegin > 1;
	//@ requires iBegin < 0;
	//@ requires iBegin <= 0;
	//@ requires iBegin == 0;
	//@ requires iBegin != 0;
	//@ requires iBegin >= 0;
	//@ requires iBegin > 0;
	//@ requires iBegin < -1;
	//@ requires iBegin <= -1;
	//@ requires iBegin == -1;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd < a.length;
	//@ requires iEnd <= a.length;
	//@ requires iEnd == a.length;
	//@ requires iEnd != a.length;
	//@ requires iEnd >= a.length;
	//@ requires iEnd > a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd == 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 5;
	//@ requires iEnd > 5;
	//@ requires iEnd < 2;
	//@ requires iEnd <= 2;
	//@ requires iEnd == 2;
	//@ requires iEnd != 2;
	//@ requires iEnd >= 2;
	//@ requires iEnd > 2;
	//@ requires iEnd < 1;
	//@ requires iEnd <= 1;
	//@ requires iEnd == 1;
	//@ requires iEnd != 1;
	//@ requires iEnd >= 1;
	//@ requires iEnd > 1;
	//@ requires iEnd < 0;
	//@ requires iEnd <= 0;
	//@ requires iEnd == 0;
	//@ requires iEnd != 0;
	//@ requires iEnd >= 0;
	//@ requires iEnd > 0;
	//@ requires iEnd < iBegin;
	//@ requires iEnd <= iBegin;
	//@ requires iEnd == iBegin;
	//@ requires iEnd != iBegin;
	//@ requires iEnd >= iBegin;
	//@ requires iEnd > iBegin;
	//@ requires iEnd < -1;
	//@ requires iEnd <= -1;
	//@ requires iEnd == -1;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin == a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin >= a.length;
    //@ requires iBegin > a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin == 5;
    //@ requires iBegin != 5;
    //@ requires iBegin >= 5;
    //@ requires iBegin > 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin == 2;
    //@ requires iBegin != 2;
    //@ requires iBegin >= 2;
    //@ requires iBegin > 2;
    //@ requires iBegin < 1;
    //@ requires iBegin <= 1;
    //@ requires iBegin == 1;
    //@ requires iBegin != 1;
    //@ requires iBegin >= 1;
    //@ requires iBegin > 1;
    //@ requires iBegin < 0;
    //@ requires iBegin <= 0;
    //@ requires iBegin == 0;
    //@ requires iBegin != 0;
    //@ requires iBegin >= 0;
    //@ requires iBegin > 0;
    //@ requires iBegin < -1;
    //@ requires iBegin <= -1;
    //@ requires iBegin == -1;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd < a.length;
    //@ requires iEnd <= a.length;
    //@ requires iEnd == a.length;
    //@ requires iEnd != a.length;
    //@ requires iEnd >= a.length;
    //@ requires iEnd > a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd == 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 5;
    //@ requires iEnd > 5;
    //@ requires iEnd < 2;
    //@ requires iEnd <= 2;
    //@ requires iEnd == 2;
    //@ requires iEnd != 2;
    //@ requires iEnd >= 2;
    //@ requires iEnd > 2;
    //@ requires iEnd < 1;
    //@ requires iEnd <= 1;
    //@ requires iEnd == 1;
    //@ requires iEnd != 1;
    //@ requires iEnd >= 1;
    //@ requires iEnd > 1;
    //@ requires iEnd < 0;
    //@ requires iEnd <= 0;
    //@ requires iEnd == 0;
    //@ requires iEnd != 0;
    //@ requires iEnd >= 0;
    //@ requires iEnd > 0;
    //@ requires iEnd < iBegin;
    //@ requires iEnd <= iBegin;
    //@ requires iEnd == iBegin;
    //@ requires iEnd != iBegin;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd < -1;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:252: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:88:) in method __HoudiniInvoker
        SetZero(arr, 0, 4);
               ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:88: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:252:
	public static void SetZero(int[] a, int iBegin, int iEnd) {
	                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:21: verify: Precondition conjunct is false: iBegin > 5
	//@ requires iBegin > 5;
	                    ^
3 verification failures

public class SetZero {

	//@ requires 5 <= a.length;
	//@ requires 5 == a.length;
	//@ requires 5 >= a.length;
	//@ requires 2 < a.length;
	//@ requires 2 <= a.length;
	//@ requires 2 != a.length;
	//@ requires 1 < a.length;
	//@ requires 1 <= a.length;
	//@ requires 1 != a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin == 2;
	//@ requires iBegin != 2;
	//@ requires iBegin >= 2;
	//@ requires iBegin > 2;
	//@ requires iBegin < 1;
	//@ requires iBegin <= 1;
	//@ requires iBegin == 1;
	//@ requires iBegin != 1;
	//@ requires iBegin >= 1;
	//@ requires iBegin > 1;
	//@ requires iBegin < 0;
	//@ requires iBegin <= 0;
	//@ requires iBegin == 0;
	//@ requires iBegin != 0;
	//@ requires iBegin >= 0;
	//@ requires iBegin > 0;
	//@ requires iBegin < -1;
	//@ requires iBegin <= -1;
	//@ requires iBegin == -1;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd < a.length;
	//@ requires iEnd <= a.length;
	//@ requires iEnd == a.length;
	//@ requires iEnd != a.length;
	//@ requires iEnd >= a.length;
	//@ requires iEnd > a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd == 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 5;
	//@ requires iEnd > 5;
	//@ requires iEnd < 2;
	//@ requires iEnd <= 2;
	//@ requires iEnd == 2;
	//@ requires iEnd != 2;
	//@ requires iEnd >= 2;
	//@ requires iEnd > 2;
	//@ requires iEnd < 1;
	//@ requires iEnd <= 1;
	//@ requires iEnd == 1;
	//@ requires iEnd != 1;
	//@ requires iEnd >= 1;
	//@ requires iEnd > 1;
	//@ requires iEnd < 0;
	//@ requires iEnd <= 0;
	//@ requires iEnd == 0;
	//@ requires iEnd != 0;
	//@ requires iEnd >= 0;
	//@ requires iEnd > 0;
	//@ requires iEnd < iBegin;
	//@ requires iEnd <= iBegin;
	//@ requires iEnd == iBegin;
	//@ requires iEnd != iBegin;
	//@ requires iEnd >= iBegin;
	//@ requires iEnd > iBegin;
	//@ requires iEnd < -1;
	//@ requires iEnd <= -1;
	//@ requires iEnd == -1;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin == a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin >= a.length;
    //@ requires iBegin > a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin == 5;
    //@ requires iBegin != 5;
    //@ requires iBegin >= 5;
    //@ requires iBegin > 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin == 2;
    //@ requires iBegin != 2;
    //@ requires iBegin >= 2;
    //@ requires iBegin > 2;
    //@ requires iBegin < 1;
    //@ requires iBegin <= 1;
    //@ requires iBegin == 1;
    //@ requires iBegin != 1;
    //@ requires iBegin >= 1;
    //@ requires iBegin > 1;
    //@ requires iBegin < 0;
    //@ requires iBegin <= 0;
    //@ requires iBegin == 0;
    //@ requires iBegin != 0;
    //@ requires iBegin >= 0;
    //@ requires iBegin > 0;
    //@ requires iBegin < -1;
    //@ requires iBegin <= -1;
    //@ requires iBegin == -1;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd < a.length;
    //@ requires iEnd <= a.length;
    //@ requires iEnd == a.length;
    //@ requires iEnd != a.length;
    //@ requires iEnd >= a.length;
    //@ requires iEnd > a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd == 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 5;
    //@ requires iEnd > 5;
    //@ requires iEnd < 2;
    //@ requires iEnd <= 2;
    //@ requires iEnd == 2;
    //@ requires iEnd != 2;
    //@ requires iEnd >= 2;
    //@ requires iEnd > 2;
    //@ requires iEnd < 1;
    //@ requires iEnd <= 1;
    //@ requires iEnd == 1;
    //@ requires iEnd != 1;
    //@ requires iEnd >= 1;
    //@ requires iEnd > 1;
    //@ requires iEnd < 0;
    //@ requires iEnd <= 0;
    //@ requires iEnd == 0;
    //@ requires iEnd != 0;
    //@ requires iEnd >= 0;
    //@ requires iEnd > 0;
    //@ requires iEnd < iBegin;
    //@ requires iEnd <= iBegin;
    //@ requires iEnd == iBegin;
    //@ requires iEnd != iBegin;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd < -1;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:251: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:87:) in method __HoudiniInvoker
        SetZero(arr, 0, 4);
               ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:87: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:251:
	public static void SetZero(int[] a, int iBegin, int iEnd) {
	                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:23: verify: Precondition conjunct is false: iBegin == 2
	//@ requires iBegin == 2;
	                    ^
3 verification failures

public class SetZero {

	//@ requires 5 <= a.length;
	//@ requires 5 == a.length;
	//@ requires 5 >= a.length;
	//@ requires 2 < a.length;
	//@ requires 2 <= a.length;
	//@ requires 2 != a.length;
	//@ requires 1 < a.length;
	//@ requires 1 <= a.length;
	//@ requires 1 != a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin >= 2;
	//@ requires iBegin > 2;
	//@ requires iBegin < 1;
	//@ requires iBegin <= 1;
	//@ requires iBegin == 1;
	//@ requires iBegin != 1;
	//@ requires iBegin >= 1;
	//@ requires iBegin > 1;
	//@ requires iBegin < 0;
	//@ requires iBegin <= 0;
	//@ requires iBegin == 0;
	//@ requires iBegin != 0;
	//@ requires iBegin >= 0;
	//@ requires iBegin > 0;
	//@ requires iBegin < -1;
	//@ requires iBegin <= -1;
	//@ requires iBegin == -1;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd < a.length;
	//@ requires iEnd <= a.length;
	//@ requires iEnd == a.length;
	//@ requires iEnd != a.length;
	//@ requires iEnd >= a.length;
	//@ requires iEnd > a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd == 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 5;
	//@ requires iEnd > 5;
	//@ requires iEnd < 2;
	//@ requires iEnd <= 2;
	//@ requires iEnd == 2;
	//@ requires iEnd != 2;
	//@ requires iEnd >= 2;
	//@ requires iEnd > 2;
	//@ requires iEnd < 1;
	//@ requires iEnd <= 1;
	//@ requires iEnd == 1;
	//@ requires iEnd != 1;
	//@ requires iEnd >= 1;
	//@ requires iEnd > 1;
	//@ requires iEnd < 0;
	//@ requires iEnd <= 0;
	//@ requires iEnd == 0;
	//@ requires iEnd != 0;
	//@ requires iEnd >= 0;
	//@ requires iEnd > 0;
	//@ requires iEnd < iBegin;
	//@ requires iEnd <= iBegin;
	//@ requires iEnd == iBegin;
	//@ requires iEnd != iBegin;
	//@ requires iEnd >= iBegin;
	//@ requires iEnd > iBegin;
	//@ requires iEnd < -1;
	//@ requires iEnd <= -1;
	//@ requires iEnd == -1;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin == a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin >= a.length;
    //@ requires iBegin > a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin == 5;
    //@ requires iBegin != 5;
    //@ requires iBegin >= 5;
    //@ requires iBegin > 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin == 2;
    //@ requires iBegin != 2;
    //@ requires iBegin >= 2;
    //@ requires iBegin > 2;
    //@ requires iBegin < 1;
    //@ requires iBegin <= 1;
    //@ requires iBegin == 1;
    //@ requires iBegin != 1;
    //@ requires iBegin >= 1;
    //@ requires iBegin > 1;
    //@ requires iBegin < 0;
    //@ requires iBegin <= 0;
    //@ requires iBegin == 0;
    //@ requires iBegin != 0;
    //@ requires iBegin >= 0;
    //@ requires iBegin > 0;
    //@ requires iBegin < -1;
    //@ requires iBegin <= -1;
    //@ requires iBegin == -1;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd < a.length;
    //@ requires iEnd <= a.length;
    //@ requires iEnd == a.length;
    //@ requires iEnd != a.length;
    //@ requires iEnd >= a.length;
    //@ requires iEnd > a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd == 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 5;
    //@ requires iEnd > 5;
    //@ requires iEnd < 2;
    //@ requires iEnd <= 2;
    //@ requires iEnd == 2;
    //@ requires iEnd != 2;
    //@ requires iEnd >= 2;
    //@ requires iEnd > 2;
    //@ requires iEnd < 1;
    //@ requires iEnd <= 1;
    //@ requires iEnd == 1;
    //@ requires iEnd != 1;
    //@ requires iEnd >= 1;
    //@ requires iEnd > 1;
    //@ requires iEnd < 0;
    //@ requires iEnd <= 0;
    //@ requires iEnd == 0;
    //@ requires iEnd != 0;
    //@ requires iEnd >= 0;
    //@ requires iEnd > 0;
    //@ requires iEnd < iBegin;
    //@ requires iEnd <= iBegin;
    //@ requires iEnd == iBegin;
    //@ requires iEnd != iBegin;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd < -1;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:250: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:86:) in method __HoudiniInvoker
        SetZero(arr, 0, 4);
               ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:86: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:250:
	public static void SetZero(int[] a, int iBegin, int iEnd) {
	                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:24: verify: Precondition conjunct is false: iBegin >= 2
	//@ requires iBegin >= 2;
	                    ^
3 verification failures

public class SetZero {

	//@ requires 5 <= a.length;
	//@ requires 5 == a.length;
	//@ requires 5 >= a.length;
	//@ requires 2 < a.length;
	//@ requires 2 <= a.length;
	//@ requires 2 != a.length;
	//@ requires 1 < a.length;
	//@ requires 1 <= a.length;
	//@ requires 1 != a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin > 2;
	//@ requires iBegin < 1;
	//@ requires iBegin <= 1;
	//@ requires iBegin == 1;
	//@ requires iBegin != 1;
	//@ requires iBegin >= 1;
	//@ requires iBegin > 1;
	//@ requires iBegin < 0;
	//@ requires iBegin <= 0;
	//@ requires iBegin == 0;
	//@ requires iBegin != 0;
	//@ requires iBegin >= 0;
	//@ requires iBegin > 0;
	//@ requires iBegin < -1;
	//@ requires iBegin <= -1;
	//@ requires iBegin == -1;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd < a.length;
	//@ requires iEnd <= a.length;
	//@ requires iEnd == a.length;
	//@ requires iEnd != a.length;
	//@ requires iEnd >= a.length;
	//@ requires iEnd > a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd == 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 5;
	//@ requires iEnd > 5;
	//@ requires iEnd < 2;
	//@ requires iEnd <= 2;
	//@ requires iEnd == 2;
	//@ requires iEnd != 2;
	//@ requires iEnd >= 2;
	//@ requires iEnd > 2;
	//@ requires iEnd < 1;
	//@ requires iEnd <= 1;
	//@ requires iEnd == 1;
	//@ requires iEnd != 1;
	//@ requires iEnd >= 1;
	//@ requires iEnd > 1;
	//@ requires iEnd < 0;
	//@ requires iEnd <= 0;
	//@ requires iEnd == 0;
	//@ requires iEnd != 0;
	//@ requires iEnd >= 0;
	//@ requires iEnd > 0;
	//@ requires iEnd < iBegin;
	//@ requires iEnd <= iBegin;
	//@ requires iEnd == iBegin;
	//@ requires iEnd != iBegin;
	//@ requires iEnd >= iBegin;
	//@ requires iEnd > iBegin;
	//@ requires iEnd < -1;
	//@ requires iEnd <= -1;
	//@ requires iEnd == -1;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin == a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin >= a.length;
    //@ requires iBegin > a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin == 5;
    //@ requires iBegin != 5;
    //@ requires iBegin >= 5;
    //@ requires iBegin > 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin == 2;
    //@ requires iBegin != 2;
    //@ requires iBegin >= 2;
    //@ requires iBegin > 2;
    //@ requires iBegin < 1;
    //@ requires iBegin <= 1;
    //@ requires iBegin == 1;
    //@ requires iBegin != 1;
    //@ requires iBegin >= 1;
    //@ requires iBegin > 1;
    //@ requires iBegin < 0;
    //@ requires iBegin <= 0;
    //@ requires iBegin == 0;
    //@ requires iBegin != 0;
    //@ requires iBegin >= 0;
    //@ requires iBegin > 0;
    //@ requires iBegin < -1;
    //@ requires iBegin <= -1;
    //@ requires iBegin == -1;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd < a.length;
    //@ requires iEnd <= a.length;
    //@ requires iEnd == a.length;
    //@ requires iEnd != a.length;
    //@ requires iEnd >= a.length;
    //@ requires iEnd > a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd == 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 5;
    //@ requires iEnd > 5;
    //@ requires iEnd < 2;
    //@ requires iEnd <= 2;
    //@ requires iEnd == 2;
    //@ requires iEnd != 2;
    //@ requires iEnd >= 2;
    //@ requires iEnd > 2;
    //@ requires iEnd < 1;
    //@ requires iEnd <= 1;
    //@ requires iEnd == 1;
    //@ requires iEnd != 1;
    //@ requires iEnd >= 1;
    //@ requires iEnd > 1;
    //@ requires iEnd < 0;
    //@ requires iEnd <= 0;
    //@ requires iEnd == 0;
    //@ requires iEnd != 0;
    //@ requires iEnd >= 0;
    //@ requires iEnd > 0;
    //@ requires iEnd < iBegin;
    //@ requires iEnd <= iBegin;
    //@ requires iEnd == iBegin;
    //@ requires iEnd != iBegin;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd < -1;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:249: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:85:) in method __HoudiniInvoker
        SetZero(arr, 0, 4);
               ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:85: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:249:
	public static void SetZero(int[] a, int iBegin, int iEnd) {
	                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:24: verify: Precondition conjunct is false: iBegin > 2
	//@ requires iBegin > 2;
	                    ^
3 verification failures

public class SetZero {

	//@ requires 5 <= a.length;
	//@ requires 5 == a.length;
	//@ requires 5 >= a.length;
	//@ requires 2 < a.length;
	//@ requires 2 <= a.length;
	//@ requires 2 != a.length;
	//@ requires 1 < a.length;
	//@ requires 1 <= a.length;
	//@ requires 1 != a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin < 1;
	//@ requires iBegin <= 1;
	//@ requires iBegin == 1;
	//@ requires iBegin != 1;
	//@ requires iBegin >= 1;
	//@ requires iBegin > 1;
	//@ requires iBegin < 0;
	//@ requires iBegin <= 0;
	//@ requires iBegin == 0;
	//@ requires iBegin != 0;
	//@ requires iBegin >= 0;
	//@ requires iBegin > 0;
	//@ requires iBegin < -1;
	//@ requires iBegin <= -1;
	//@ requires iBegin == -1;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd < a.length;
	//@ requires iEnd <= a.length;
	//@ requires iEnd == a.length;
	//@ requires iEnd != a.length;
	//@ requires iEnd >= a.length;
	//@ requires iEnd > a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd == 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 5;
	//@ requires iEnd > 5;
	//@ requires iEnd < 2;
	//@ requires iEnd <= 2;
	//@ requires iEnd == 2;
	//@ requires iEnd != 2;
	//@ requires iEnd >= 2;
	//@ requires iEnd > 2;
	//@ requires iEnd < 1;
	//@ requires iEnd <= 1;
	//@ requires iEnd == 1;
	//@ requires iEnd != 1;
	//@ requires iEnd >= 1;
	//@ requires iEnd > 1;
	//@ requires iEnd < 0;
	//@ requires iEnd <= 0;
	//@ requires iEnd == 0;
	//@ requires iEnd != 0;
	//@ requires iEnd >= 0;
	//@ requires iEnd > 0;
	//@ requires iEnd < iBegin;
	//@ requires iEnd <= iBegin;
	//@ requires iEnd == iBegin;
	//@ requires iEnd != iBegin;
	//@ requires iEnd >= iBegin;
	//@ requires iEnd > iBegin;
	//@ requires iEnd < -1;
	//@ requires iEnd <= -1;
	//@ requires iEnd == -1;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin == a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin >= a.length;
    //@ requires iBegin > a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin == 5;
    //@ requires iBegin != 5;
    //@ requires iBegin >= 5;
    //@ requires iBegin > 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin == 2;
    //@ requires iBegin != 2;
    //@ requires iBegin >= 2;
    //@ requires iBegin > 2;
    //@ requires iBegin < 1;
    //@ requires iBegin <= 1;
    //@ requires iBegin == 1;
    //@ requires iBegin != 1;
    //@ requires iBegin >= 1;
    //@ requires iBegin > 1;
    //@ requires iBegin < 0;
    //@ requires iBegin <= 0;
    //@ requires iBegin == 0;
    //@ requires iBegin != 0;
    //@ requires iBegin >= 0;
    //@ requires iBegin > 0;
    //@ requires iBegin < -1;
    //@ requires iBegin <= -1;
    //@ requires iBegin == -1;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd < a.length;
    //@ requires iEnd <= a.length;
    //@ requires iEnd == a.length;
    //@ requires iEnd != a.length;
    //@ requires iEnd >= a.length;
    //@ requires iEnd > a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd == 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 5;
    //@ requires iEnd > 5;
    //@ requires iEnd < 2;
    //@ requires iEnd <= 2;
    //@ requires iEnd == 2;
    //@ requires iEnd != 2;
    //@ requires iEnd >= 2;
    //@ requires iEnd > 2;
    //@ requires iEnd < 1;
    //@ requires iEnd <= 1;
    //@ requires iEnd == 1;
    //@ requires iEnd != 1;
    //@ requires iEnd >= 1;
    //@ requires iEnd > 1;
    //@ requires iEnd < 0;
    //@ requires iEnd <= 0;
    //@ requires iEnd == 0;
    //@ requires iEnd != 0;
    //@ requires iEnd >= 0;
    //@ requires iEnd > 0;
    //@ requires iEnd < iBegin;
    //@ requires iEnd <= iBegin;
    //@ requires iEnd == iBegin;
    //@ requires iEnd != iBegin;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd < -1;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:248: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:84:) in method __HoudiniInvoker
        SetZero(arr, 0, 4);
               ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:84: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:248:
	public static void SetZero(int[] a, int iBegin, int iEnd) {
	                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:26: verify: Precondition conjunct is false: iBegin == 1
	//@ requires iBegin == 1;
	                    ^
3 verification failures

public class SetZero {

	//@ requires 5 <= a.length;
	//@ requires 5 == a.length;
	//@ requires 5 >= a.length;
	//@ requires 2 < a.length;
	//@ requires 2 <= a.length;
	//@ requires 2 != a.length;
	//@ requires 1 < a.length;
	//@ requires 1 <= a.length;
	//@ requires 1 != a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin < 1;
	//@ requires iBegin <= 1;
	//@ requires iBegin != 1;
	//@ requires iBegin >= 1;
	//@ requires iBegin > 1;
	//@ requires iBegin < 0;
	//@ requires iBegin <= 0;
	//@ requires iBegin == 0;
	//@ requires iBegin != 0;
	//@ requires iBegin >= 0;
	//@ requires iBegin > 0;
	//@ requires iBegin < -1;
	//@ requires iBegin <= -1;
	//@ requires iBegin == -1;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd < a.length;
	//@ requires iEnd <= a.length;
	//@ requires iEnd == a.length;
	//@ requires iEnd != a.length;
	//@ requires iEnd >= a.length;
	//@ requires iEnd > a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd == 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 5;
	//@ requires iEnd > 5;
	//@ requires iEnd < 2;
	//@ requires iEnd <= 2;
	//@ requires iEnd == 2;
	//@ requires iEnd != 2;
	//@ requires iEnd >= 2;
	//@ requires iEnd > 2;
	//@ requires iEnd < 1;
	//@ requires iEnd <= 1;
	//@ requires iEnd == 1;
	//@ requires iEnd != 1;
	//@ requires iEnd >= 1;
	//@ requires iEnd > 1;
	//@ requires iEnd < 0;
	//@ requires iEnd <= 0;
	//@ requires iEnd == 0;
	//@ requires iEnd != 0;
	//@ requires iEnd >= 0;
	//@ requires iEnd > 0;
	//@ requires iEnd < iBegin;
	//@ requires iEnd <= iBegin;
	//@ requires iEnd == iBegin;
	//@ requires iEnd != iBegin;
	//@ requires iEnd >= iBegin;
	//@ requires iEnd > iBegin;
	//@ requires iEnd < -1;
	//@ requires iEnd <= -1;
	//@ requires iEnd == -1;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin == a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin >= a.length;
    //@ requires iBegin > a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin == 5;
    //@ requires iBegin != 5;
    //@ requires iBegin >= 5;
    //@ requires iBegin > 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin == 2;
    //@ requires iBegin != 2;
    //@ requires iBegin >= 2;
    //@ requires iBegin > 2;
    //@ requires iBegin < 1;
    //@ requires iBegin <= 1;
    //@ requires iBegin == 1;
    //@ requires iBegin != 1;
    //@ requires iBegin >= 1;
    //@ requires iBegin > 1;
    //@ requires iBegin < 0;
    //@ requires iBegin <= 0;
    //@ requires iBegin == 0;
    //@ requires iBegin != 0;
    //@ requires iBegin >= 0;
    //@ requires iBegin > 0;
    //@ requires iBegin < -1;
    //@ requires iBegin <= -1;
    //@ requires iBegin == -1;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd < a.length;
    //@ requires iEnd <= a.length;
    //@ requires iEnd == a.length;
    //@ requires iEnd != a.length;
    //@ requires iEnd >= a.length;
    //@ requires iEnd > a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd == 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 5;
    //@ requires iEnd > 5;
    //@ requires iEnd < 2;
    //@ requires iEnd <= 2;
    //@ requires iEnd == 2;
    //@ requires iEnd != 2;
    //@ requires iEnd >= 2;
    //@ requires iEnd > 2;
    //@ requires iEnd < 1;
    //@ requires iEnd <= 1;
    //@ requires iEnd == 1;
    //@ requires iEnd != 1;
    //@ requires iEnd >= 1;
    //@ requires iEnd > 1;
    //@ requires iEnd < 0;
    //@ requires iEnd <= 0;
    //@ requires iEnd == 0;
    //@ requires iEnd != 0;
    //@ requires iEnd >= 0;
    //@ requires iEnd > 0;
    //@ requires iEnd < iBegin;
    //@ requires iEnd <= iBegin;
    //@ requires iEnd == iBegin;
    //@ requires iEnd != iBegin;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd < -1;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:247: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:83:) in method __HoudiniInvoker
        SetZero(arr, 0, 4);
               ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:83: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:247:
	public static void SetZero(int[] a, int iBegin, int iEnd) {
	                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:27: verify: Precondition conjunct is false: iBegin >= 1
	//@ requires iBegin >= 1;
	                    ^
3 verification failures

public class SetZero {

	//@ requires 5 <= a.length;
	//@ requires 5 == a.length;
	//@ requires 5 >= a.length;
	//@ requires 2 < a.length;
	//@ requires 2 <= a.length;
	//@ requires 2 != a.length;
	//@ requires 1 < a.length;
	//@ requires 1 <= a.length;
	//@ requires 1 != a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin < 1;
	//@ requires iBegin <= 1;
	//@ requires iBegin != 1;
	//@ requires iBegin > 1;
	//@ requires iBegin < 0;
	//@ requires iBegin <= 0;
	//@ requires iBegin == 0;
	//@ requires iBegin != 0;
	//@ requires iBegin >= 0;
	//@ requires iBegin > 0;
	//@ requires iBegin < -1;
	//@ requires iBegin <= -1;
	//@ requires iBegin == -1;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd < a.length;
	//@ requires iEnd <= a.length;
	//@ requires iEnd == a.length;
	//@ requires iEnd != a.length;
	//@ requires iEnd >= a.length;
	//@ requires iEnd > a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd == 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 5;
	//@ requires iEnd > 5;
	//@ requires iEnd < 2;
	//@ requires iEnd <= 2;
	//@ requires iEnd == 2;
	//@ requires iEnd != 2;
	//@ requires iEnd >= 2;
	//@ requires iEnd > 2;
	//@ requires iEnd < 1;
	//@ requires iEnd <= 1;
	//@ requires iEnd == 1;
	//@ requires iEnd != 1;
	//@ requires iEnd >= 1;
	//@ requires iEnd > 1;
	//@ requires iEnd < 0;
	//@ requires iEnd <= 0;
	//@ requires iEnd == 0;
	//@ requires iEnd != 0;
	//@ requires iEnd >= 0;
	//@ requires iEnd > 0;
	//@ requires iEnd < iBegin;
	//@ requires iEnd <= iBegin;
	//@ requires iEnd == iBegin;
	//@ requires iEnd != iBegin;
	//@ requires iEnd >= iBegin;
	//@ requires iEnd > iBegin;
	//@ requires iEnd < -1;
	//@ requires iEnd <= -1;
	//@ requires iEnd == -1;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin == a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin >= a.length;
    //@ requires iBegin > a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin == 5;
    //@ requires iBegin != 5;
    //@ requires iBegin >= 5;
    //@ requires iBegin > 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin == 2;
    //@ requires iBegin != 2;
    //@ requires iBegin >= 2;
    //@ requires iBegin > 2;
    //@ requires iBegin < 1;
    //@ requires iBegin <= 1;
    //@ requires iBegin == 1;
    //@ requires iBegin != 1;
    //@ requires iBegin >= 1;
    //@ requires iBegin > 1;
    //@ requires iBegin < 0;
    //@ requires iBegin <= 0;
    //@ requires iBegin == 0;
    //@ requires iBegin != 0;
    //@ requires iBegin >= 0;
    //@ requires iBegin > 0;
    //@ requires iBegin < -1;
    //@ requires iBegin <= -1;
    //@ requires iBegin == -1;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd < a.length;
    //@ requires iEnd <= a.length;
    //@ requires iEnd == a.length;
    //@ requires iEnd != a.length;
    //@ requires iEnd >= a.length;
    //@ requires iEnd > a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd == 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 5;
    //@ requires iEnd > 5;
    //@ requires iEnd < 2;
    //@ requires iEnd <= 2;
    //@ requires iEnd == 2;
    //@ requires iEnd != 2;
    //@ requires iEnd >= 2;
    //@ requires iEnd > 2;
    //@ requires iEnd < 1;
    //@ requires iEnd <= 1;
    //@ requires iEnd == 1;
    //@ requires iEnd != 1;
    //@ requires iEnd >= 1;
    //@ requires iEnd > 1;
    //@ requires iEnd < 0;
    //@ requires iEnd <= 0;
    //@ requires iEnd == 0;
    //@ requires iEnd != 0;
    //@ requires iEnd >= 0;
    //@ requires iEnd > 0;
    //@ requires iEnd < iBegin;
    //@ requires iEnd <= iBegin;
    //@ requires iEnd == iBegin;
    //@ requires iEnd != iBegin;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd < -1;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:246: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:82:) in method __HoudiniInvoker
        SetZero(arr, 0, 4);
               ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:82: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:246:
	public static void SetZero(int[] a, int iBegin, int iEnd) {
	                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:27: verify: Precondition conjunct is false: iBegin > 1
	//@ requires iBegin > 1;
	                    ^
3 verification failures

public class SetZero {

	//@ requires 5 <= a.length;
	//@ requires 5 == a.length;
	//@ requires 5 >= a.length;
	//@ requires 2 < a.length;
	//@ requires 2 <= a.length;
	//@ requires 2 != a.length;
	//@ requires 1 < a.length;
	//@ requires 1 <= a.length;
	//@ requires 1 != a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin < 1;
	//@ requires iBegin <= 1;
	//@ requires iBegin != 1;
	//@ requires iBegin < 0;
	//@ requires iBegin <= 0;
	//@ requires iBegin == 0;
	//@ requires iBegin != 0;
	//@ requires iBegin >= 0;
	//@ requires iBegin > 0;
	//@ requires iBegin < -1;
	//@ requires iBegin <= -1;
	//@ requires iBegin == -1;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd < a.length;
	//@ requires iEnd <= a.length;
	//@ requires iEnd == a.length;
	//@ requires iEnd != a.length;
	//@ requires iEnd >= a.length;
	//@ requires iEnd > a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd == 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 5;
	//@ requires iEnd > 5;
	//@ requires iEnd < 2;
	//@ requires iEnd <= 2;
	//@ requires iEnd == 2;
	//@ requires iEnd != 2;
	//@ requires iEnd >= 2;
	//@ requires iEnd > 2;
	//@ requires iEnd < 1;
	//@ requires iEnd <= 1;
	//@ requires iEnd == 1;
	//@ requires iEnd != 1;
	//@ requires iEnd >= 1;
	//@ requires iEnd > 1;
	//@ requires iEnd < 0;
	//@ requires iEnd <= 0;
	//@ requires iEnd == 0;
	//@ requires iEnd != 0;
	//@ requires iEnd >= 0;
	//@ requires iEnd > 0;
	//@ requires iEnd < iBegin;
	//@ requires iEnd <= iBegin;
	//@ requires iEnd == iBegin;
	//@ requires iEnd != iBegin;
	//@ requires iEnd >= iBegin;
	//@ requires iEnd > iBegin;
	//@ requires iEnd < -1;
	//@ requires iEnd <= -1;
	//@ requires iEnd == -1;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin == a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin >= a.length;
    //@ requires iBegin > a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin == 5;
    //@ requires iBegin != 5;
    //@ requires iBegin >= 5;
    //@ requires iBegin > 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin == 2;
    //@ requires iBegin != 2;
    //@ requires iBegin >= 2;
    //@ requires iBegin > 2;
    //@ requires iBegin < 1;
    //@ requires iBegin <= 1;
    //@ requires iBegin == 1;
    //@ requires iBegin != 1;
    //@ requires iBegin >= 1;
    //@ requires iBegin > 1;
    //@ requires iBegin < 0;
    //@ requires iBegin <= 0;
    //@ requires iBegin == 0;
    //@ requires iBegin != 0;
    //@ requires iBegin >= 0;
    //@ requires iBegin > 0;
    //@ requires iBegin < -1;
    //@ requires iBegin <= -1;
    //@ requires iBegin == -1;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd < a.length;
    //@ requires iEnd <= a.length;
    //@ requires iEnd == a.length;
    //@ requires iEnd != a.length;
    //@ requires iEnd >= a.length;
    //@ requires iEnd > a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd == 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 5;
    //@ requires iEnd > 5;
    //@ requires iEnd < 2;
    //@ requires iEnd <= 2;
    //@ requires iEnd == 2;
    //@ requires iEnd != 2;
    //@ requires iEnd >= 2;
    //@ requires iEnd > 2;
    //@ requires iEnd < 1;
    //@ requires iEnd <= 1;
    //@ requires iEnd == 1;
    //@ requires iEnd != 1;
    //@ requires iEnd >= 1;
    //@ requires iEnd > 1;
    //@ requires iEnd < 0;
    //@ requires iEnd <= 0;
    //@ requires iEnd == 0;
    //@ requires iEnd != 0;
    //@ requires iEnd >= 0;
    //@ requires iEnd > 0;
    //@ requires iEnd < iBegin;
    //@ requires iEnd <= iBegin;
    //@ requires iEnd == iBegin;
    //@ requires iEnd != iBegin;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd < -1;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:245: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:81:) in method __HoudiniInvoker
        SetZero(arr, 0, 4);
               ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:81: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:245:
	public static void SetZero(int[] a, int iBegin, int iEnd) {
	                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:27: verify: Precondition conjunct is false: iBegin < 0
	//@ requires iBegin < 0;
	                    ^
3 verification failures

public class SetZero {

	//@ requires 5 <= a.length;
	//@ requires 5 == a.length;
	//@ requires 5 >= a.length;
	//@ requires 2 < a.length;
	//@ requires 2 <= a.length;
	//@ requires 2 != a.length;
	//@ requires 1 < a.length;
	//@ requires 1 <= a.length;
	//@ requires 1 != a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin < 1;
	//@ requires iBegin <= 1;
	//@ requires iBegin != 1;
	//@ requires iBegin <= 0;
	//@ requires iBegin == 0;
	//@ requires iBegin != 0;
	//@ requires iBegin >= 0;
	//@ requires iBegin > 0;
	//@ requires iBegin < -1;
	//@ requires iBegin <= -1;
	//@ requires iBegin == -1;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd < a.length;
	//@ requires iEnd <= a.length;
	//@ requires iEnd == a.length;
	//@ requires iEnd != a.length;
	//@ requires iEnd >= a.length;
	//@ requires iEnd > a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd == 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 5;
	//@ requires iEnd > 5;
	//@ requires iEnd < 2;
	//@ requires iEnd <= 2;
	//@ requires iEnd == 2;
	//@ requires iEnd != 2;
	//@ requires iEnd >= 2;
	//@ requires iEnd > 2;
	//@ requires iEnd < 1;
	//@ requires iEnd <= 1;
	//@ requires iEnd == 1;
	//@ requires iEnd != 1;
	//@ requires iEnd >= 1;
	//@ requires iEnd > 1;
	//@ requires iEnd < 0;
	//@ requires iEnd <= 0;
	//@ requires iEnd == 0;
	//@ requires iEnd != 0;
	//@ requires iEnd >= 0;
	//@ requires iEnd > 0;
	//@ requires iEnd < iBegin;
	//@ requires iEnd <= iBegin;
	//@ requires iEnd == iBegin;
	//@ requires iEnd != iBegin;
	//@ requires iEnd >= iBegin;
	//@ requires iEnd > iBegin;
	//@ requires iEnd < -1;
	//@ requires iEnd <= -1;
	//@ requires iEnd == -1;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin == a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin >= a.length;
    //@ requires iBegin > a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin == 5;
    //@ requires iBegin != 5;
    //@ requires iBegin >= 5;
    //@ requires iBegin > 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin == 2;
    //@ requires iBegin != 2;
    //@ requires iBegin >= 2;
    //@ requires iBegin > 2;
    //@ requires iBegin < 1;
    //@ requires iBegin <= 1;
    //@ requires iBegin == 1;
    //@ requires iBegin != 1;
    //@ requires iBegin >= 1;
    //@ requires iBegin > 1;
    //@ requires iBegin < 0;
    //@ requires iBegin <= 0;
    //@ requires iBegin == 0;
    //@ requires iBegin != 0;
    //@ requires iBegin >= 0;
    //@ requires iBegin > 0;
    //@ requires iBegin < -1;
    //@ requires iBegin <= -1;
    //@ requires iBegin == -1;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd < a.length;
    //@ requires iEnd <= a.length;
    //@ requires iEnd == a.length;
    //@ requires iEnd != a.length;
    //@ requires iEnd >= a.length;
    //@ requires iEnd > a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd == 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 5;
    //@ requires iEnd > 5;
    //@ requires iEnd < 2;
    //@ requires iEnd <= 2;
    //@ requires iEnd == 2;
    //@ requires iEnd != 2;
    //@ requires iEnd >= 2;
    //@ requires iEnd > 2;
    //@ requires iEnd < 1;
    //@ requires iEnd <= 1;
    //@ requires iEnd == 1;
    //@ requires iEnd != 1;
    //@ requires iEnd >= 1;
    //@ requires iEnd > 1;
    //@ requires iEnd < 0;
    //@ requires iEnd <= 0;
    //@ requires iEnd == 0;
    //@ requires iEnd != 0;
    //@ requires iEnd >= 0;
    //@ requires iEnd > 0;
    //@ requires iEnd < iBegin;
    //@ requires iEnd <= iBegin;
    //@ requires iEnd == iBegin;
    //@ requires iEnd != iBegin;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd < -1;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:244: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:80:) in method __HoudiniInvoker
        SetZero(arr, 0, 4);
               ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:80: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:244:
	public static void SetZero(int[] a, int iBegin, int iEnd) {
	                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:29: verify: Precondition conjunct is false: iBegin != 0
	//@ requires iBegin != 0;
	                    ^
3 verification failures

public class SetZero {

	//@ requires 5 <= a.length;
	//@ requires 5 == a.length;
	//@ requires 5 >= a.length;
	//@ requires 2 < a.length;
	//@ requires 2 <= a.length;
	//@ requires 2 != a.length;
	//@ requires 1 < a.length;
	//@ requires 1 <= a.length;
	//@ requires 1 != a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin < 1;
	//@ requires iBegin <= 1;
	//@ requires iBegin != 1;
	//@ requires iBegin <= 0;
	//@ requires iBegin == 0;
	//@ requires iBegin >= 0;
	//@ requires iBegin > 0;
	//@ requires iBegin < -1;
	//@ requires iBegin <= -1;
	//@ requires iBegin == -1;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd < a.length;
	//@ requires iEnd <= a.length;
	//@ requires iEnd == a.length;
	//@ requires iEnd != a.length;
	//@ requires iEnd >= a.length;
	//@ requires iEnd > a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd == 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 5;
	//@ requires iEnd > 5;
	//@ requires iEnd < 2;
	//@ requires iEnd <= 2;
	//@ requires iEnd == 2;
	//@ requires iEnd != 2;
	//@ requires iEnd >= 2;
	//@ requires iEnd > 2;
	//@ requires iEnd < 1;
	//@ requires iEnd <= 1;
	//@ requires iEnd == 1;
	//@ requires iEnd != 1;
	//@ requires iEnd >= 1;
	//@ requires iEnd > 1;
	//@ requires iEnd < 0;
	//@ requires iEnd <= 0;
	//@ requires iEnd == 0;
	//@ requires iEnd != 0;
	//@ requires iEnd >= 0;
	//@ requires iEnd > 0;
	//@ requires iEnd < iBegin;
	//@ requires iEnd <= iBegin;
	//@ requires iEnd == iBegin;
	//@ requires iEnd != iBegin;
	//@ requires iEnd >= iBegin;
	//@ requires iEnd > iBegin;
	//@ requires iEnd < -1;
	//@ requires iEnd <= -1;
	//@ requires iEnd == -1;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin == a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin >= a.length;
    //@ requires iBegin > a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin == 5;
    //@ requires iBegin != 5;
    //@ requires iBegin >= 5;
    //@ requires iBegin > 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin == 2;
    //@ requires iBegin != 2;
    //@ requires iBegin >= 2;
    //@ requires iBegin > 2;
    //@ requires iBegin < 1;
    //@ requires iBegin <= 1;
    //@ requires iBegin == 1;
    //@ requires iBegin != 1;
    //@ requires iBegin >= 1;
    //@ requires iBegin > 1;
    //@ requires iBegin < 0;
    //@ requires iBegin <= 0;
    //@ requires iBegin == 0;
    //@ requires iBegin != 0;
    //@ requires iBegin >= 0;
    //@ requires iBegin > 0;
    //@ requires iBegin < -1;
    //@ requires iBegin <= -1;
    //@ requires iBegin == -1;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd < a.length;
    //@ requires iEnd <= a.length;
    //@ requires iEnd == a.length;
    //@ requires iEnd != a.length;
    //@ requires iEnd >= a.length;
    //@ requires iEnd > a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd == 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 5;
    //@ requires iEnd > 5;
    //@ requires iEnd < 2;
    //@ requires iEnd <= 2;
    //@ requires iEnd == 2;
    //@ requires iEnd != 2;
    //@ requires iEnd >= 2;
    //@ requires iEnd > 2;
    //@ requires iEnd < 1;
    //@ requires iEnd <= 1;
    //@ requires iEnd == 1;
    //@ requires iEnd != 1;
    //@ requires iEnd >= 1;
    //@ requires iEnd > 1;
    //@ requires iEnd < 0;
    //@ requires iEnd <= 0;
    //@ requires iEnd == 0;
    //@ requires iEnd != 0;
    //@ requires iEnd >= 0;
    //@ requires iEnd > 0;
    //@ requires iEnd < iBegin;
    //@ requires iEnd <= iBegin;
    //@ requires iEnd == iBegin;
    //@ requires iEnd != iBegin;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd < -1;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:243: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:79:) in method __HoudiniInvoker
        SetZero(arr, 0, 4);
               ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:79: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:243:
	public static void SetZero(int[] a, int iBegin, int iEnd) {
	                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:30: verify: Precondition conjunct is false: iBegin > 0
	//@ requires iBegin > 0;
	                    ^
3 verification failures

public class SetZero {

	//@ requires 5 <= a.length;
	//@ requires 5 == a.length;
	//@ requires 5 >= a.length;
	//@ requires 2 < a.length;
	//@ requires 2 <= a.length;
	//@ requires 2 != a.length;
	//@ requires 1 < a.length;
	//@ requires 1 <= a.length;
	//@ requires 1 != a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin < 1;
	//@ requires iBegin <= 1;
	//@ requires iBegin != 1;
	//@ requires iBegin <= 0;
	//@ requires iBegin == 0;
	//@ requires iBegin >= 0;
	//@ requires iBegin < -1;
	//@ requires iBegin <= -1;
	//@ requires iBegin == -1;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd < a.length;
	//@ requires iEnd <= a.length;
	//@ requires iEnd == a.length;
	//@ requires iEnd != a.length;
	//@ requires iEnd >= a.length;
	//@ requires iEnd > a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd == 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 5;
	//@ requires iEnd > 5;
	//@ requires iEnd < 2;
	//@ requires iEnd <= 2;
	//@ requires iEnd == 2;
	//@ requires iEnd != 2;
	//@ requires iEnd >= 2;
	//@ requires iEnd > 2;
	//@ requires iEnd < 1;
	//@ requires iEnd <= 1;
	//@ requires iEnd == 1;
	//@ requires iEnd != 1;
	//@ requires iEnd >= 1;
	//@ requires iEnd > 1;
	//@ requires iEnd < 0;
	//@ requires iEnd <= 0;
	//@ requires iEnd == 0;
	//@ requires iEnd != 0;
	//@ requires iEnd >= 0;
	//@ requires iEnd > 0;
	//@ requires iEnd < iBegin;
	//@ requires iEnd <= iBegin;
	//@ requires iEnd == iBegin;
	//@ requires iEnd != iBegin;
	//@ requires iEnd >= iBegin;
	//@ requires iEnd > iBegin;
	//@ requires iEnd < -1;
	//@ requires iEnd <= -1;
	//@ requires iEnd == -1;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin == a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin >= a.length;
    //@ requires iBegin > a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin == 5;
    //@ requires iBegin != 5;
    //@ requires iBegin >= 5;
    //@ requires iBegin > 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin == 2;
    //@ requires iBegin != 2;
    //@ requires iBegin >= 2;
    //@ requires iBegin > 2;
    //@ requires iBegin < 1;
    //@ requires iBegin <= 1;
    //@ requires iBegin == 1;
    //@ requires iBegin != 1;
    //@ requires iBegin >= 1;
    //@ requires iBegin > 1;
    //@ requires iBegin < 0;
    //@ requires iBegin <= 0;
    //@ requires iBegin == 0;
    //@ requires iBegin != 0;
    //@ requires iBegin >= 0;
    //@ requires iBegin > 0;
    //@ requires iBegin < -1;
    //@ requires iBegin <= -1;
    //@ requires iBegin == -1;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd < a.length;
    //@ requires iEnd <= a.length;
    //@ requires iEnd == a.length;
    //@ requires iEnd != a.length;
    //@ requires iEnd >= a.length;
    //@ requires iEnd > a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd == 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 5;
    //@ requires iEnd > 5;
    //@ requires iEnd < 2;
    //@ requires iEnd <= 2;
    //@ requires iEnd == 2;
    //@ requires iEnd != 2;
    //@ requires iEnd >= 2;
    //@ requires iEnd > 2;
    //@ requires iEnd < 1;
    //@ requires iEnd <= 1;
    //@ requires iEnd == 1;
    //@ requires iEnd != 1;
    //@ requires iEnd >= 1;
    //@ requires iEnd > 1;
    //@ requires iEnd < 0;
    //@ requires iEnd <= 0;
    //@ requires iEnd == 0;
    //@ requires iEnd != 0;
    //@ requires iEnd >= 0;
    //@ requires iEnd > 0;
    //@ requires iEnd < iBegin;
    //@ requires iEnd <= iBegin;
    //@ requires iEnd == iBegin;
    //@ requires iEnd != iBegin;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd < -1;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:242: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:78:) in method __HoudiniInvoker
        SetZero(arr, 0, 4);
               ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:78: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:242:
	public static void SetZero(int[] a, int iBegin, int iEnd) {
	                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:30: verify: Precondition conjunct is false: iBegin < -1
	//@ requires iBegin < -1;
	                    ^
3 verification failures

public class SetZero {

	//@ requires 5 <= a.length;
	//@ requires 5 == a.length;
	//@ requires 5 >= a.length;
	//@ requires 2 < a.length;
	//@ requires 2 <= a.length;
	//@ requires 2 != a.length;
	//@ requires 1 < a.length;
	//@ requires 1 <= a.length;
	//@ requires 1 != a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin < 1;
	//@ requires iBegin <= 1;
	//@ requires iBegin != 1;
	//@ requires iBegin <= 0;
	//@ requires iBegin == 0;
	//@ requires iBegin >= 0;
	//@ requires iBegin <= -1;
	//@ requires iBegin == -1;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd < a.length;
	//@ requires iEnd <= a.length;
	//@ requires iEnd == a.length;
	//@ requires iEnd != a.length;
	//@ requires iEnd >= a.length;
	//@ requires iEnd > a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd == 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 5;
	//@ requires iEnd > 5;
	//@ requires iEnd < 2;
	//@ requires iEnd <= 2;
	//@ requires iEnd == 2;
	//@ requires iEnd != 2;
	//@ requires iEnd >= 2;
	//@ requires iEnd > 2;
	//@ requires iEnd < 1;
	//@ requires iEnd <= 1;
	//@ requires iEnd == 1;
	//@ requires iEnd != 1;
	//@ requires iEnd >= 1;
	//@ requires iEnd > 1;
	//@ requires iEnd < 0;
	//@ requires iEnd <= 0;
	//@ requires iEnd == 0;
	//@ requires iEnd != 0;
	//@ requires iEnd >= 0;
	//@ requires iEnd > 0;
	//@ requires iEnd < iBegin;
	//@ requires iEnd <= iBegin;
	//@ requires iEnd == iBegin;
	//@ requires iEnd != iBegin;
	//@ requires iEnd >= iBegin;
	//@ requires iEnd > iBegin;
	//@ requires iEnd < -1;
	//@ requires iEnd <= -1;
	//@ requires iEnd == -1;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin == a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin >= a.length;
    //@ requires iBegin > a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin == 5;
    //@ requires iBegin != 5;
    //@ requires iBegin >= 5;
    //@ requires iBegin > 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin == 2;
    //@ requires iBegin != 2;
    //@ requires iBegin >= 2;
    //@ requires iBegin > 2;
    //@ requires iBegin < 1;
    //@ requires iBegin <= 1;
    //@ requires iBegin == 1;
    //@ requires iBegin != 1;
    //@ requires iBegin >= 1;
    //@ requires iBegin > 1;
    //@ requires iBegin < 0;
    //@ requires iBegin <= 0;
    //@ requires iBegin == 0;
    //@ requires iBegin != 0;
    //@ requires iBegin >= 0;
    //@ requires iBegin > 0;
    //@ requires iBegin < -1;
    //@ requires iBegin <= -1;
    //@ requires iBegin == -1;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd < a.length;
    //@ requires iEnd <= a.length;
    //@ requires iEnd == a.length;
    //@ requires iEnd != a.length;
    //@ requires iEnd >= a.length;
    //@ requires iEnd > a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd == 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 5;
    //@ requires iEnd > 5;
    //@ requires iEnd < 2;
    //@ requires iEnd <= 2;
    //@ requires iEnd == 2;
    //@ requires iEnd != 2;
    //@ requires iEnd >= 2;
    //@ requires iEnd > 2;
    //@ requires iEnd < 1;
    //@ requires iEnd <= 1;
    //@ requires iEnd == 1;
    //@ requires iEnd != 1;
    //@ requires iEnd >= 1;
    //@ requires iEnd > 1;
    //@ requires iEnd < 0;
    //@ requires iEnd <= 0;
    //@ requires iEnd == 0;
    //@ requires iEnd != 0;
    //@ requires iEnd >= 0;
    //@ requires iEnd > 0;
    //@ requires iEnd < iBegin;
    //@ requires iEnd <= iBegin;
    //@ requires iEnd == iBegin;
    //@ requires iEnd != iBegin;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd < -1;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:241: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:77:) in method __HoudiniInvoker
        SetZero(arr, 0, 4);
               ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:77: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:241:
	public static void SetZero(int[] a, int iBegin, int iEnd) {
	                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:30: verify: Precondition conjunct is false: iBegin <= -1
	//@ requires iBegin <= -1;
	                    ^
3 verification failures

public class SetZero {

	//@ requires 5 <= a.length;
	//@ requires 5 == a.length;
	//@ requires 5 >= a.length;
	//@ requires 2 < a.length;
	//@ requires 2 <= a.length;
	//@ requires 2 != a.length;
	//@ requires 1 < a.length;
	//@ requires 1 <= a.length;
	//@ requires 1 != a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin < 1;
	//@ requires iBegin <= 1;
	//@ requires iBegin != 1;
	//@ requires iBegin <= 0;
	//@ requires iBegin == 0;
	//@ requires iBegin >= 0;
	//@ requires iBegin == -1;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd < a.length;
	//@ requires iEnd <= a.length;
	//@ requires iEnd == a.length;
	//@ requires iEnd != a.length;
	//@ requires iEnd >= a.length;
	//@ requires iEnd > a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd == 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 5;
	//@ requires iEnd > 5;
	//@ requires iEnd < 2;
	//@ requires iEnd <= 2;
	//@ requires iEnd == 2;
	//@ requires iEnd != 2;
	//@ requires iEnd >= 2;
	//@ requires iEnd > 2;
	//@ requires iEnd < 1;
	//@ requires iEnd <= 1;
	//@ requires iEnd == 1;
	//@ requires iEnd != 1;
	//@ requires iEnd >= 1;
	//@ requires iEnd > 1;
	//@ requires iEnd < 0;
	//@ requires iEnd <= 0;
	//@ requires iEnd == 0;
	//@ requires iEnd != 0;
	//@ requires iEnd >= 0;
	//@ requires iEnd > 0;
	//@ requires iEnd < iBegin;
	//@ requires iEnd <= iBegin;
	//@ requires iEnd == iBegin;
	//@ requires iEnd != iBegin;
	//@ requires iEnd >= iBegin;
	//@ requires iEnd > iBegin;
	//@ requires iEnd < -1;
	//@ requires iEnd <= -1;
	//@ requires iEnd == -1;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin == a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin >= a.length;
    //@ requires iBegin > a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin == 5;
    //@ requires iBegin != 5;
    //@ requires iBegin >= 5;
    //@ requires iBegin > 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin == 2;
    //@ requires iBegin != 2;
    //@ requires iBegin >= 2;
    //@ requires iBegin > 2;
    //@ requires iBegin < 1;
    //@ requires iBegin <= 1;
    //@ requires iBegin == 1;
    //@ requires iBegin != 1;
    //@ requires iBegin >= 1;
    //@ requires iBegin > 1;
    //@ requires iBegin < 0;
    //@ requires iBegin <= 0;
    //@ requires iBegin == 0;
    //@ requires iBegin != 0;
    //@ requires iBegin >= 0;
    //@ requires iBegin > 0;
    //@ requires iBegin < -1;
    //@ requires iBegin <= -1;
    //@ requires iBegin == -1;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd < a.length;
    //@ requires iEnd <= a.length;
    //@ requires iEnd == a.length;
    //@ requires iEnd != a.length;
    //@ requires iEnd >= a.length;
    //@ requires iEnd > a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd == 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 5;
    //@ requires iEnd > 5;
    //@ requires iEnd < 2;
    //@ requires iEnd <= 2;
    //@ requires iEnd == 2;
    //@ requires iEnd != 2;
    //@ requires iEnd >= 2;
    //@ requires iEnd > 2;
    //@ requires iEnd < 1;
    //@ requires iEnd <= 1;
    //@ requires iEnd == 1;
    //@ requires iEnd != 1;
    //@ requires iEnd >= 1;
    //@ requires iEnd > 1;
    //@ requires iEnd < 0;
    //@ requires iEnd <= 0;
    //@ requires iEnd == 0;
    //@ requires iEnd != 0;
    //@ requires iEnd >= 0;
    //@ requires iEnd > 0;
    //@ requires iEnd < iBegin;
    //@ requires iEnd <= iBegin;
    //@ requires iEnd == iBegin;
    //@ requires iEnd != iBegin;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd < -1;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:240: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:76:) in method __HoudiniInvoker
        SetZero(arr, 0, 4);
               ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:76: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:240:
	public static void SetZero(int[] a, int iBegin, int iEnd) {
	                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:30: verify: Precondition conjunct is false: iBegin == -1
	//@ requires iBegin == -1;
	                    ^
3 verification failures

public class SetZero {

	//@ requires 5 <= a.length;
	//@ requires 5 == a.length;
	//@ requires 5 >= a.length;
	//@ requires 2 < a.length;
	//@ requires 2 <= a.length;
	//@ requires 2 != a.length;
	//@ requires 1 < a.length;
	//@ requires 1 <= a.length;
	//@ requires 1 != a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin < 1;
	//@ requires iBegin <= 1;
	//@ requires iBegin != 1;
	//@ requires iBegin <= 0;
	//@ requires iBegin == 0;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd < a.length;
	//@ requires iEnd <= a.length;
	//@ requires iEnd == a.length;
	//@ requires iEnd != a.length;
	//@ requires iEnd >= a.length;
	//@ requires iEnd > a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd == 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 5;
	//@ requires iEnd > 5;
	//@ requires iEnd < 2;
	//@ requires iEnd <= 2;
	//@ requires iEnd == 2;
	//@ requires iEnd != 2;
	//@ requires iEnd >= 2;
	//@ requires iEnd > 2;
	//@ requires iEnd < 1;
	//@ requires iEnd <= 1;
	//@ requires iEnd == 1;
	//@ requires iEnd != 1;
	//@ requires iEnd >= 1;
	//@ requires iEnd > 1;
	//@ requires iEnd < 0;
	//@ requires iEnd <= 0;
	//@ requires iEnd == 0;
	//@ requires iEnd != 0;
	//@ requires iEnd >= 0;
	//@ requires iEnd > 0;
	//@ requires iEnd < iBegin;
	//@ requires iEnd <= iBegin;
	//@ requires iEnd == iBegin;
	//@ requires iEnd != iBegin;
	//@ requires iEnd >= iBegin;
	//@ requires iEnd > iBegin;
	//@ requires iEnd < -1;
	//@ requires iEnd <= -1;
	//@ requires iEnd == -1;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin == a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin >= a.length;
    //@ requires iBegin > a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin == 5;
    //@ requires iBegin != 5;
    //@ requires iBegin >= 5;
    //@ requires iBegin > 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin == 2;
    //@ requires iBegin != 2;
    //@ requires iBegin >= 2;
    //@ requires iBegin > 2;
    //@ requires iBegin < 1;
    //@ requires iBegin <= 1;
    //@ requires iBegin == 1;
    //@ requires iBegin != 1;
    //@ requires iBegin >= 1;
    //@ requires iBegin > 1;
    //@ requires iBegin < 0;
    //@ requires iBegin <= 0;
    //@ requires iBegin == 0;
    //@ requires iBegin != 0;
    //@ requires iBegin >= 0;
    //@ requires iBegin > 0;
    //@ requires iBegin < -1;
    //@ requires iBegin <= -1;
    //@ requires iBegin == -1;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd < a.length;
    //@ requires iEnd <= a.length;
    //@ requires iEnd == a.length;
    //@ requires iEnd != a.length;
    //@ requires iEnd >= a.length;
    //@ requires iEnd > a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd == 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 5;
    //@ requires iEnd > 5;
    //@ requires iEnd < 2;
    //@ requires iEnd <= 2;
    //@ requires iEnd == 2;
    //@ requires iEnd != 2;
    //@ requires iEnd >= 2;
    //@ requires iEnd > 2;
    //@ requires iEnd < 1;
    //@ requires iEnd <= 1;
    //@ requires iEnd == 1;
    //@ requires iEnd != 1;
    //@ requires iEnd >= 1;
    //@ requires iEnd > 1;
    //@ requires iEnd < 0;
    //@ requires iEnd <= 0;
    //@ requires iEnd == 0;
    //@ requires iEnd != 0;
    //@ requires iEnd >= 0;
    //@ requires iEnd > 0;
    //@ requires iEnd < iBegin;
    //@ requires iEnd <= iBegin;
    //@ requires iEnd == iBegin;
    //@ requires iEnd != iBegin;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd < -1;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:239: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:75:) in method __HoudiniInvoker
        SetZero(arr, 0, 4);
               ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:75: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:239:
	public static void SetZero(int[] a, int iBegin, int iEnd) {
	                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:35: verify: Precondition conjunct is false: iEnd == a.length
	//@ requires iEnd == a.length;
	                  ^
3 verification failures

public class SetZero {

	//@ requires 5 <= a.length;
	//@ requires 5 == a.length;
	//@ requires 5 >= a.length;
	//@ requires 2 < a.length;
	//@ requires 2 <= a.length;
	//@ requires 2 != a.length;
	//@ requires 1 < a.length;
	//@ requires 1 <= a.length;
	//@ requires 1 != a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin < 1;
	//@ requires iBegin <= 1;
	//@ requires iBegin != 1;
	//@ requires iBegin <= 0;
	//@ requires iBegin == 0;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd < a.length;
	//@ requires iEnd <= a.length;
	//@ requires iEnd != a.length;
	//@ requires iEnd >= a.length;
	//@ requires iEnd > a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd == 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 5;
	//@ requires iEnd > 5;
	//@ requires iEnd < 2;
	//@ requires iEnd <= 2;
	//@ requires iEnd == 2;
	//@ requires iEnd != 2;
	//@ requires iEnd >= 2;
	//@ requires iEnd > 2;
	//@ requires iEnd < 1;
	//@ requires iEnd <= 1;
	//@ requires iEnd == 1;
	//@ requires iEnd != 1;
	//@ requires iEnd >= 1;
	//@ requires iEnd > 1;
	//@ requires iEnd < 0;
	//@ requires iEnd <= 0;
	//@ requires iEnd == 0;
	//@ requires iEnd != 0;
	//@ requires iEnd >= 0;
	//@ requires iEnd > 0;
	//@ requires iEnd < iBegin;
	//@ requires iEnd <= iBegin;
	//@ requires iEnd == iBegin;
	//@ requires iEnd != iBegin;
	//@ requires iEnd >= iBegin;
	//@ requires iEnd > iBegin;
	//@ requires iEnd < -1;
	//@ requires iEnd <= -1;
	//@ requires iEnd == -1;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin == a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin >= a.length;
    //@ requires iBegin > a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin == 5;
    //@ requires iBegin != 5;
    //@ requires iBegin >= 5;
    //@ requires iBegin > 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin == 2;
    //@ requires iBegin != 2;
    //@ requires iBegin >= 2;
    //@ requires iBegin > 2;
    //@ requires iBegin < 1;
    //@ requires iBegin <= 1;
    //@ requires iBegin == 1;
    //@ requires iBegin != 1;
    //@ requires iBegin >= 1;
    //@ requires iBegin > 1;
    //@ requires iBegin < 0;
    //@ requires iBegin <= 0;
    //@ requires iBegin == 0;
    //@ requires iBegin != 0;
    //@ requires iBegin >= 0;
    //@ requires iBegin > 0;
    //@ requires iBegin < -1;
    //@ requires iBegin <= -1;
    //@ requires iBegin == -1;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd < a.length;
    //@ requires iEnd <= a.length;
    //@ requires iEnd == a.length;
    //@ requires iEnd != a.length;
    //@ requires iEnd >= a.length;
    //@ requires iEnd > a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd == 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 5;
    //@ requires iEnd > 5;
    //@ requires iEnd < 2;
    //@ requires iEnd <= 2;
    //@ requires iEnd == 2;
    //@ requires iEnd != 2;
    //@ requires iEnd >= 2;
    //@ requires iEnd > 2;
    //@ requires iEnd < 1;
    //@ requires iEnd <= 1;
    //@ requires iEnd == 1;
    //@ requires iEnd != 1;
    //@ requires iEnd >= 1;
    //@ requires iEnd > 1;
    //@ requires iEnd < 0;
    //@ requires iEnd <= 0;
    //@ requires iEnd == 0;
    //@ requires iEnd != 0;
    //@ requires iEnd >= 0;
    //@ requires iEnd > 0;
    //@ requires iEnd < iBegin;
    //@ requires iEnd <= iBegin;
    //@ requires iEnd == iBegin;
    //@ requires iEnd != iBegin;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd < -1;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:238: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:74:) in method __HoudiniInvoker
        SetZero(arr, 0, 4);
               ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:74: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:238:
	public static void SetZero(int[] a, int iBegin, int iEnd) {
	                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:36: verify: Precondition conjunct is false: iEnd >= a.length
	//@ requires iEnd >= a.length;
	                  ^
3 verification failures

public class SetZero {

	//@ requires 5 <= a.length;
	//@ requires 5 == a.length;
	//@ requires 5 >= a.length;
	//@ requires 2 < a.length;
	//@ requires 2 <= a.length;
	//@ requires 2 != a.length;
	//@ requires 1 < a.length;
	//@ requires 1 <= a.length;
	//@ requires 1 != a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin < 1;
	//@ requires iBegin <= 1;
	//@ requires iBegin != 1;
	//@ requires iBegin <= 0;
	//@ requires iBegin == 0;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd < a.length;
	//@ requires iEnd <= a.length;
	//@ requires iEnd != a.length;
	//@ requires iEnd > a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd == 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 5;
	//@ requires iEnd > 5;
	//@ requires iEnd < 2;
	//@ requires iEnd <= 2;
	//@ requires iEnd == 2;
	//@ requires iEnd != 2;
	//@ requires iEnd >= 2;
	//@ requires iEnd > 2;
	//@ requires iEnd < 1;
	//@ requires iEnd <= 1;
	//@ requires iEnd == 1;
	//@ requires iEnd != 1;
	//@ requires iEnd >= 1;
	//@ requires iEnd > 1;
	//@ requires iEnd < 0;
	//@ requires iEnd <= 0;
	//@ requires iEnd == 0;
	//@ requires iEnd != 0;
	//@ requires iEnd >= 0;
	//@ requires iEnd > 0;
	//@ requires iEnd < iBegin;
	//@ requires iEnd <= iBegin;
	//@ requires iEnd == iBegin;
	//@ requires iEnd != iBegin;
	//@ requires iEnd >= iBegin;
	//@ requires iEnd > iBegin;
	//@ requires iEnd < -1;
	//@ requires iEnd <= -1;
	//@ requires iEnd == -1;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin == a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin >= a.length;
    //@ requires iBegin > a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin == 5;
    //@ requires iBegin != 5;
    //@ requires iBegin >= 5;
    //@ requires iBegin > 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin == 2;
    //@ requires iBegin != 2;
    //@ requires iBegin >= 2;
    //@ requires iBegin > 2;
    //@ requires iBegin < 1;
    //@ requires iBegin <= 1;
    //@ requires iBegin == 1;
    //@ requires iBegin != 1;
    //@ requires iBegin >= 1;
    //@ requires iBegin > 1;
    //@ requires iBegin < 0;
    //@ requires iBegin <= 0;
    //@ requires iBegin == 0;
    //@ requires iBegin != 0;
    //@ requires iBegin >= 0;
    //@ requires iBegin > 0;
    //@ requires iBegin < -1;
    //@ requires iBegin <= -1;
    //@ requires iBegin == -1;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd < a.length;
    //@ requires iEnd <= a.length;
    //@ requires iEnd == a.length;
    //@ requires iEnd != a.length;
    //@ requires iEnd >= a.length;
    //@ requires iEnd > a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd == 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 5;
    //@ requires iEnd > 5;
    //@ requires iEnd < 2;
    //@ requires iEnd <= 2;
    //@ requires iEnd == 2;
    //@ requires iEnd != 2;
    //@ requires iEnd >= 2;
    //@ requires iEnd > 2;
    //@ requires iEnd < 1;
    //@ requires iEnd <= 1;
    //@ requires iEnd == 1;
    //@ requires iEnd != 1;
    //@ requires iEnd >= 1;
    //@ requires iEnd > 1;
    //@ requires iEnd < 0;
    //@ requires iEnd <= 0;
    //@ requires iEnd == 0;
    //@ requires iEnd != 0;
    //@ requires iEnd >= 0;
    //@ requires iEnd > 0;
    //@ requires iEnd < iBegin;
    //@ requires iEnd <= iBegin;
    //@ requires iEnd == iBegin;
    //@ requires iEnd != iBegin;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd < -1;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:237: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:73:) in method __HoudiniInvoker
        SetZero(arr, 0, 4);
               ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:73: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:237:
	public static void SetZero(int[] a, int iBegin, int iEnd) {
	                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:36: verify: Precondition conjunct is false: iEnd > a.length
	//@ requires iEnd > a.length;
	                  ^
3 verification failures

public class SetZero {

	//@ requires 5 <= a.length;
	//@ requires 5 == a.length;
	//@ requires 5 >= a.length;
	//@ requires 2 < a.length;
	//@ requires 2 <= a.length;
	//@ requires 2 != a.length;
	//@ requires 1 < a.length;
	//@ requires 1 <= a.length;
	//@ requires 1 != a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin < 1;
	//@ requires iBegin <= 1;
	//@ requires iBegin != 1;
	//@ requires iBegin <= 0;
	//@ requires iBegin == 0;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd < a.length;
	//@ requires iEnd <= a.length;
	//@ requires iEnd != a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd == 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 5;
	//@ requires iEnd > 5;
	//@ requires iEnd < 2;
	//@ requires iEnd <= 2;
	//@ requires iEnd == 2;
	//@ requires iEnd != 2;
	//@ requires iEnd >= 2;
	//@ requires iEnd > 2;
	//@ requires iEnd < 1;
	//@ requires iEnd <= 1;
	//@ requires iEnd == 1;
	//@ requires iEnd != 1;
	//@ requires iEnd >= 1;
	//@ requires iEnd > 1;
	//@ requires iEnd < 0;
	//@ requires iEnd <= 0;
	//@ requires iEnd == 0;
	//@ requires iEnd != 0;
	//@ requires iEnd >= 0;
	//@ requires iEnd > 0;
	//@ requires iEnd < iBegin;
	//@ requires iEnd <= iBegin;
	//@ requires iEnd == iBegin;
	//@ requires iEnd != iBegin;
	//@ requires iEnd >= iBegin;
	//@ requires iEnd > iBegin;
	//@ requires iEnd < -1;
	//@ requires iEnd <= -1;
	//@ requires iEnd == -1;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin == a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin >= a.length;
    //@ requires iBegin > a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin == 5;
    //@ requires iBegin != 5;
    //@ requires iBegin >= 5;
    //@ requires iBegin > 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin == 2;
    //@ requires iBegin != 2;
    //@ requires iBegin >= 2;
    //@ requires iBegin > 2;
    //@ requires iBegin < 1;
    //@ requires iBegin <= 1;
    //@ requires iBegin == 1;
    //@ requires iBegin != 1;
    //@ requires iBegin >= 1;
    //@ requires iBegin > 1;
    //@ requires iBegin < 0;
    //@ requires iBegin <= 0;
    //@ requires iBegin == 0;
    //@ requires iBegin != 0;
    //@ requires iBegin >= 0;
    //@ requires iBegin > 0;
    //@ requires iBegin < -1;
    //@ requires iBegin <= -1;
    //@ requires iBegin == -1;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd < a.length;
    //@ requires iEnd <= a.length;
    //@ requires iEnd == a.length;
    //@ requires iEnd != a.length;
    //@ requires iEnd >= a.length;
    //@ requires iEnd > a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd == 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 5;
    //@ requires iEnd > 5;
    //@ requires iEnd < 2;
    //@ requires iEnd <= 2;
    //@ requires iEnd == 2;
    //@ requires iEnd != 2;
    //@ requires iEnd >= 2;
    //@ requires iEnd > 2;
    //@ requires iEnd < 1;
    //@ requires iEnd <= 1;
    //@ requires iEnd == 1;
    //@ requires iEnd != 1;
    //@ requires iEnd >= 1;
    //@ requires iEnd > 1;
    //@ requires iEnd < 0;
    //@ requires iEnd <= 0;
    //@ requires iEnd == 0;
    //@ requires iEnd != 0;
    //@ requires iEnd >= 0;
    //@ requires iEnd > 0;
    //@ requires iEnd < iBegin;
    //@ requires iEnd <= iBegin;
    //@ requires iEnd == iBegin;
    //@ requires iEnd != iBegin;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd < -1;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:236: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:72:) in method __HoudiniInvoker
        SetZero(arr, 0, 4);
               ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:72: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:236:
	public static void SetZero(int[] a, int iBegin, int iEnd) {
	                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:38: verify: Precondition conjunct is false: iEnd == 5
	//@ requires iEnd == 5;
	                  ^
3 verification failures

public class SetZero {

	//@ requires 5 <= a.length;
	//@ requires 5 == a.length;
	//@ requires 5 >= a.length;
	//@ requires 2 < a.length;
	//@ requires 2 <= a.length;
	//@ requires 2 != a.length;
	//@ requires 1 < a.length;
	//@ requires 1 <= a.length;
	//@ requires 1 != a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin < 1;
	//@ requires iBegin <= 1;
	//@ requires iBegin != 1;
	//@ requires iBegin <= 0;
	//@ requires iBegin == 0;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd < a.length;
	//@ requires iEnd <= a.length;
	//@ requires iEnd != a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 5;
	//@ requires iEnd > 5;
	//@ requires iEnd < 2;
	//@ requires iEnd <= 2;
	//@ requires iEnd == 2;
	//@ requires iEnd != 2;
	//@ requires iEnd >= 2;
	//@ requires iEnd > 2;
	//@ requires iEnd < 1;
	//@ requires iEnd <= 1;
	//@ requires iEnd == 1;
	//@ requires iEnd != 1;
	//@ requires iEnd >= 1;
	//@ requires iEnd > 1;
	//@ requires iEnd < 0;
	//@ requires iEnd <= 0;
	//@ requires iEnd == 0;
	//@ requires iEnd != 0;
	//@ requires iEnd >= 0;
	//@ requires iEnd > 0;
	//@ requires iEnd < iBegin;
	//@ requires iEnd <= iBegin;
	//@ requires iEnd == iBegin;
	//@ requires iEnd != iBegin;
	//@ requires iEnd >= iBegin;
	//@ requires iEnd > iBegin;
	//@ requires iEnd < -1;
	//@ requires iEnd <= -1;
	//@ requires iEnd == -1;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin == a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin >= a.length;
    //@ requires iBegin > a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin == 5;
    //@ requires iBegin != 5;
    //@ requires iBegin >= 5;
    //@ requires iBegin > 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin == 2;
    //@ requires iBegin != 2;
    //@ requires iBegin >= 2;
    //@ requires iBegin > 2;
    //@ requires iBegin < 1;
    //@ requires iBegin <= 1;
    //@ requires iBegin == 1;
    //@ requires iBegin != 1;
    //@ requires iBegin >= 1;
    //@ requires iBegin > 1;
    //@ requires iBegin < 0;
    //@ requires iBegin <= 0;
    //@ requires iBegin == 0;
    //@ requires iBegin != 0;
    //@ requires iBegin >= 0;
    //@ requires iBegin > 0;
    //@ requires iBegin < -1;
    //@ requires iBegin <= -1;
    //@ requires iBegin == -1;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd < a.length;
    //@ requires iEnd <= a.length;
    //@ requires iEnd == a.length;
    //@ requires iEnd != a.length;
    //@ requires iEnd >= a.length;
    //@ requires iEnd > a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd == 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 5;
    //@ requires iEnd > 5;
    //@ requires iEnd < 2;
    //@ requires iEnd <= 2;
    //@ requires iEnd == 2;
    //@ requires iEnd != 2;
    //@ requires iEnd >= 2;
    //@ requires iEnd > 2;
    //@ requires iEnd < 1;
    //@ requires iEnd <= 1;
    //@ requires iEnd == 1;
    //@ requires iEnd != 1;
    //@ requires iEnd >= 1;
    //@ requires iEnd > 1;
    //@ requires iEnd < 0;
    //@ requires iEnd <= 0;
    //@ requires iEnd == 0;
    //@ requires iEnd != 0;
    //@ requires iEnd >= 0;
    //@ requires iEnd > 0;
    //@ requires iEnd < iBegin;
    //@ requires iEnd <= iBegin;
    //@ requires iEnd == iBegin;
    //@ requires iEnd != iBegin;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd < -1;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:235: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:71:) in method __HoudiniInvoker
        SetZero(arr, 0, 4);
               ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:71: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:235:
	public static void SetZero(int[] a, int iBegin, int iEnd) {
	                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:39: verify: Precondition conjunct is false: iEnd >= 5
	//@ requires iEnd >= 5;
	                  ^
3 verification failures

public class SetZero {

	//@ requires 5 <= a.length;
	//@ requires 5 == a.length;
	//@ requires 5 >= a.length;
	//@ requires 2 < a.length;
	//@ requires 2 <= a.length;
	//@ requires 2 != a.length;
	//@ requires 1 < a.length;
	//@ requires 1 <= a.length;
	//@ requires 1 != a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin < 1;
	//@ requires iBegin <= 1;
	//@ requires iBegin != 1;
	//@ requires iBegin <= 0;
	//@ requires iBegin == 0;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd < a.length;
	//@ requires iEnd <= a.length;
	//@ requires iEnd != a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd > 5;
	//@ requires iEnd < 2;
	//@ requires iEnd <= 2;
	//@ requires iEnd == 2;
	//@ requires iEnd != 2;
	//@ requires iEnd >= 2;
	//@ requires iEnd > 2;
	//@ requires iEnd < 1;
	//@ requires iEnd <= 1;
	//@ requires iEnd == 1;
	//@ requires iEnd != 1;
	//@ requires iEnd >= 1;
	//@ requires iEnd > 1;
	//@ requires iEnd < 0;
	//@ requires iEnd <= 0;
	//@ requires iEnd == 0;
	//@ requires iEnd != 0;
	//@ requires iEnd >= 0;
	//@ requires iEnd > 0;
	//@ requires iEnd < iBegin;
	//@ requires iEnd <= iBegin;
	//@ requires iEnd == iBegin;
	//@ requires iEnd != iBegin;
	//@ requires iEnd >= iBegin;
	//@ requires iEnd > iBegin;
	//@ requires iEnd < -1;
	//@ requires iEnd <= -1;
	//@ requires iEnd == -1;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin == a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin >= a.length;
    //@ requires iBegin > a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin == 5;
    //@ requires iBegin != 5;
    //@ requires iBegin >= 5;
    //@ requires iBegin > 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin == 2;
    //@ requires iBegin != 2;
    //@ requires iBegin >= 2;
    //@ requires iBegin > 2;
    //@ requires iBegin < 1;
    //@ requires iBegin <= 1;
    //@ requires iBegin == 1;
    //@ requires iBegin != 1;
    //@ requires iBegin >= 1;
    //@ requires iBegin > 1;
    //@ requires iBegin < 0;
    //@ requires iBegin <= 0;
    //@ requires iBegin == 0;
    //@ requires iBegin != 0;
    //@ requires iBegin >= 0;
    //@ requires iBegin > 0;
    //@ requires iBegin < -1;
    //@ requires iBegin <= -1;
    //@ requires iBegin == -1;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd < a.length;
    //@ requires iEnd <= a.length;
    //@ requires iEnd == a.length;
    //@ requires iEnd != a.length;
    //@ requires iEnd >= a.length;
    //@ requires iEnd > a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd == 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 5;
    //@ requires iEnd > 5;
    //@ requires iEnd < 2;
    //@ requires iEnd <= 2;
    //@ requires iEnd == 2;
    //@ requires iEnd != 2;
    //@ requires iEnd >= 2;
    //@ requires iEnd > 2;
    //@ requires iEnd < 1;
    //@ requires iEnd <= 1;
    //@ requires iEnd == 1;
    //@ requires iEnd != 1;
    //@ requires iEnd >= 1;
    //@ requires iEnd > 1;
    //@ requires iEnd < 0;
    //@ requires iEnd <= 0;
    //@ requires iEnd == 0;
    //@ requires iEnd != 0;
    //@ requires iEnd >= 0;
    //@ requires iEnd > 0;
    //@ requires iEnd < iBegin;
    //@ requires iEnd <= iBegin;
    //@ requires iEnd == iBegin;
    //@ requires iEnd != iBegin;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd < -1;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:234: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:70:) in method __HoudiniInvoker
        SetZero(arr, 0, 4);
               ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:70: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:234:
	public static void SetZero(int[] a, int iBegin, int iEnd) {
	                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:39: verify: Precondition conjunct is false: iEnd > 5
	//@ requires iEnd > 5;
	                  ^
3 verification failures

public class SetZero {

	//@ requires 5 <= a.length;
	//@ requires 5 == a.length;
	//@ requires 5 >= a.length;
	//@ requires 2 < a.length;
	//@ requires 2 <= a.length;
	//@ requires 2 != a.length;
	//@ requires 1 < a.length;
	//@ requires 1 <= a.length;
	//@ requires 1 != a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin < 1;
	//@ requires iBegin <= 1;
	//@ requires iBegin != 1;
	//@ requires iBegin <= 0;
	//@ requires iBegin == 0;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd < a.length;
	//@ requires iEnd <= a.length;
	//@ requires iEnd != a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd < 2;
	//@ requires iEnd <= 2;
	//@ requires iEnd == 2;
	//@ requires iEnd != 2;
	//@ requires iEnd >= 2;
	//@ requires iEnd > 2;
	//@ requires iEnd < 1;
	//@ requires iEnd <= 1;
	//@ requires iEnd == 1;
	//@ requires iEnd != 1;
	//@ requires iEnd >= 1;
	//@ requires iEnd > 1;
	//@ requires iEnd < 0;
	//@ requires iEnd <= 0;
	//@ requires iEnd == 0;
	//@ requires iEnd != 0;
	//@ requires iEnd >= 0;
	//@ requires iEnd > 0;
	//@ requires iEnd < iBegin;
	//@ requires iEnd <= iBegin;
	//@ requires iEnd == iBegin;
	//@ requires iEnd != iBegin;
	//@ requires iEnd >= iBegin;
	//@ requires iEnd > iBegin;
	//@ requires iEnd < -1;
	//@ requires iEnd <= -1;
	//@ requires iEnd == -1;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin == a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin >= a.length;
    //@ requires iBegin > a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin == 5;
    //@ requires iBegin != 5;
    //@ requires iBegin >= 5;
    //@ requires iBegin > 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin == 2;
    //@ requires iBegin != 2;
    //@ requires iBegin >= 2;
    //@ requires iBegin > 2;
    //@ requires iBegin < 1;
    //@ requires iBegin <= 1;
    //@ requires iBegin == 1;
    //@ requires iBegin != 1;
    //@ requires iBegin >= 1;
    //@ requires iBegin > 1;
    //@ requires iBegin < 0;
    //@ requires iBegin <= 0;
    //@ requires iBegin == 0;
    //@ requires iBegin != 0;
    //@ requires iBegin >= 0;
    //@ requires iBegin > 0;
    //@ requires iBegin < -1;
    //@ requires iBegin <= -1;
    //@ requires iBegin == -1;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd < a.length;
    //@ requires iEnd <= a.length;
    //@ requires iEnd == a.length;
    //@ requires iEnd != a.length;
    //@ requires iEnd >= a.length;
    //@ requires iEnd > a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd == 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 5;
    //@ requires iEnd > 5;
    //@ requires iEnd < 2;
    //@ requires iEnd <= 2;
    //@ requires iEnd == 2;
    //@ requires iEnd != 2;
    //@ requires iEnd >= 2;
    //@ requires iEnd > 2;
    //@ requires iEnd < 1;
    //@ requires iEnd <= 1;
    //@ requires iEnd == 1;
    //@ requires iEnd != 1;
    //@ requires iEnd >= 1;
    //@ requires iEnd > 1;
    //@ requires iEnd < 0;
    //@ requires iEnd <= 0;
    //@ requires iEnd == 0;
    //@ requires iEnd != 0;
    //@ requires iEnd >= 0;
    //@ requires iEnd > 0;
    //@ requires iEnd < iBegin;
    //@ requires iEnd <= iBegin;
    //@ requires iEnd == iBegin;
    //@ requires iEnd != iBegin;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd < -1;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:233: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:69:) in method __HoudiniInvoker
        SetZero(arr, 0, 4);
               ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:69: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:233:
	public static void SetZero(int[] a, int iBegin, int iEnd) {
	                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:39: verify: Precondition conjunct is false: iEnd < 2
	//@ requires iEnd < 2;
	                  ^
3 verification failures

public class SetZero {

	//@ requires 5 <= a.length;
	//@ requires 5 == a.length;
	//@ requires 5 >= a.length;
	//@ requires 2 < a.length;
	//@ requires 2 <= a.length;
	//@ requires 2 != a.length;
	//@ requires 1 < a.length;
	//@ requires 1 <= a.length;
	//@ requires 1 != a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin < 1;
	//@ requires iBegin <= 1;
	//@ requires iBegin != 1;
	//@ requires iBegin <= 0;
	//@ requires iBegin == 0;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd < a.length;
	//@ requires iEnd <= a.length;
	//@ requires iEnd != a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd <= 2;
	//@ requires iEnd == 2;
	//@ requires iEnd != 2;
	//@ requires iEnd >= 2;
	//@ requires iEnd > 2;
	//@ requires iEnd < 1;
	//@ requires iEnd <= 1;
	//@ requires iEnd == 1;
	//@ requires iEnd != 1;
	//@ requires iEnd >= 1;
	//@ requires iEnd > 1;
	//@ requires iEnd < 0;
	//@ requires iEnd <= 0;
	//@ requires iEnd == 0;
	//@ requires iEnd != 0;
	//@ requires iEnd >= 0;
	//@ requires iEnd > 0;
	//@ requires iEnd < iBegin;
	//@ requires iEnd <= iBegin;
	//@ requires iEnd == iBegin;
	//@ requires iEnd != iBegin;
	//@ requires iEnd >= iBegin;
	//@ requires iEnd > iBegin;
	//@ requires iEnd < -1;
	//@ requires iEnd <= -1;
	//@ requires iEnd == -1;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin == a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin >= a.length;
    //@ requires iBegin > a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin == 5;
    //@ requires iBegin != 5;
    //@ requires iBegin >= 5;
    //@ requires iBegin > 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin == 2;
    //@ requires iBegin != 2;
    //@ requires iBegin >= 2;
    //@ requires iBegin > 2;
    //@ requires iBegin < 1;
    //@ requires iBegin <= 1;
    //@ requires iBegin == 1;
    //@ requires iBegin != 1;
    //@ requires iBegin >= 1;
    //@ requires iBegin > 1;
    //@ requires iBegin < 0;
    //@ requires iBegin <= 0;
    //@ requires iBegin == 0;
    //@ requires iBegin != 0;
    //@ requires iBegin >= 0;
    //@ requires iBegin > 0;
    //@ requires iBegin < -1;
    //@ requires iBegin <= -1;
    //@ requires iBegin == -1;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd < a.length;
    //@ requires iEnd <= a.length;
    //@ requires iEnd == a.length;
    //@ requires iEnd != a.length;
    //@ requires iEnd >= a.length;
    //@ requires iEnd > a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd == 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 5;
    //@ requires iEnd > 5;
    //@ requires iEnd < 2;
    //@ requires iEnd <= 2;
    //@ requires iEnd == 2;
    //@ requires iEnd != 2;
    //@ requires iEnd >= 2;
    //@ requires iEnd > 2;
    //@ requires iEnd < 1;
    //@ requires iEnd <= 1;
    //@ requires iEnd == 1;
    //@ requires iEnd != 1;
    //@ requires iEnd >= 1;
    //@ requires iEnd > 1;
    //@ requires iEnd < 0;
    //@ requires iEnd <= 0;
    //@ requires iEnd == 0;
    //@ requires iEnd != 0;
    //@ requires iEnd >= 0;
    //@ requires iEnd > 0;
    //@ requires iEnd < iBegin;
    //@ requires iEnd <= iBegin;
    //@ requires iEnd == iBegin;
    //@ requires iEnd != iBegin;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd < -1;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:232: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:68:) in method __HoudiniInvoker
        SetZero(arr, 0, 4);
               ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:68: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:232:
	public static void SetZero(int[] a, int iBegin, int iEnd) {
	                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:39: verify: Precondition conjunct is false: iEnd <= 2
	//@ requires iEnd <= 2;
	                  ^
3 verification failures

public class SetZero {

	//@ requires 5 <= a.length;
	//@ requires 5 == a.length;
	//@ requires 5 >= a.length;
	//@ requires 2 < a.length;
	//@ requires 2 <= a.length;
	//@ requires 2 != a.length;
	//@ requires 1 < a.length;
	//@ requires 1 <= a.length;
	//@ requires 1 != a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin < 1;
	//@ requires iBegin <= 1;
	//@ requires iBegin != 1;
	//@ requires iBegin <= 0;
	//@ requires iBegin == 0;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd < a.length;
	//@ requires iEnd <= a.length;
	//@ requires iEnd != a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd == 2;
	//@ requires iEnd != 2;
	//@ requires iEnd >= 2;
	//@ requires iEnd > 2;
	//@ requires iEnd < 1;
	//@ requires iEnd <= 1;
	//@ requires iEnd == 1;
	//@ requires iEnd != 1;
	//@ requires iEnd >= 1;
	//@ requires iEnd > 1;
	//@ requires iEnd < 0;
	//@ requires iEnd <= 0;
	//@ requires iEnd == 0;
	//@ requires iEnd != 0;
	//@ requires iEnd >= 0;
	//@ requires iEnd > 0;
	//@ requires iEnd < iBegin;
	//@ requires iEnd <= iBegin;
	//@ requires iEnd == iBegin;
	//@ requires iEnd != iBegin;
	//@ requires iEnd >= iBegin;
	//@ requires iEnd > iBegin;
	//@ requires iEnd < -1;
	//@ requires iEnd <= -1;
	//@ requires iEnd == -1;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin == a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin >= a.length;
    //@ requires iBegin > a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin == 5;
    //@ requires iBegin != 5;
    //@ requires iBegin >= 5;
    //@ requires iBegin > 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin == 2;
    //@ requires iBegin != 2;
    //@ requires iBegin >= 2;
    //@ requires iBegin > 2;
    //@ requires iBegin < 1;
    //@ requires iBegin <= 1;
    //@ requires iBegin == 1;
    //@ requires iBegin != 1;
    //@ requires iBegin >= 1;
    //@ requires iBegin > 1;
    //@ requires iBegin < 0;
    //@ requires iBegin <= 0;
    //@ requires iBegin == 0;
    //@ requires iBegin != 0;
    //@ requires iBegin >= 0;
    //@ requires iBegin > 0;
    //@ requires iBegin < -1;
    //@ requires iBegin <= -1;
    //@ requires iBegin == -1;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd < a.length;
    //@ requires iEnd <= a.length;
    //@ requires iEnd == a.length;
    //@ requires iEnd != a.length;
    //@ requires iEnd >= a.length;
    //@ requires iEnd > a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd == 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 5;
    //@ requires iEnd > 5;
    //@ requires iEnd < 2;
    //@ requires iEnd <= 2;
    //@ requires iEnd == 2;
    //@ requires iEnd != 2;
    //@ requires iEnd >= 2;
    //@ requires iEnd > 2;
    //@ requires iEnd < 1;
    //@ requires iEnd <= 1;
    //@ requires iEnd == 1;
    //@ requires iEnd != 1;
    //@ requires iEnd >= 1;
    //@ requires iEnd > 1;
    //@ requires iEnd < 0;
    //@ requires iEnd <= 0;
    //@ requires iEnd == 0;
    //@ requires iEnd != 0;
    //@ requires iEnd >= 0;
    //@ requires iEnd > 0;
    //@ requires iEnd < iBegin;
    //@ requires iEnd <= iBegin;
    //@ requires iEnd == iBegin;
    //@ requires iEnd != iBegin;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd < -1;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:231: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:67:) in method __HoudiniInvoker
        SetZero(arr, 0, 4);
               ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:67: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:231:
	public static void SetZero(int[] a, int iBegin, int iEnd) {
	                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:39: verify: Precondition conjunct is false: iEnd == 2
	//@ requires iEnd == 2;
	                  ^
3 verification failures

public class SetZero {

	//@ requires 5 <= a.length;
	//@ requires 5 == a.length;
	//@ requires 5 >= a.length;
	//@ requires 2 < a.length;
	//@ requires 2 <= a.length;
	//@ requires 2 != a.length;
	//@ requires 1 < a.length;
	//@ requires 1 <= a.length;
	//@ requires 1 != a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin < 1;
	//@ requires iBegin <= 1;
	//@ requires iBegin != 1;
	//@ requires iBegin <= 0;
	//@ requires iBegin == 0;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd < a.length;
	//@ requires iEnd <= a.length;
	//@ requires iEnd != a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd != 2;
	//@ requires iEnd >= 2;
	//@ requires iEnd > 2;
	//@ requires iEnd < 1;
	//@ requires iEnd <= 1;
	//@ requires iEnd == 1;
	//@ requires iEnd != 1;
	//@ requires iEnd >= 1;
	//@ requires iEnd > 1;
	//@ requires iEnd < 0;
	//@ requires iEnd <= 0;
	//@ requires iEnd == 0;
	//@ requires iEnd != 0;
	//@ requires iEnd >= 0;
	//@ requires iEnd > 0;
	//@ requires iEnd < iBegin;
	//@ requires iEnd <= iBegin;
	//@ requires iEnd == iBegin;
	//@ requires iEnd != iBegin;
	//@ requires iEnd >= iBegin;
	//@ requires iEnd > iBegin;
	//@ requires iEnd < -1;
	//@ requires iEnd <= -1;
	//@ requires iEnd == -1;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin == a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin >= a.length;
    //@ requires iBegin > a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin == 5;
    //@ requires iBegin != 5;
    //@ requires iBegin >= 5;
    //@ requires iBegin > 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin == 2;
    //@ requires iBegin != 2;
    //@ requires iBegin >= 2;
    //@ requires iBegin > 2;
    //@ requires iBegin < 1;
    //@ requires iBegin <= 1;
    //@ requires iBegin == 1;
    //@ requires iBegin != 1;
    //@ requires iBegin >= 1;
    //@ requires iBegin > 1;
    //@ requires iBegin < 0;
    //@ requires iBegin <= 0;
    //@ requires iBegin == 0;
    //@ requires iBegin != 0;
    //@ requires iBegin >= 0;
    //@ requires iBegin > 0;
    //@ requires iBegin < -1;
    //@ requires iBegin <= -1;
    //@ requires iBegin == -1;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd < a.length;
    //@ requires iEnd <= a.length;
    //@ requires iEnd == a.length;
    //@ requires iEnd != a.length;
    //@ requires iEnd >= a.length;
    //@ requires iEnd > a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd == 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 5;
    //@ requires iEnd > 5;
    //@ requires iEnd < 2;
    //@ requires iEnd <= 2;
    //@ requires iEnd == 2;
    //@ requires iEnd != 2;
    //@ requires iEnd >= 2;
    //@ requires iEnd > 2;
    //@ requires iEnd < 1;
    //@ requires iEnd <= 1;
    //@ requires iEnd == 1;
    //@ requires iEnd != 1;
    //@ requires iEnd >= 1;
    //@ requires iEnd > 1;
    //@ requires iEnd < 0;
    //@ requires iEnd <= 0;
    //@ requires iEnd == 0;
    //@ requires iEnd != 0;
    //@ requires iEnd >= 0;
    //@ requires iEnd > 0;
    //@ requires iEnd < iBegin;
    //@ requires iEnd <= iBegin;
    //@ requires iEnd == iBegin;
    //@ requires iEnd != iBegin;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd < -1;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:230: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:66:) in method __HoudiniInvoker
        SetZero(arr, 0, 4);
               ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:66: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:230:
	public static void SetZero(int[] a, int iBegin, int iEnd) {
	                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:42: verify: Precondition conjunct is false: iEnd < 1
	//@ requires iEnd < 1;
	                  ^
3 verification failures

public class SetZero {

	//@ requires 5 <= a.length;
	//@ requires 5 == a.length;
	//@ requires 5 >= a.length;
	//@ requires 2 < a.length;
	//@ requires 2 <= a.length;
	//@ requires 2 != a.length;
	//@ requires 1 < a.length;
	//@ requires 1 <= a.length;
	//@ requires 1 != a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin < 1;
	//@ requires iBegin <= 1;
	//@ requires iBegin != 1;
	//@ requires iBegin <= 0;
	//@ requires iBegin == 0;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd < a.length;
	//@ requires iEnd <= a.length;
	//@ requires iEnd != a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd != 2;
	//@ requires iEnd >= 2;
	//@ requires iEnd > 2;
	//@ requires iEnd <= 1;
	//@ requires iEnd == 1;
	//@ requires iEnd != 1;
	//@ requires iEnd >= 1;
	//@ requires iEnd > 1;
	//@ requires iEnd < 0;
	//@ requires iEnd <= 0;
	//@ requires iEnd == 0;
	//@ requires iEnd != 0;
	//@ requires iEnd >= 0;
	//@ requires iEnd > 0;
	//@ requires iEnd < iBegin;
	//@ requires iEnd <= iBegin;
	//@ requires iEnd == iBegin;
	//@ requires iEnd != iBegin;
	//@ requires iEnd >= iBegin;
	//@ requires iEnd > iBegin;
	//@ requires iEnd < -1;
	//@ requires iEnd <= -1;
	//@ requires iEnd == -1;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin == a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin >= a.length;
    //@ requires iBegin > a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin == 5;
    //@ requires iBegin != 5;
    //@ requires iBegin >= 5;
    //@ requires iBegin > 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin == 2;
    //@ requires iBegin != 2;
    //@ requires iBegin >= 2;
    //@ requires iBegin > 2;
    //@ requires iBegin < 1;
    //@ requires iBegin <= 1;
    //@ requires iBegin == 1;
    //@ requires iBegin != 1;
    //@ requires iBegin >= 1;
    //@ requires iBegin > 1;
    //@ requires iBegin < 0;
    //@ requires iBegin <= 0;
    //@ requires iBegin == 0;
    //@ requires iBegin != 0;
    //@ requires iBegin >= 0;
    //@ requires iBegin > 0;
    //@ requires iBegin < -1;
    //@ requires iBegin <= -1;
    //@ requires iBegin == -1;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd < a.length;
    //@ requires iEnd <= a.length;
    //@ requires iEnd == a.length;
    //@ requires iEnd != a.length;
    //@ requires iEnd >= a.length;
    //@ requires iEnd > a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd == 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 5;
    //@ requires iEnd > 5;
    //@ requires iEnd < 2;
    //@ requires iEnd <= 2;
    //@ requires iEnd == 2;
    //@ requires iEnd != 2;
    //@ requires iEnd >= 2;
    //@ requires iEnd > 2;
    //@ requires iEnd < 1;
    //@ requires iEnd <= 1;
    //@ requires iEnd == 1;
    //@ requires iEnd != 1;
    //@ requires iEnd >= 1;
    //@ requires iEnd > 1;
    //@ requires iEnd < 0;
    //@ requires iEnd <= 0;
    //@ requires iEnd == 0;
    //@ requires iEnd != 0;
    //@ requires iEnd >= 0;
    //@ requires iEnd > 0;
    //@ requires iEnd < iBegin;
    //@ requires iEnd <= iBegin;
    //@ requires iEnd == iBegin;
    //@ requires iEnd != iBegin;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd < -1;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:229: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:65:) in method __HoudiniInvoker
        SetZero(arr, 0, 4);
               ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:65: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:229:
	public static void SetZero(int[] a, int iBegin, int iEnd) {
	                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:42: verify: Precondition conjunct is false: iEnd <= 1
	//@ requires iEnd <= 1;
	                  ^
3 verification failures

public class SetZero {

	//@ requires 5 <= a.length;
	//@ requires 5 == a.length;
	//@ requires 5 >= a.length;
	//@ requires 2 < a.length;
	//@ requires 2 <= a.length;
	//@ requires 2 != a.length;
	//@ requires 1 < a.length;
	//@ requires 1 <= a.length;
	//@ requires 1 != a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin < 1;
	//@ requires iBegin <= 1;
	//@ requires iBegin != 1;
	//@ requires iBegin <= 0;
	//@ requires iBegin == 0;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd < a.length;
	//@ requires iEnd <= a.length;
	//@ requires iEnd != a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd != 2;
	//@ requires iEnd >= 2;
	//@ requires iEnd > 2;
	//@ requires iEnd == 1;
	//@ requires iEnd != 1;
	//@ requires iEnd >= 1;
	//@ requires iEnd > 1;
	//@ requires iEnd < 0;
	//@ requires iEnd <= 0;
	//@ requires iEnd == 0;
	//@ requires iEnd != 0;
	//@ requires iEnd >= 0;
	//@ requires iEnd > 0;
	//@ requires iEnd < iBegin;
	//@ requires iEnd <= iBegin;
	//@ requires iEnd == iBegin;
	//@ requires iEnd != iBegin;
	//@ requires iEnd >= iBegin;
	//@ requires iEnd > iBegin;
	//@ requires iEnd < -1;
	//@ requires iEnd <= -1;
	//@ requires iEnd == -1;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin == a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin >= a.length;
    //@ requires iBegin > a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin == 5;
    //@ requires iBegin != 5;
    //@ requires iBegin >= 5;
    //@ requires iBegin > 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin == 2;
    //@ requires iBegin != 2;
    //@ requires iBegin >= 2;
    //@ requires iBegin > 2;
    //@ requires iBegin < 1;
    //@ requires iBegin <= 1;
    //@ requires iBegin == 1;
    //@ requires iBegin != 1;
    //@ requires iBegin >= 1;
    //@ requires iBegin > 1;
    //@ requires iBegin < 0;
    //@ requires iBegin <= 0;
    //@ requires iBegin == 0;
    //@ requires iBegin != 0;
    //@ requires iBegin >= 0;
    //@ requires iBegin > 0;
    //@ requires iBegin < -1;
    //@ requires iBegin <= -1;
    //@ requires iBegin == -1;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd < a.length;
    //@ requires iEnd <= a.length;
    //@ requires iEnd == a.length;
    //@ requires iEnd != a.length;
    //@ requires iEnd >= a.length;
    //@ requires iEnd > a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd == 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 5;
    //@ requires iEnd > 5;
    //@ requires iEnd < 2;
    //@ requires iEnd <= 2;
    //@ requires iEnd == 2;
    //@ requires iEnd != 2;
    //@ requires iEnd >= 2;
    //@ requires iEnd > 2;
    //@ requires iEnd < 1;
    //@ requires iEnd <= 1;
    //@ requires iEnd == 1;
    //@ requires iEnd != 1;
    //@ requires iEnd >= 1;
    //@ requires iEnd > 1;
    //@ requires iEnd < 0;
    //@ requires iEnd <= 0;
    //@ requires iEnd == 0;
    //@ requires iEnd != 0;
    //@ requires iEnd >= 0;
    //@ requires iEnd > 0;
    //@ requires iEnd < iBegin;
    //@ requires iEnd <= iBegin;
    //@ requires iEnd == iBegin;
    //@ requires iEnd != iBegin;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd < -1;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:228: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:64:) in method __HoudiniInvoker
        SetZero(arr, 0, 4);
               ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:64: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:228:
	public static void SetZero(int[] a, int iBegin, int iEnd) {
	                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:42: verify: Precondition conjunct is false: iEnd == 1
	//@ requires iEnd == 1;
	                  ^
3 verification failures

public class SetZero {

	//@ requires 5 <= a.length;
	//@ requires 5 == a.length;
	//@ requires 5 >= a.length;
	//@ requires 2 < a.length;
	//@ requires 2 <= a.length;
	//@ requires 2 != a.length;
	//@ requires 1 < a.length;
	//@ requires 1 <= a.length;
	//@ requires 1 != a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin < 1;
	//@ requires iBegin <= 1;
	//@ requires iBegin != 1;
	//@ requires iBegin <= 0;
	//@ requires iBegin == 0;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd < a.length;
	//@ requires iEnd <= a.length;
	//@ requires iEnd != a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd != 2;
	//@ requires iEnd >= 2;
	//@ requires iEnd > 2;
	//@ requires iEnd != 1;
	//@ requires iEnd >= 1;
	//@ requires iEnd > 1;
	//@ requires iEnd < 0;
	//@ requires iEnd <= 0;
	//@ requires iEnd == 0;
	//@ requires iEnd != 0;
	//@ requires iEnd >= 0;
	//@ requires iEnd > 0;
	//@ requires iEnd < iBegin;
	//@ requires iEnd <= iBegin;
	//@ requires iEnd == iBegin;
	//@ requires iEnd != iBegin;
	//@ requires iEnd >= iBegin;
	//@ requires iEnd > iBegin;
	//@ requires iEnd < -1;
	//@ requires iEnd <= -1;
	//@ requires iEnd == -1;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin == a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin >= a.length;
    //@ requires iBegin > a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin == 5;
    //@ requires iBegin != 5;
    //@ requires iBegin >= 5;
    //@ requires iBegin > 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin == 2;
    //@ requires iBegin != 2;
    //@ requires iBegin >= 2;
    //@ requires iBegin > 2;
    //@ requires iBegin < 1;
    //@ requires iBegin <= 1;
    //@ requires iBegin == 1;
    //@ requires iBegin != 1;
    //@ requires iBegin >= 1;
    //@ requires iBegin > 1;
    //@ requires iBegin < 0;
    //@ requires iBegin <= 0;
    //@ requires iBegin == 0;
    //@ requires iBegin != 0;
    //@ requires iBegin >= 0;
    //@ requires iBegin > 0;
    //@ requires iBegin < -1;
    //@ requires iBegin <= -1;
    //@ requires iBegin == -1;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd < a.length;
    //@ requires iEnd <= a.length;
    //@ requires iEnd == a.length;
    //@ requires iEnd != a.length;
    //@ requires iEnd >= a.length;
    //@ requires iEnd > a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd == 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 5;
    //@ requires iEnd > 5;
    //@ requires iEnd < 2;
    //@ requires iEnd <= 2;
    //@ requires iEnd == 2;
    //@ requires iEnd != 2;
    //@ requires iEnd >= 2;
    //@ requires iEnd > 2;
    //@ requires iEnd < 1;
    //@ requires iEnd <= 1;
    //@ requires iEnd == 1;
    //@ requires iEnd != 1;
    //@ requires iEnd >= 1;
    //@ requires iEnd > 1;
    //@ requires iEnd < 0;
    //@ requires iEnd <= 0;
    //@ requires iEnd == 0;
    //@ requires iEnd != 0;
    //@ requires iEnd >= 0;
    //@ requires iEnd > 0;
    //@ requires iEnd < iBegin;
    //@ requires iEnd <= iBegin;
    //@ requires iEnd == iBegin;
    //@ requires iEnd != iBegin;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd < -1;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:227: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:63:) in method __HoudiniInvoker
        SetZero(arr, 0, 4);
               ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:63: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:227:
	public static void SetZero(int[] a, int iBegin, int iEnd) {
	                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:45: verify: Precondition conjunct is false: iEnd < 0
	//@ requires iEnd < 0;
	                  ^
3 verification failures

public class SetZero {

	//@ requires 5 <= a.length;
	//@ requires 5 == a.length;
	//@ requires 5 >= a.length;
	//@ requires 2 < a.length;
	//@ requires 2 <= a.length;
	//@ requires 2 != a.length;
	//@ requires 1 < a.length;
	//@ requires 1 <= a.length;
	//@ requires 1 != a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin < 1;
	//@ requires iBegin <= 1;
	//@ requires iBegin != 1;
	//@ requires iBegin <= 0;
	//@ requires iBegin == 0;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd < a.length;
	//@ requires iEnd <= a.length;
	//@ requires iEnd != a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd != 2;
	//@ requires iEnd >= 2;
	//@ requires iEnd > 2;
	//@ requires iEnd != 1;
	//@ requires iEnd >= 1;
	//@ requires iEnd > 1;
	//@ requires iEnd <= 0;
	//@ requires iEnd == 0;
	//@ requires iEnd != 0;
	//@ requires iEnd >= 0;
	//@ requires iEnd > 0;
	//@ requires iEnd < iBegin;
	//@ requires iEnd <= iBegin;
	//@ requires iEnd == iBegin;
	//@ requires iEnd != iBegin;
	//@ requires iEnd >= iBegin;
	//@ requires iEnd > iBegin;
	//@ requires iEnd < -1;
	//@ requires iEnd <= -1;
	//@ requires iEnd == -1;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin == a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin >= a.length;
    //@ requires iBegin > a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin == 5;
    //@ requires iBegin != 5;
    //@ requires iBegin >= 5;
    //@ requires iBegin > 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin == 2;
    //@ requires iBegin != 2;
    //@ requires iBegin >= 2;
    //@ requires iBegin > 2;
    //@ requires iBegin < 1;
    //@ requires iBegin <= 1;
    //@ requires iBegin == 1;
    //@ requires iBegin != 1;
    //@ requires iBegin >= 1;
    //@ requires iBegin > 1;
    //@ requires iBegin < 0;
    //@ requires iBegin <= 0;
    //@ requires iBegin == 0;
    //@ requires iBegin != 0;
    //@ requires iBegin >= 0;
    //@ requires iBegin > 0;
    //@ requires iBegin < -1;
    //@ requires iBegin <= -1;
    //@ requires iBegin == -1;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd < a.length;
    //@ requires iEnd <= a.length;
    //@ requires iEnd == a.length;
    //@ requires iEnd != a.length;
    //@ requires iEnd >= a.length;
    //@ requires iEnd > a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd == 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 5;
    //@ requires iEnd > 5;
    //@ requires iEnd < 2;
    //@ requires iEnd <= 2;
    //@ requires iEnd == 2;
    //@ requires iEnd != 2;
    //@ requires iEnd >= 2;
    //@ requires iEnd > 2;
    //@ requires iEnd < 1;
    //@ requires iEnd <= 1;
    //@ requires iEnd == 1;
    //@ requires iEnd != 1;
    //@ requires iEnd >= 1;
    //@ requires iEnd > 1;
    //@ requires iEnd < 0;
    //@ requires iEnd <= 0;
    //@ requires iEnd == 0;
    //@ requires iEnd != 0;
    //@ requires iEnd >= 0;
    //@ requires iEnd > 0;
    //@ requires iEnd < iBegin;
    //@ requires iEnd <= iBegin;
    //@ requires iEnd == iBegin;
    //@ requires iEnd != iBegin;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd < -1;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:226: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:62:) in method __HoudiniInvoker
        SetZero(arr, 0, 4);
               ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:62: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:226:
	public static void SetZero(int[] a, int iBegin, int iEnd) {
	                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:45: verify: Precondition conjunct is false: iEnd <= 0
	//@ requires iEnd <= 0;
	                  ^
3 verification failures

public class SetZero {

	//@ requires 5 <= a.length;
	//@ requires 5 == a.length;
	//@ requires 5 >= a.length;
	//@ requires 2 < a.length;
	//@ requires 2 <= a.length;
	//@ requires 2 != a.length;
	//@ requires 1 < a.length;
	//@ requires 1 <= a.length;
	//@ requires 1 != a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin < 1;
	//@ requires iBegin <= 1;
	//@ requires iBegin != 1;
	//@ requires iBegin <= 0;
	//@ requires iBegin == 0;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd < a.length;
	//@ requires iEnd <= a.length;
	//@ requires iEnd != a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd != 2;
	//@ requires iEnd >= 2;
	//@ requires iEnd > 2;
	//@ requires iEnd != 1;
	//@ requires iEnd >= 1;
	//@ requires iEnd > 1;
	//@ requires iEnd == 0;
	//@ requires iEnd != 0;
	//@ requires iEnd >= 0;
	//@ requires iEnd > 0;
	//@ requires iEnd < iBegin;
	//@ requires iEnd <= iBegin;
	//@ requires iEnd == iBegin;
	//@ requires iEnd != iBegin;
	//@ requires iEnd >= iBegin;
	//@ requires iEnd > iBegin;
	//@ requires iEnd < -1;
	//@ requires iEnd <= -1;
	//@ requires iEnd == -1;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin == a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin >= a.length;
    //@ requires iBegin > a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin == 5;
    //@ requires iBegin != 5;
    //@ requires iBegin >= 5;
    //@ requires iBegin > 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin == 2;
    //@ requires iBegin != 2;
    //@ requires iBegin >= 2;
    //@ requires iBegin > 2;
    //@ requires iBegin < 1;
    //@ requires iBegin <= 1;
    //@ requires iBegin == 1;
    //@ requires iBegin != 1;
    //@ requires iBegin >= 1;
    //@ requires iBegin > 1;
    //@ requires iBegin < 0;
    //@ requires iBegin <= 0;
    //@ requires iBegin == 0;
    //@ requires iBegin != 0;
    //@ requires iBegin >= 0;
    //@ requires iBegin > 0;
    //@ requires iBegin < -1;
    //@ requires iBegin <= -1;
    //@ requires iBegin == -1;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd < a.length;
    //@ requires iEnd <= a.length;
    //@ requires iEnd == a.length;
    //@ requires iEnd != a.length;
    //@ requires iEnd >= a.length;
    //@ requires iEnd > a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd == 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 5;
    //@ requires iEnd > 5;
    //@ requires iEnd < 2;
    //@ requires iEnd <= 2;
    //@ requires iEnd == 2;
    //@ requires iEnd != 2;
    //@ requires iEnd >= 2;
    //@ requires iEnd > 2;
    //@ requires iEnd < 1;
    //@ requires iEnd <= 1;
    //@ requires iEnd == 1;
    //@ requires iEnd != 1;
    //@ requires iEnd >= 1;
    //@ requires iEnd > 1;
    //@ requires iEnd < 0;
    //@ requires iEnd <= 0;
    //@ requires iEnd == 0;
    //@ requires iEnd != 0;
    //@ requires iEnd >= 0;
    //@ requires iEnd > 0;
    //@ requires iEnd < iBegin;
    //@ requires iEnd <= iBegin;
    //@ requires iEnd == iBegin;
    //@ requires iEnd != iBegin;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd < -1;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:225: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:61:) in method __HoudiniInvoker
        SetZero(arr, 0, 4);
               ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:61: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:225:
	public static void SetZero(int[] a, int iBegin, int iEnd) {
	                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:45: verify: Precondition conjunct is false: iEnd == 0
	//@ requires iEnd == 0;
	                  ^
3 verification failures

public class SetZero {

	//@ requires 5 <= a.length;
	//@ requires 5 == a.length;
	//@ requires 5 >= a.length;
	//@ requires 2 < a.length;
	//@ requires 2 <= a.length;
	//@ requires 2 != a.length;
	//@ requires 1 < a.length;
	//@ requires 1 <= a.length;
	//@ requires 1 != a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin < 1;
	//@ requires iBegin <= 1;
	//@ requires iBegin != 1;
	//@ requires iBegin <= 0;
	//@ requires iBegin == 0;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd < a.length;
	//@ requires iEnd <= a.length;
	//@ requires iEnd != a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd != 2;
	//@ requires iEnd >= 2;
	//@ requires iEnd > 2;
	//@ requires iEnd != 1;
	//@ requires iEnd >= 1;
	//@ requires iEnd > 1;
	//@ requires iEnd != 0;
	//@ requires iEnd >= 0;
	//@ requires iEnd > 0;
	//@ requires iEnd < iBegin;
	//@ requires iEnd <= iBegin;
	//@ requires iEnd == iBegin;
	//@ requires iEnd != iBegin;
	//@ requires iEnd >= iBegin;
	//@ requires iEnd > iBegin;
	//@ requires iEnd < -1;
	//@ requires iEnd <= -1;
	//@ requires iEnd == -1;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin == a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin >= a.length;
    //@ requires iBegin > a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin == 5;
    //@ requires iBegin != 5;
    //@ requires iBegin >= 5;
    //@ requires iBegin > 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin == 2;
    //@ requires iBegin != 2;
    //@ requires iBegin >= 2;
    //@ requires iBegin > 2;
    //@ requires iBegin < 1;
    //@ requires iBegin <= 1;
    //@ requires iBegin == 1;
    //@ requires iBegin != 1;
    //@ requires iBegin >= 1;
    //@ requires iBegin > 1;
    //@ requires iBegin < 0;
    //@ requires iBegin <= 0;
    //@ requires iBegin == 0;
    //@ requires iBegin != 0;
    //@ requires iBegin >= 0;
    //@ requires iBegin > 0;
    //@ requires iBegin < -1;
    //@ requires iBegin <= -1;
    //@ requires iBegin == -1;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd < a.length;
    //@ requires iEnd <= a.length;
    //@ requires iEnd == a.length;
    //@ requires iEnd != a.length;
    //@ requires iEnd >= a.length;
    //@ requires iEnd > a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd == 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 5;
    //@ requires iEnd > 5;
    //@ requires iEnd < 2;
    //@ requires iEnd <= 2;
    //@ requires iEnd == 2;
    //@ requires iEnd != 2;
    //@ requires iEnd >= 2;
    //@ requires iEnd > 2;
    //@ requires iEnd < 1;
    //@ requires iEnd <= 1;
    //@ requires iEnd == 1;
    //@ requires iEnd != 1;
    //@ requires iEnd >= 1;
    //@ requires iEnd > 1;
    //@ requires iEnd < 0;
    //@ requires iEnd <= 0;
    //@ requires iEnd == 0;
    //@ requires iEnd != 0;
    //@ requires iEnd >= 0;
    //@ requires iEnd > 0;
    //@ requires iEnd < iBegin;
    //@ requires iEnd <= iBegin;
    //@ requires iEnd == iBegin;
    //@ requires iEnd != iBegin;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd < -1;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:224: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:60:) in method __HoudiniInvoker
        SetZero(arr, 0, 4);
               ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:60: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:224:
	public static void SetZero(int[] a, int iBegin, int iEnd) {
	                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:48: verify: Precondition conjunct is false: iEnd < iBegin
	//@ requires iEnd < iBegin;
	                  ^
3 verification failures

public class SetZero {

	//@ requires 5 <= a.length;
	//@ requires 5 == a.length;
	//@ requires 5 >= a.length;
	//@ requires 2 < a.length;
	//@ requires 2 <= a.length;
	//@ requires 2 != a.length;
	//@ requires 1 < a.length;
	//@ requires 1 <= a.length;
	//@ requires 1 != a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin < 1;
	//@ requires iBegin <= 1;
	//@ requires iBegin != 1;
	//@ requires iBegin <= 0;
	//@ requires iBegin == 0;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd < a.length;
	//@ requires iEnd <= a.length;
	//@ requires iEnd != a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd != 2;
	//@ requires iEnd >= 2;
	//@ requires iEnd > 2;
	//@ requires iEnd != 1;
	//@ requires iEnd >= 1;
	//@ requires iEnd > 1;
	//@ requires iEnd != 0;
	//@ requires iEnd >= 0;
	//@ requires iEnd > 0;
	//@ requires iEnd <= iBegin;
	//@ requires iEnd == iBegin;
	//@ requires iEnd != iBegin;
	//@ requires iEnd >= iBegin;
	//@ requires iEnd > iBegin;
	//@ requires iEnd < -1;
	//@ requires iEnd <= -1;
	//@ requires iEnd == -1;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin == a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin >= a.length;
    //@ requires iBegin > a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin == 5;
    //@ requires iBegin != 5;
    //@ requires iBegin >= 5;
    //@ requires iBegin > 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin == 2;
    //@ requires iBegin != 2;
    //@ requires iBegin >= 2;
    //@ requires iBegin > 2;
    //@ requires iBegin < 1;
    //@ requires iBegin <= 1;
    //@ requires iBegin == 1;
    //@ requires iBegin != 1;
    //@ requires iBegin >= 1;
    //@ requires iBegin > 1;
    //@ requires iBegin < 0;
    //@ requires iBegin <= 0;
    //@ requires iBegin == 0;
    //@ requires iBegin != 0;
    //@ requires iBegin >= 0;
    //@ requires iBegin > 0;
    //@ requires iBegin < -1;
    //@ requires iBegin <= -1;
    //@ requires iBegin == -1;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd < a.length;
    //@ requires iEnd <= a.length;
    //@ requires iEnd == a.length;
    //@ requires iEnd != a.length;
    //@ requires iEnd >= a.length;
    //@ requires iEnd > a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd == 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 5;
    //@ requires iEnd > 5;
    //@ requires iEnd < 2;
    //@ requires iEnd <= 2;
    //@ requires iEnd == 2;
    //@ requires iEnd != 2;
    //@ requires iEnd >= 2;
    //@ requires iEnd > 2;
    //@ requires iEnd < 1;
    //@ requires iEnd <= 1;
    //@ requires iEnd == 1;
    //@ requires iEnd != 1;
    //@ requires iEnd >= 1;
    //@ requires iEnd > 1;
    //@ requires iEnd < 0;
    //@ requires iEnd <= 0;
    //@ requires iEnd == 0;
    //@ requires iEnd != 0;
    //@ requires iEnd >= 0;
    //@ requires iEnd > 0;
    //@ requires iEnd < iBegin;
    //@ requires iEnd <= iBegin;
    //@ requires iEnd == iBegin;
    //@ requires iEnd != iBegin;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd < -1;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:223: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:59:) in method __HoudiniInvoker
        SetZero(arr, 0, 4);
               ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:59: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:223:
	public static void SetZero(int[] a, int iBegin, int iEnd) {
	                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:48: verify: Precondition conjunct is false: iEnd <= iBegin
	//@ requires iEnd <= iBegin;
	                  ^
3 verification failures

public class SetZero {

	//@ requires 5 <= a.length;
	//@ requires 5 == a.length;
	//@ requires 5 >= a.length;
	//@ requires 2 < a.length;
	//@ requires 2 <= a.length;
	//@ requires 2 != a.length;
	//@ requires 1 < a.length;
	//@ requires 1 <= a.length;
	//@ requires 1 != a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin < 1;
	//@ requires iBegin <= 1;
	//@ requires iBegin != 1;
	//@ requires iBegin <= 0;
	//@ requires iBegin == 0;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd < a.length;
	//@ requires iEnd <= a.length;
	//@ requires iEnd != a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd != 2;
	//@ requires iEnd >= 2;
	//@ requires iEnd > 2;
	//@ requires iEnd != 1;
	//@ requires iEnd >= 1;
	//@ requires iEnd > 1;
	//@ requires iEnd != 0;
	//@ requires iEnd >= 0;
	//@ requires iEnd > 0;
	//@ requires iEnd == iBegin;
	//@ requires iEnd != iBegin;
	//@ requires iEnd >= iBegin;
	//@ requires iEnd > iBegin;
	//@ requires iEnd < -1;
	//@ requires iEnd <= -1;
	//@ requires iEnd == -1;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin == a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin >= a.length;
    //@ requires iBegin > a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin == 5;
    //@ requires iBegin != 5;
    //@ requires iBegin >= 5;
    //@ requires iBegin > 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin == 2;
    //@ requires iBegin != 2;
    //@ requires iBegin >= 2;
    //@ requires iBegin > 2;
    //@ requires iBegin < 1;
    //@ requires iBegin <= 1;
    //@ requires iBegin == 1;
    //@ requires iBegin != 1;
    //@ requires iBegin >= 1;
    //@ requires iBegin > 1;
    //@ requires iBegin < 0;
    //@ requires iBegin <= 0;
    //@ requires iBegin == 0;
    //@ requires iBegin != 0;
    //@ requires iBegin >= 0;
    //@ requires iBegin > 0;
    //@ requires iBegin < -1;
    //@ requires iBegin <= -1;
    //@ requires iBegin == -1;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd < a.length;
    //@ requires iEnd <= a.length;
    //@ requires iEnd == a.length;
    //@ requires iEnd != a.length;
    //@ requires iEnd >= a.length;
    //@ requires iEnd > a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd == 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 5;
    //@ requires iEnd > 5;
    //@ requires iEnd < 2;
    //@ requires iEnd <= 2;
    //@ requires iEnd == 2;
    //@ requires iEnd != 2;
    //@ requires iEnd >= 2;
    //@ requires iEnd > 2;
    //@ requires iEnd < 1;
    //@ requires iEnd <= 1;
    //@ requires iEnd == 1;
    //@ requires iEnd != 1;
    //@ requires iEnd >= 1;
    //@ requires iEnd > 1;
    //@ requires iEnd < 0;
    //@ requires iEnd <= 0;
    //@ requires iEnd == 0;
    //@ requires iEnd != 0;
    //@ requires iEnd >= 0;
    //@ requires iEnd > 0;
    //@ requires iEnd < iBegin;
    //@ requires iEnd <= iBegin;
    //@ requires iEnd == iBegin;
    //@ requires iEnd != iBegin;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd < -1;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:222: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:58:) in method __HoudiniInvoker
        SetZero(arr, 0, 4);
               ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:58: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:222:
	public static void SetZero(int[] a, int iBegin, int iEnd) {
	                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:48: verify: Precondition conjunct is false: iEnd == iBegin
	//@ requires iEnd == iBegin;
	                  ^
3 verification failures

public class SetZero {

	//@ requires 5 <= a.length;
	//@ requires 5 == a.length;
	//@ requires 5 >= a.length;
	//@ requires 2 < a.length;
	//@ requires 2 <= a.length;
	//@ requires 2 != a.length;
	//@ requires 1 < a.length;
	//@ requires 1 <= a.length;
	//@ requires 1 != a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin < 1;
	//@ requires iBegin <= 1;
	//@ requires iBegin != 1;
	//@ requires iBegin <= 0;
	//@ requires iBegin == 0;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd < a.length;
	//@ requires iEnd <= a.length;
	//@ requires iEnd != a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd != 2;
	//@ requires iEnd >= 2;
	//@ requires iEnd > 2;
	//@ requires iEnd != 1;
	//@ requires iEnd >= 1;
	//@ requires iEnd > 1;
	//@ requires iEnd != 0;
	//@ requires iEnd >= 0;
	//@ requires iEnd > 0;
	//@ requires iEnd != iBegin;
	//@ requires iEnd >= iBegin;
	//@ requires iEnd > iBegin;
	//@ requires iEnd < -1;
	//@ requires iEnd <= -1;
	//@ requires iEnd == -1;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin == a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin >= a.length;
    //@ requires iBegin > a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin == 5;
    //@ requires iBegin != 5;
    //@ requires iBegin >= 5;
    //@ requires iBegin > 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin == 2;
    //@ requires iBegin != 2;
    //@ requires iBegin >= 2;
    //@ requires iBegin > 2;
    //@ requires iBegin < 1;
    //@ requires iBegin <= 1;
    //@ requires iBegin == 1;
    //@ requires iBegin != 1;
    //@ requires iBegin >= 1;
    //@ requires iBegin > 1;
    //@ requires iBegin < 0;
    //@ requires iBegin <= 0;
    //@ requires iBegin == 0;
    //@ requires iBegin != 0;
    //@ requires iBegin >= 0;
    //@ requires iBegin > 0;
    //@ requires iBegin < -1;
    //@ requires iBegin <= -1;
    //@ requires iBegin == -1;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd < a.length;
    //@ requires iEnd <= a.length;
    //@ requires iEnd == a.length;
    //@ requires iEnd != a.length;
    //@ requires iEnd >= a.length;
    //@ requires iEnd > a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd == 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 5;
    //@ requires iEnd > 5;
    //@ requires iEnd < 2;
    //@ requires iEnd <= 2;
    //@ requires iEnd == 2;
    //@ requires iEnd != 2;
    //@ requires iEnd >= 2;
    //@ requires iEnd > 2;
    //@ requires iEnd < 1;
    //@ requires iEnd <= 1;
    //@ requires iEnd == 1;
    //@ requires iEnd != 1;
    //@ requires iEnd >= 1;
    //@ requires iEnd > 1;
    //@ requires iEnd < 0;
    //@ requires iEnd <= 0;
    //@ requires iEnd == 0;
    //@ requires iEnd != 0;
    //@ requires iEnd >= 0;
    //@ requires iEnd > 0;
    //@ requires iEnd < iBegin;
    //@ requires iEnd <= iBegin;
    //@ requires iEnd == iBegin;
    //@ requires iEnd != iBegin;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd < -1;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:221: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:57:) in method __HoudiniInvoker
        SetZero(arr, 0, 4);
               ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:57: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:221:
	public static void SetZero(int[] a, int iBegin, int iEnd) {
	                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:51: verify: Precondition conjunct is false: iEnd < -1
	//@ requires iEnd < -1;
	                  ^
3 verification failures

public class SetZero {

	//@ requires 5 <= a.length;
	//@ requires 5 == a.length;
	//@ requires 5 >= a.length;
	//@ requires 2 < a.length;
	//@ requires 2 <= a.length;
	//@ requires 2 != a.length;
	//@ requires 1 < a.length;
	//@ requires 1 <= a.length;
	//@ requires 1 != a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin < 1;
	//@ requires iBegin <= 1;
	//@ requires iBegin != 1;
	//@ requires iBegin <= 0;
	//@ requires iBegin == 0;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd < a.length;
	//@ requires iEnd <= a.length;
	//@ requires iEnd != a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd != 2;
	//@ requires iEnd >= 2;
	//@ requires iEnd > 2;
	//@ requires iEnd != 1;
	//@ requires iEnd >= 1;
	//@ requires iEnd > 1;
	//@ requires iEnd != 0;
	//@ requires iEnd >= 0;
	//@ requires iEnd > 0;
	//@ requires iEnd != iBegin;
	//@ requires iEnd >= iBegin;
	//@ requires iEnd > iBegin;
	//@ requires iEnd <= -1;
	//@ requires iEnd == -1;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin == a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin >= a.length;
    //@ requires iBegin > a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin == 5;
    //@ requires iBegin != 5;
    //@ requires iBegin >= 5;
    //@ requires iBegin > 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin == 2;
    //@ requires iBegin != 2;
    //@ requires iBegin >= 2;
    //@ requires iBegin > 2;
    //@ requires iBegin < 1;
    //@ requires iBegin <= 1;
    //@ requires iBegin == 1;
    //@ requires iBegin != 1;
    //@ requires iBegin >= 1;
    //@ requires iBegin > 1;
    //@ requires iBegin < 0;
    //@ requires iBegin <= 0;
    //@ requires iBegin == 0;
    //@ requires iBegin != 0;
    //@ requires iBegin >= 0;
    //@ requires iBegin > 0;
    //@ requires iBegin < -1;
    //@ requires iBegin <= -1;
    //@ requires iBegin == -1;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd < a.length;
    //@ requires iEnd <= a.length;
    //@ requires iEnd == a.length;
    //@ requires iEnd != a.length;
    //@ requires iEnd >= a.length;
    //@ requires iEnd > a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd == 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 5;
    //@ requires iEnd > 5;
    //@ requires iEnd < 2;
    //@ requires iEnd <= 2;
    //@ requires iEnd == 2;
    //@ requires iEnd != 2;
    //@ requires iEnd >= 2;
    //@ requires iEnd > 2;
    //@ requires iEnd < 1;
    //@ requires iEnd <= 1;
    //@ requires iEnd == 1;
    //@ requires iEnd != 1;
    //@ requires iEnd >= 1;
    //@ requires iEnd > 1;
    //@ requires iEnd < 0;
    //@ requires iEnd <= 0;
    //@ requires iEnd == 0;
    //@ requires iEnd != 0;
    //@ requires iEnd >= 0;
    //@ requires iEnd > 0;
    //@ requires iEnd < iBegin;
    //@ requires iEnd <= iBegin;
    //@ requires iEnd == iBegin;
    //@ requires iEnd != iBegin;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd < -1;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:220: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:56:) in method __HoudiniInvoker
        SetZero(arr, 0, 4);
               ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:56: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:220:
	public static void SetZero(int[] a, int iBegin, int iEnd) {
	                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:51: verify: Precondition conjunct is false: iEnd <= -1
	//@ requires iEnd <= -1;
	                  ^
3 verification failures

public class SetZero {

	//@ requires 5 <= a.length;
	//@ requires 5 == a.length;
	//@ requires 5 >= a.length;
	//@ requires 2 < a.length;
	//@ requires 2 <= a.length;
	//@ requires 2 != a.length;
	//@ requires 1 < a.length;
	//@ requires 1 <= a.length;
	//@ requires 1 != a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin < 1;
	//@ requires iBegin <= 1;
	//@ requires iBegin != 1;
	//@ requires iBegin <= 0;
	//@ requires iBegin == 0;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd < a.length;
	//@ requires iEnd <= a.length;
	//@ requires iEnd != a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd != 2;
	//@ requires iEnd >= 2;
	//@ requires iEnd > 2;
	//@ requires iEnd != 1;
	//@ requires iEnd >= 1;
	//@ requires iEnd > 1;
	//@ requires iEnd != 0;
	//@ requires iEnd >= 0;
	//@ requires iEnd > 0;
	//@ requires iEnd != iBegin;
	//@ requires iEnd >= iBegin;
	//@ requires iEnd > iBegin;
	//@ requires iEnd == -1;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin == a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin >= a.length;
    //@ requires iBegin > a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin == 5;
    //@ requires iBegin != 5;
    //@ requires iBegin >= 5;
    //@ requires iBegin > 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin == 2;
    //@ requires iBegin != 2;
    //@ requires iBegin >= 2;
    //@ requires iBegin > 2;
    //@ requires iBegin < 1;
    //@ requires iBegin <= 1;
    //@ requires iBegin == 1;
    //@ requires iBegin != 1;
    //@ requires iBegin >= 1;
    //@ requires iBegin > 1;
    //@ requires iBegin < 0;
    //@ requires iBegin <= 0;
    //@ requires iBegin == 0;
    //@ requires iBegin != 0;
    //@ requires iBegin >= 0;
    //@ requires iBegin > 0;
    //@ requires iBegin < -1;
    //@ requires iBegin <= -1;
    //@ requires iBegin == -1;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd < a.length;
    //@ requires iEnd <= a.length;
    //@ requires iEnd == a.length;
    //@ requires iEnd != a.length;
    //@ requires iEnd >= a.length;
    //@ requires iEnd > a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd == 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 5;
    //@ requires iEnd > 5;
    //@ requires iEnd < 2;
    //@ requires iEnd <= 2;
    //@ requires iEnd == 2;
    //@ requires iEnd != 2;
    //@ requires iEnd >= 2;
    //@ requires iEnd > 2;
    //@ requires iEnd < 1;
    //@ requires iEnd <= 1;
    //@ requires iEnd == 1;
    //@ requires iEnd != 1;
    //@ requires iEnd >= 1;
    //@ requires iEnd > 1;
    //@ requires iEnd < 0;
    //@ requires iEnd <= 0;
    //@ requires iEnd == 0;
    //@ requires iEnd != 0;
    //@ requires iEnd >= 0;
    //@ requires iEnd > 0;
    //@ requires iEnd < iBegin;
    //@ requires iEnd <= iBegin;
    //@ requires iEnd == iBegin;
    //@ requires iEnd != iBegin;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd < -1;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:219: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:55:) in method __HoudiniInvoker
        SetZero(arr, 0, 4);
               ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:55: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:219:
	public static void SetZero(int[] a, int iBegin, int iEnd) {
	                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:51: verify: Precondition conjunct is false: iEnd == -1
	//@ requires iEnd == -1;
	                  ^
3 verification failures

public class SetZero {

	//@ requires 5 <= a.length;
	//@ requires 5 == a.length;
	//@ requires 5 >= a.length;
	//@ requires 2 < a.length;
	//@ requires 2 <= a.length;
	//@ requires 2 != a.length;
	//@ requires 1 < a.length;
	//@ requires 1 <= a.length;
	//@ requires 1 != a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin < 1;
	//@ requires iBegin <= 1;
	//@ requires iBegin != 1;
	//@ requires iBegin <= 0;
	//@ requires iBegin == 0;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd < a.length;
	//@ requires iEnd <= a.length;
	//@ requires iEnd != a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd != 2;
	//@ requires iEnd >= 2;
	//@ requires iEnd > 2;
	//@ requires iEnd != 1;
	//@ requires iEnd >= 1;
	//@ requires iEnd > 1;
	//@ requires iEnd != 0;
	//@ requires iEnd >= 0;
	//@ requires iEnd > 0;
	//@ requires iEnd != iBegin;
	//@ requires iEnd >= iBegin;
	//@ requires iEnd > iBegin;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin == a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin >= a.length;
    //@ requires iBegin > a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin == 5;
    //@ requires iBegin != 5;
    //@ requires iBegin >= 5;
    //@ requires iBegin > 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin == 2;
    //@ requires iBegin != 2;
    //@ requires iBegin >= 2;
    //@ requires iBegin > 2;
    //@ requires iBegin < 1;
    //@ requires iBegin <= 1;
    //@ requires iBegin == 1;
    //@ requires iBegin != 1;
    //@ requires iBegin >= 1;
    //@ requires iBegin > 1;
    //@ requires iBegin < 0;
    //@ requires iBegin <= 0;
    //@ requires iBegin == 0;
    //@ requires iBegin != 0;
    //@ requires iBegin >= 0;
    //@ requires iBegin > 0;
    //@ requires iBegin < -1;
    //@ requires iBegin <= -1;
    //@ requires iBegin == -1;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd < a.length;
    //@ requires iEnd <= a.length;
    //@ requires iEnd == a.length;
    //@ requires iEnd != a.length;
    //@ requires iEnd >= a.length;
    //@ requires iEnd > a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd == 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 5;
    //@ requires iEnd > 5;
    //@ requires iEnd < 2;
    //@ requires iEnd <= 2;
    //@ requires iEnd == 2;
    //@ requires iEnd != 2;
    //@ requires iEnd >= 2;
    //@ requires iEnd > 2;
    //@ requires iEnd < 1;
    //@ requires iEnd <= 1;
    //@ requires iEnd == 1;
    //@ requires iEnd != 1;
    //@ requires iEnd >= 1;
    //@ requires iEnd > 1;
    //@ requires iEnd < 0;
    //@ requires iEnd <= 0;
    //@ requires iEnd == 0;
    //@ requires iEnd != 0;
    //@ requires iEnd >= 0;
    //@ requires iEnd > 0;
    //@ requires iEnd < iBegin;
    //@ requires iEnd <= iBegin;
    //@ requires iEnd == iBegin;
    //@ requires iEnd != iBegin;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd < -1;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:220: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:54:) in method __HoudiniInvoker
        SetZero(arr, 0, 1);
               ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:54: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:220:
	public static void SetZero(int[] a, int iBegin, int iEnd) {
	                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:3: verify: Precondition conjunct is false: 5 <= a.length
	//@ requires 5 <= a.length;
	               ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:58: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:214:) in method SetZero
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
                                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:214: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:58:
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:64: verify: Precondition conjunct is false: 5 < a.length
    //@ requires 5 < a.length;
                   ^
6 verification failures

public class SetZero {

	//@ requires 5 == a.length;
	//@ requires 5 >= a.length;
	//@ requires 2 < a.length;
	//@ requires 2 <= a.length;
	//@ requires 2 != a.length;
	//@ requires 1 < a.length;
	//@ requires 1 <= a.length;
	//@ requires 1 != a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin < 1;
	//@ requires iBegin <= 1;
	//@ requires iBegin != 1;
	//@ requires iBegin <= 0;
	//@ requires iBegin == 0;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd < a.length;
	//@ requires iEnd <= a.length;
	//@ requires iEnd != a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd != 2;
	//@ requires iEnd >= 2;
	//@ requires iEnd > 2;
	//@ requires iEnd != 1;
	//@ requires iEnd >= 1;
	//@ requires iEnd > 1;
	//@ requires iEnd != 0;
	//@ requires iEnd >= 0;
	//@ requires iEnd > 0;
	//@ requires iEnd != iBegin;
	//@ requires iEnd >= iBegin;
	//@ requires iEnd > iBegin;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin == a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin >= a.length;
    //@ requires iBegin > a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin == 5;
    //@ requires iBegin != 5;
    //@ requires iBegin >= 5;
    //@ requires iBegin > 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin == 2;
    //@ requires iBegin != 2;
    //@ requires iBegin >= 2;
    //@ requires iBegin > 2;
    //@ requires iBegin < 1;
    //@ requires iBegin <= 1;
    //@ requires iBegin == 1;
    //@ requires iBegin != 1;
    //@ requires iBegin >= 1;
    //@ requires iBegin > 1;
    //@ requires iBegin < 0;
    //@ requires iBegin <= 0;
    //@ requires iBegin == 0;
    //@ requires iBegin != 0;
    //@ requires iBegin >= 0;
    //@ requires iBegin > 0;
    //@ requires iBegin < -1;
    //@ requires iBegin <= -1;
    //@ requires iBegin == -1;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd < a.length;
    //@ requires iEnd <= a.length;
    //@ requires iEnd == a.length;
    //@ requires iEnd != a.length;
    //@ requires iEnd >= a.length;
    //@ requires iEnd > a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd == 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 5;
    //@ requires iEnd > 5;
    //@ requires iEnd < 2;
    //@ requires iEnd <= 2;
    //@ requires iEnd == 2;
    //@ requires iEnd != 2;
    //@ requires iEnd >= 2;
    //@ requires iEnd > 2;
    //@ requires iEnd < 1;
    //@ requires iEnd <= 1;
    //@ requires iEnd == 1;
    //@ requires iEnd != 1;
    //@ requires iEnd >= 1;
    //@ requires iEnd > 1;
    //@ requires iEnd < 0;
    //@ requires iEnd <= 0;
    //@ requires iEnd == 0;
    //@ requires iEnd != 0;
    //@ requires iEnd >= 0;
    //@ requires iEnd > 0;
    //@ requires iEnd < iBegin;
    //@ requires iEnd <= iBegin;
    //@ requires iEnd == iBegin;
    //@ requires iEnd != iBegin;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd < -1;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:219: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:53:) in method __HoudiniInvoker
        SetZero(arr, 0, 1);
               ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:53: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:219:
	public static void SetZero(int[] a, int iBegin, int iEnd) {
	                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:3: verify: Precondition conjunct is false: 5 == a.length
	//@ requires 5 == a.length;
	               ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:57: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:213:) in method SetZero
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
                                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:213: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:57:
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:63: verify: Precondition conjunct is false: 5 < a.length
    //@ requires 5 < a.length;
                   ^
6 verification failures

public class SetZero {

	//@ requires 5 >= a.length;
	//@ requires 2 < a.length;
	//@ requires 2 <= a.length;
	//@ requires 2 != a.length;
	//@ requires 1 < a.length;
	//@ requires 1 <= a.length;
	//@ requires 1 != a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin < 1;
	//@ requires iBegin <= 1;
	//@ requires iBegin != 1;
	//@ requires iBegin <= 0;
	//@ requires iBegin == 0;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd < a.length;
	//@ requires iEnd <= a.length;
	//@ requires iEnd != a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd != 2;
	//@ requires iEnd >= 2;
	//@ requires iEnd > 2;
	//@ requires iEnd != 1;
	//@ requires iEnd >= 1;
	//@ requires iEnd > 1;
	//@ requires iEnd != 0;
	//@ requires iEnd >= 0;
	//@ requires iEnd > 0;
	//@ requires iEnd != iBegin;
	//@ requires iEnd >= iBegin;
	//@ requires iEnd > iBegin;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin == a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin >= a.length;
    //@ requires iBegin > a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin == 5;
    //@ requires iBegin != 5;
    //@ requires iBegin >= 5;
    //@ requires iBegin > 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin == 2;
    //@ requires iBegin != 2;
    //@ requires iBegin >= 2;
    //@ requires iBegin > 2;
    //@ requires iBegin < 1;
    //@ requires iBegin <= 1;
    //@ requires iBegin == 1;
    //@ requires iBegin != 1;
    //@ requires iBegin >= 1;
    //@ requires iBegin > 1;
    //@ requires iBegin < 0;
    //@ requires iBegin <= 0;
    //@ requires iBegin == 0;
    //@ requires iBegin != 0;
    //@ requires iBegin >= 0;
    //@ requires iBegin > 0;
    //@ requires iBegin < -1;
    //@ requires iBegin <= -1;
    //@ requires iBegin == -1;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd < a.length;
    //@ requires iEnd <= a.length;
    //@ requires iEnd == a.length;
    //@ requires iEnd != a.length;
    //@ requires iEnd >= a.length;
    //@ requires iEnd > a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd == 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 5;
    //@ requires iEnd > 5;
    //@ requires iEnd < 2;
    //@ requires iEnd <= 2;
    //@ requires iEnd == 2;
    //@ requires iEnd != 2;
    //@ requires iEnd >= 2;
    //@ requires iEnd > 2;
    //@ requires iEnd < 1;
    //@ requires iEnd <= 1;
    //@ requires iEnd == 1;
    //@ requires iEnd != 1;
    //@ requires iEnd >= 1;
    //@ requires iEnd > 1;
    //@ requires iEnd < 0;
    //@ requires iEnd <= 0;
    //@ requires iEnd == 0;
    //@ requires iEnd != 0;
    //@ requires iEnd >= 0;
    //@ requires iEnd > 0;
    //@ requires iEnd < iBegin;
    //@ requires iEnd <= iBegin;
    //@ requires iEnd == iBegin;
    //@ requires iEnd != iBegin;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd < -1;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:218: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:52:) in method __HoudiniInvoker
        SetZero(arr, 0, 1);
               ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:52: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:218:
	public static void SetZero(int[] a, int iBegin, int iEnd) {
	                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:4: verify: Precondition conjunct is false: 2 < a.length
	//@ requires 2 < a.length;
	               ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:56: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:212:) in method SetZero
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
                                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:212: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:56:
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:62: verify: Precondition conjunct is false: 5 < a.length
    //@ requires 5 < a.length;
                   ^
6 verification failures

public class SetZero {

	//@ requires 5 >= a.length;
	//@ requires 2 <= a.length;
	//@ requires 2 != a.length;
	//@ requires 1 < a.length;
	//@ requires 1 <= a.length;
	//@ requires 1 != a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin < 1;
	//@ requires iBegin <= 1;
	//@ requires iBegin != 1;
	//@ requires iBegin <= 0;
	//@ requires iBegin == 0;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd < a.length;
	//@ requires iEnd <= a.length;
	//@ requires iEnd != a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd != 2;
	//@ requires iEnd >= 2;
	//@ requires iEnd > 2;
	//@ requires iEnd != 1;
	//@ requires iEnd >= 1;
	//@ requires iEnd > 1;
	//@ requires iEnd != 0;
	//@ requires iEnd >= 0;
	//@ requires iEnd > 0;
	//@ requires iEnd != iBegin;
	//@ requires iEnd >= iBegin;
	//@ requires iEnd > iBegin;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin == a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin >= a.length;
    //@ requires iBegin > a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin == 5;
    //@ requires iBegin != 5;
    //@ requires iBegin >= 5;
    //@ requires iBegin > 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin == 2;
    //@ requires iBegin != 2;
    //@ requires iBegin >= 2;
    //@ requires iBegin > 2;
    //@ requires iBegin < 1;
    //@ requires iBegin <= 1;
    //@ requires iBegin == 1;
    //@ requires iBegin != 1;
    //@ requires iBegin >= 1;
    //@ requires iBegin > 1;
    //@ requires iBegin < 0;
    //@ requires iBegin <= 0;
    //@ requires iBegin == 0;
    //@ requires iBegin != 0;
    //@ requires iBegin >= 0;
    //@ requires iBegin > 0;
    //@ requires iBegin < -1;
    //@ requires iBegin <= -1;
    //@ requires iBegin == -1;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd < a.length;
    //@ requires iEnd <= a.length;
    //@ requires iEnd == a.length;
    //@ requires iEnd != a.length;
    //@ requires iEnd >= a.length;
    //@ requires iEnd > a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd == 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 5;
    //@ requires iEnd > 5;
    //@ requires iEnd < 2;
    //@ requires iEnd <= 2;
    //@ requires iEnd == 2;
    //@ requires iEnd != 2;
    //@ requires iEnd >= 2;
    //@ requires iEnd > 2;
    //@ requires iEnd < 1;
    //@ requires iEnd <= 1;
    //@ requires iEnd == 1;
    //@ requires iEnd != 1;
    //@ requires iEnd >= 1;
    //@ requires iEnd > 1;
    //@ requires iEnd < 0;
    //@ requires iEnd <= 0;
    //@ requires iEnd == 0;
    //@ requires iEnd != 0;
    //@ requires iEnd >= 0;
    //@ requires iEnd > 0;
    //@ requires iEnd < iBegin;
    //@ requires iEnd <= iBegin;
    //@ requires iEnd == iBegin;
    //@ requires iEnd != iBegin;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd < -1;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:217: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:51:) in method __HoudiniInvoker
        SetZero(arr, 0, 1);
               ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:51: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:217:
	public static void SetZero(int[] a, int iBegin, int iEnd) {
	                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:4: verify: Precondition conjunct is false: 2 <= a.length
	//@ requires 2 <= a.length;
	               ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:55: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:211:) in method SetZero
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
                                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:211: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:55:
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:61: verify: Precondition conjunct is false: 5 < a.length
    //@ requires 5 < a.length;
                   ^
6 verification failures

public class SetZero {

	//@ requires 5 >= a.length;
	//@ requires 2 != a.length;
	//@ requires 1 < a.length;
	//@ requires 1 <= a.length;
	//@ requires 1 != a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin < 1;
	//@ requires iBegin <= 1;
	//@ requires iBegin != 1;
	//@ requires iBegin <= 0;
	//@ requires iBegin == 0;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd < a.length;
	//@ requires iEnd <= a.length;
	//@ requires iEnd != a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd != 2;
	//@ requires iEnd >= 2;
	//@ requires iEnd > 2;
	//@ requires iEnd != 1;
	//@ requires iEnd >= 1;
	//@ requires iEnd > 1;
	//@ requires iEnd != 0;
	//@ requires iEnd >= 0;
	//@ requires iEnd > 0;
	//@ requires iEnd != iBegin;
	//@ requires iEnd >= iBegin;
	//@ requires iEnd > iBegin;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin == a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin >= a.length;
    //@ requires iBegin > a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin == 5;
    //@ requires iBegin != 5;
    //@ requires iBegin >= 5;
    //@ requires iBegin > 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin == 2;
    //@ requires iBegin != 2;
    //@ requires iBegin >= 2;
    //@ requires iBegin > 2;
    //@ requires iBegin < 1;
    //@ requires iBegin <= 1;
    //@ requires iBegin == 1;
    //@ requires iBegin != 1;
    //@ requires iBegin >= 1;
    //@ requires iBegin > 1;
    //@ requires iBegin < 0;
    //@ requires iBegin <= 0;
    //@ requires iBegin == 0;
    //@ requires iBegin != 0;
    //@ requires iBegin >= 0;
    //@ requires iBegin > 0;
    //@ requires iBegin < -1;
    //@ requires iBegin <= -1;
    //@ requires iBegin == -1;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd < a.length;
    //@ requires iEnd <= a.length;
    //@ requires iEnd == a.length;
    //@ requires iEnd != a.length;
    //@ requires iEnd >= a.length;
    //@ requires iEnd > a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd == 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 5;
    //@ requires iEnd > 5;
    //@ requires iEnd < 2;
    //@ requires iEnd <= 2;
    //@ requires iEnd == 2;
    //@ requires iEnd != 2;
    //@ requires iEnd >= 2;
    //@ requires iEnd > 2;
    //@ requires iEnd < 1;
    //@ requires iEnd <= 1;
    //@ requires iEnd == 1;
    //@ requires iEnd != 1;
    //@ requires iEnd >= 1;
    //@ requires iEnd > 1;
    //@ requires iEnd < 0;
    //@ requires iEnd <= 0;
    //@ requires iEnd == 0;
    //@ requires iEnd != 0;
    //@ requires iEnd >= 0;
    //@ requires iEnd > 0;
    //@ requires iEnd < iBegin;
    //@ requires iEnd <= iBegin;
    //@ requires iEnd == iBegin;
    //@ requires iEnd != iBegin;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd < -1;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:216: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:50:) in method __HoudiniInvoker
        SetZero(arr, 0, 1);
               ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:50: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:216:
	public static void SetZero(int[] a, int iBegin, int iEnd) {
	                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:5: verify: Precondition conjunct is false: 1 < a.length
	//@ requires 1 < a.length;
	               ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:54: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:210:) in method SetZero
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
                                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:210: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:54:
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:60: verify: Precondition conjunct is false: 5 < a.length
    //@ requires 5 < a.length;
                   ^
6 verification failures

public class SetZero {

	//@ requires 5 >= a.length;
	//@ requires 2 != a.length;
	//@ requires 1 <= a.length;
	//@ requires 1 != a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin < 1;
	//@ requires iBegin <= 1;
	//@ requires iBegin != 1;
	//@ requires iBegin <= 0;
	//@ requires iBegin == 0;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd < a.length;
	//@ requires iEnd <= a.length;
	//@ requires iEnd != a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd != 2;
	//@ requires iEnd >= 2;
	//@ requires iEnd > 2;
	//@ requires iEnd != 1;
	//@ requires iEnd >= 1;
	//@ requires iEnd > 1;
	//@ requires iEnd != 0;
	//@ requires iEnd >= 0;
	//@ requires iEnd > 0;
	//@ requires iEnd != iBegin;
	//@ requires iEnd >= iBegin;
	//@ requires iEnd > iBegin;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin == a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin >= a.length;
    //@ requires iBegin > a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin == 5;
    //@ requires iBegin != 5;
    //@ requires iBegin >= 5;
    //@ requires iBegin > 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin == 2;
    //@ requires iBegin != 2;
    //@ requires iBegin >= 2;
    //@ requires iBegin > 2;
    //@ requires iBegin < 1;
    //@ requires iBegin <= 1;
    //@ requires iBegin == 1;
    //@ requires iBegin != 1;
    //@ requires iBegin >= 1;
    //@ requires iBegin > 1;
    //@ requires iBegin < 0;
    //@ requires iBegin <= 0;
    //@ requires iBegin == 0;
    //@ requires iBegin != 0;
    //@ requires iBegin >= 0;
    //@ requires iBegin > 0;
    //@ requires iBegin < -1;
    //@ requires iBegin <= -1;
    //@ requires iBegin == -1;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd < a.length;
    //@ requires iEnd <= a.length;
    //@ requires iEnd == a.length;
    //@ requires iEnd != a.length;
    //@ requires iEnd >= a.length;
    //@ requires iEnd > a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd == 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 5;
    //@ requires iEnd > 5;
    //@ requires iEnd < 2;
    //@ requires iEnd <= 2;
    //@ requires iEnd == 2;
    //@ requires iEnd != 2;
    //@ requires iEnd >= 2;
    //@ requires iEnd > 2;
    //@ requires iEnd < 1;
    //@ requires iEnd <= 1;
    //@ requires iEnd == 1;
    //@ requires iEnd != 1;
    //@ requires iEnd >= 1;
    //@ requires iEnd > 1;
    //@ requires iEnd < 0;
    //@ requires iEnd <= 0;
    //@ requires iEnd == 0;
    //@ requires iEnd != 0;
    //@ requires iEnd >= 0;
    //@ requires iEnd > 0;
    //@ requires iEnd < iBegin;
    //@ requires iEnd <= iBegin;
    //@ requires iEnd == iBegin;
    //@ requires iEnd != iBegin;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd < -1;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:215: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:49:) in method __HoudiniInvoker
        SetZero(arr, 0, 1);
               ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:49: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:215:
	public static void SetZero(int[] a, int iBegin, int iEnd) {
	                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:6: verify: Precondition conjunct is false: 1 != a.length
	//@ requires 1 != a.length;
	               ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:53: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:209:) in method SetZero
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
                                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:209: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:53:
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:59: verify: Precondition conjunct is false: 5 < a.length
    //@ requires 5 < a.length;
                   ^
6 verification failures

public class SetZero {

	//@ requires 5 >= a.length;
	//@ requires 2 != a.length;
	//@ requires 1 <= a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin < 1;
	//@ requires iBegin <= 1;
	//@ requires iBegin != 1;
	//@ requires iBegin <= 0;
	//@ requires iBegin == 0;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd < a.length;
	//@ requires iEnd <= a.length;
	//@ requires iEnd != a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd != 2;
	//@ requires iEnd >= 2;
	//@ requires iEnd > 2;
	//@ requires iEnd != 1;
	//@ requires iEnd >= 1;
	//@ requires iEnd > 1;
	//@ requires iEnd != 0;
	//@ requires iEnd >= 0;
	//@ requires iEnd > 0;
	//@ requires iEnd != iBegin;
	//@ requires iEnd >= iBegin;
	//@ requires iEnd > iBegin;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin == a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin >= a.length;
    //@ requires iBegin > a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin == 5;
    //@ requires iBegin != 5;
    //@ requires iBegin >= 5;
    //@ requires iBegin > 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin == 2;
    //@ requires iBegin != 2;
    //@ requires iBegin >= 2;
    //@ requires iBegin > 2;
    //@ requires iBegin < 1;
    //@ requires iBegin <= 1;
    //@ requires iBegin == 1;
    //@ requires iBegin != 1;
    //@ requires iBegin >= 1;
    //@ requires iBegin > 1;
    //@ requires iBegin < 0;
    //@ requires iBegin <= 0;
    //@ requires iBegin == 0;
    //@ requires iBegin != 0;
    //@ requires iBegin >= 0;
    //@ requires iBegin > 0;
    //@ requires iBegin < -1;
    //@ requires iBegin <= -1;
    //@ requires iBegin == -1;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd < a.length;
    //@ requires iEnd <= a.length;
    //@ requires iEnd == a.length;
    //@ requires iEnd != a.length;
    //@ requires iEnd >= a.length;
    //@ requires iEnd > a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd == 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 5;
    //@ requires iEnd > 5;
    //@ requires iEnd < 2;
    //@ requires iEnd <= 2;
    //@ requires iEnd == 2;
    //@ requires iEnd != 2;
    //@ requires iEnd >= 2;
    //@ requires iEnd > 2;
    //@ requires iEnd < 1;
    //@ requires iEnd <= 1;
    //@ requires iEnd == 1;
    //@ requires iEnd != 1;
    //@ requires iEnd >= 1;
    //@ requires iEnd > 1;
    //@ requires iEnd < 0;
    //@ requires iEnd <= 0;
    //@ requires iEnd == 0;
    //@ requires iEnd != 0;
    //@ requires iEnd >= 0;
    //@ requires iEnd > 0;
    //@ requires iEnd < iBegin;
    //@ requires iEnd <= iBegin;
    //@ requires iEnd == iBegin;
    //@ requires iEnd != iBegin;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd < -1;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:214: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:48:) in method __HoudiniInvoker
        SetZero(arr, 0, 1);
               ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:48: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:214:
	public static void SetZero(int[] a, int iBegin, int iEnd) {
	                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:27: verify: Precondition conjunct is false: iEnd < a.length
	//@ requires iEnd < a.length;
	                  ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:52: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:208:) in method SetZero
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
                                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:208: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:52:
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:58: verify: Precondition conjunct is false: 5 < a.length
    //@ requires 5 < a.length;
                   ^
6 verification failures

public class SetZero {

	//@ requires 5 >= a.length;
	//@ requires 2 != a.length;
	//@ requires 1 <= a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin < 1;
	//@ requires iBegin <= 1;
	//@ requires iBegin != 1;
	//@ requires iBegin <= 0;
	//@ requires iBegin == 0;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd <= a.length;
	//@ requires iEnd != a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd != 2;
	//@ requires iEnd >= 2;
	//@ requires iEnd > 2;
	//@ requires iEnd != 1;
	//@ requires iEnd >= 1;
	//@ requires iEnd > 1;
	//@ requires iEnd != 0;
	//@ requires iEnd >= 0;
	//@ requires iEnd > 0;
	//@ requires iEnd != iBegin;
	//@ requires iEnd >= iBegin;
	//@ requires iEnd > iBegin;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin == a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin >= a.length;
    //@ requires iBegin > a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin == 5;
    //@ requires iBegin != 5;
    //@ requires iBegin >= 5;
    //@ requires iBegin > 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin == 2;
    //@ requires iBegin != 2;
    //@ requires iBegin >= 2;
    //@ requires iBegin > 2;
    //@ requires iBegin < 1;
    //@ requires iBegin <= 1;
    //@ requires iBegin == 1;
    //@ requires iBegin != 1;
    //@ requires iBegin >= 1;
    //@ requires iBegin > 1;
    //@ requires iBegin < 0;
    //@ requires iBegin <= 0;
    //@ requires iBegin == 0;
    //@ requires iBegin != 0;
    //@ requires iBegin >= 0;
    //@ requires iBegin > 0;
    //@ requires iBegin < -1;
    //@ requires iBegin <= -1;
    //@ requires iBegin == -1;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd < a.length;
    //@ requires iEnd <= a.length;
    //@ requires iEnd == a.length;
    //@ requires iEnd != a.length;
    //@ requires iEnd >= a.length;
    //@ requires iEnd > a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd == 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 5;
    //@ requires iEnd > 5;
    //@ requires iEnd < 2;
    //@ requires iEnd <= 2;
    //@ requires iEnd == 2;
    //@ requires iEnd != 2;
    //@ requires iEnd >= 2;
    //@ requires iEnd > 2;
    //@ requires iEnd < 1;
    //@ requires iEnd <= 1;
    //@ requires iEnd == 1;
    //@ requires iEnd != 1;
    //@ requires iEnd >= 1;
    //@ requires iEnd > 1;
    //@ requires iEnd < 0;
    //@ requires iEnd <= 0;
    //@ requires iEnd == 0;
    //@ requires iEnd != 0;
    //@ requires iEnd >= 0;
    //@ requires iEnd > 0;
    //@ requires iEnd < iBegin;
    //@ requires iEnd <= iBegin;
    //@ requires iEnd == iBegin;
    //@ requires iEnd != iBegin;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd < -1;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:213: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:47:) in method __HoudiniInvoker
        SetZero(arr, 0, 1);
               ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:47: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:213:
	public static void SetZero(int[] a, int iBegin, int iEnd) {
	                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:28: verify: Precondition conjunct is false: iEnd != a.length
	//@ requires iEnd != a.length;
	                  ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:51: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:207:) in method SetZero
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
                                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:207: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:51:
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:57: verify: Precondition conjunct is false: 5 < a.length
    //@ requires 5 < a.length;
                   ^
6 verification failures

public class SetZero {

	//@ requires 5 >= a.length;
	//@ requires 2 != a.length;
	//@ requires 1 <= a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin < 1;
	//@ requires iBegin <= 1;
	//@ requires iBegin != 1;
	//@ requires iBegin <= 0;
	//@ requires iBegin == 0;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd <= a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd != 2;
	//@ requires iEnd >= 2;
	//@ requires iEnd > 2;
	//@ requires iEnd != 1;
	//@ requires iEnd >= 1;
	//@ requires iEnd > 1;
	//@ requires iEnd != 0;
	//@ requires iEnd >= 0;
	//@ requires iEnd > 0;
	//@ requires iEnd != iBegin;
	//@ requires iEnd >= iBegin;
	//@ requires iEnd > iBegin;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin == a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin >= a.length;
    //@ requires iBegin > a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin == 5;
    //@ requires iBegin != 5;
    //@ requires iBegin >= 5;
    //@ requires iBegin > 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin == 2;
    //@ requires iBegin != 2;
    //@ requires iBegin >= 2;
    //@ requires iBegin > 2;
    //@ requires iBegin < 1;
    //@ requires iBegin <= 1;
    //@ requires iBegin == 1;
    //@ requires iBegin != 1;
    //@ requires iBegin >= 1;
    //@ requires iBegin > 1;
    //@ requires iBegin < 0;
    //@ requires iBegin <= 0;
    //@ requires iBegin == 0;
    //@ requires iBegin != 0;
    //@ requires iBegin >= 0;
    //@ requires iBegin > 0;
    //@ requires iBegin < -1;
    //@ requires iBegin <= -1;
    //@ requires iBegin == -1;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd < a.length;
    //@ requires iEnd <= a.length;
    //@ requires iEnd == a.length;
    //@ requires iEnd != a.length;
    //@ requires iEnd >= a.length;
    //@ requires iEnd > a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd == 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 5;
    //@ requires iEnd > 5;
    //@ requires iEnd < 2;
    //@ requires iEnd <= 2;
    //@ requires iEnd == 2;
    //@ requires iEnd != 2;
    //@ requires iEnd >= 2;
    //@ requires iEnd > 2;
    //@ requires iEnd < 1;
    //@ requires iEnd <= 1;
    //@ requires iEnd == 1;
    //@ requires iEnd != 1;
    //@ requires iEnd >= 1;
    //@ requires iEnd > 1;
    //@ requires iEnd < 0;
    //@ requires iEnd <= 0;
    //@ requires iEnd == 0;
    //@ requires iEnd != 0;
    //@ requires iEnd >= 0;
    //@ requires iEnd > 0;
    //@ requires iEnd < iBegin;
    //@ requires iEnd <= iBegin;
    //@ requires iEnd == iBegin;
    //@ requires iEnd != iBegin;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd < -1;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:212: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:46:) in method __HoudiniInvoker
        SetZero(arr, 0, 1);
               ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:46: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:212:
	public static void SetZero(int[] a, int iBegin, int iEnd) {
	                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:32: verify: Precondition conjunct is false: iEnd >= 2
	//@ requires iEnd >= 2;
	                  ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:50: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:206:) in method SetZero
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
                                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:206: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:50:
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:56: verify: Precondition conjunct is false: 5 < a.length
    //@ requires 5 < a.length;
                   ^
6 verification failures

public class SetZero {

	//@ requires 5 >= a.length;
	//@ requires 2 != a.length;
	//@ requires 1 <= a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin < 1;
	//@ requires iBegin <= 1;
	//@ requires iBegin != 1;
	//@ requires iBegin <= 0;
	//@ requires iBegin == 0;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd <= a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd != 2;
	//@ requires iEnd > 2;
	//@ requires iEnd != 1;
	//@ requires iEnd >= 1;
	//@ requires iEnd > 1;
	//@ requires iEnd != 0;
	//@ requires iEnd >= 0;
	//@ requires iEnd > 0;
	//@ requires iEnd != iBegin;
	//@ requires iEnd >= iBegin;
	//@ requires iEnd > iBegin;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin == a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin >= a.length;
    //@ requires iBegin > a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin == 5;
    //@ requires iBegin != 5;
    //@ requires iBegin >= 5;
    //@ requires iBegin > 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin == 2;
    //@ requires iBegin != 2;
    //@ requires iBegin >= 2;
    //@ requires iBegin > 2;
    //@ requires iBegin < 1;
    //@ requires iBegin <= 1;
    //@ requires iBegin == 1;
    //@ requires iBegin != 1;
    //@ requires iBegin >= 1;
    //@ requires iBegin > 1;
    //@ requires iBegin < 0;
    //@ requires iBegin <= 0;
    //@ requires iBegin == 0;
    //@ requires iBegin != 0;
    //@ requires iBegin >= 0;
    //@ requires iBegin > 0;
    //@ requires iBegin < -1;
    //@ requires iBegin <= -1;
    //@ requires iBegin == -1;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd < a.length;
    //@ requires iEnd <= a.length;
    //@ requires iEnd == a.length;
    //@ requires iEnd != a.length;
    //@ requires iEnd >= a.length;
    //@ requires iEnd > a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd == 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 5;
    //@ requires iEnd > 5;
    //@ requires iEnd < 2;
    //@ requires iEnd <= 2;
    //@ requires iEnd == 2;
    //@ requires iEnd != 2;
    //@ requires iEnd >= 2;
    //@ requires iEnd > 2;
    //@ requires iEnd < 1;
    //@ requires iEnd <= 1;
    //@ requires iEnd == 1;
    //@ requires iEnd != 1;
    //@ requires iEnd >= 1;
    //@ requires iEnd > 1;
    //@ requires iEnd < 0;
    //@ requires iEnd <= 0;
    //@ requires iEnd == 0;
    //@ requires iEnd != 0;
    //@ requires iEnd >= 0;
    //@ requires iEnd > 0;
    //@ requires iEnd < iBegin;
    //@ requires iEnd <= iBegin;
    //@ requires iEnd == iBegin;
    //@ requires iEnd != iBegin;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd < -1;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:211: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:45:) in method __HoudiniInvoker
        SetZero(arr, 0, 1);
               ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:45: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:211:
	public static void SetZero(int[] a, int iBegin, int iEnd) {
	                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:32: verify: Precondition conjunct is false: iEnd > 2
	//@ requires iEnd > 2;
	                  ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:49: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:205:) in method SetZero
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
                                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:205: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:49:
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:55: verify: Precondition conjunct is false: 5 < a.length
    //@ requires 5 < a.length;
                   ^
6 verification failures

public class SetZero {

	//@ requires 5 >= a.length;
	//@ requires 2 != a.length;
	//@ requires 1 <= a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin < 1;
	//@ requires iBegin <= 1;
	//@ requires iBegin != 1;
	//@ requires iBegin <= 0;
	//@ requires iBegin == 0;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd <= a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd != 2;
	//@ requires iEnd != 1;
	//@ requires iEnd >= 1;
	//@ requires iEnd > 1;
	//@ requires iEnd != 0;
	//@ requires iEnd >= 0;
	//@ requires iEnd > 0;
	//@ requires iEnd != iBegin;
	//@ requires iEnd >= iBegin;
	//@ requires iEnd > iBegin;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin == a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin >= a.length;
    //@ requires iBegin > a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin == 5;
    //@ requires iBegin != 5;
    //@ requires iBegin >= 5;
    //@ requires iBegin > 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin == 2;
    //@ requires iBegin != 2;
    //@ requires iBegin >= 2;
    //@ requires iBegin > 2;
    //@ requires iBegin < 1;
    //@ requires iBegin <= 1;
    //@ requires iBegin == 1;
    //@ requires iBegin != 1;
    //@ requires iBegin >= 1;
    //@ requires iBegin > 1;
    //@ requires iBegin < 0;
    //@ requires iBegin <= 0;
    //@ requires iBegin == 0;
    //@ requires iBegin != 0;
    //@ requires iBegin >= 0;
    //@ requires iBegin > 0;
    //@ requires iBegin < -1;
    //@ requires iBegin <= -1;
    //@ requires iBegin == -1;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd < a.length;
    //@ requires iEnd <= a.length;
    //@ requires iEnd == a.length;
    //@ requires iEnd != a.length;
    //@ requires iEnd >= a.length;
    //@ requires iEnd > a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd == 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 5;
    //@ requires iEnd > 5;
    //@ requires iEnd < 2;
    //@ requires iEnd <= 2;
    //@ requires iEnd == 2;
    //@ requires iEnd != 2;
    //@ requires iEnd >= 2;
    //@ requires iEnd > 2;
    //@ requires iEnd < 1;
    //@ requires iEnd <= 1;
    //@ requires iEnd == 1;
    //@ requires iEnd != 1;
    //@ requires iEnd >= 1;
    //@ requires iEnd > 1;
    //@ requires iEnd < 0;
    //@ requires iEnd <= 0;
    //@ requires iEnd == 0;
    //@ requires iEnd != 0;
    //@ requires iEnd >= 0;
    //@ requires iEnd > 0;
    //@ requires iEnd < iBegin;
    //@ requires iEnd <= iBegin;
    //@ requires iEnd == iBegin;
    //@ requires iEnd != iBegin;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd < -1;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:210: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:44:) in method __HoudiniInvoker
        SetZero(arr, 0, 1);
               ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:44: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:210:
	public static void SetZero(int[] a, int iBegin, int iEnd) {
	                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:32: verify: Precondition conjunct is false: iEnd != 1
	//@ requires iEnd != 1;
	                  ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:48: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:204:) in method SetZero
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
                                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:204: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:48:
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:54: verify: Precondition conjunct is false: 5 < a.length
    //@ requires 5 < a.length;
                   ^
6 verification failures

public class SetZero {

	//@ requires 5 >= a.length;
	//@ requires 2 != a.length;
	//@ requires 1 <= a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin < 1;
	//@ requires iBegin <= 1;
	//@ requires iBegin != 1;
	//@ requires iBegin <= 0;
	//@ requires iBegin == 0;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd <= a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd != 2;
	//@ requires iEnd >= 1;
	//@ requires iEnd > 1;
	//@ requires iEnd != 0;
	//@ requires iEnd >= 0;
	//@ requires iEnd > 0;
	//@ requires iEnd != iBegin;
	//@ requires iEnd >= iBegin;
	//@ requires iEnd > iBegin;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin == a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin >= a.length;
    //@ requires iBegin > a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin == 5;
    //@ requires iBegin != 5;
    //@ requires iBegin >= 5;
    //@ requires iBegin > 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin == 2;
    //@ requires iBegin != 2;
    //@ requires iBegin >= 2;
    //@ requires iBegin > 2;
    //@ requires iBegin < 1;
    //@ requires iBegin <= 1;
    //@ requires iBegin == 1;
    //@ requires iBegin != 1;
    //@ requires iBegin >= 1;
    //@ requires iBegin > 1;
    //@ requires iBegin < 0;
    //@ requires iBegin <= 0;
    //@ requires iBegin == 0;
    //@ requires iBegin != 0;
    //@ requires iBegin >= 0;
    //@ requires iBegin > 0;
    //@ requires iBegin < -1;
    //@ requires iBegin <= -1;
    //@ requires iBegin == -1;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd < a.length;
    //@ requires iEnd <= a.length;
    //@ requires iEnd == a.length;
    //@ requires iEnd != a.length;
    //@ requires iEnd >= a.length;
    //@ requires iEnd > a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd == 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 5;
    //@ requires iEnd > 5;
    //@ requires iEnd < 2;
    //@ requires iEnd <= 2;
    //@ requires iEnd == 2;
    //@ requires iEnd != 2;
    //@ requires iEnd >= 2;
    //@ requires iEnd > 2;
    //@ requires iEnd < 1;
    //@ requires iEnd <= 1;
    //@ requires iEnd == 1;
    //@ requires iEnd != 1;
    //@ requires iEnd >= 1;
    //@ requires iEnd > 1;
    //@ requires iEnd < 0;
    //@ requires iEnd <= 0;
    //@ requires iEnd == 0;
    //@ requires iEnd != 0;
    //@ requires iEnd >= 0;
    //@ requires iEnd > 0;
    //@ requires iEnd < iBegin;
    //@ requires iEnd <= iBegin;
    //@ requires iEnd == iBegin;
    //@ requires iEnd != iBegin;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd < -1;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:209: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:43:) in method __HoudiniInvoker
        SetZero(arr, 0, 1);
               ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:43: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:209:
	public static void SetZero(int[] a, int iBegin, int iEnd) {
	                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:33: verify: Precondition conjunct is false: iEnd > 1
	//@ requires iEnd > 1;
	                  ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:203:) in method SetZero
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
                                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:203: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:47:
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:53: verify: Precondition conjunct is false: 5 < a.length
    //@ requires 5 < a.length;
                   ^
6 verification failures

public class SetZero {

	//@ requires 5 >= a.length;
	//@ requires 2 != a.length;
	//@ requires 1 <= a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin < 1;
	//@ requires iBegin <= 1;
	//@ requires iBegin != 1;
	//@ requires iBegin <= 0;
	//@ requires iBegin == 0;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd <= a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd != 2;
	//@ requires iEnd >= 1;
	//@ requires iEnd != 0;
	//@ requires iEnd >= 0;
	//@ requires iEnd > 0;
	//@ requires iEnd != iBegin;
	//@ requires iEnd >= iBegin;
	//@ requires iEnd > iBegin;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin == a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin >= a.length;
    //@ requires iBegin > a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin == 5;
    //@ requires iBegin != 5;
    //@ requires iBegin >= 5;
    //@ requires iBegin > 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin == 2;
    //@ requires iBegin != 2;
    //@ requires iBegin >= 2;
    //@ requires iBegin > 2;
    //@ requires iBegin < 1;
    //@ requires iBegin <= 1;
    //@ requires iBegin == 1;
    //@ requires iBegin != 1;
    //@ requires iBegin >= 1;
    //@ requires iBegin > 1;
    //@ requires iBegin < 0;
    //@ requires iBegin <= 0;
    //@ requires iBegin == 0;
    //@ requires iBegin != 0;
    //@ requires iBegin >= 0;
    //@ requires iBegin > 0;
    //@ requires iBegin < -1;
    //@ requires iBegin <= -1;
    //@ requires iBegin == -1;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd < a.length;
    //@ requires iEnd <= a.length;
    //@ requires iEnd == a.length;
    //@ requires iEnd != a.length;
    //@ requires iEnd >= a.length;
    //@ requires iEnd > a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd == 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 5;
    //@ requires iEnd > 5;
    //@ requires iEnd < 2;
    //@ requires iEnd <= 2;
    //@ requires iEnd == 2;
    //@ requires iEnd != 2;
    //@ requires iEnd >= 2;
    //@ requires iEnd > 2;
    //@ requires iEnd < 1;
    //@ requires iEnd <= 1;
    //@ requires iEnd == 1;
    //@ requires iEnd != 1;
    //@ requires iEnd >= 1;
    //@ requires iEnd > 1;
    //@ requires iEnd < 0;
    //@ requires iEnd <= 0;
    //@ requires iEnd == 0;
    //@ requires iEnd != 0;
    //@ requires iEnd >= 0;
    //@ requires iEnd > 0;
    //@ requires iEnd < iBegin;
    //@ requires iEnd <= iBegin;
    //@ requires iEnd == iBegin;
    //@ requires iEnd != iBegin;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd < -1;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:210: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:42:) in method __HoudiniInvoker
        SetZero(arr, 1, 2);
               ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:42: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:210:
	public static void SetZero(int[] a, int iBegin, int iEnd) {
	                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:4: verify: Precondition conjunct is false: 2 != a.length
	//@ requires 2 != a.length;
	               ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:46: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:202:) in method SetZero
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
                                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:202: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:46:
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:52: verify: Precondition conjunct is false: 5 < a.length
    //@ requires 5 < a.length;
                   ^
6 verification failures

public class SetZero {

	//@ requires 5 >= a.length;
	//@ requires 1 <= a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin < 1;
	//@ requires iBegin <= 1;
	//@ requires iBegin != 1;
	//@ requires iBegin <= 0;
	//@ requires iBegin == 0;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd <= a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd != 2;
	//@ requires iEnd >= 1;
	//@ requires iEnd != 0;
	//@ requires iEnd >= 0;
	//@ requires iEnd > 0;
	//@ requires iEnd != iBegin;
	//@ requires iEnd >= iBegin;
	//@ requires iEnd > iBegin;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin == a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin >= a.length;
    //@ requires iBegin > a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin == 5;
    //@ requires iBegin != 5;
    //@ requires iBegin >= 5;
    //@ requires iBegin > 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin == 2;
    //@ requires iBegin != 2;
    //@ requires iBegin >= 2;
    //@ requires iBegin > 2;
    //@ requires iBegin < 1;
    //@ requires iBegin <= 1;
    //@ requires iBegin == 1;
    //@ requires iBegin != 1;
    //@ requires iBegin >= 1;
    //@ requires iBegin > 1;
    //@ requires iBegin < 0;
    //@ requires iBegin <= 0;
    //@ requires iBegin == 0;
    //@ requires iBegin != 0;
    //@ requires iBegin >= 0;
    //@ requires iBegin > 0;
    //@ requires iBegin < -1;
    //@ requires iBegin <= -1;
    //@ requires iBegin == -1;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd < a.length;
    //@ requires iEnd <= a.length;
    //@ requires iEnd == a.length;
    //@ requires iEnd != a.length;
    //@ requires iEnd >= a.length;
    //@ requires iEnd > a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd == 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 5;
    //@ requires iEnd > 5;
    //@ requires iEnd < 2;
    //@ requires iEnd <= 2;
    //@ requires iEnd == 2;
    //@ requires iEnd != 2;
    //@ requires iEnd >= 2;
    //@ requires iEnd > 2;
    //@ requires iEnd < 1;
    //@ requires iEnd <= 1;
    //@ requires iEnd == 1;
    //@ requires iEnd != 1;
    //@ requires iEnd >= 1;
    //@ requires iEnd > 1;
    //@ requires iEnd < 0;
    //@ requires iEnd <= 0;
    //@ requires iEnd == 0;
    //@ requires iEnd != 0;
    //@ requires iEnd >= 0;
    //@ requires iEnd > 0;
    //@ requires iEnd < iBegin;
    //@ requires iEnd <= iBegin;
    //@ requires iEnd == iBegin;
    //@ requires iEnd != iBegin;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd < -1;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:209: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:41:) in method __HoudiniInvoker
        SetZero(arr, 1, 2);
               ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:41: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:209:
	public static void SetZero(int[] a, int iBegin, int iEnd) {
	                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:17: verify: Precondition conjunct is false: iBegin < 1
	//@ requires iBegin < 1;
	                    ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:45: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:201:) in method SetZero
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
                                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:201: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:45:
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:51: verify: Precondition conjunct is false: 5 < a.length
    //@ requires 5 < a.length;
                   ^
6 verification failures

public class SetZero {

	//@ requires 5 >= a.length;
	//@ requires 1 <= a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin <= 1;
	//@ requires iBegin != 1;
	//@ requires iBegin <= 0;
	//@ requires iBegin == 0;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd <= a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd != 2;
	//@ requires iEnd >= 1;
	//@ requires iEnd != 0;
	//@ requires iEnd >= 0;
	//@ requires iEnd > 0;
	//@ requires iEnd != iBegin;
	//@ requires iEnd >= iBegin;
	//@ requires iEnd > iBegin;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin == a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin >= a.length;
    //@ requires iBegin > a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin == 5;
    //@ requires iBegin != 5;
    //@ requires iBegin >= 5;
    //@ requires iBegin > 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin == 2;
    //@ requires iBegin != 2;
    //@ requires iBegin >= 2;
    //@ requires iBegin > 2;
    //@ requires iBegin < 1;
    //@ requires iBegin <= 1;
    //@ requires iBegin == 1;
    //@ requires iBegin != 1;
    //@ requires iBegin >= 1;
    //@ requires iBegin > 1;
    //@ requires iBegin < 0;
    //@ requires iBegin <= 0;
    //@ requires iBegin == 0;
    //@ requires iBegin != 0;
    //@ requires iBegin >= 0;
    //@ requires iBegin > 0;
    //@ requires iBegin < -1;
    //@ requires iBegin <= -1;
    //@ requires iBegin == -1;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd < a.length;
    //@ requires iEnd <= a.length;
    //@ requires iEnd == a.length;
    //@ requires iEnd != a.length;
    //@ requires iEnd >= a.length;
    //@ requires iEnd > a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd == 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 5;
    //@ requires iEnd > 5;
    //@ requires iEnd < 2;
    //@ requires iEnd <= 2;
    //@ requires iEnd == 2;
    //@ requires iEnd != 2;
    //@ requires iEnd >= 2;
    //@ requires iEnd > 2;
    //@ requires iEnd < 1;
    //@ requires iEnd <= 1;
    //@ requires iEnd == 1;
    //@ requires iEnd != 1;
    //@ requires iEnd >= 1;
    //@ requires iEnd > 1;
    //@ requires iEnd < 0;
    //@ requires iEnd <= 0;
    //@ requires iEnd == 0;
    //@ requires iEnd != 0;
    //@ requires iEnd >= 0;
    //@ requires iEnd > 0;
    //@ requires iEnd < iBegin;
    //@ requires iEnd <= iBegin;
    //@ requires iEnd == iBegin;
    //@ requires iEnd != iBegin;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd < -1;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:208: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:40:) in method __HoudiniInvoker
        SetZero(arr, 1, 2);
               ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:40: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:208:
	public static void SetZero(int[] a, int iBegin, int iEnd) {
	                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:18: verify: Precondition conjunct is false: iBegin != 1
	//@ requires iBegin != 1;
	                    ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:44: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:200:) in method SetZero
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
                                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:200: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:44:
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:50: verify: Precondition conjunct is false: 5 < a.length
    //@ requires 5 < a.length;
                   ^
6 verification failures

public class SetZero {

	//@ requires 5 >= a.length;
	//@ requires 1 <= a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin <= 1;
	//@ requires iBegin <= 0;
	//@ requires iBegin == 0;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd <= a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd != 2;
	//@ requires iEnd >= 1;
	//@ requires iEnd != 0;
	//@ requires iEnd >= 0;
	//@ requires iEnd > 0;
	//@ requires iEnd != iBegin;
	//@ requires iEnd >= iBegin;
	//@ requires iEnd > iBegin;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin == a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin >= a.length;
    //@ requires iBegin > a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin == 5;
    //@ requires iBegin != 5;
    //@ requires iBegin >= 5;
    //@ requires iBegin > 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin == 2;
    //@ requires iBegin != 2;
    //@ requires iBegin >= 2;
    //@ requires iBegin > 2;
    //@ requires iBegin < 1;
    //@ requires iBegin <= 1;
    //@ requires iBegin == 1;
    //@ requires iBegin != 1;
    //@ requires iBegin >= 1;
    //@ requires iBegin > 1;
    //@ requires iBegin < 0;
    //@ requires iBegin <= 0;
    //@ requires iBegin == 0;
    //@ requires iBegin != 0;
    //@ requires iBegin >= 0;
    //@ requires iBegin > 0;
    //@ requires iBegin < -1;
    //@ requires iBegin <= -1;
    //@ requires iBegin == -1;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd < a.length;
    //@ requires iEnd <= a.length;
    //@ requires iEnd == a.length;
    //@ requires iEnd != a.length;
    //@ requires iEnd >= a.length;
    //@ requires iEnd > a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd == 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 5;
    //@ requires iEnd > 5;
    //@ requires iEnd < 2;
    //@ requires iEnd <= 2;
    //@ requires iEnd == 2;
    //@ requires iEnd != 2;
    //@ requires iEnd >= 2;
    //@ requires iEnd > 2;
    //@ requires iEnd < 1;
    //@ requires iEnd <= 1;
    //@ requires iEnd == 1;
    //@ requires iEnd != 1;
    //@ requires iEnd >= 1;
    //@ requires iEnd > 1;
    //@ requires iEnd < 0;
    //@ requires iEnd <= 0;
    //@ requires iEnd == 0;
    //@ requires iEnd != 0;
    //@ requires iEnd >= 0;
    //@ requires iEnd > 0;
    //@ requires iEnd < iBegin;
    //@ requires iEnd <= iBegin;
    //@ requires iEnd == iBegin;
    //@ requires iEnd != iBegin;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd < -1;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:207: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:39:) in method __HoudiniInvoker
        SetZero(arr, 1, 2);
               ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:39: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:207:
	public static void SetZero(int[] a, int iBegin, int iEnd) {
	                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:18: verify: Precondition conjunct is false: iBegin <= 0
	//@ requires iBegin <= 0;
	                    ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:43: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:199:) in method SetZero
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
                                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:199: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:43:
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:49: verify: Precondition conjunct is false: 5 < a.length
    //@ requires 5 < a.length;
                   ^
6 verification failures

public class SetZero {

	//@ requires 5 >= a.length;
	//@ requires 1 <= a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin <= 1;
	//@ requires iBegin == 0;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd <= a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd != 2;
	//@ requires iEnd >= 1;
	//@ requires iEnd != 0;
	//@ requires iEnd >= 0;
	//@ requires iEnd > 0;
	//@ requires iEnd != iBegin;
	//@ requires iEnd >= iBegin;
	//@ requires iEnd > iBegin;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin == a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin >= a.length;
    //@ requires iBegin > a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin == 5;
    //@ requires iBegin != 5;
    //@ requires iBegin >= 5;
    //@ requires iBegin > 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin == 2;
    //@ requires iBegin != 2;
    //@ requires iBegin >= 2;
    //@ requires iBegin > 2;
    //@ requires iBegin < 1;
    //@ requires iBegin <= 1;
    //@ requires iBegin == 1;
    //@ requires iBegin != 1;
    //@ requires iBegin >= 1;
    //@ requires iBegin > 1;
    //@ requires iBegin < 0;
    //@ requires iBegin <= 0;
    //@ requires iBegin == 0;
    //@ requires iBegin != 0;
    //@ requires iBegin >= 0;
    //@ requires iBegin > 0;
    //@ requires iBegin < -1;
    //@ requires iBegin <= -1;
    //@ requires iBegin == -1;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd < a.length;
    //@ requires iEnd <= a.length;
    //@ requires iEnd == a.length;
    //@ requires iEnd != a.length;
    //@ requires iEnd >= a.length;
    //@ requires iEnd > a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd == 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 5;
    //@ requires iEnd > 5;
    //@ requires iEnd < 2;
    //@ requires iEnd <= 2;
    //@ requires iEnd == 2;
    //@ requires iEnd != 2;
    //@ requires iEnd >= 2;
    //@ requires iEnd > 2;
    //@ requires iEnd < 1;
    //@ requires iEnd <= 1;
    //@ requires iEnd == 1;
    //@ requires iEnd != 1;
    //@ requires iEnd >= 1;
    //@ requires iEnd > 1;
    //@ requires iEnd < 0;
    //@ requires iEnd <= 0;
    //@ requires iEnd == 0;
    //@ requires iEnd != 0;
    //@ requires iEnd >= 0;
    //@ requires iEnd > 0;
    //@ requires iEnd < iBegin;
    //@ requires iEnd <= iBegin;
    //@ requires iEnd == iBegin;
    //@ requires iEnd != iBegin;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd < -1;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:206: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:38:) in method __HoudiniInvoker
        SetZero(arr, 1, 2);
               ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:38: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:206:
	public static void SetZero(int[] a, int iBegin, int iEnd) {
	                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:18: verify: Precondition conjunct is false: iBegin == 0
	//@ requires iBegin == 0;
	                    ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:42: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:198:) in method SetZero
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
                                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:198: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:42:
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:48: verify: Precondition conjunct is false: 5 < a.length
    //@ requires 5 < a.length;
                   ^
6 verification failures

public class SetZero {

	//@ requires 5 >= a.length;
	//@ requires 1 <= a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin <= 1;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd <= a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd != 2;
	//@ requires iEnd >= 1;
	//@ requires iEnd != 0;
	//@ requires iEnd >= 0;
	//@ requires iEnd > 0;
	//@ requires iEnd != iBegin;
	//@ requires iEnd >= iBegin;
	//@ requires iEnd > iBegin;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin == a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin >= a.length;
    //@ requires iBegin > a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin == 5;
    //@ requires iBegin != 5;
    //@ requires iBegin >= 5;
    //@ requires iBegin > 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin == 2;
    //@ requires iBegin != 2;
    //@ requires iBegin >= 2;
    //@ requires iBegin > 2;
    //@ requires iBegin < 1;
    //@ requires iBegin <= 1;
    //@ requires iBegin == 1;
    //@ requires iBegin != 1;
    //@ requires iBegin >= 1;
    //@ requires iBegin > 1;
    //@ requires iBegin < 0;
    //@ requires iBegin <= 0;
    //@ requires iBegin == 0;
    //@ requires iBegin != 0;
    //@ requires iBegin >= 0;
    //@ requires iBegin > 0;
    //@ requires iBegin < -1;
    //@ requires iBegin <= -1;
    //@ requires iBegin == -1;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd < a.length;
    //@ requires iEnd <= a.length;
    //@ requires iEnd == a.length;
    //@ requires iEnd != a.length;
    //@ requires iEnd >= a.length;
    //@ requires iEnd > a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd == 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 5;
    //@ requires iEnd > 5;
    //@ requires iEnd < 2;
    //@ requires iEnd <= 2;
    //@ requires iEnd == 2;
    //@ requires iEnd != 2;
    //@ requires iEnd >= 2;
    //@ requires iEnd > 2;
    //@ requires iEnd < 1;
    //@ requires iEnd <= 1;
    //@ requires iEnd == 1;
    //@ requires iEnd != 1;
    //@ requires iEnd >= 1;
    //@ requires iEnd > 1;
    //@ requires iEnd < 0;
    //@ requires iEnd <= 0;
    //@ requires iEnd == 0;
    //@ requires iEnd != 0;
    //@ requires iEnd >= 0;
    //@ requires iEnd > 0;
    //@ requires iEnd < iBegin;
    //@ requires iEnd <= iBegin;
    //@ requires iEnd == iBegin;
    //@ requires iEnd != iBegin;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd < -1;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:205: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:37:) in method __HoudiniInvoker
        SetZero(arr, 1, 2);
               ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:37: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:205:
	public static void SetZero(int[] a, int iBegin, int iEnd) {
	                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:26: verify: Precondition conjunct is false: iEnd != 2
	//@ requires iEnd != 2;
	                  ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:41: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:197:) in method SetZero
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
                                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:197: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:41:
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:47: verify: Precondition conjunct is false: 5 < a.length
    //@ requires 5 < a.length;
                   ^
6 verification failures

public class SetZero {

	//@ requires 5 >= a.length;
	//@ requires 1 <= a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin <= 1;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd <= a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 1;
	//@ requires iEnd != 0;
	//@ requires iEnd >= 0;
	//@ requires iEnd > 0;
	//@ requires iEnd != iBegin;
	//@ requires iEnd >= iBegin;
	//@ requires iEnd > iBegin;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin == a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin >= a.length;
    //@ requires iBegin > a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin == 5;
    //@ requires iBegin != 5;
    //@ requires iBegin >= 5;
    //@ requires iBegin > 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin == 2;
    //@ requires iBegin != 2;
    //@ requires iBegin >= 2;
    //@ requires iBegin > 2;
    //@ requires iBegin < 1;
    //@ requires iBegin <= 1;
    //@ requires iBegin == 1;
    //@ requires iBegin != 1;
    //@ requires iBegin >= 1;
    //@ requires iBegin > 1;
    //@ requires iBegin < 0;
    //@ requires iBegin <= 0;
    //@ requires iBegin == 0;
    //@ requires iBegin != 0;
    //@ requires iBegin >= 0;
    //@ requires iBegin > 0;
    //@ requires iBegin < -1;
    //@ requires iBegin <= -1;
    //@ requires iBegin == -1;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd < a.length;
    //@ requires iEnd <= a.length;
    //@ requires iEnd == a.length;
    //@ requires iEnd != a.length;
    //@ requires iEnd >= a.length;
    //@ requires iEnd > a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd == 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 5;
    //@ requires iEnd > 5;
    //@ requires iEnd < 2;
    //@ requires iEnd <= 2;
    //@ requires iEnd == 2;
    //@ requires iEnd != 2;
    //@ requires iEnd >= 2;
    //@ requires iEnd > 2;
    //@ requires iEnd < 1;
    //@ requires iEnd <= 1;
    //@ requires iEnd == 1;
    //@ requires iEnd != 1;
    //@ requires iEnd >= 1;
    //@ requires iEnd > 1;
    //@ requires iEnd < 0;
    //@ requires iEnd <= 0;
    //@ requires iEnd == 0;
    //@ requires iEnd != 0;
    //@ requires iEnd >= 0;
    //@ requires iEnd > 0;
    //@ requires iEnd < iBegin;
    //@ requires iEnd <= iBegin;
    //@ requires iEnd == iBegin;
    //@ requires iEnd != iBegin;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd < -1;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:208: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:36:) in method __HoudiniInvoker
        SetZero(arr, 1, 0);
               ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:36: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:208:
	public static void SetZero(int[] a, int iBegin, int iEnd) {
	                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:26: verify: Precondition conjunct is false: iEnd >= 1
	//@ requires iEnd >= 1;
	                  ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:40: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:196:) in method SetZero
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
                                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:196: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:40:
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:46: verify: Precondition conjunct is false: 5 < a.length
    //@ requires 5 < a.length;
                   ^
6 verification failures

public class SetZero {

	//@ requires 5 >= a.length;
	//@ requires 1 <= a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin <= 1;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd <= a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd != 0;
	//@ requires iEnd >= 0;
	//@ requires iEnd > 0;
	//@ requires iEnd != iBegin;
	//@ requires iEnd >= iBegin;
	//@ requires iEnd > iBegin;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin == a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin >= a.length;
    //@ requires iBegin > a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin == 5;
    //@ requires iBegin != 5;
    //@ requires iBegin >= 5;
    //@ requires iBegin > 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin == 2;
    //@ requires iBegin != 2;
    //@ requires iBegin >= 2;
    //@ requires iBegin > 2;
    //@ requires iBegin < 1;
    //@ requires iBegin <= 1;
    //@ requires iBegin == 1;
    //@ requires iBegin != 1;
    //@ requires iBegin >= 1;
    //@ requires iBegin > 1;
    //@ requires iBegin < 0;
    //@ requires iBegin <= 0;
    //@ requires iBegin == 0;
    //@ requires iBegin != 0;
    //@ requires iBegin >= 0;
    //@ requires iBegin > 0;
    //@ requires iBegin < -1;
    //@ requires iBegin <= -1;
    //@ requires iBegin == -1;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd < a.length;
    //@ requires iEnd <= a.length;
    //@ requires iEnd == a.length;
    //@ requires iEnd != a.length;
    //@ requires iEnd >= a.length;
    //@ requires iEnd > a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd == 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 5;
    //@ requires iEnd > 5;
    //@ requires iEnd < 2;
    //@ requires iEnd <= 2;
    //@ requires iEnd == 2;
    //@ requires iEnd != 2;
    //@ requires iEnd >= 2;
    //@ requires iEnd > 2;
    //@ requires iEnd < 1;
    //@ requires iEnd <= 1;
    //@ requires iEnd == 1;
    //@ requires iEnd != 1;
    //@ requires iEnd >= 1;
    //@ requires iEnd > 1;
    //@ requires iEnd < 0;
    //@ requires iEnd <= 0;
    //@ requires iEnd == 0;
    //@ requires iEnd != 0;
    //@ requires iEnd >= 0;
    //@ requires iEnd > 0;
    //@ requires iEnd < iBegin;
    //@ requires iEnd <= iBegin;
    //@ requires iEnd == iBegin;
    //@ requires iEnd != iBegin;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd < -1;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:207: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:35:) in method __HoudiniInvoker
        SetZero(arr, 1, 0);
               ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:35: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:207:
	public static void SetZero(int[] a, int iBegin, int iEnd) {
	                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:26: verify: Precondition conjunct is false: iEnd != 0
	//@ requires iEnd != 0;
	                  ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:39: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:195:) in method SetZero
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
                                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:195: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:39:
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:45: verify: Precondition conjunct is false: 5 < a.length
    //@ requires 5 < a.length;
                   ^
6 verification failures

public class SetZero {

	//@ requires 5 >= a.length;
	//@ requires 1 <= a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin <= 1;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd <= a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 0;
	//@ requires iEnd > 0;
	//@ requires iEnd != iBegin;
	//@ requires iEnd >= iBegin;
	//@ requires iEnd > iBegin;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin == a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin >= a.length;
    //@ requires iBegin > a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin == 5;
    //@ requires iBegin != 5;
    //@ requires iBegin >= 5;
    //@ requires iBegin > 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin == 2;
    //@ requires iBegin != 2;
    //@ requires iBegin >= 2;
    //@ requires iBegin > 2;
    //@ requires iBegin < 1;
    //@ requires iBegin <= 1;
    //@ requires iBegin == 1;
    //@ requires iBegin != 1;
    //@ requires iBegin >= 1;
    //@ requires iBegin > 1;
    //@ requires iBegin < 0;
    //@ requires iBegin <= 0;
    //@ requires iBegin == 0;
    //@ requires iBegin != 0;
    //@ requires iBegin >= 0;
    //@ requires iBegin > 0;
    //@ requires iBegin < -1;
    //@ requires iBegin <= -1;
    //@ requires iBegin == -1;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd < a.length;
    //@ requires iEnd <= a.length;
    //@ requires iEnd == a.length;
    //@ requires iEnd != a.length;
    //@ requires iEnd >= a.length;
    //@ requires iEnd > a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd == 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 5;
    //@ requires iEnd > 5;
    //@ requires iEnd < 2;
    //@ requires iEnd <= 2;
    //@ requires iEnd == 2;
    //@ requires iEnd != 2;
    //@ requires iEnd >= 2;
    //@ requires iEnd > 2;
    //@ requires iEnd < 1;
    //@ requires iEnd <= 1;
    //@ requires iEnd == 1;
    //@ requires iEnd != 1;
    //@ requires iEnd >= 1;
    //@ requires iEnd > 1;
    //@ requires iEnd < 0;
    //@ requires iEnd <= 0;
    //@ requires iEnd == 0;
    //@ requires iEnd != 0;
    //@ requires iEnd >= 0;
    //@ requires iEnd > 0;
    //@ requires iEnd < iBegin;
    //@ requires iEnd <= iBegin;
    //@ requires iEnd == iBegin;
    //@ requires iEnd != iBegin;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd < -1;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:206: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:34:) in method __HoudiniInvoker
        SetZero(arr, 1, 0);
               ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:34: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:206:
	public static void SetZero(int[] a, int iBegin, int iEnd) {
	                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:27: verify: Precondition conjunct is false: iEnd > 0
	//@ requires iEnd > 0;
	                  ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:38: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:194:) in method SetZero
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
                                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:194: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:38:
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:44: verify: Precondition conjunct is false: 5 < a.length
    //@ requires 5 < a.length;
                   ^
6 verification failures

public class SetZero {

	//@ requires 5 >= a.length;
	//@ requires 1 <= a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin <= 1;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd <= a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 0;
	//@ requires iEnd != iBegin;
	//@ requires iEnd >= iBegin;
	//@ requires iEnd > iBegin;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin == a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin >= a.length;
    //@ requires iBegin > a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin == 5;
    //@ requires iBegin != 5;
    //@ requires iBegin >= 5;
    //@ requires iBegin > 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin == 2;
    //@ requires iBegin != 2;
    //@ requires iBegin >= 2;
    //@ requires iBegin > 2;
    //@ requires iBegin < 1;
    //@ requires iBegin <= 1;
    //@ requires iBegin == 1;
    //@ requires iBegin != 1;
    //@ requires iBegin >= 1;
    //@ requires iBegin > 1;
    //@ requires iBegin < 0;
    //@ requires iBegin <= 0;
    //@ requires iBegin == 0;
    //@ requires iBegin != 0;
    //@ requires iBegin >= 0;
    //@ requires iBegin > 0;
    //@ requires iBegin < -1;
    //@ requires iBegin <= -1;
    //@ requires iBegin == -1;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd < a.length;
    //@ requires iEnd <= a.length;
    //@ requires iEnd == a.length;
    //@ requires iEnd != a.length;
    //@ requires iEnd >= a.length;
    //@ requires iEnd > a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd == 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 5;
    //@ requires iEnd > 5;
    //@ requires iEnd < 2;
    //@ requires iEnd <= 2;
    //@ requires iEnd == 2;
    //@ requires iEnd != 2;
    //@ requires iEnd >= 2;
    //@ requires iEnd > 2;
    //@ requires iEnd < 1;
    //@ requires iEnd <= 1;
    //@ requires iEnd == 1;
    //@ requires iEnd != 1;
    //@ requires iEnd >= 1;
    //@ requires iEnd > 1;
    //@ requires iEnd < 0;
    //@ requires iEnd <= 0;
    //@ requires iEnd == 0;
    //@ requires iEnd != 0;
    //@ requires iEnd >= 0;
    //@ requires iEnd > 0;
    //@ requires iEnd < iBegin;
    //@ requires iEnd <= iBegin;
    //@ requires iEnd == iBegin;
    //@ requires iEnd != iBegin;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd < -1;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:205: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:33:) in method __HoudiniInvoker
        SetZero(arr, 1, 0);
               ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:33: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:205:
	public static void SetZero(int[] a, int iBegin, int iEnd) {
	                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:28: verify: Precondition conjunct is false: iEnd >= iBegin
	//@ requires iEnd >= iBegin;
	                  ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:37: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:193:) in method SetZero
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
                                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:193: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:37:
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:43: verify: Precondition conjunct is false: 5 < a.length
    //@ requires 5 < a.length;
                   ^
6 verification failures

public class SetZero {

	//@ requires 5 >= a.length;
	//@ requires 1 <= a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin <= 1;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd <= a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 0;
	//@ requires iEnd != iBegin;
	//@ requires iEnd > iBegin;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin == a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin >= a.length;
    //@ requires iBegin > a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin == 5;
    //@ requires iBegin != 5;
    //@ requires iBegin >= 5;
    //@ requires iBegin > 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin == 2;
    //@ requires iBegin != 2;
    //@ requires iBegin >= 2;
    //@ requires iBegin > 2;
    //@ requires iBegin < 1;
    //@ requires iBegin <= 1;
    //@ requires iBegin == 1;
    //@ requires iBegin != 1;
    //@ requires iBegin >= 1;
    //@ requires iBegin > 1;
    //@ requires iBegin < 0;
    //@ requires iBegin <= 0;
    //@ requires iBegin == 0;
    //@ requires iBegin != 0;
    //@ requires iBegin >= 0;
    //@ requires iBegin > 0;
    //@ requires iBegin < -1;
    //@ requires iBegin <= -1;
    //@ requires iBegin == -1;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd < a.length;
    //@ requires iEnd <= a.length;
    //@ requires iEnd == a.length;
    //@ requires iEnd != a.length;
    //@ requires iEnd >= a.length;
    //@ requires iEnd > a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd == 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 5;
    //@ requires iEnd > 5;
    //@ requires iEnd < 2;
    //@ requires iEnd <= 2;
    //@ requires iEnd == 2;
    //@ requires iEnd != 2;
    //@ requires iEnd >= 2;
    //@ requires iEnd > 2;
    //@ requires iEnd < 1;
    //@ requires iEnd <= 1;
    //@ requires iEnd == 1;
    //@ requires iEnd != 1;
    //@ requires iEnd >= 1;
    //@ requires iEnd > 1;
    //@ requires iEnd < 0;
    //@ requires iEnd <= 0;
    //@ requires iEnd == 0;
    //@ requires iEnd != 0;
    //@ requires iEnd >= 0;
    //@ requires iEnd > 0;
    //@ requires iEnd < iBegin;
    //@ requires iEnd <= iBegin;
    //@ requires iEnd == iBegin;
    //@ requires iEnd != iBegin;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd < -1;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:204: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:32:) in method __HoudiniInvoker
        SetZero(arr, 1, 0);
               ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:32: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:204:
	public static void SetZero(int[] a, int iBegin, int iEnd) {
	                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:28: verify: Precondition conjunct is false: iEnd > iBegin
	//@ requires iEnd > iBegin;
	                  ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:36: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:192:) in method SetZero
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
                                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:192: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:36:
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:42: verify: Precondition conjunct is false: 5 < a.length
    //@ requires 5 < a.length;
                   ^
6 verification failures

public class SetZero {

	//@ requires 5 >= a.length;
	//@ requires 1 <= a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin <= 1;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd <= a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 0;
	//@ requires iEnd != iBegin;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin == a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin >= a.length;
    //@ requires iBegin > a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin == 5;
    //@ requires iBegin != 5;
    //@ requires iBegin >= 5;
    //@ requires iBegin > 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin == 2;
    //@ requires iBegin != 2;
    //@ requires iBegin >= 2;
    //@ requires iBegin > 2;
    //@ requires iBegin < 1;
    //@ requires iBegin <= 1;
    //@ requires iBegin == 1;
    //@ requires iBegin != 1;
    //@ requires iBegin >= 1;
    //@ requires iBegin > 1;
    //@ requires iBegin < 0;
    //@ requires iBegin <= 0;
    //@ requires iBegin == 0;
    //@ requires iBegin != 0;
    //@ requires iBegin >= 0;
    //@ requires iBegin > 0;
    //@ requires iBegin < -1;
    //@ requires iBegin <= -1;
    //@ requires iBegin == -1;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd < a.length;
    //@ requires iEnd <= a.length;
    //@ requires iEnd == a.length;
    //@ requires iEnd != a.length;
    //@ requires iEnd >= a.length;
    //@ requires iEnd > a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd == 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 5;
    //@ requires iEnd > 5;
    //@ requires iEnd < 2;
    //@ requires iEnd <= 2;
    //@ requires iEnd == 2;
    //@ requires iEnd != 2;
    //@ requires iEnd >= 2;
    //@ requires iEnd > 2;
    //@ requires iEnd < 1;
    //@ requires iEnd <= 1;
    //@ requires iEnd == 1;
    //@ requires iEnd != 1;
    //@ requires iEnd >= 1;
    //@ requires iEnd > 1;
    //@ requires iEnd < 0;
    //@ requires iEnd <= 0;
    //@ requires iEnd == 0;
    //@ requires iEnd != 0;
    //@ requires iEnd >= 0;
    //@ requires iEnd > 0;
    //@ requires iEnd < iBegin;
    //@ requires iEnd <= iBegin;
    //@ requires iEnd == iBegin;
    //@ requires iEnd != iBegin;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd < -1;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:205: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:31:) in method __HoudiniInvoker
        SetZero(arr, 0, 0);
               ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:31: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:205:
	public static void SetZero(int[] a, int iBegin, int iEnd) {
	                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:27: verify: Precondition conjunct is false: iEnd != iBegin
	//@ requires iEnd != iBegin;
	                  ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:35: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:191:) in method SetZero
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
                                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:191: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:35:
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:41: verify: Precondition conjunct is false: 5 < a.length
    //@ requires 5 < a.length;
                   ^
6 verification failures

public class SetZero {

	//@ requires 5 >= a.length;
	//@ requires 1 <= a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin <= 1;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd <= a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 0;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 < a.length;
    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin == a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin >= a.length;
    //@ requires iBegin > a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin == 5;
    //@ requires iBegin != 5;
    //@ requires iBegin >= 5;
    //@ requires iBegin > 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin == 2;
    //@ requires iBegin != 2;
    //@ requires iBegin >= 2;
    //@ requires iBegin > 2;
    //@ requires iBegin < 1;
    //@ requires iBegin <= 1;
    //@ requires iBegin == 1;
    //@ requires iBegin != 1;
    //@ requires iBegin >= 1;
    //@ requires iBegin > 1;
    //@ requires iBegin < 0;
    //@ requires iBegin <= 0;
    //@ requires iBegin == 0;
    //@ requires iBegin != 0;
    //@ requires iBegin >= 0;
    //@ requires iBegin > 0;
    //@ requires iBegin < -1;
    //@ requires iBegin <= -1;
    //@ requires iBegin == -1;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd < a.length;
    //@ requires iEnd <= a.length;
    //@ requires iEnd == a.length;
    //@ requires iEnd != a.length;
    //@ requires iEnd >= a.length;
    //@ requires iEnd > a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd == 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 5;
    //@ requires iEnd > 5;
    //@ requires iEnd < 2;
    //@ requires iEnd <= 2;
    //@ requires iEnd == 2;
    //@ requires iEnd != 2;
    //@ requires iEnd >= 2;
    //@ requires iEnd > 2;
    //@ requires iEnd < 1;
    //@ requires iEnd <= 1;
    //@ requires iEnd == 1;
    //@ requires iEnd != 1;
    //@ requires iEnd >= 1;
    //@ requires iEnd > 1;
    //@ requires iEnd < 0;
    //@ requires iEnd <= 0;
    //@ requires iEnd == 0;
    //@ requires iEnd != 0;
    //@ requires iEnd >= 0;
    //@ requires iEnd > 0;
    //@ requires iEnd < iBegin;
    //@ requires iEnd <= iBegin;
    //@ requires iEnd == iBegin;
    //@ requires iEnd != iBegin;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd < -1;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:34: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:190:) in method SetZero
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
                                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:190: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:34:
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:40: verify: Precondition conjunct is false: 5 < a.length
    //@ requires 5 < a.length;
                   ^
3 verification failures

public class SetZero {

	//@ requires 5 >= a.length;
	//@ requires 1 <= a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin <= 1;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd <= a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 0;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 != a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin == a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin >= a.length;
    //@ requires iBegin > a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin == 5;
    //@ requires iBegin != 5;
    //@ requires iBegin >= 5;
    //@ requires iBegin > 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin == 2;
    //@ requires iBegin != 2;
    //@ requires iBegin >= 2;
    //@ requires iBegin > 2;
    //@ requires iBegin < 1;
    //@ requires iBegin <= 1;
    //@ requires iBegin == 1;
    //@ requires iBegin != 1;
    //@ requires iBegin >= 1;
    //@ requires iBegin > 1;
    //@ requires iBegin < 0;
    //@ requires iBegin <= 0;
    //@ requires iBegin == 0;
    //@ requires iBegin != 0;
    //@ requires iBegin >= 0;
    //@ requires iBegin > 0;
    //@ requires iBegin < -1;
    //@ requires iBegin <= -1;
    //@ requires iBegin == -1;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd < a.length;
    //@ requires iEnd <= a.length;
    //@ requires iEnd == a.length;
    //@ requires iEnd != a.length;
    //@ requires iEnd >= a.length;
    //@ requires iEnd > a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd == 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 5;
    //@ requires iEnd > 5;
    //@ requires iEnd < 2;
    //@ requires iEnd <= 2;
    //@ requires iEnd == 2;
    //@ requires iEnd != 2;
    //@ requires iEnd >= 2;
    //@ requires iEnd > 2;
    //@ requires iEnd < 1;
    //@ requires iEnd <= 1;
    //@ requires iEnd == 1;
    //@ requires iEnd != 1;
    //@ requires iEnd >= 1;
    //@ requires iEnd > 1;
    //@ requires iEnd < 0;
    //@ requires iEnd <= 0;
    //@ requires iEnd == 0;
    //@ requires iEnd != 0;
    //@ requires iEnd >= 0;
    //@ requires iEnd > 0;
    //@ requires iEnd < iBegin;
    //@ requires iEnd <= iBegin;
    //@ requires iEnd == iBegin;
    //@ requires iEnd != iBegin;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd < -1;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:34: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:189:) in method SetZero
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
                                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:189: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:34:
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:42: verify: Precondition conjunct is false: 5 != a.length
    //@ requires 5 != a.length;
                   ^
3 verification failures

public class SetZero {

	//@ requires 5 >= a.length;
	//@ requires 1 <= a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin <= 1;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd <= a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 0;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 <= a.length;
    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin == a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin >= a.length;
    //@ requires iBegin > a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin == 5;
    //@ requires iBegin != 5;
    //@ requires iBegin >= 5;
    //@ requires iBegin > 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin == 2;
    //@ requires iBegin != 2;
    //@ requires iBegin >= 2;
    //@ requires iBegin > 2;
    //@ requires iBegin < 1;
    //@ requires iBegin <= 1;
    //@ requires iBegin == 1;
    //@ requires iBegin != 1;
    //@ requires iBegin >= 1;
    //@ requires iBegin > 1;
    //@ requires iBegin < 0;
    //@ requires iBegin <= 0;
    //@ requires iBegin == 0;
    //@ requires iBegin != 0;
    //@ requires iBegin >= 0;
    //@ requires iBegin > 0;
    //@ requires iBegin < -1;
    //@ requires iBegin <= -1;
    //@ requires iBegin == -1;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd < a.length;
    //@ requires iEnd <= a.length;
    //@ requires iEnd == a.length;
    //@ requires iEnd != a.length;
    //@ requires iEnd >= a.length;
    //@ requires iEnd > a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd == 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 5;
    //@ requires iEnd > 5;
    //@ requires iEnd < 2;
    //@ requires iEnd <= 2;
    //@ requires iEnd == 2;
    //@ requires iEnd != 2;
    //@ requires iEnd >= 2;
    //@ requires iEnd > 2;
    //@ requires iEnd < 1;
    //@ requires iEnd <= 1;
    //@ requires iEnd == 1;
    //@ requires iEnd != 1;
    //@ requires iEnd >= 1;
    //@ requires iEnd > 1;
    //@ requires iEnd < 0;
    //@ requires iEnd <= 0;
    //@ requires iEnd == 0;
    //@ requires iEnd != 0;
    //@ requires iEnd >= 0;
    //@ requires iEnd > 0;
    //@ requires iEnd < iBegin;
    //@ requires iEnd <= iBegin;
    //@ requires iEnd == iBegin;
    //@ requires iEnd != iBegin;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd < -1;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:34: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:188:) in method SetZero
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
                                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:188: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:34:
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:40: verify: Precondition conjunct is false: 5 <= a.length
    //@ requires 5 <= a.length;
                   ^
3 verification failures

public class SetZero {

	//@ requires 5 >= a.length;
	//@ requires 1 <= a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin <= 1;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd <= a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 0;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 5 > a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin == a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin >= a.length;
    //@ requires iBegin > a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin == 5;
    //@ requires iBegin != 5;
    //@ requires iBegin >= 5;
    //@ requires iBegin > 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin == 2;
    //@ requires iBegin != 2;
    //@ requires iBegin >= 2;
    //@ requires iBegin > 2;
    //@ requires iBegin < 1;
    //@ requires iBegin <= 1;
    //@ requires iBegin == 1;
    //@ requires iBegin != 1;
    //@ requires iBegin >= 1;
    //@ requires iBegin > 1;
    //@ requires iBegin < 0;
    //@ requires iBegin <= 0;
    //@ requires iBegin == 0;
    //@ requires iBegin != 0;
    //@ requires iBegin >= 0;
    //@ requires iBegin > 0;
    //@ requires iBegin < -1;
    //@ requires iBegin <= -1;
    //@ requires iBegin == -1;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd < a.length;
    //@ requires iEnd <= a.length;
    //@ requires iEnd == a.length;
    //@ requires iEnd != a.length;
    //@ requires iEnd >= a.length;
    //@ requires iEnd > a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd == 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 5;
    //@ requires iEnd > 5;
    //@ requires iEnd < 2;
    //@ requires iEnd <= 2;
    //@ requires iEnd == 2;
    //@ requires iEnd != 2;
    //@ requires iEnd >= 2;
    //@ requires iEnd > 2;
    //@ requires iEnd < 1;
    //@ requires iEnd <= 1;
    //@ requires iEnd == 1;
    //@ requires iEnd != 1;
    //@ requires iEnd >= 1;
    //@ requires iEnd > 1;
    //@ requires iEnd < 0;
    //@ requires iEnd <= 0;
    //@ requires iEnd == 0;
    //@ requires iEnd != 0;
    //@ requires iEnd >= 0;
    //@ requires iEnd > 0;
    //@ requires iEnd < iBegin;
    //@ requires iEnd <= iBegin;
    //@ requires iEnd == iBegin;
    //@ requires iEnd != iBegin;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd < -1;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:34: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:187:) in method SetZero
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
                                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:187: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:34:
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:42: verify: Precondition conjunct is false: 5 > a.length
    //@ requires 5 > a.length;
                   ^
3 verification failures

public class SetZero {

	//@ requires 5 >= a.length;
	//@ requires 1 <= a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin <= 1;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd <= a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 0;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 == a.length;
    //@ requires 5 >= a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin == a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin >= a.length;
    //@ requires iBegin > a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin == 5;
    //@ requires iBegin != 5;
    //@ requires iBegin >= 5;
    //@ requires iBegin > 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin == 2;
    //@ requires iBegin != 2;
    //@ requires iBegin >= 2;
    //@ requires iBegin > 2;
    //@ requires iBegin < 1;
    //@ requires iBegin <= 1;
    //@ requires iBegin == 1;
    //@ requires iBegin != 1;
    //@ requires iBegin >= 1;
    //@ requires iBegin > 1;
    //@ requires iBegin < 0;
    //@ requires iBegin <= 0;
    //@ requires iBegin == 0;
    //@ requires iBegin != 0;
    //@ requires iBegin >= 0;
    //@ requires iBegin > 0;
    //@ requires iBegin < -1;
    //@ requires iBegin <= -1;
    //@ requires iBegin == -1;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd < a.length;
    //@ requires iEnd <= a.length;
    //@ requires iEnd == a.length;
    //@ requires iEnd != a.length;
    //@ requires iEnd >= a.length;
    //@ requires iEnd > a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd == 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 5;
    //@ requires iEnd > 5;
    //@ requires iEnd < 2;
    //@ requires iEnd <= 2;
    //@ requires iEnd == 2;
    //@ requires iEnd != 2;
    //@ requires iEnd >= 2;
    //@ requires iEnd > 2;
    //@ requires iEnd < 1;
    //@ requires iEnd <= 1;
    //@ requires iEnd == 1;
    //@ requires iEnd != 1;
    //@ requires iEnd >= 1;
    //@ requires iEnd > 1;
    //@ requires iEnd < 0;
    //@ requires iEnd <= 0;
    //@ requires iEnd == 0;
    //@ requires iEnd != 0;
    //@ requires iEnd >= 0;
    //@ requires iEnd > 0;
    //@ requires iEnd < iBegin;
    //@ requires iEnd <= iBegin;
    //@ requires iEnd == iBegin;
    //@ requires iEnd != iBegin;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd < -1;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:34: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:186:) in method SetZero
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
                                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:186: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:34:
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:40: verify: Precondition conjunct is false: 5 == a.length
    //@ requires 5 == a.length;
                   ^
3 verification failures

public class SetZero {

	//@ requires 5 >= a.length;
	//@ requires 1 <= a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin <= 1;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd <= a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 0;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 >= a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 == a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin == a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin >= a.length;
    //@ requires iBegin > a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin == 5;
    //@ requires iBegin != 5;
    //@ requires iBegin >= 5;
    //@ requires iBegin > 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin == 2;
    //@ requires iBegin != 2;
    //@ requires iBegin >= 2;
    //@ requires iBegin > 2;
    //@ requires iBegin < 1;
    //@ requires iBegin <= 1;
    //@ requires iBegin == 1;
    //@ requires iBegin != 1;
    //@ requires iBegin >= 1;
    //@ requires iBegin > 1;
    //@ requires iBegin < 0;
    //@ requires iBegin <= 0;
    //@ requires iBegin == 0;
    //@ requires iBegin != 0;
    //@ requires iBegin >= 0;
    //@ requires iBegin > 0;
    //@ requires iBegin < -1;
    //@ requires iBegin <= -1;
    //@ requires iBegin == -1;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd < a.length;
    //@ requires iEnd <= a.length;
    //@ requires iEnd == a.length;
    //@ requires iEnd != a.length;
    //@ requires iEnd >= a.length;
    //@ requires iEnd > a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd == 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 5;
    //@ requires iEnd > 5;
    //@ requires iEnd < 2;
    //@ requires iEnd <= 2;
    //@ requires iEnd == 2;
    //@ requires iEnd != 2;
    //@ requires iEnd >= 2;
    //@ requires iEnd > 2;
    //@ requires iEnd < 1;
    //@ requires iEnd <= 1;
    //@ requires iEnd == 1;
    //@ requires iEnd != 1;
    //@ requires iEnd >= 1;
    //@ requires iEnd > 1;
    //@ requires iEnd < 0;
    //@ requires iEnd <= 0;
    //@ requires iEnd == 0;
    //@ requires iEnd != 0;
    //@ requires iEnd >= 0;
    //@ requires iEnd > 0;
    //@ requires iEnd < iBegin;
    //@ requires iEnd <= iBegin;
    //@ requires iEnd == iBegin;
    //@ requires iEnd != iBegin;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd < -1;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:34: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:185:) in method SetZero
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
                                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:185: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:34:
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:43: verify: Precondition conjunct is false: 2 == a.length
    //@ requires 2 == a.length;
                   ^
3 verification failures

public class SetZero {

	//@ requires 5 >= a.length;
	//@ requires 1 <= a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin <= 1;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd <= a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 0;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 >= a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 2 >= a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin == a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin >= a.length;
    //@ requires iBegin > a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin == 5;
    //@ requires iBegin != 5;
    //@ requires iBegin >= 5;
    //@ requires iBegin > 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin == 2;
    //@ requires iBegin != 2;
    //@ requires iBegin >= 2;
    //@ requires iBegin > 2;
    //@ requires iBegin < 1;
    //@ requires iBegin <= 1;
    //@ requires iBegin == 1;
    //@ requires iBegin != 1;
    //@ requires iBegin >= 1;
    //@ requires iBegin > 1;
    //@ requires iBegin < 0;
    //@ requires iBegin <= 0;
    //@ requires iBegin == 0;
    //@ requires iBegin != 0;
    //@ requires iBegin >= 0;
    //@ requires iBegin > 0;
    //@ requires iBegin < -1;
    //@ requires iBegin <= -1;
    //@ requires iBegin == -1;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd < a.length;
    //@ requires iEnd <= a.length;
    //@ requires iEnd == a.length;
    //@ requires iEnd != a.length;
    //@ requires iEnd >= a.length;
    //@ requires iEnd > a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd == 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 5;
    //@ requires iEnd > 5;
    //@ requires iEnd < 2;
    //@ requires iEnd <= 2;
    //@ requires iEnd == 2;
    //@ requires iEnd != 2;
    //@ requires iEnd >= 2;
    //@ requires iEnd > 2;
    //@ requires iEnd < 1;
    //@ requires iEnd <= 1;
    //@ requires iEnd == 1;
    //@ requires iEnd != 1;
    //@ requires iEnd >= 1;
    //@ requires iEnd > 1;
    //@ requires iEnd < 0;
    //@ requires iEnd <= 0;
    //@ requires iEnd == 0;
    //@ requires iEnd != 0;
    //@ requires iEnd >= 0;
    //@ requires iEnd > 0;
    //@ requires iEnd < iBegin;
    //@ requires iEnd <= iBegin;
    //@ requires iEnd == iBegin;
    //@ requires iEnd != iBegin;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd < -1;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:34: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:184:) in method SetZero
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
                                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:184: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:34:
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:44: verify: Precondition conjunct is false: 2 >= a.length
    //@ requires 2 >= a.length;
                   ^
3 verification failures

public class SetZero {

	//@ requires 5 >= a.length;
	//@ requires 1 <= a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin <= 1;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd <= a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 0;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 >= a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 2 > a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin == a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin >= a.length;
    //@ requires iBegin > a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin == 5;
    //@ requires iBegin != 5;
    //@ requires iBegin >= 5;
    //@ requires iBegin > 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin == 2;
    //@ requires iBegin != 2;
    //@ requires iBegin >= 2;
    //@ requires iBegin > 2;
    //@ requires iBegin < 1;
    //@ requires iBegin <= 1;
    //@ requires iBegin == 1;
    //@ requires iBegin != 1;
    //@ requires iBegin >= 1;
    //@ requires iBegin > 1;
    //@ requires iBegin < 0;
    //@ requires iBegin <= 0;
    //@ requires iBegin == 0;
    //@ requires iBegin != 0;
    //@ requires iBegin >= 0;
    //@ requires iBegin > 0;
    //@ requires iBegin < -1;
    //@ requires iBegin <= -1;
    //@ requires iBegin == -1;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd < a.length;
    //@ requires iEnd <= a.length;
    //@ requires iEnd == a.length;
    //@ requires iEnd != a.length;
    //@ requires iEnd >= a.length;
    //@ requires iEnd > a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd == 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 5;
    //@ requires iEnd > 5;
    //@ requires iEnd < 2;
    //@ requires iEnd <= 2;
    //@ requires iEnd == 2;
    //@ requires iEnd != 2;
    //@ requires iEnd >= 2;
    //@ requires iEnd > 2;
    //@ requires iEnd < 1;
    //@ requires iEnd <= 1;
    //@ requires iEnd == 1;
    //@ requires iEnd != 1;
    //@ requires iEnd >= 1;
    //@ requires iEnd > 1;
    //@ requires iEnd < 0;
    //@ requires iEnd <= 0;
    //@ requires iEnd == 0;
    //@ requires iEnd != 0;
    //@ requires iEnd >= 0;
    //@ requires iEnd > 0;
    //@ requires iEnd < iBegin;
    //@ requires iEnd <= iBegin;
    //@ requires iEnd == iBegin;
    //@ requires iEnd != iBegin;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd < -1;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:34: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:183:) in method SetZero
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
                                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:183: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:34:
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:44: verify: Precondition conjunct is false: 2 > a.length
    //@ requires 2 > a.length;
                   ^
3 verification failures

public class SetZero {

	//@ requires 5 >= a.length;
	//@ requires 1 <= a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin <= 1;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd <= a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 0;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 >= a.length;
    //@ requires 2 < a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin == a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin >= a.length;
    //@ requires iBegin > a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin == 5;
    //@ requires iBegin != 5;
    //@ requires iBegin >= 5;
    //@ requires iBegin > 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin == 2;
    //@ requires iBegin != 2;
    //@ requires iBegin >= 2;
    //@ requires iBegin > 2;
    //@ requires iBegin < 1;
    //@ requires iBegin <= 1;
    //@ requires iBegin == 1;
    //@ requires iBegin != 1;
    //@ requires iBegin >= 1;
    //@ requires iBegin > 1;
    //@ requires iBegin < 0;
    //@ requires iBegin <= 0;
    //@ requires iBegin == 0;
    //@ requires iBegin != 0;
    //@ requires iBegin >= 0;
    //@ requires iBegin > 0;
    //@ requires iBegin < -1;
    //@ requires iBegin <= -1;
    //@ requires iBegin == -1;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd < a.length;
    //@ requires iEnd <= a.length;
    //@ requires iEnd == a.length;
    //@ requires iEnd != a.length;
    //@ requires iEnd >= a.length;
    //@ requires iEnd > a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd == 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 5;
    //@ requires iEnd > 5;
    //@ requires iEnd < 2;
    //@ requires iEnd <= 2;
    //@ requires iEnd == 2;
    //@ requires iEnd != 2;
    //@ requires iEnd >= 2;
    //@ requires iEnd > 2;
    //@ requires iEnd < 1;
    //@ requires iEnd <= 1;
    //@ requires iEnd == 1;
    //@ requires iEnd != 1;
    //@ requires iEnd >= 1;
    //@ requires iEnd > 1;
    //@ requires iEnd < 0;
    //@ requires iEnd <= 0;
    //@ requires iEnd == 0;
    //@ requires iEnd != 0;
    //@ requires iEnd >= 0;
    //@ requires iEnd > 0;
    //@ requires iEnd < iBegin;
    //@ requires iEnd <= iBegin;
    //@ requires iEnd == iBegin;
    //@ requires iEnd != iBegin;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd < -1;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:34: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:182:) in method SetZero
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
                                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:182: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:34:
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:41: verify: Precondition conjunct is false: 2 < a.length
    //@ requires 2 < a.length;
                   ^
3 verification failures

public class SetZero {

	//@ requires 5 >= a.length;
	//@ requires 1 <= a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin <= 1;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd <= a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 0;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 >= a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 == a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin == a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin >= a.length;
    //@ requires iBegin > a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin == 5;
    //@ requires iBegin != 5;
    //@ requires iBegin >= 5;
    //@ requires iBegin > 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin == 2;
    //@ requires iBegin != 2;
    //@ requires iBegin >= 2;
    //@ requires iBegin > 2;
    //@ requires iBegin < 1;
    //@ requires iBegin <= 1;
    //@ requires iBegin == 1;
    //@ requires iBegin != 1;
    //@ requires iBegin >= 1;
    //@ requires iBegin > 1;
    //@ requires iBegin < 0;
    //@ requires iBegin <= 0;
    //@ requires iBegin == 0;
    //@ requires iBegin != 0;
    //@ requires iBegin >= 0;
    //@ requires iBegin > 0;
    //@ requires iBegin < -1;
    //@ requires iBegin <= -1;
    //@ requires iBegin == -1;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd < a.length;
    //@ requires iEnd <= a.length;
    //@ requires iEnd == a.length;
    //@ requires iEnd != a.length;
    //@ requires iEnd >= a.length;
    //@ requires iEnd > a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd == 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 5;
    //@ requires iEnd > 5;
    //@ requires iEnd < 2;
    //@ requires iEnd <= 2;
    //@ requires iEnd == 2;
    //@ requires iEnd != 2;
    //@ requires iEnd >= 2;
    //@ requires iEnd > 2;
    //@ requires iEnd < 1;
    //@ requires iEnd <= 1;
    //@ requires iEnd == 1;
    //@ requires iEnd != 1;
    //@ requires iEnd >= 1;
    //@ requires iEnd > 1;
    //@ requires iEnd < 0;
    //@ requires iEnd <= 0;
    //@ requires iEnd == 0;
    //@ requires iEnd != 0;
    //@ requires iEnd >= 0;
    //@ requires iEnd > 0;
    //@ requires iEnd < iBegin;
    //@ requires iEnd <= iBegin;
    //@ requires iEnd == iBegin;
    //@ requires iEnd != iBegin;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd < -1;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:34: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:181:) in method SetZero
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
                                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:181: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:34:
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:45: verify: Precondition conjunct is false: 1 == a.length
    //@ requires 1 == a.length;
                   ^
3 verification failures

public class SetZero {

	//@ requires 5 >= a.length;
	//@ requires 1 <= a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin <= 1;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd <= a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 0;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 >= a.length;
    //@ requires 2 <= a.length;
    //@ requires 2 != a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin == a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin >= a.length;
    //@ requires iBegin > a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin == 5;
    //@ requires iBegin != 5;
    //@ requires iBegin >= 5;
    //@ requires iBegin > 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin == 2;
    //@ requires iBegin != 2;
    //@ requires iBegin >= 2;
    //@ requires iBegin > 2;
    //@ requires iBegin < 1;
    //@ requires iBegin <= 1;
    //@ requires iBegin == 1;
    //@ requires iBegin != 1;
    //@ requires iBegin >= 1;
    //@ requires iBegin > 1;
    //@ requires iBegin < 0;
    //@ requires iBegin <= 0;
    //@ requires iBegin == 0;
    //@ requires iBegin != 0;
    //@ requires iBegin >= 0;
    //@ requires iBegin > 0;
    //@ requires iBegin < -1;
    //@ requires iBegin <= -1;
    //@ requires iBegin == -1;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd < a.length;
    //@ requires iEnd <= a.length;
    //@ requires iEnd == a.length;
    //@ requires iEnd != a.length;
    //@ requires iEnd >= a.length;
    //@ requires iEnd > a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd == 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 5;
    //@ requires iEnd > 5;
    //@ requires iEnd < 2;
    //@ requires iEnd <= 2;
    //@ requires iEnd == 2;
    //@ requires iEnd != 2;
    //@ requires iEnd >= 2;
    //@ requires iEnd > 2;
    //@ requires iEnd < 1;
    //@ requires iEnd <= 1;
    //@ requires iEnd == 1;
    //@ requires iEnd != 1;
    //@ requires iEnd >= 1;
    //@ requires iEnd > 1;
    //@ requires iEnd < 0;
    //@ requires iEnd <= 0;
    //@ requires iEnd == 0;
    //@ requires iEnd != 0;
    //@ requires iEnd >= 0;
    //@ requires iEnd > 0;
    //@ requires iEnd < iBegin;
    //@ requires iEnd <= iBegin;
    //@ requires iEnd == iBegin;
    //@ requires iEnd != iBegin;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd < -1;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:34: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:180:) in method SetZero
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
                                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:180: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:34:
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:42: verify: Precondition conjunct is false: 2 != a.length
    //@ requires 2 != a.length;
                   ^
3 verification failures

public class SetZero {

	//@ requires 5 >= a.length;
	//@ requires 1 <= a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin <= 1;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd <= a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 0;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 >= a.length;
    //@ requires 2 <= a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin == a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin >= a.length;
    //@ requires iBegin > a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin == 5;
    //@ requires iBegin != 5;
    //@ requires iBegin >= 5;
    //@ requires iBegin > 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin == 2;
    //@ requires iBegin != 2;
    //@ requires iBegin >= 2;
    //@ requires iBegin > 2;
    //@ requires iBegin < 1;
    //@ requires iBegin <= 1;
    //@ requires iBegin == 1;
    //@ requires iBegin != 1;
    //@ requires iBegin >= 1;
    //@ requires iBegin > 1;
    //@ requires iBegin < 0;
    //@ requires iBegin <= 0;
    //@ requires iBegin == 0;
    //@ requires iBegin != 0;
    //@ requires iBegin >= 0;
    //@ requires iBegin > 0;
    //@ requires iBegin < -1;
    //@ requires iBegin <= -1;
    //@ requires iBegin == -1;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd < a.length;
    //@ requires iEnd <= a.length;
    //@ requires iEnd == a.length;
    //@ requires iEnd != a.length;
    //@ requires iEnd >= a.length;
    //@ requires iEnd > a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd == 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 5;
    //@ requires iEnd > 5;
    //@ requires iEnd < 2;
    //@ requires iEnd <= 2;
    //@ requires iEnd == 2;
    //@ requires iEnd != 2;
    //@ requires iEnd >= 2;
    //@ requires iEnd > 2;
    //@ requires iEnd < 1;
    //@ requires iEnd <= 1;
    //@ requires iEnd == 1;
    //@ requires iEnd != 1;
    //@ requires iEnd >= 1;
    //@ requires iEnd > 1;
    //@ requires iEnd < 0;
    //@ requires iEnd <= 0;
    //@ requires iEnd == 0;
    //@ requires iEnd != 0;
    //@ requires iEnd >= 0;
    //@ requires iEnd > 0;
    //@ requires iEnd < iBegin;
    //@ requires iEnd <= iBegin;
    //@ requires iEnd == iBegin;
    //@ requires iEnd != iBegin;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd < -1;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:34: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:179:) in method SetZero
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
                                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:179: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:34:
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:41: verify: Precondition conjunct is false: 2 <= a.length
    //@ requires 2 <= a.length;
                   ^
3 verification failures

public class SetZero {

	//@ requires 5 >= a.length;
	//@ requires 1 <= a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin <= 1;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd <= a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 0;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 >= a.length;
    //@ requires 1 < a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin == a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin >= a.length;
    //@ requires iBegin > a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin == 5;
    //@ requires iBegin != 5;
    //@ requires iBegin >= 5;
    //@ requires iBegin > 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin == 2;
    //@ requires iBegin != 2;
    //@ requires iBegin >= 2;
    //@ requires iBegin > 2;
    //@ requires iBegin < 1;
    //@ requires iBegin <= 1;
    //@ requires iBegin == 1;
    //@ requires iBegin != 1;
    //@ requires iBegin >= 1;
    //@ requires iBegin > 1;
    //@ requires iBegin < 0;
    //@ requires iBegin <= 0;
    //@ requires iBegin == 0;
    //@ requires iBegin != 0;
    //@ requires iBegin >= 0;
    //@ requires iBegin > 0;
    //@ requires iBegin < -1;
    //@ requires iBegin <= -1;
    //@ requires iBegin == -1;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd < a.length;
    //@ requires iEnd <= a.length;
    //@ requires iEnd == a.length;
    //@ requires iEnd != a.length;
    //@ requires iEnd >= a.length;
    //@ requires iEnd > a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd == 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 5;
    //@ requires iEnd > 5;
    //@ requires iEnd < 2;
    //@ requires iEnd <= 2;
    //@ requires iEnd == 2;
    //@ requires iEnd != 2;
    //@ requires iEnd >= 2;
    //@ requires iEnd > 2;
    //@ requires iEnd < 1;
    //@ requires iEnd <= 1;
    //@ requires iEnd == 1;
    //@ requires iEnd != 1;
    //@ requires iEnd >= 1;
    //@ requires iEnd > 1;
    //@ requires iEnd < 0;
    //@ requires iEnd <= 0;
    //@ requires iEnd == 0;
    //@ requires iEnd != 0;
    //@ requires iEnd >= 0;
    //@ requires iEnd > 0;
    //@ requires iEnd < iBegin;
    //@ requires iEnd <= iBegin;
    //@ requires iEnd == iBegin;
    //@ requires iEnd != iBegin;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd < -1;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:34: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:178:) in method SetZero
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
                                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:178: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:34:
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:41: verify: Precondition conjunct is false: 1 < a.length
    //@ requires 1 < a.length;
                   ^
3 verification failures

public class SetZero {

	//@ requires 5 >= a.length;
	//@ requires 1 <= a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin <= 1;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd <= a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 0;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 >= a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires 1 >= a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin == a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin >= a.length;
    //@ requires iBegin > a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin == 5;
    //@ requires iBegin != 5;
    //@ requires iBegin >= 5;
    //@ requires iBegin > 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin == 2;
    //@ requires iBegin != 2;
    //@ requires iBegin >= 2;
    //@ requires iBegin > 2;
    //@ requires iBegin < 1;
    //@ requires iBegin <= 1;
    //@ requires iBegin == 1;
    //@ requires iBegin != 1;
    //@ requires iBegin >= 1;
    //@ requires iBegin > 1;
    //@ requires iBegin < 0;
    //@ requires iBegin <= 0;
    //@ requires iBegin == 0;
    //@ requires iBegin != 0;
    //@ requires iBegin >= 0;
    //@ requires iBegin > 0;
    //@ requires iBegin < -1;
    //@ requires iBegin <= -1;
    //@ requires iBegin == -1;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd < a.length;
    //@ requires iEnd <= a.length;
    //@ requires iEnd == a.length;
    //@ requires iEnd != a.length;
    //@ requires iEnd >= a.length;
    //@ requires iEnd > a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd == 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 5;
    //@ requires iEnd > 5;
    //@ requires iEnd < 2;
    //@ requires iEnd <= 2;
    //@ requires iEnd == 2;
    //@ requires iEnd != 2;
    //@ requires iEnd >= 2;
    //@ requires iEnd > 2;
    //@ requires iEnd < 1;
    //@ requires iEnd <= 1;
    //@ requires iEnd == 1;
    //@ requires iEnd != 1;
    //@ requires iEnd >= 1;
    //@ requires iEnd > 1;
    //@ requires iEnd < 0;
    //@ requires iEnd <= 0;
    //@ requires iEnd == 0;
    //@ requires iEnd != 0;
    //@ requires iEnd >= 0;
    //@ requires iEnd > 0;
    //@ requires iEnd < iBegin;
    //@ requires iEnd <= iBegin;
    //@ requires iEnd == iBegin;
    //@ requires iEnd != iBegin;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd < -1;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:34: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:177:) in method SetZero
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
                                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:177: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:34:
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:43: verify: Precondition conjunct is false: 1 >= a.length
    //@ requires 1 >= a.length;
                   ^
3 verification failures

public class SetZero {

	//@ requires 5 >= a.length;
	//@ requires 1 <= a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin <= 1;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd <= a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 0;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 >= a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires 1 > a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin == a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin >= a.length;
    //@ requires iBegin > a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin == 5;
    //@ requires iBegin != 5;
    //@ requires iBegin >= 5;
    //@ requires iBegin > 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin == 2;
    //@ requires iBegin != 2;
    //@ requires iBegin >= 2;
    //@ requires iBegin > 2;
    //@ requires iBegin < 1;
    //@ requires iBegin <= 1;
    //@ requires iBegin == 1;
    //@ requires iBegin != 1;
    //@ requires iBegin >= 1;
    //@ requires iBegin > 1;
    //@ requires iBegin < 0;
    //@ requires iBegin <= 0;
    //@ requires iBegin == 0;
    //@ requires iBegin != 0;
    //@ requires iBegin >= 0;
    //@ requires iBegin > 0;
    //@ requires iBegin < -1;
    //@ requires iBegin <= -1;
    //@ requires iBegin == -1;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd < a.length;
    //@ requires iEnd <= a.length;
    //@ requires iEnd == a.length;
    //@ requires iEnd != a.length;
    //@ requires iEnd >= a.length;
    //@ requires iEnd > a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd == 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 5;
    //@ requires iEnd > 5;
    //@ requires iEnd < 2;
    //@ requires iEnd <= 2;
    //@ requires iEnd == 2;
    //@ requires iEnd != 2;
    //@ requires iEnd >= 2;
    //@ requires iEnd > 2;
    //@ requires iEnd < 1;
    //@ requires iEnd <= 1;
    //@ requires iEnd == 1;
    //@ requires iEnd != 1;
    //@ requires iEnd >= 1;
    //@ requires iEnd > 1;
    //@ requires iEnd < 0;
    //@ requires iEnd <= 0;
    //@ requires iEnd == 0;
    //@ requires iEnd != 0;
    //@ requires iEnd >= 0;
    //@ requires iEnd > 0;
    //@ requires iEnd < iBegin;
    //@ requires iEnd <= iBegin;
    //@ requires iEnd == iBegin;
    //@ requires iEnd != iBegin;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd < -1;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:34: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:176:) in method SetZero
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
                                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:176: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:34:
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:43: verify: Precondition conjunct is false: 1 > a.length
    //@ requires 1 > a.length;
                   ^
3 verification failures

public class SetZero {

	//@ requires 5 >= a.length;
	//@ requires 1 <= a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin <= 1;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd <= a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 0;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 >= a.length;
    //@ requires 1 <= a.length;
    //@ requires 1 != a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin == a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin >= a.length;
    //@ requires iBegin > a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin == 5;
    //@ requires iBegin != 5;
    //@ requires iBegin >= 5;
    //@ requires iBegin > 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin == 2;
    //@ requires iBegin != 2;
    //@ requires iBegin >= 2;
    //@ requires iBegin > 2;
    //@ requires iBegin < 1;
    //@ requires iBegin <= 1;
    //@ requires iBegin == 1;
    //@ requires iBegin != 1;
    //@ requires iBegin >= 1;
    //@ requires iBegin > 1;
    //@ requires iBegin < 0;
    //@ requires iBegin <= 0;
    //@ requires iBegin == 0;
    //@ requires iBegin != 0;
    //@ requires iBegin >= 0;
    //@ requires iBegin > 0;
    //@ requires iBegin < -1;
    //@ requires iBegin <= -1;
    //@ requires iBegin == -1;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd < a.length;
    //@ requires iEnd <= a.length;
    //@ requires iEnd == a.length;
    //@ requires iEnd != a.length;
    //@ requires iEnd >= a.length;
    //@ requires iEnd > a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd == 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 5;
    //@ requires iEnd > 5;
    //@ requires iEnd < 2;
    //@ requires iEnd <= 2;
    //@ requires iEnd == 2;
    //@ requires iEnd != 2;
    //@ requires iEnd >= 2;
    //@ requires iEnd > 2;
    //@ requires iEnd < 1;
    //@ requires iEnd <= 1;
    //@ requires iEnd == 1;
    //@ requires iEnd != 1;
    //@ requires iEnd >= 1;
    //@ requires iEnd > 1;
    //@ requires iEnd < 0;
    //@ requires iEnd <= 0;
    //@ requires iEnd == 0;
    //@ requires iEnd != 0;
    //@ requires iEnd >= 0;
    //@ requires iEnd > 0;
    //@ requires iEnd < iBegin;
    //@ requires iEnd <= iBegin;
    //@ requires iEnd == iBegin;
    //@ requires iEnd != iBegin;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd < -1;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:34: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:175:) in method SetZero
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
                                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:175: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:34:
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:42: verify: Precondition conjunct is false: 1 != a.length
    //@ requires 1 != a.length;
                   ^
3 verification failures

public class SetZero {

	//@ requires 5 >= a.length;
	//@ requires 1 <= a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin <= 1;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd <= a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 0;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 >= a.length;
    //@ requires 1 <= a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 == a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin == a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin >= a.length;
    //@ requires iBegin > a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin == 5;
    //@ requires iBegin != 5;
    //@ requires iBegin >= 5;
    //@ requires iBegin > 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin == 2;
    //@ requires iBegin != 2;
    //@ requires iBegin >= 2;
    //@ requires iBegin > 2;
    //@ requires iBegin < 1;
    //@ requires iBegin <= 1;
    //@ requires iBegin == 1;
    //@ requires iBegin != 1;
    //@ requires iBegin >= 1;
    //@ requires iBegin > 1;
    //@ requires iBegin < 0;
    //@ requires iBegin <= 0;
    //@ requires iBegin == 0;
    //@ requires iBegin != 0;
    //@ requires iBegin >= 0;
    //@ requires iBegin > 0;
    //@ requires iBegin < -1;
    //@ requires iBegin <= -1;
    //@ requires iBegin == -1;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd < a.length;
    //@ requires iEnd <= a.length;
    //@ requires iEnd == a.length;
    //@ requires iEnd != a.length;
    //@ requires iEnd >= a.length;
    //@ requires iEnd > a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd == 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 5;
    //@ requires iEnd > 5;
    //@ requires iEnd < 2;
    //@ requires iEnd <= 2;
    //@ requires iEnd == 2;
    //@ requires iEnd != 2;
    //@ requires iEnd >= 2;
    //@ requires iEnd > 2;
    //@ requires iEnd < 1;
    //@ requires iEnd <= 1;
    //@ requires iEnd == 1;
    //@ requires iEnd != 1;
    //@ requires iEnd >= 1;
    //@ requires iEnd > 1;
    //@ requires iEnd < 0;
    //@ requires iEnd <= 0;
    //@ requires iEnd == 0;
    //@ requires iEnd != 0;
    //@ requires iEnd >= 0;
    //@ requires iEnd > 0;
    //@ requires iEnd < iBegin;
    //@ requires iEnd <= iBegin;
    //@ requires iEnd == iBegin;
    //@ requires iEnd != iBegin;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd < -1;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:34: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:174:) in method SetZero
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
                                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:174: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:34:
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:44: verify: Precondition conjunct is false: -1 == a.length
    //@ requires -1 == a.length;
                    ^
3 verification failures

public class SetZero {

	//@ requires 5 >= a.length;
	//@ requires 1 <= a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin <= 1;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd <= a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 0;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 >= a.length;
    //@ requires 1 <= a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires -1 >= a.length;
    //@ requires -1 > a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin == a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin >= a.length;
    //@ requires iBegin > a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin == 5;
    //@ requires iBegin != 5;
    //@ requires iBegin >= 5;
    //@ requires iBegin > 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin == 2;
    //@ requires iBegin != 2;
    //@ requires iBegin >= 2;
    //@ requires iBegin > 2;
    //@ requires iBegin < 1;
    //@ requires iBegin <= 1;
    //@ requires iBegin == 1;
    //@ requires iBegin != 1;
    //@ requires iBegin >= 1;
    //@ requires iBegin > 1;
    //@ requires iBegin < 0;
    //@ requires iBegin <= 0;
    //@ requires iBegin == 0;
    //@ requires iBegin != 0;
    //@ requires iBegin >= 0;
    //@ requires iBegin > 0;
    //@ requires iBegin < -1;
    //@ requires iBegin <= -1;
    //@ requires iBegin == -1;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd < a.length;
    //@ requires iEnd <= a.length;
    //@ requires iEnd == a.length;
    //@ requires iEnd != a.length;
    //@ requires iEnd >= a.length;
    //@ requires iEnd > a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd == 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 5;
    //@ requires iEnd > 5;
    //@ requires iEnd < 2;
    //@ requires iEnd <= 2;
    //@ requires iEnd == 2;
    //@ requires iEnd != 2;
    //@ requires iEnd >= 2;
    //@ requires iEnd > 2;
    //@ requires iEnd < 1;
    //@ requires iEnd <= 1;
    //@ requires iEnd == 1;
    //@ requires iEnd != 1;
    //@ requires iEnd >= 1;
    //@ requires iEnd > 1;
    //@ requires iEnd < 0;
    //@ requires iEnd <= 0;
    //@ requires iEnd == 0;
    //@ requires iEnd != 0;
    //@ requires iEnd >= 0;
    //@ requires iEnd > 0;
    //@ requires iEnd < iBegin;
    //@ requires iEnd <= iBegin;
    //@ requires iEnd == iBegin;
    //@ requires iEnd != iBegin;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd < -1;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:34: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:173:) in method SetZero
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
                                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:173: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:34:
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:45: verify: Precondition conjunct is false: -1 >= a.length
    //@ requires -1 >= a.length;
                    ^
3 verification failures

public class SetZero {

	//@ requires 5 >= a.length;
	//@ requires 1 <= a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin <= 1;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd <= a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 0;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 >= a.length;
    //@ requires 1 <= a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires -1 > a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin == a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin >= a.length;
    //@ requires iBegin > a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin == 5;
    //@ requires iBegin != 5;
    //@ requires iBegin >= 5;
    //@ requires iBegin > 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin == 2;
    //@ requires iBegin != 2;
    //@ requires iBegin >= 2;
    //@ requires iBegin > 2;
    //@ requires iBegin < 1;
    //@ requires iBegin <= 1;
    //@ requires iBegin == 1;
    //@ requires iBegin != 1;
    //@ requires iBegin >= 1;
    //@ requires iBegin > 1;
    //@ requires iBegin < 0;
    //@ requires iBegin <= 0;
    //@ requires iBegin == 0;
    //@ requires iBegin != 0;
    //@ requires iBegin >= 0;
    //@ requires iBegin > 0;
    //@ requires iBegin < -1;
    //@ requires iBegin <= -1;
    //@ requires iBegin == -1;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd < a.length;
    //@ requires iEnd <= a.length;
    //@ requires iEnd == a.length;
    //@ requires iEnd != a.length;
    //@ requires iEnd >= a.length;
    //@ requires iEnd > a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd == 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 5;
    //@ requires iEnd > 5;
    //@ requires iEnd < 2;
    //@ requires iEnd <= 2;
    //@ requires iEnd == 2;
    //@ requires iEnd != 2;
    //@ requires iEnd >= 2;
    //@ requires iEnd > 2;
    //@ requires iEnd < 1;
    //@ requires iEnd <= 1;
    //@ requires iEnd == 1;
    //@ requires iEnd != 1;
    //@ requires iEnd >= 1;
    //@ requires iEnd > 1;
    //@ requires iEnd < 0;
    //@ requires iEnd <= 0;
    //@ requires iEnd == 0;
    //@ requires iEnd != 0;
    //@ requires iEnd >= 0;
    //@ requires iEnd > 0;
    //@ requires iEnd < iBegin;
    //@ requires iEnd <= iBegin;
    //@ requires iEnd == iBegin;
    //@ requires iEnd != iBegin;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd < -1;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:34: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:172:) in method SetZero
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
                                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:172: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:34:
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:45: verify: Precondition conjunct is false: -1 > a.length
    //@ requires -1 > a.length;
                    ^
3 verification failures

public class SetZero {

	//@ requires 5 >= a.length;
	//@ requires 1 <= a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin <= 1;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd <= a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 0;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 >= a.length;
    //@ requires 1 <= a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin == a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin >= a.length;
    //@ requires iBegin > a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin == 5;
    //@ requires iBegin != 5;
    //@ requires iBegin >= 5;
    //@ requires iBegin > 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin == 2;
    //@ requires iBegin != 2;
    //@ requires iBegin >= 2;
    //@ requires iBegin > 2;
    //@ requires iBegin < 1;
    //@ requires iBegin <= 1;
    //@ requires iBegin == 1;
    //@ requires iBegin != 1;
    //@ requires iBegin >= 1;
    //@ requires iBegin > 1;
    //@ requires iBegin < 0;
    //@ requires iBegin <= 0;
    //@ requires iBegin == 0;
    //@ requires iBegin != 0;
    //@ requires iBegin >= 0;
    //@ requires iBegin > 0;
    //@ requires iBegin < -1;
    //@ requires iBegin <= -1;
    //@ requires iBegin == -1;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd < a.length;
    //@ requires iEnd <= a.length;
    //@ requires iEnd == a.length;
    //@ requires iEnd != a.length;
    //@ requires iEnd >= a.length;
    //@ requires iEnd > a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd == 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 5;
    //@ requires iEnd > 5;
    //@ requires iEnd < 2;
    //@ requires iEnd <= 2;
    //@ requires iEnd == 2;
    //@ requires iEnd != 2;
    //@ requires iEnd >= 2;
    //@ requires iEnd > 2;
    //@ requires iEnd < 1;
    //@ requires iEnd <= 1;
    //@ requires iEnd == 1;
    //@ requires iEnd != 1;
    //@ requires iEnd >= 1;
    //@ requires iEnd > 1;
    //@ requires iEnd < 0;
    //@ requires iEnd <= 0;
    //@ requires iEnd == 0;
    //@ requires iEnd != 0;
    //@ requires iEnd >= 0;
    //@ requires iEnd > 0;
    //@ requires iEnd < iBegin;
    //@ requires iEnd <= iBegin;
    //@ requires iEnd == iBegin;
    //@ requires iEnd != iBegin;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd < -1;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:34: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:171:) in method SetZero
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
                                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:171: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:34:
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:47: verify: Precondition conjunct is false: iBegin == a.length
    //@ requires iBegin == a.length;
                        ^
3 verification failures

public class SetZero {

	//@ requires 5 >= a.length;
	//@ requires 1 <= a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin <= 1;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd <= a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 0;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 >= a.length;
    //@ requires 1 <= a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin >= a.length;
    //@ requires iBegin > a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin == 5;
    //@ requires iBegin != 5;
    //@ requires iBegin >= 5;
    //@ requires iBegin > 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin == 2;
    //@ requires iBegin != 2;
    //@ requires iBegin >= 2;
    //@ requires iBegin > 2;
    //@ requires iBegin < 1;
    //@ requires iBegin <= 1;
    //@ requires iBegin == 1;
    //@ requires iBegin != 1;
    //@ requires iBegin >= 1;
    //@ requires iBegin > 1;
    //@ requires iBegin < 0;
    //@ requires iBegin <= 0;
    //@ requires iBegin == 0;
    //@ requires iBegin != 0;
    //@ requires iBegin >= 0;
    //@ requires iBegin > 0;
    //@ requires iBegin < -1;
    //@ requires iBegin <= -1;
    //@ requires iBegin == -1;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd < a.length;
    //@ requires iEnd <= a.length;
    //@ requires iEnd == a.length;
    //@ requires iEnd != a.length;
    //@ requires iEnd >= a.length;
    //@ requires iEnd > a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd == 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 5;
    //@ requires iEnd > 5;
    //@ requires iEnd < 2;
    //@ requires iEnd <= 2;
    //@ requires iEnd == 2;
    //@ requires iEnd != 2;
    //@ requires iEnd >= 2;
    //@ requires iEnd > 2;
    //@ requires iEnd < 1;
    //@ requires iEnd <= 1;
    //@ requires iEnd == 1;
    //@ requires iEnd != 1;
    //@ requires iEnd >= 1;
    //@ requires iEnd > 1;
    //@ requires iEnd < 0;
    //@ requires iEnd <= 0;
    //@ requires iEnd == 0;
    //@ requires iEnd != 0;
    //@ requires iEnd >= 0;
    //@ requires iEnd > 0;
    //@ requires iEnd < iBegin;
    //@ requires iEnd <= iBegin;
    //@ requires iEnd == iBegin;
    //@ requires iEnd != iBegin;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd < -1;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:34: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:170:) in method SetZero
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
                                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:170: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:34:
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:48: verify: Precondition conjunct is false: iBegin >= a.length
    //@ requires iBegin >= a.length;
                        ^
3 verification failures

public class SetZero {

	//@ requires 5 >= a.length;
	//@ requires 1 <= a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin <= 1;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd <= a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 0;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 >= a.length;
    //@ requires 1 <= a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin > a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin == 5;
    //@ requires iBegin != 5;
    //@ requires iBegin >= 5;
    //@ requires iBegin > 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin == 2;
    //@ requires iBegin != 2;
    //@ requires iBegin >= 2;
    //@ requires iBegin > 2;
    //@ requires iBegin < 1;
    //@ requires iBegin <= 1;
    //@ requires iBegin == 1;
    //@ requires iBegin != 1;
    //@ requires iBegin >= 1;
    //@ requires iBegin > 1;
    //@ requires iBegin < 0;
    //@ requires iBegin <= 0;
    //@ requires iBegin == 0;
    //@ requires iBegin != 0;
    //@ requires iBegin >= 0;
    //@ requires iBegin > 0;
    //@ requires iBegin < -1;
    //@ requires iBegin <= -1;
    //@ requires iBegin == -1;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd < a.length;
    //@ requires iEnd <= a.length;
    //@ requires iEnd == a.length;
    //@ requires iEnd != a.length;
    //@ requires iEnd >= a.length;
    //@ requires iEnd > a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd == 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 5;
    //@ requires iEnd > 5;
    //@ requires iEnd < 2;
    //@ requires iEnd <= 2;
    //@ requires iEnd == 2;
    //@ requires iEnd != 2;
    //@ requires iEnd >= 2;
    //@ requires iEnd > 2;
    //@ requires iEnd < 1;
    //@ requires iEnd <= 1;
    //@ requires iEnd == 1;
    //@ requires iEnd != 1;
    //@ requires iEnd >= 1;
    //@ requires iEnd > 1;
    //@ requires iEnd < 0;
    //@ requires iEnd <= 0;
    //@ requires iEnd == 0;
    //@ requires iEnd != 0;
    //@ requires iEnd >= 0;
    //@ requires iEnd > 0;
    //@ requires iEnd < iBegin;
    //@ requires iEnd <= iBegin;
    //@ requires iEnd == iBegin;
    //@ requires iEnd != iBegin;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd < -1;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:34: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:169:) in method SetZero
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
                                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:169: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:34:
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:48: verify: Precondition conjunct is false: iBegin > a.length
    //@ requires iBegin > a.length;
                        ^
3 verification failures

public class SetZero {

	//@ requires 5 >= a.length;
	//@ requires 1 <= a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin <= 1;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd <= a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 0;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 >= a.length;
    //@ requires 1 <= a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin == 5;
    //@ requires iBegin != 5;
    //@ requires iBegin >= 5;
    //@ requires iBegin > 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin == 2;
    //@ requires iBegin != 2;
    //@ requires iBegin >= 2;
    //@ requires iBegin > 2;
    //@ requires iBegin < 1;
    //@ requires iBegin <= 1;
    //@ requires iBegin == 1;
    //@ requires iBegin != 1;
    //@ requires iBegin >= 1;
    //@ requires iBegin > 1;
    //@ requires iBegin < 0;
    //@ requires iBegin <= 0;
    //@ requires iBegin == 0;
    //@ requires iBegin != 0;
    //@ requires iBegin >= 0;
    //@ requires iBegin > 0;
    //@ requires iBegin < -1;
    //@ requires iBegin <= -1;
    //@ requires iBegin == -1;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd < a.length;
    //@ requires iEnd <= a.length;
    //@ requires iEnd == a.length;
    //@ requires iEnd != a.length;
    //@ requires iEnd >= a.length;
    //@ requires iEnd > a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd == 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 5;
    //@ requires iEnd > 5;
    //@ requires iEnd < 2;
    //@ requires iEnd <= 2;
    //@ requires iEnd == 2;
    //@ requires iEnd != 2;
    //@ requires iEnd >= 2;
    //@ requires iEnd > 2;
    //@ requires iEnd < 1;
    //@ requires iEnd <= 1;
    //@ requires iEnd == 1;
    //@ requires iEnd != 1;
    //@ requires iEnd >= 1;
    //@ requires iEnd > 1;
    //@ requires iEnd < 0;
    //@ requires iEnd <= 0;
    //@ requires iEnd == 0;
    //@ requires iEnd != 0;
    //@ requires iEnd >= 0;
    //@ requires iEnd > 0;
    //@ requires iEnd < iBegin;
    //@ requires iEnd <= iBegin;
    //@ requires iEnd == iBegin;
    //@ requires iEnd != iBegin;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd < -1;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:34: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:168:) in method SetZero
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
                                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:168: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:34:
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:50: verify: Precondition conjunct is false: iBegin == 5
    //@ requires iBegin == 5;
                        ^
3 verification failures

public class SetZero {

	//@ requires 5 >= a.length;
	//@ requires 1 <= a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin <= 1;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd <= a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 0;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 >= a.length;
    //@ requires 1 <= a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin != 5;
    //@ requires iBegin >= 5;
    //@ requires iBegin > 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin == 2;
    //@ requires iBegin != 2;
    //@ requires iBegin >= 2;
    //@ requires iBegin > 2;
    //@ requires iBegin < 1;
    //@ requires iBegin <= 1;
    //@ requires iBegin == 1;
    //@ requires iBegin != 1;
    //@ requires iBegin >= 1;
    //@ requires iBegin > 1;
    //@ requires iBegin < 0;
    //@ requires iBegin <= 0;
    //@ requires iBegin == 0;
    //@ requires iBegin != 0;
    //@ requires iBegin >= 0;
    //@ requires iBegin > 0;
    //@ requires iBegin < -1;
    //@ requires iBegin <= -1;
    //@ requires iBegin == -1;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd < a.length;
    //@ requires iEnd <= a.length;
    //@ requires iEnd == a.length;
    //@ requires iEnd != a.length;
    //@ requires iEnd >= a.length;
    //@ requires iEnd > a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd == 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 5;
    //@ requires iEnd > 5;
    //@ requires iEnd < 2;
    //@ requires iEnd <= 2;
    //@ requires iEnd == 2;
    //@ requires iEnd != 2;
    //@ requires iEnd >= 2;
    //@ requires iEnd > 2;
    //@ requires iEnd < 1;
    //@ requires iEnd <= 1;
    //@ requires iEnd == 1;
    //@ requires iEnd != 1;
    //@ requires iEnd >= 1;
    //@ requires iEnd > 1;
    //@ requires iEnd < 0;
    //@ requires iEnd <= 0;
    //@ requires iEnd == 0;
    //@ requires iEnd != 0;
    //@ requires iEnd >= 0;
    //@ requires iEnd > 0;
    //@ requires iEnd < iBegin;
    //@ requires iEnd <= iBegin;
    //@ requires iEnd == iBegin;
    //@ requires iEnd != iBegin;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd < -1;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:34: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:167:) in method SetZero
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
                                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:167: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:34:
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:51: verify: Precondition conjunct is false: iBegin >= 5
    //@ requires iBegin >= 5;
                        ^
3 verification failures

public class SetZero {

	//@ requires 5 >= a.length;
	//@ requires 1 <= a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin <= 1;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd <= a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 0;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 >= a.length;
    //@ requires 1 <= a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin != 5;
    //@ requires iBegin > 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin == 2;
    //@ requires iBegin != 2;
    //@ requires iBegin >= 2;
    //@ requires iBegin > 2;
    //@ requires iBegin < 1;
    //@ requires iBegin <= 1;
    //@ requires iBegin == 1;
    //@ requires iBegin != 1;
    //@ requires iBegin >= 1;
    //@ requires iBegin > 1;
    //@ requires iBegin < 0;
    //@ requires iBegin <= 0;
    //@ requires iBegin == 0;
    //@ requires iBegin != 0;
    //@ requires iBegin >= 0;
    //@ requires iBegin > 0;
    //@ requires iBegin < -1;
    //@ requires iBegin <= -1;
    //@ requires iBegin == -1;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd < a.length;
    //@ requires iEnd <= a.length;
    //@ requires iEnd == a.length;
    //@ requires iEnd != a.length;
    //@ requires iEnd >= a.length;
    //@ requires iEnd > a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd == 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 5;
    //@ requires iEnd > 5;
    //@ requires iEnd < 2;
    //@ requires iEnd <= 2;
    //@ requires iEnd == 2;
    //@ requires iEnd != 2;
    //@ requires iEnd >= 2;
    //@ requires iEnd > 2;
    //@ requires iEnd < 1;
    //@ requires iEnd <= 1;
    //@ requires iEnd == 1;
    //@ requires iEnd != 1;
    //@ requires iEnd >= 1;
    //@ requires iEnd > 1;
    //@ requires iEnd < 0;
    //@ requires iEnd <= 0;
    //@ requires iEnd == 0;
    //@ requires iEnd != 0;
    //@ requires iEnd >= 0;
    //@ requires iEnd > 0;
    //@ requires iEnd < iBegin;
    //@ requires iEnd <= iBegin;
    //@ requires iEnd == iBegin;
    //@ requires iEnd != iBegin;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd < -1;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:34: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:166:) in method SetZero
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
                                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:166: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:34:
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:51: verify: Precondition conjunct is false: iBegin > 5
    //@ requires iBegin > 5;
                        ^
3 verification failures

public class SetZero {

	//@ requires 5 >= a.length;
	//@ requires 1 <= a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin <= 1;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd <= a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 0;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 >= a.length;
    //@ requires 1 <= a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin != 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin == 2;
    //@ requires iBegin != 2;
    //@ requires iBegin >= 2;
    //@ requires iBegin > 2;
    //@ requires iBegin < 1;
    //@ requires iBegin <= 1;
    //@ requires iBegin == 1;
    //@ requires iBegin != 1;
    //@ requires iBegin >= 1;
    //@ requires iBegin > 1;
    //@ requires iBegin < 0;
    //@ requires iBegin <= 0;
    //@ requires iBegin == 0;
    //@ requires iBegin != 0;
    //@ requires iBegin >= 0;
    //@ requires iBegin > 0;
    //@ requires iBegin < -1;
    //@ requires iBegin <= -1;
    //@ requires iBegin == -1;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd < a.length;
    //@ requires iEnd <= a.length;
    //@ requires iEnd == a.length;
    //@ requires iEnd != a.length;
    //@ requires iEnd >= a.length;
    //@ requires iEnd > a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd == 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 5;
    //@ requires iEnd > 5;
    //@ requires iEnd < 2;
    //@ requires iEnd <= 2;
    //@ requires iEnd == 2;
    //@ requires iEnd != 2;
    //@ requires iEnd >= 2;
    //@ requires iEnd > 2;
    //@ requires iEnd < 1;
    //@ requires iEnd <= 1;
    //@ requires iEnd == 1;
    //@ requires iEnd != 1;
    //@ requires iEnd >= 1;
    //@ requires iEnd > 1;
    //@ requires iEnd < 0;
    //@ requires iEnd <= 0;
    //@ requires iEnd == 0;
    //@ requires iEnd != 0;
    //@ requires iEnd >= 0;
    //@ requires iEnd > 0;
    //@ requires iEnd < iBegin;
    //@ requires iEnd <= iBegin;
    //@ requires iEnd == iBegin;
    //@ requires iEnd != iBegin;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd < -1;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:34: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:165:) in method SetZero
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
                                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:165: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:34:
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:53: verify: Precondition conjunct is false: iBegin == 2
    //@ requires iBegin == 2;
                        ^
3 verification failures

public class SetZero {

	//@ requires 5 >= a.length;
	//@ requires 1 <= a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin <= 1;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd <= a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 0;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 >= a.length;
    //@ requires 1 <= a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin != 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin != 2;
    //@ requires iBegin >= 2;
    //@ requires iBegin > 2;
    //@ requires iBegin < 1;
    //@ requires iBegin <= 1;
    //@ requires iBegin == 1;
    //@ requires iBegin != 1;
    //@ requires iBegin >= 1;
    //@ requires iBegin > 1;
    //@ requires iBegin < 0;
    //@ requires iBegin <= 0;
    //@ requires iBegin == 0;
    //@ requires iBegin != 0;
    //@ requires iBegin >= 0;
    //@ requires iBegin > 0;
    //@ requires iBegin < -1;
    //@ requires iBegin <= -1;
    //@ requires iBegin == -1;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd < a.length;
    //@ requires iEnd <= a.length;
    //@ requires iEnd == a.length;
    //@ requires iEnd != a.length;
    //@ requires iEnd >= a.length;
    //@ requires iEnd > a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd == 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 5;
    //@ requires iEnd > 5;
    //@ requires iEnd < 2;
    //@ requires iEnd <= 2;
    //@ requires iEnd == 2;
    //@ requires iEnd != 2;
    //@ requires iEnd >= 2;
    //@ requires iEnd > 2;
    //@ requires iEnd < 1;
    //@ requires iEnd <= 1;
    //@ requires iEnd == 1;
    //@ requires iEnd != 1;
    //@ requires iEnd >= 1;
    //@ requires iEnd > 1;
    //@ requires iEnd < 0;
    //@ requires iEnd <= 0;
    //@ requires iEnd == 0;
    //@ requires iEnd != 0;
    //@ requires iEnd >= 0;
    //@ requires iEnd > 0;
    //@ requires iEnd < iBegin;
    //@ requires iEnd <= iBegin;
    //@ requires iEnd == iBegin;
    //@ requires iEnd != iBegin;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd < -1;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:34: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:164:) in method SetZero
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
                                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:164: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:34:
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:54: verify: Precondition conjunct is false: iBegin >= 2
    //@ requires iBegin >= 2;
                        ^
3 verification failures

public class SetZero {

	//@ requires 5 >= a.length;
	//@ requires 1 <= a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin <= 1;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd <= a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 0;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 >= a.length;
    //@ requires 1 <= a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin != 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin != 2;
    //@ requires iBegin > 2;
    //@ requires iBegin < 1;
    //@ requires iBegin <= 1;
    //@ requires iBegin == 1;
    //@ requires iBegin != 1;
    //@ requires iBegin >= 1;
    //@ requires iBegin > 1;
    //@ requires iBegin < 0;
    //@ requires iBegin <= 0;
    //@ requires iBegin == 0;
    //@ requires iBegin != 0;
    //@ requires iBegin >= 0;
    //@ requires iBegin > 0;
    //@ requires iBegin < -1;
    //@ requires iBegin <= -1;
    //@ requires iBegin == -1;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd < a.length;
    //@ requires iEnd <= a.length;
    //@ requires iEnd == a.length;
    //@ requires iEnd != a.length;
    //@ requires iEnd >= a.length;
    //@ requires iEnd > a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd == 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 5;
    //@ requires iEnd > 5;
    //@ requires iEnd < 2;
    //@ requires iEnd <= 2;
    //@ requires iEnd == 2;
    //@ requires iEnd != 2;
    //@ requires iEnd >= 2;
    //@ requires iEnd > 2;
    //@ requires iEnd < 1;
    //@ requires iEnd <= 1;
    //@ requires iEnd == 1;
    //@ requires iEnd != 1;
    //@ requires iEnd >= 1;
    //@ requires iEnd > 1;
    //@ requires iEnd < 0;
    //@ requires iEnd <= 0;
    //@ requires iEnd == 0;
    //@ requires iEnd != 0;
    //@ requires iEnd >= 0;
    //@ requires iEnd > 0;
    //@ requires iEnd < iBegin;
    //@ requires iEnd <= iBegin;
    //@ requires iEnd == iBegin;
    //@ requires iEnd != iBegin;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd < -1;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:34: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:163:) in method SetZero
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
                                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:163: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:34:
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:54: verify: Precondition conjunct is false: iBegin > 2
    //@ requires iBegin > 2;
                        ^
3 verification failures

public class SetZero {

	//@ requires 5 >= a.length;
	//@ requires 1 <= a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin <= 1;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd <= a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 0;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 >= a.length;
    //@ requires 1 <= a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin != 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin != 2;
    //@ requires iBegin < 1;
    //@ requires iBegin <= 1;
    //@ requires iBegin == 1;
    //@ requires iBegin != 1;
    //@ requires iBegin >= 1;
    //@ requires iBegin > 1;
    //@ requires iBegin < 0;
    //@ requires iBegin <= 0;
    //@ requires iBegin == 0;
    //@ requires iBegin != 0;
    //@ requires iBegin >= 0;
    //@ requires iBegin > 0;
    //@ requires iBegin < -1;
    //@ requires iBegin <= -1;
    //@ requires iBegin == -1;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd < a.length;
    //@ requires iEnd <= a.length;
    //@ requires iEnd == a.length;
    //@ requires iEnd != a.length;
    //@ requires iEnd >= a.length;
    //@ requires iEnd > a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd == 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 5;
    //@ requires iEnd > 5;
    //@ requires iEnd < 2;
    //@ requires iEnd <= 2;
    //@ requires iEnd == 2;
    //@ requires iEnd != 2;
    //@ requires iEnd >= 2;
    //@ requires iEnd > 2;
    //@ requires iEnd < 1;
    //@ requires iEnd <= 1;
    //@ requires iEnd == 1;
    //@ requires iEnd != 1;
    //@ requires iEnd >= 1;
    //@ requires iEnd > 1;
    //@ requires iEnd < 0;
    //@ requires iEnd <= 0;
    //@ requires iEnd == 0;
    //@ requires iEnd != 0;
    //@ requires iEnd >= 0;
    //@ requires iEnd > 0;
    //@ requires iEnd < iBegin;
    //@ requires iEnd <= iBegin;
    //@ requires iEnd == iBegin;
    //@ requires iEnd != iBegin;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd < -1;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:34: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:162:) in method SetZero
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
                                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:162: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:34:
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:56: verify: Precondition conjunct is false: iBegin == 1
    //@ requires iBegin == 1;
                        ^
3 verification failures

public class SetZero {

	//@ requires 5 >= a.length;
	//@ requires 1 <= a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin <= 1;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd <= a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 0;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 >= a.length;
    //@ requires 1 <= a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin != 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin != 2;
    //@ requires iBegin < 1;
    //@ requires iBegin <= 1;
    //@ requires iBegin != 1;
    //@ requires iBegin >= 1;
    //@ requires iBegin > 1;
    //@ requires iBegin < 0;
    //@ requires iBegin <= 0;
    //@ requires iBegin == 0;
    //@ requires iBegin != 0;
    //@ requires iBegin >= 0;
    //@ requires iBegin > 0;
    //@ requires iBegin < -1;
    //@ requires iBegin <= -1;
    //@ requires iBegin == -1;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd < a.length;
    //@ requires iEnd <= a.length;
    //@ requires iEnd == a.length;
    //@ requires iEnd != a.length;
    //@ requires iEnd >= a.length;
    //@ requires iEnd > a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd == 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 5;
    //@ requires iEnd > 5;
    //@ requires iEnd < 2;
    //@ requires iEnd <= 2;
    //@ requires iEnd == 2;
    //@ requires iEnd != 2;
    //@ requires iEnd >= 2;
    //@ requires iEnd > 2;
    //@ requires iEnd < 1;
    //@ requires iEnd <= 1;
    //@ requires iEnd == 1;
    //@ requires iEnd != 1;
    //@ requires iEnd >= 1;
    //@ requires iEnd > 1;
    //@ requires iEnd < 0;
    //@ requires iEnd <= 0;
    //@ requires iEnd == 0;
    //@ requires iEnd != 0;
    //@ requires iEnd >= 0;
    //@ requires iEnd > 0;
    //@ requires iEnd < iBegin;
    //@ requires iEnd <= iBegin;
    //@ requires iEnd == iBegin;
    //@ requires iEnd != iBegin;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd < -1;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:34: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:161:) in method SetZero
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
                                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:161: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:34:
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:57: verify: Precondition conjunct is false: iBegin >= 1
    //@ requires iBegin >= 1;
                        ^
3 verification failures

public class SetZero {

	//@ requires 5 >= a.length;
	//@ requires 1 <= a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin <= 1;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd <= a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 0;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 >= a.length;
    //@ requires 1 <= a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin != 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin != 2;
    //@ requires iBegin < 1;
    //@ requires iBegin <= 1;
    //@ requires iBegin != 1;
    //@ requires iBegin > 1;
    //@ requires iBegin < 0;
    //@ requires iBegin <= 0;
    //@ requires iBegin == 0;
    //@ requires iBegin != 0;
    //@ requires iBegin >= 0;
    //@ requires iBegin > 0;
    //@ requires iBegin < -1;
    //@ requires iBegin <= -1;
    //@ requires iBegin == -1;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd < a.length;
    //@ requires iEnd <= a.length;
    //@ requires iEnd == a.length;
    //@ requires iEnd != a.length;
    //@ requires iEnd >= a.length;
    //@ requires iEnd > a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd == 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 5;
    //@ requires iEnd > 5;
    //@ requires iEnd < 2;
    //@ requires iEnd <= 2;
    //@ requires iEnd == 2;
    //@ requires iEnd != 2;
    //@ requires iEnd >= 2;
    //@ requires iEnd > 2;
    //@ requires iEnd < 1;
    //@ requires iEnd <= 1;
    //@ requires iEnd == 1;
    //@ requires iEnd != 1;
    //@ requires iEnd >= 1;
    //@ requires iEnd > 1;
    //@ requires iEnd < 0;
    //@ requires iEnd <= 0;
    //@ requires iEnd == 0;
    //@ requires iEnd != 0;
    //@ requires iEnd >= 0;
    //@ requires iEnd > 0;
    //@ requires iEnd < iBegin;
    //@ requires iEnd <= iBegin;
    //@ requires iEnd == iBegin;
    //@ requires iEnd != iBegin;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd < -1;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:34: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:160:) in method SetZero
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
                                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:160: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:34:
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:54: verify: Precondition conjunct is false: iBegin < 1
    //@ requires iBegin < 1;
                        ^
3 verification failures

public class SetZero {

	//@ requires 5 >= a.length;
	//@ requires 1 <= a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin <= 1;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd <= a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 0;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 >= a.length;
    //@ requires 1 <= a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin != 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin != 2;
    //@ requires iBegin <= 1;
    //@ requires iBegin != 1;
    //@ requires iBegin > 1;
    //@ requires iBegin < 0;
    //@ requires iBegin <= 0;
    //@ requires iBegin == 0;
    //@ requires iBegin != 0;
    //@ requires iBegin >= 0;
    //@ requires iBegin > 0;
    //@ requires iBegin < -1;
    //@ requires iBegin <= -1;
    //@ requires iBegin == -1;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd < a.length;
    //@ requires iEnd <= a.length;
    //@ requires iEnd == a.length;
    //@ requires iEnd != a.length;
    //@ requires iEnd >= a.length;
    //@ requires iEnd > a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd == 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 5;
    //@ requires iEnd > 5;
    //@ requires iEnd < 2;
    //@ requires iEnd <= 2;
    //@ requires iEnd == 2;
    //@ requires iEnd != 2;
    //@ requires iEnd >= 2;
    //@ requires iEnd > 2;
    //@ requires iEnd < 1;
    //@ requires iEnd <= 1;
    //@ requires iEnd == 1;
    //@ requires iEnd != 1;
    //@ requires iEnd >= 1;
    //@ requires iEnd > 1;
    //@ requires iEnd < 0;
    //@ requires iEnd <= 0;
    //@ requires iEnd == 0;
    //@ requires iEnd != 0;
    //@ requires iEnd >= 0;
    //@ requires iEnd > 0;
    //@ requires iEnd < iBegin;
    //@ requires iEnd <= iBegin;
    //@ requires iEnd == iBegin;
    //@ requires iEnd != iBegin;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd < -1;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:34: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:159:) in method SetZero
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
                                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:159: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:34:
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:56: verify: Precondition conjunct is false: iBegin > 1
    //@ requires iBegin > 1;
                        ^
3 verification failures

public class SetZero {

	//@ requires 5 >= a.length;
	//@ requires 1 <= a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin <= 1;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd <= a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 0;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 >= a.length;
    //@ requires 1 <= a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin != 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin != 2;
    //@ requires iBegin <= 1;
    //@ requires iBegin != 1;
    //@ requires iBegin < 0;
    //@ requires iBegin <= 0;
    //@ requires iBegin == 0;
    //@ requires iBegin != 0;
    //@ requires iBegin >= 0;
    //@ requires iBegin > 0;
    //@ requires iBegin < -1;
    //@ requires iBegin <= -1;
    //@ requires iBegin == -1;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd < a.length;
    //@ requires iEnd <= a.length;
    //@ requires iEnd == a.length;
    //@ requires iEnd != a.length;
    //@ requires iEnd >= a.length;
    //@ requires iEnd > a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd == 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 5;
    //@ requires iEnd > 5;
    //@ requires iEnd < 2;
    //@ requires iEnd <= 2;
    //@ requires iEnd == 2;
    //@ requires iEnd != 2;
    //@ requires iEnd >= 2;
    //@ requires iEnd > 2;
    //@ requires iEnd < 1;
    //@ requires iEnd <= 1;
    //@ requires iEnd == 1;
    //@ requires iEnd != 1;
    //@ requires iEnd >= 1;
    //@ requires iEnd > 1;
    //@ requires iEnd < 0;
    //@ requires iEnd <= 0;
    //@ requires iEnd == 0;
    //@ requires iEnd != 0;
    //@ requires iEnd >= 0;
    //@ requires iEnd > 0;
    //@ requires iEnd < iBegin;
    //@ requires iEnd <= iBegin;
    //@ requires iEnd == iBegin;
    //@ requires iEnd != iBegin;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd < -1;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:34: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:158:) in method SetZero
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
                                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:158: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:34:
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:56: verify: Precondition conjunct is false: iBegin < 0
    //@ requires iBegin < 0;
                        ^
3 verification failures

public class SetZero {

	//@ requires 5 >= a.length;
	//@ requires 1 <= a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin <= 1;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd <= a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 0;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 >= a.length;
    //@ requires 1 <= a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin != 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin != 2;
    //@ requires iBegin <= 1;
    //@ requires iBegin != 1;
    //@ requires iBegin <= 0;
    //@ requires iBegin == 0;
    //@ requires iBegin != 0;
    //@ requires iBegin >= 0;
    //@ requires iBegin > 0;
    //@ requires iBegin < -1;
    //@ requires iBegin <= -1;
    //@ requires iBegin == -1;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd < a.length;
    //@ requires iEnd <= a.length;
    //@ requires iEnd == a.length;
    //@ requires iEnd != a.length;
    //@ requires iEnd >= a.length;
    //@ requires iEnd > a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd == 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 5;
    //@ requires iEnd > 5;
    //@ requires iEnd < 2;
    //@ requires iEnd <= 2;
    //@ requires iEnd == 2;
    //@ requires iEnd != 2;
    //@ requires iEnd >= 2;
    //@ requires iEnd > 2;
    //@ requires iEnd < 1;
    //@ requires iEnd <= 1;
    //@ requires iEnd == 1;
    //@ requires iEnd != 1;
    //@ requires iEnd >= 1;
    //@ requires iEnd > 1;
    //@ requires iEnd < 0;
    //@ requires iEnd <= 0;
    //@ requires iEnd == 0;
    //@ requires iEnd != 0;
    //@ requires iEnd >= 0;
    //@ requires iEnd > 0;
    //@ requires iEnd < iBegin;
    //@ requires iEnd <= iBegin;
    //@ requires iEnd == iBegin;
    //@ requires iEnd != iBegin;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd < -1;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:34: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:157:) in method SetZero
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
                                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:157: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:34:
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:58: verify: Precondition conjunct is false: iBegin != 0
    //@ requires iBegin != 0;
                        ^
3 verification failures

public class SetZero {

	//@ requires 5 >= a.length;
	//@ requires 1 <= a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin <= 1;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd <= a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 0;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 >= a.length;
    //@ requires 1 <= a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin != 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin != 2;
    //@ requires iBegin <= 1;
    //@ requires iBegin != 1;
    //@ requires iBegin <= 0;
    //@ requires iBegin == 0;
    //@ requires iBegin >= 0;
    //@ requires iBegin > 0;
    //@ requires iBegin < -1;
    //@ requires iBegin <= -1;
    //@ requires iBegin == -1;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd < a.length;
    //@ requires iEnd <= a.length;
    //@ requires iEnd == a.length;
    //@ requires iEnd != a.length;
    //@ requires iEnd >= a.length;
    //@ requires iEnd > a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd == 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 5;
    //@ requires iEnd > 5;
    //@ requires iEnd < 2;
    //@ requires iEnd <= 2;
    //@ requires iEnd == 2;
    //@ requires iEnd != 2;
    //@ requires iEnd >= 2;
    //@ requires iEnd > 2;
    //@ requires iEnd < 1;
    //@ requires iEnd <= 1;
    //@ requires iEnd == 1;
    //@ requires iEnd != 1;
    //@ requires iEnd >= 1;
    //@ requires iEnd > 1;
    //@ requires iEnd < 0;
    //@ requires iEnd <= 0;
    //@ requires iEnd == 0;
    //@ requires iEnd != 0;
    //@ requires iEnd >= 0;
    //@ requires iEnd > 0;
    //@ requires iEnd < iBegin;
    //@ requires iEnd <= iBegin;
    //@ requires iEnd == iBegin;
    //@ requires iEnd != iBegin;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd < -1;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:34: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:156:) in method SetZero
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
                                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:156: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:34:
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:59: verify: Precondition conjunct is false: iBegin > 0
    //@ requires iBegin > 0;
                        ^
3 verification failures

public class SetZero {

	//@ requires 5 >= a.length;
	//@ requires 1 <= a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin <= 1;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd <= a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 0;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 >= a.length;
    //@ requires 1 <= a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin != 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin != 2;
    //@ requires iBegin <= 1;
    //@ requires iBegin != 1;
    //@ requires iBegin <= 0;
    //@ requires iBegin == 0;
    //@ requires iBegin >= 0;
    //@ requires iBegin < -1;
    //@ requires iBegin <= -1;
    //@ requires iBegin == -1;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd < a.length;
    //@ requires iEnd <= a.length;
    //@ requires iEnd == a.length;
    //@ requires iEnd != a.length;
    //@ requires iEnd >= a.length;
    //@ requires iEnd > a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd == 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 5;
    //@ requires iEnd > 5;
    //@ requires iEnd < 2;
    //@ requires iEnd <= 2;
    //@ requires iEnd == 2;
    //@ requires iEnd != 2;
    //@ requires iEnd >= 2;
    //@ requires iEnd > 2;
    //@ requires iEnd < 1;
    //@ requires iEnd <= 1;
    //@ requires iEnd == 1;
    //@ requires iEnd != 1;
    //@ requires iEnd >= 1;
    //@ requires iEnd > 1;
    //@ requires iEnd < 0;
    //@ requires iEnd <= 0;
    //@ requires iEnd == 0;
    //@ requires iEnd != 0;
    //@ requires iEnd >= 0;
    //@ requires iEnd > 0;
    //@ requires iEnd < iBegin;
    //@ requires iEnd <= iBegin;
    //@ requires iEnd == iBegin;
    //@ requires iEnd != iBegin;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd < -1;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:34: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:155:) in method SetZero
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
                                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:155: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:34:
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:59: verify: Precondition conjunct is false: iBegin < -1
    //@ requires iBegin < -1;
                        ^
3 verification failures

public class SetZero {

	//@ requires 5 >= a.length;
	//@ requires 1 <= a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin <= 1;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd <= a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 0;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 >= a.length;
    //@ requires 1 <= a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin != 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin != 2;
    //@ requires iBegin <= 1;
    //@ requires iBegin != 1;
    //@ requires iBegin <= 0;
    //@ requires iBegin == 0;
    //@ requires iBegin >= 0;
    //@ requires iBegin <= -1;
    //@ requires iBegin == -1;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd < a.length;
    //@ requires iEnd <= a.length;
    //@ requires iEnd == a.length;
    //@ requires iEnd != a.length;
    //@ requires iEnd >= a.length;
    //@ requires iEnd > a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd == 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 5;
    //@ requires iEnd > 5;
    //@ requires iEnd < 2;
    //@ requires iEnd <= 2;
    //@ requires iEnd == 2;
    //@ requires iEnd != 2;
    //@ requires iEnd >= 2;
    //@ requires iEnd > 2;
    //@ requires iEnd < 1;
    //@ requires iEnd <= 1;
    //@ requires iEnd == 1;
    //@ requires iEnd != 1;
    //@ requires iEnd >= 1;
    //@ requires iEnd > 1;
    //@ requires iEnd < 0;
    //@ requires iEnd <= 0;
    //@ requires iEnd == 0;
    //@ requires iEnd != 0;
    //@ requires iEnd >= 0;
    //@ requires iEnd > 0;
    //@ requires iEnd < iBegin;
    //@ requires iEnd <= iBegin;
    //@ requires iEnd == iBegin;
    //@ requires iEnd != iBegin;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd < -1;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:34: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:154:) in method SetZero
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
                                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:154: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:34:
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:55: verify: Precondition conjunct is false: iBegin != 1
    //@ requires iBegin != 1;
                        ^
3 verification failures

public class SetZero {

	//@ requires 5 >= a.length;
	//@ requires 1 <= a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin <= 1;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd <= a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 0;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 >= a.length;
    //@ requires 1 <= a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin != 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin != 2;
    //@ requires iBegin <= 1;
    //@ requires iBegin <= 0;
    //@ requires iBegin == 0;
    //@ requires iBegin >= 0;
    //@ requires iBegin <= -1;
    //@ requires iBegin == -1;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd < a.length;
    //@ requires iEnd <= a.length;
    //@ requires iEnd == a.length;
    //@ requires iEnd != a.length;
    //@ requires iEnd >= a.length;
    //@ requires iEnd > a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd == 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 5;
    //@ requires iEnd > 5;
    //@ requires iEnd < 2;
    //@ requires iEnd <= 2;
    //@ requires iEnd == 2;
    //@ requires iEnd != 2;
    //@ requires iEnd >= 2;
    //@ requires iEnd > 2;
    //@ requires iEnd < 1;
    //@ requires iEnd <= 1;
    //@ requires iEnd == 1;
    //@ requires iEnd != 1;
    //@ requires iEnd >= 1;
    //@ requires iEnd > 1;
    //@ requires iEnd < 0;
    //@ requires iEnd <= 0;
    //@ requires iEnd == 0;
    //@ requires iEnd != 0;
    //@ requires iEnd >= 0;
    //@ requires iEnd > 0;
    //@ requires iEnd < iBegin;
    //@ requires iEnd <= iBegin;
    //@ requires iEnd == iBegin;
    //@ requires iEnd != iBegin;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd < -1;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:34: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:153:) in method SetZero
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
                                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:153: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:34:
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:58: verify: Precondition conjunct is false: iBegin <= -1
    //@ requires iBegin <= -1;
                        ^
3 verification failures

public class SetZero {

	//@ requires 5 >= a.length;
	//@ requires 1 <= a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin <= 1;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd <= a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 0;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 >= a.length;
    //@ requires 1 <= a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin != 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin != 2;
    //@ requires iBegin <= 1;
    //@ requires iBegin <= 0;
    //@ requires iBegin == 0;
    //@ requires iBegin >= 0;
    //@ requires iBegin == -1;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd < a.length;
    //@ requires iEnd <= a.length;
    //@ requires iEnd == a.length;
    //@ requires iEnd != a.length;
    //@ requires iEnd >= a.length;
    //@ requires iEnd > a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd == 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 5;
    //@ requires iEnd > 5;
    //@ requires iEnd < 2;
    //@ requires iEnd <= 2;
    //@ requires iEnd == 2;
    //@ requires iEnd != 2;
    //@ requires iEnd >= 2;
    //@ requires iEnd > 2;
    //@ requires iEnd < 1;
    //@ requires iEnd <= 1;
    //@ requires iEnd == 1;
    //@ requires iEnd != 1;
    //@ requires iEnd >= 1;
    //@ requires iEnd > 1;
    //@ requires iEnd < 0;
    //@ requires iEnd <= 0;
    //@ requires iEnd == 0;
    //@ requires iEnd != 0;
    //@ requires iEnd >= 0;
    //@ requires iEnd > 0;
    //@ requires iEnd < iBegin;
    //@ requires iEnd <= iBegin;
    //@ requires iEnd == iBegin;
    //@ requires iEnd != iBegin;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd < -1;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:34: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:152:) in method SetZero
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
                                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:152: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:34:
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:58: verify: Precondition conjunct is false: iBegin == -1
    //@ requires iBegin == -1;
                        ^
3 verification failures

public class SetZero {

	//@ requires 5 >= a.length;
	//@ requires 1 <= a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin <= 1;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd <= a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 0;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 >= a.length;
    //@ requires 1 <= a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin != 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin != 2;
    //@ requires iBegin <= 1;
    //@ requires iBegin <= 0;
    //@ requires iBegin == 0;
    //@ requires iBegin >= 0;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd < a.length;
    //@ requires iEnd <= a.length;
    //@ requires iEnd == a.length;
    //@ requires iEnd != a.length;
    //@ requires iEnd >= a.length;
    //@ requires iEnd > a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd == 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 5;
    //@ requires iEnd > 5;
    //@ requires iEnd < 2;
    //@ requires iEnd <= 2;
    //@ requires iEnd == 2;
    //@ requires iEnd != 2;
    //@ requires iEnd >= 2;
    //@ requires iEnd > 2;
    //@ requires iEnd < 1;
    //@ requires iEnd <= 1;
    //@ requires iEnd == 1;
    //@ requires iEnd != 1;
    //@ requires iEnd >= 1;
    //@ requires iEnd > 1;
    //@ requires iEnd < 0;
    //@ requires iEnd <= 0;
    //@ requires iEnd == 0;
    //@ requires iEnd != 0;
    //@ requires iEnd >= 0;
    //@ requires iEnd > 0;
    //@ requires iEnd < iBegin;
    //@ requires iEnd <= iBegin;
    //@ requires iEnd == iBegin;
    //@ requires iEnd != iBegin;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd < -1;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:34: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:151:) in method SetZero
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
                                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:151: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:34:
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:55: verify: Precondition conjunct is false: iBegin <= 0
    //@ requires iBegin <= 0;
                        ^
3 verification failures

public class SetZero {

	//@ requires 5 >= a.length;
	//@ requires 1 <= a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin <= 1;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd <= a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 0;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 >= a.length;
    //@ requires 1 <= a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin != 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin != 2;
    //@ requires iBegin <= 1;
    //@ requires iBegin == 0;
    //@ requires iBegin >= 0;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd < a.length;
    //@ requires iEnd <= a.length;
    //@ requires iEnd == a.length;
    //@ requires iEnd != a.length;
    //@ requires iEnd >= a.length;
    //@ requires iEnd > a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd == 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 5;
    //@ requires iEnd > 5;
    //@ requires iEnd < 2;
    //@ requires iEnd <= 2;
    //@ requires iEnd == 2;
    //@ requires iEnd != 2;
    //@ requires iEnd >= 2;
    //@ requires iEnd > 2;
    //@ requires iEnd < 1;
    //@ requires iEnd <= 1;
    //@ requires iEnd == 1;
    //@ requires iEnd != 1;
    //@ requires iEnd >= 1;
    //@ requires iEnd > 1;
    //@ requires iEnd < 0;
    //@ requires iEnd <= 0;
    //@ requires iEnd == 0;
    //@ requires iEnd != 0;
    //@ requires iEnd >= 0;
    //@ requires iEnd > 0;
    //@ requires iEnd < iBegin;
    //@ requires iEnd <= iBegin;
    //@ requires iEnd == iBegin;
    //@ requires iEnd != iBegin;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd < -1;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:34: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:150:) in method SetZero
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
                                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:150: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:34:
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:60: verify: Precondition conjunct is false: iEnd < a.length
    //@ requires iEnd < a.length;
                      ^
3 verification failures

public class SetZero {

	//@ requires 5 >= a.length;
	//@ requires 1 <= a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin <= 1;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd <= a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 0;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 >= a.length;
    //@ requires 1 <= a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin != 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin != 2;
    //@ requires iBegin <= 1;
    //@ requires iBegin == 0;
    //@ requires iBegin >= 0;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd <= a.length;
    //@ requires iEnd == a.length;
    //@ requires iEnd != a.length;
    //@ requires iEnd >= a.length;
    //@ requires iEnd > a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd == 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 5;
    //@ requires iEnd > 5;
    //@ requires iEnd < 2;
    //@ requires iEnd <= 2;
    //@ requires iEnd == 2;
    //@ requires iEnd != 2;
    //@ requires iEnd >= 2;
    //@ requires iEnd > 2;
    //@ requires iEnd < 1;
    //@ requires iEnd <= 1;
    //@ requires iEnd == 1;
    //@ requires iEnd != 1;
    //@ requires iEnd >= 1;
    //@ requires iEnd > 1;
    //@ requires iEnd < 0;
    //@ requires iEnd <= 0;
    //@ requires iEnd == 0;
    //@ requires iEnd != 0;
    //@ requires iEnd >= 0;
    //@ requires iEnd > 0;
    //@ requires iEnd < iBegin;
    //@ requires iEnd <= iBegin;
    //@ requires iEnd == iBegin;
    //@ requires iEnd != iBegin;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd < -1;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:34: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:149:) in method SetZero
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
                                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:149: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:34:
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:61: verify: Precondition conjunct is false: iEnd == a.length
    //@ requires iEnd == a.length;
                      ^
3 verification failures

public class SetZero {

	//@ requires 5 >= a.length;
	//@ requires 1 <= a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin <= 1;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd <= a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 0;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 >= a.length;
    //@ requires 1 <= a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin != 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin != 2;
    //@ requires iBegin <= 1;
    //@ requires iBegin == 0;
    //@ requires iBegin >= 0;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd <= a.length;
    //@ requires iEnd != a.length;
    //@ requires iEnd >= a.length;
    //@ requires iEnd > a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd == 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 5;
    //@ requires iEnd > 5;
    //@ requires iEnd < 2;
    //@ requires iEnd <= 2;
    //@ requires iEnd == 2;
    //@ requires iEnd != 2;
    //@ requires iEnd >= 2;
    //@ requires iEnd > 2;
    //@ requires iEnd < 1;
    //@ requires iEnd <= 1;
    //@ requires iEnd == 1;
    //@ requires iEnd != 1;
    //@ requires iEnd >= 1;
    //@ requires iEnd > 1;
    //@ requires iEnd < 0;
    //@ requires iEnd <= 0;
    //@ requires iEnd == 0;
    //@ requires iEnd != 0;
    //@ requires iEnd >= 0;
    //@ requires iEnd > 0;
    //@ requires iEnd < iBegin;
    //@ requires iEnd <= iBegin;
    //@ requires iEnd == iBegin;
    //@ requires iEnd != iBegin;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd < -1;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:34: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:148:) in method SetZero
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
                                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:148: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:34:
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:61: verify: Precondition conjunct is false: iEnd != a.length
    //@ requires iEnd != a.length;
                      ^
3 verification failures

public class SetZero {

	//@ requires 5 >= a.length;
	//@ requires 1 <= a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin <= 1;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd <= a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 0;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 >= a.length;
    //@ requires 1 <= a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin != 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin != 2;
    //@ requires iBegin <= 1;
    //@ requires iBegin == 0;
    //@ requires iBegin >= 0;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd <= a.length;
    //@ requires iEnd >= a.length;
    //@ requires iEnd > a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd == 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 5;
    //@ requires iEnd > 5;
    //@ requires iEnd < 2;
    //@ requires iEnd <= 2;
    //@ requires iEnd == 2;
    //@ requires iEnd != 2;
    //@ requires iEnd >= 2;
    //@ requires iEnd > 2;
    //@ requires iEnd < 1;
    //@ requires iEnd <= 1;
    //@ requires iEnd == 1;
    //@ requires iEnd != 1;
    //@ requires iEnd >= 1;
    //@ requires iEnd > 1;
    //@ requires iEnd < 0;
    //@ requires iEnd <= 0;
    //@ requires iEnd == 0;
    //@ requires iEnd != 0;
    //@ requires iEnd >= 0;
    //@ requires iEnd > 0;
    //@ requires iEnd < iBegin;
    //@ requires iEnd <= iBegin;
    //@ requires iEnd == iBegin;
    //@ requires iEnd != iBegin;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd < -1;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:34: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:147:) in method SetZero
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
                                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:147: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:34:
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:62: verify: Precondition conjunct is false: iEnd > a.length
    //@ requires iEnd > a.length;
                      ^
3 verification failures

public class SetZero {

	//@ requires 5 >= a.length;
	//@ requires 1 <= a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin <= 1;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd <= a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 0;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 >= a.length;
    //@ requires 1 <= a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin != 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin != 2;
    //@ requires iBegin <= 1;
    //@ requires iBegin == 0;
    //@ requires iBegin >= 0;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd <= a.length;
    //@ requires iEnd >= a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd == 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 5;
    //@ requires iEnd > 5;
    //@ requires iEnd < 2;
    //@ requires iEnd <= 2;
    //@ requires iEnd == 2;
    //@ requires iEnd != 2;
    //@ requires iEnd >= 2;
    //@ requires iEnd > 2;
    //@ requires iEnd < 1;
    //@ requires iEnd <= 1;
    //@ requires iEnd == 1;
    //@ requires iEnd != 1;
    //@ requires iEnd >= 1;
    //@ requires iEnd > 1;
    //@ requires iEnd < 0;
    //@ requires iEnd <= 0;
    //@ requires iEnd == 0;
    //@ requires iEnd != 0;
    //@ requires iEnd >= 0;
    //@ requires iEnd > 0;
    //@ requires iEnd < iBegin;
    //@ requires iEnd <= iBegin;
    //@ requires iEnd == iBegin;
    //@ requires iEnd != iBegin;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd < -1;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:34: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:146:) in method SetZero
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
                                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:146: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:34:
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:55: verify: Precondition conjunct is false: iBegin == 0
    //@ requires iBegin == 0;
                        ^
3 verification failures

public class SetZero {

	//@ requires 5 >= a.length;
	//@ requires 1 <= a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin <= 1;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd <= a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 0;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 >= a.length;
    //@ requires 1 <= a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin != 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin != 2;
    //@ requires iBegin <= 1;
    //@ requires iBegin >= 0;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd <= a.length;
    //@ requires iEnd >= a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd == 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 5;
    //@ requires iEnd > 5;
    //@ requires iEnd < 2;
    //@ requires iEnd <= 2;
    //@ requires iEnd == 2;
    //@ requires iEnd != 2;
    //@ requires iEnd >= 2;
    //@ requires iEnd > 2;
    //@ requires iEnd < 1;
    //@ requires iEnd <= 1;
    //@ requires iEnd == 1;
    //@ requires iEnd != 1;
    //@ requires iEnd >= 1;
    //@ requires iEnd > 1;
    //@ requires iEnd < 0;
    //@ requires iEnd <= 0;
    //@ requires iEnd == 0;
    //@ requires iEnd != 0;
    //@ requires iEnd >= 0;
    //@ requires iEnd > 0;
    //@ requires iEnd < iBegin;
    //@ requires iEnd <= iBegin;
    //@ requires iEnd == iBegin;
    //@ requires iEnd != iBegin;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd < -1;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:34: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:145:) in method SetZero
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
                                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:145: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:34:
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:63: verify: Precondition conjunct is false: iEnd == 5
    //@ requires iEnd == 5;
                      ^
3 verification failures

public class SetZero {

	//@ requires 5 >= a.length;
	//@ requires 1 <= a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin <= 1;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd <= a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 0;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 >= a.length;
    //@ requires 1 <= a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin != 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin != 2;
    //@ requires iBegin <= 1;
    //@ requires iBegin >= 0;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd <= a.length;
    //@ requires iEnd >= a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 5;
    //@ requires iEnd > 5;
    //@ requires iEnd < 2;
    //@ requires iEnd <= 2;
    //@ requires iEnd == 2;
    //@ requires iEnd != 2;
    //@ requires iEnd >= 2;
    //@ requires iEnd > 2;
    //@ requires iEnd < 1;
    //@ requires iEnd <= 1;
    //@ requires iEnd == 1;
    //@ requires iEnd != 1;
    //@ requires iEnd >= 1;
    //@ requires iEnd > 1;
    //@ requires iEnd < 0;
    //@ requires iEnd <= 0;
    //@ requires iEnd == 0;
    //@ requires iEnd != 0;
    //@ requires iEnd >= 0;
    //@ requires iEnd > 0;
    //@ requires iEnd < iBegin;
    //@ requires iEnd <= iBegin;
    //@ requires iEnd == iBegin;
    //@ requires iEnd != iBegin;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd < -1;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:34: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:144:) in method SetZero
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
                                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:144: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:34:
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:60: verify: Precondition conjunct is false: iEnd >= a.length
    //@ requires iEnd >= a.length;
                      ^
3 verification failures

public class SetZero {

	//@ requires 5 >= a.length;
	//@ requires 1 <= a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin <= 1;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd <= a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 0;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 >= a.length;
    //@ requires 1 <= a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin != 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin != 2;
    //@ requires iBegin <= 1;
    //@ requires iBegin >= 0;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd <= a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 5;
    //@ requires iEnd > 5;
    //@ requires iEnd < 2;
    //@ requires iEnd <= 2;
    //@ requires iEnd == 2;
    //@ requires iEnd != 2;
    //@ requires iEnd >= 2;
    //@ requires iEnd > 2;
    //@ requires iEnd < 1;
    //@ requires iEnd <= 1;
    //@ requires iEnd == 1;
    //@ requires iEnd != 1;
    //@ requires iEnd >= 1;
    //@ requires iEnd > 1;
    //@ requires iEnd < 0;
    //@ requires iEnd <= 0;
    //@ requires iEnd == 0;
    //@ requires iEnd != 0;
    //@ requires iEnd >= 0;
    //@ requires iEnd > 0;
    //@ requires iEnd < iBegin;
    //@ requires iEnd <= iBegin;
    //@ requires iEnd == iBegin;
    //@ requires iEnd != iBegin;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd < -1;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:34: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:143:) in method SetZero
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
                                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:143: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:34:
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:63: verify: Precondition conjunct is false: iEnd >= 5
    //@ requires iEnd >= 5;
                      ^
3 verification failures

public class SetZero {

	//@ requires 5 >= a.length;
	//@ requires 1 <= a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin <= 1;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd <= a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 0;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 >= a.length;
    //@ requires 1 <= a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin != 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin != 2;
    //@ requires iBegin <= 1;
    //@ requires iBegin >= 0;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd <= a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd != 5;
    //@ requires iEnd > 5;
    //@ requires iEnd < 2;
    //@ requires iEnd <= 2;
    //@ requires iEnd == 2;
    //@ requires iEnd != 2;
    //@ requires iEnd >= 2;
    //@ requires iEnd > 2;
    //@ requires iEnd < 1;
    //@ requires iEnd <= 1;
    //@ requires iEnd == 1;
    //@ requires iEnd != 1;
    //@ requires iEnd >= 1;
    //@ requires iEnd > 1;
    //@ requires iEnd < 0;
    //@ requires iEnd <= 0;
    //@ requires iEnd == 0;
    //@ requires iEnd != 0;
    //@ requires iEnd >= 0;
    //@ requires iEnd > 0;
    //@ requires iEnd < iBegin;
    //@ requires iEnd <= iBegin;
    //@ requires iEnd == iBegin;
    //@ requires iEnd != iBegin;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd < -1;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:34: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:142:) in method SetZero
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
                                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:142: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:34:
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:63: verify: Precondition conjunct is false: iEnd > 5
    //@ requires iEnd > 5;
                      ^
3 verification failures

public class SetZero {

	//@ requires 5 >= a.length;
	//@ requires 1 <= a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin <= 1;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd <= a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 0;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 >= a.length;
    //@ requires 1 <= a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin != 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin != 2;
    //@ requires iBegin <= 1;
    //@ requires iBegin >= 0;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd <= a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd != 5;
    //@ requires iEnd < 2;
    //@ requires iEnd <= 2;
    //@ requires iEnd == 2;
    //@ requires iEnd != 2;
    //@ requires iEnd >= 2;
    //@ requires iEnd > 2;
    //@ requires iEnd < 1;
    //@ requires iEnd <= 1;
    //@ requires iEnd == 1;
    //@ requires iEnd != 1;
    //@ requires iEnd >= 1;
    //@ requires iEnd > 1;
    //@ requires iEnd < 0;
    //@ requires iEnd <= 0;
    //@ requires iEnd == 0;
    //@ requires iEnd != 0;
    //@ requires iEnd >= 0;
    //@ requires iEnd > 0;
    //@ requires iEnd < iBegin;
    //@ requires iEnd <= iBegin;
    //@ requires iEnd == iBegin;
    //@ requires iEnd != iBegin;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd < -1;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:34: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:141:) in method SetZero
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
                                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:141: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:34:
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:63: verify: Precondition conjunct is false: iEnd < 2
    //@ requires iEnd < 2;
                      ^
3 verification failures

public class SetZero {

	//@ requires 5 >= a.length;
	//@ requires 1 <= a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin <= 1;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd <= a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 0;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 >= a.length;
    //@ requires 1 <= a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin != 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin != 2;
    //@ requires iBegin <= 1;
    //@ requires iBegin >= 0;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd <= a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd != 5;
    //@ requires iEnd <= 2;
    //@ requires iEnd == 2;
    //@ requires iEnd != 2;
    //@ requires iEnd >= 2;
    //@ requires iEnd > 2;
    //@ requires iEnd < 1;
    //@ requires iEnd <= 1;
    //@ requires iEnd == 1;
    //@ requires iEnd != 1;
    //@ requires iEnd >= 1;
    //@ requires iEnd > 1;
    //@ requires iEnd < 0;
    //@ requires iEnd <= 0;
    //@ requires iEnd == 0;
    //@ requires iEnd != 0;
    //@ requires iEnd >= 0;
    //@ requires iEnd > 0;
    //@ requires iEnd < iBegin;
    //@ requires iEnd <= iBegin;
    //@ requires iEnd == iBegin;
    //@ requires iEnd != iBegin;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd < -1;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:34: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:140:) in method SetZero
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
                                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:140: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:34:
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:63: verify: Precondition conjunct is false: iEnd <= 2
    //@ requires iEnd <= 2;
                      ^
3 verification failures

public class SetZero {

	//@ requires 5 >= a.length;
	//@ requires 1 <= a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin <= 1;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd <= a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 0;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 >= a.length;
    //@ requires 1 <= a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin != 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin != 2;
    //@ requires iBegin <= 1;
    //@ requires iBegin >= 0;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd <= a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd != 5;
    //@ requires iEnd == 2;
    //@ requires iEnd != 2;
    //@ requires iEnd >= 2;
    //@ requires iEnd > 2;
    //@ requires iEnd < 1;
    //@ requires iEnd <= 1;
    //@ requires iEnd == 1;
    //@ requires iEnd != 1;
    //@ requires iEnd >= 1;
    //@ requires iEnd > 1;
    //@ requires iEnd < 0;
    //@ requires iEnd <= 0;
    //@ requires iEnd == 0;
    //@ requires iEnd != 0;
    //@ requires iEnd >= 0;
    //@ requires iEnd > 0;
    //@ requires iEnd < iBegin;
    //@ requires iEnd <= iBegin;
    //@ requires iEnd == iBegin;
    //@ requires iEnd != iBegin;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd < -1;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:34: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:139:) in method SetZero
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
                                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:139: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:34:
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:63: verify: Precondition conjunct is false: iEnd == 2
    //@ requires iEnd == 2;
                      ^
3 verification failures

public class SetZero {

	//@ requires 5 >= a.length;
	//@ requires 1 <= a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin <= 1;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd <= a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 0;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 >= a.length;
    //@ requires 1 <= a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin != 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin != 2;
    //@ requires iBegin <= 1;
    //@ requires iBegin >= 0;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd <= a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd != 5;
    //@ requires iEnd != 2;
    //@ requires iEnd >= 2;
    //@ requires iEnd > 2;
    //@ requires iEnd < 1;
    //@ requires iEnd <= 1;
    //@ requires iEnd == 1;
    //@ requires iEnd != 1;
    //@ requires iEnd >= 1;
    //@ requires iEnd > 1;
    //@ requires iEnd < 0;
    //@ requires iEnd <= 0;
    //@ requires iEnd == 0;
    //@ requires iEnd != 0;
    //@ requires iEnd >= 0;
    //@ requires iEnd > 0;
    //@ requires iEnd < iBegin;
    //@ requires iEnd <= iBegin;
    //@ requires iEnd == iBegin;
    //@ requires iEnd != iBegin;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd < -1;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:34: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:138:) in method SetZero
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
                                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:138: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:34:
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:66: verify: Precondition conjunct is false: iEnd < 1
    //@ requires iEnd < 1;
                      ^
3 verification failures

public class SetZero {

	//@ requires 5 >= a.length;
	//@ requires 1 <= a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin <= 1;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd <= a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 0;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 >= a.length;
    //@ requires 1 <= a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin != 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin != 2;
    //@ requires iBegin <= 1;
    //@ requires iBegin >= 0;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd <= a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd != 5;
    //@ requires iEnd != 2;
    //@ requires iEnd >= 2;
    //@ requires iEnd > 2;
    //@ requires iEnd <= 1;
    //@ requires iEnd == 1;
    //@ requires iEnd != 1;
    //@ requires iEnd >= 1;
    //@ requires iEnd > 1;
    //@ requires iEnd < 0;
    //@ requires iEnd <= 0;
    //@ requires iEnd == 0;
    //@ requires iEnd != 0;
    //@ requires iEnd >= 0;
    //@ requires iEnd > 0;
    //@ requires iEnd < iBegin;
    //@ requires iEnd <= iBegin;
    //@ requires iEnd == iBegin;
    //@ requires iEnd != iBegin;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd < -1;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:34: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:137:) in method SetZero
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
                                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:137: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:34:
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:64: verify: Precondition conjunct is false: iEnd >= 2
    //@ requires iEnd >= 2;
                      ^
3 verification failures

public class SetZero {

	//@ requires 5 >= a.length;
	//@ requires 1 <= a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin <= 1;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd <= a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 0;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 >= a.length;
    //@ requires 1 <= a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin != 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin != 2;
    //@ requires iBegin <= 1;
    //@ requires iBegin >= 0;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd <= a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd != 5;
    //@ requires iEnd != 2;
    //@ requires iEnd > 2;
    //@ requires iEnd <= 1;
    //@ requires iEnd == 1;
    //@ requires iEnd != 1;
    //@ requires iEnd >= 1;
    //@ requires iEnd > 1;
    //@ requires iEnd < 0;
    //@ requires iEnd <= 0;
    //@ requires iEnd == 0;
    //@ requires iEnd != 0;
    //@ requires iEnd >= 0;
    //@ requires iEnd > 0;
    //@ requires iEnd < iBegin;
    //@ requires iEnd <= iBegin;
    //@ requires iEnd == iBegin;
    //@ requires iEnd != iBegin;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd < -1;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:34: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:136:) in method SetZero
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
                                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:136: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:34:
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:65: verify: Precondition conjunct is false: iEnd <= 1
    //@ requires iEnd <= 1;
                      ^
3 verification failures

public class SetZero {

	//@ requires 5 >= a.length;
	//@ requires 1 <= a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin <= 1;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd <= a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 0;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 >= a.length;
    //@ requires 1 <= a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin != 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin != 2;
    //@ requires iBegin <= 1;
    //@ requires iBegin >= 0;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd <= a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd != 5;
    //@ requires iEnd != 2;
    //@ requires iEnd > 2;
    //@ requires iEnd == 1;
    //@ requires iEnd != 1;
    //@ requires iEnd >= 1;
    //@ requires iEnd > 1;
    //@ requires iEnd < 0;
    //@ requires iEnd <= 0;
    //@ requires iEnd == 0;
    //@ requires iEnd != 0;
    //@ requires iEnd >= 0;
    //@ requires iEnd > 0;
    //@ requires iEnd < iBegin;
    //@ requires iEnd <= iBegin;
    //@ requires iEnd == iBegin;
    //@ requires iEnd != iBegin;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd < -1;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:34: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:135:) in method SetZero
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
                                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:135: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:34:
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:64: verify: Precondition conjunct is false: iEnd > 2
    //@ requires iEnd > 2;
                      ^
3 verification failures

public class SetZero {

	//@ requires 5 >= a.length;
	//@ requires 1 <= a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin <= 1;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd <= a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 0;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 >= a.length;
    //@ requires 1 <= a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin != 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin != 2;
    //@ requires iBegin <= 1;
    //@ requires iBegin >= 0;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd <= a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd != 5;
    //@ requires iEnd != 2;
    //@ requires iEnd == 1;
    //@ requires iEnd != 1;
    //@ requires iEnd >= 1;
    //@ requires iEnd > 1;
    //@ requires iEnd < 0;
    //@ requires iEnd <= 0;
    //@ requires iEnd == 0;
    //@ requires iEnd != 0;
    //@ requires iEnd >= 0;
    //@ requires iEnd > 0;
    //@ requires iEnd < iBegin;
    //@ requires iEnd <= iBegin;
    //@ requires iEnd == iBegin;
    //@ requires iEnd != iBegin;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd < -1;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:34: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:134:) in method SetZero
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
                                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:134: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:34:
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:65: verify: Precondition conjunct is false: iEnd != 1
    //@ requires iEnd != 1;
                      ^
3 verification failures

public class SetZero {

	//@ requires 5 >= a.length;
	//@ requires 1 <= a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin <= 1;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd <= a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 0;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 >= a.length;
    //@ requires 1 <= a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin != 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin != 2;
    //@ requires iBegin <= 1;
    //@ requires iBegin >= 0;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd <= a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd != 5;
    //@ requires iEnd != 2;
    //@ requires iEnd == 1;
    //@ requires iEnd >= 1;
    //@ requires iEnd > 1;
    //@ requires iEnd < 0;
    //@ requires iEnd <= 0;
    //@ requires iEnd == 0;
    //@ requires iEnd != 0;
    //@ requires iEnd >= 0;
    //@ requires iEnd > 0;
    //@ requires iEnd < iBegin;
    //@ requires iEnd <= iBegin;
    //@ requires iEnd == iBegin;
    //@ requires iEnd != iBegin;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd < -1;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:34: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:133:) in method SetZero
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
                                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:133: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:34:
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:66: verify: Precondition conjunct is false: iEnd > 1
    //@ requires iEnd > 1;
                      ^
3 verification failures

public class SetZero {

	//@ requires 5 >= a.length;
	//@ requires 1 <= a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin <= 1;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd <= a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 0;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 >= a.length;
    //@ requires 1 <= a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin != 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin != 2;
    //@ requires iBegin <= 1;
    //@ requires iBegin >= 0;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd <= a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd != 5;
    //@ requires iEnd != 2;
    //@ requires iEnd == 1;
    //@ requires iEnd >= 1;
    //@ requires iEnd < 0;
    //@ requires iEnd <= 0;
    //@ requires iEnd == 0;
    //@ requires iEnd != 0;
    //@ requires iEnd >= 0;
    //@ requires iEnd > 0;
    //@ requires iEnd < iBegin;
    //@ requires iEnd <= iBegin;
    //@ requires iEnd == iBegin;
    //@ requires iEnd != iBegin;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd < -1;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:34: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:132:) in method SetZero
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
                                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:132: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:34:
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:64: verify: Precondition conjunct is false: iEnd == 1
    //@ requires iEnd == 1;
                      ^
3 verification failures

public class SetZero {

	//@ requires 5 >= a.length;
	//@ requires 1 <= a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin <= 1;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd <= a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 0;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 >= a.length;
    //@ requires 1 <= a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin != 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin != 2;
    //@ requires iBegin <= 1;
    //@ requires iBegin >= 0;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd <= a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd != 5;
    //@ requires iEnd != 2;
    //@ requires iEnd >= 1;
    //@ requires iEnd < 0;
    //@ requires iEnd <= 0;
    //@ requires iEnd == 0;
    //@ requires iEnd != 0;
    //@ requires iEnd >= 0;
    //@ requires iEnd > 0;
    //@ requires iEnd < iBegin;
    //@ requires iEnd <= iBegin;
    //@ requires iEnd == iBegin;
    //@ requires iEnd != iBegin;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd < -1;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:34: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:131:) in method SetZero
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
                                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:131: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:34:
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:63: verify: Precondition conjunct is false: iEnd != 2
    //@ requires iEnd != 2;
                      ^
3 verification failures

public class SetZero {

	//@ requires 5 >= a.length;
	//@ requires 1 <= a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin <= 1;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd <= a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 0;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 >= a.length;
    //@ requires 1 <= a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin != 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin != 2;
    //@ requires iBegin <= 1;
    //@ requires iBegin >= 0;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd <= a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 1;
    //@ requires iEnd < 0;
    //@ requires iEnd <= 0;
    //@ requires iEnd == 0;
    //@ requires iEnd != 0;
    //@ requires iEnd >= 0;
    //@ requires iEnd > 0;
    //@ requires iEnd < iBegin;
    //@ requires iEnd <= iBegin;
    //@ requires iEnd == iBegin;
    //@ requires iEnd != iBegin;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd < -1;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:34: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:130:) in method SetZero
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
                                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:130: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:34:
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:64: verify: Precondition conjunct is false: iEnd < 0
    //@ requires iEnd < 0;
                      ^
3 verification failures

public class SetZero {

	//@ requires 5 >= a.length;
	//@ requires 1 <= a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin <= 1;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd <= a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 0;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 >= a.length;
    //@ requires 1 <= a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin != 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin != 2;
    //@ requires iBegin <= 1;
    //@ requires iBegin >= 0;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd <= a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 1;
    //@ requires iEnd <= 0;
    //@ requires iEnd == 0;
    //@ requires iEnd != 0;
    //@ requires iEnd >= 0;
    //@ requires iEnd > 0;
    //@ requires iEnd < iBegin;
    //@ requires iEnd <= iBegin;
    //@ requires iEnd == iBegin;
    //@ requires iEnd != iBegin;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd < -1;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:34: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:129:) in method SetZero
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
                                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:129: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:34:
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:64: verify: Precondition conjunct is false: iEnd <= 0
    //@ requires iEnd <= 0;
                      ^
3 verification failures

public class SetZero {

	//@ requires 5 >= a.length;
	//@ requires 1 <= a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin <= 1;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd <= a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 0;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 >= a.length;
    //@ requires 1 <= a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin != 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin != 2;
    //@ requires iBegin <= 1;
    //@ requires iBegin >= 0;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd <= a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 1;
    //@ requires iEnd == 0;
    //@ requires iEnd != 0;
    //@ requires iEnd >= 0;
    //@ requires iEnd > 0;
    //@ requires iEnd < iBegin;
    //@ requires iEnd <= iBegin;
    //@ requires iEnd == iBegin;
    //@ requires iEnd != iBegin;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd < -1;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:34: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:128:) in method SetZero
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
                                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:128: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:34:
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:63: verify: Precondition conjunct is false: iEnd >= 1
    //@ requires iEnd >= 1;
                      ^
3 verification failures

public class SetZero {

	//@ requires 5 >= a.length;
	//@ requires 1 <= a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin <= 1;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd <= a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 0;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 >= a.length;
    //@ requires 1 <= a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin != 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin != 2;
    //@ requires iBegin <= 1;
    //@ requires iBegin >= 0;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd <= a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd != 5;
    //@ requires iEnd == 0;
    //@ requires iEnd != 0;
    //@ requires iEnd >= 0;
    //@ requires iEnd > 0;
    //@ requires iEnd < iBegin;
    //@ requires iEnd <= iBegin;
    //@ requires iEnd == iBegin;
    //@ requires iEnd != iBegin;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd < -1;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:34: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:127:) in method SetZero
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
                                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:127: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:34:
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:64: verify: Precondition conjunct is false: iEnd != 0
    //@ requires iEnd != 0;
                      ^
3 verification failures

public class SetZero {

	//@ requires 5 >= a.length;
	//@ requires 1 <= a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin <= 1;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd <= a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 0;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 >= a.length;
    //@ requires 1 <= a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin != 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin != 2;
    //@ requires iBegin <= 1;
    //@ requires iBegin >= 0;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd <= a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd != 5;
    //@ requires iEnd == 0;
    //@ requires iEnd >= 0;
    //@ requires iEnd > 0;
    //@ requires iEnd < iBegin;
    //@ requires iEnd <= iBegin;
    //@ requires iEnd == iBegin;
    //@ requires iEnd != iBegin;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd < -1;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:34: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:126:) in method SetZero
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
                                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:126: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:34:
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:63: verify: Precondition conjunct is false: iEnd == 0
    //@ requires iEnd == 0;
                      ^
3 verification failures

public class SetZero {

	//@ requires 5 >= a.length;
	//@ requires 1 <= a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin <= 1;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd <= a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 0;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 >= a.length;
    //@ requires 1 <= a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin != 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin != 2;
    //@ requires iBegin <= 1;
    //@ requires iBegin >= 0;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd <= a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 0;
    //@ requires iEnd > 0;
    //@ requires iEnd < iBegin;
    //@ requires iEnd <= iBegin;
    //@ requires iEnd == iBegin;
    //@ requires iEnd != iBegin;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd < -1;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:34: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:125:) in method SetZero
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
                                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:125: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:34:
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:64: verify: Precondition conjunct is false: iEnd > 0
    //@ requires iEnd > 0;
                      ^
3 verification failures

public class SetZero {

	//@ requires 5 >= a.length;
	//@ requires 1 <= a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin <= 1;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd <= a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 0;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 >= a.length;
    //@ requires 1 <= a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin != 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin != 2;
    //@ requires iBegin <= 1;
    //@ requires iBegin >= 0;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd <= a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 0;
    //@ requires iEnd < iBegin;
    //@ requires iEnd <= iBegin;
    //@ requires iEnd == iBegin;
    //@ requires iEnd != iBegin;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd < -1;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:34: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:124:) in method SetZero
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
                                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:124: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:34:
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:64: verify: Precondition conjunct is false: iEnd < iBegin
    //@ requires iEnd < iBegin;
                      ^
3 verification failures

public class SetZero {

	//@ requires 5 >= a.length;
	//@ requires 1 <= a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin <= 1;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd <= a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 0;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 >= a.length;
    //@ requires 1 <= a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin != 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin != 2;
    //@ requires iBegin <= 1;
    //@ requires iBegin >= 0;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd <= a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 0;
    //@ requires iEnd <= iBegin;
    //@ requires iEnd == iBegin;
    //@ requires iEnd != iBegin;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd < -1;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:34: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:123:) in method SetZero
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
                                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:123: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:34:
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:64: verify: Precondition conjunct is false: iEnd <= iBegin
    //@ requires iEnd <= iBegin;
                      ^
3 verification failures

public class SetZero {

	//@ requires 5 >= a.length;
	//@ requires 1 <= a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin <= 1;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd <= a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 0;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 >= a.length;
    //@ requires 1 <= a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin != 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin != 2;
    //@ requires iBegin <= 1;
    //@ requires iBegin >= 0;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd <= a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 0;
    //@ requires iEnd == iBegin;
    //@ requires iEnd != iBegin;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd < -1;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:34: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:122:) in method SetZero
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
                                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:122: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:34:
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:65: verify: Precondition conjunct is false: iEnd != iBegin
    //@ requires iEnd != iBegin;
                      ^
3 verification failures

public class SetZero {

	//@ requires 5 >= a.length;
	//@ requires 1 <= a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin <= 1;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd <= a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 0;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 >= a.length;
    //@ requires 1 <= a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin != 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin != 2;
    //@ requires iBegin <= 1;
    //@ requires iBegin >= 0;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd <= a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 0;
    //@ requires iEnd == iBegin;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd < -1;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:34: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:121:) in method SetZero
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
                                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:121: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:34:
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:64: verify: Precondition conjunct is false: iEnd == iBegin
    //@ requires iEnd == iBegin;
                      ^
3 verification failures

public class SetZero {

	//@ requires 5 >= a.length;
	//@ requires 1 <= a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin <= 1;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd <= a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 0;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 >= a.length;
    //@ requires 1 <= a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin != 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin != 2;
    //@ requires iBegin <= 1;
    //@ requires iBegin >= 0;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd <= a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 0;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd < -1;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:34: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:120:) in method SetZero
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
                                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:120: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:34:
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:66: verify: Precondition conjunct is false: iEnd < -1
    //@ requires iEnd < -1;
                      ^
3 verification failures

public class SetZero {

	//@ requires 5 >= a.length;
	//@ requires 1 <= a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin <= 1;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd <= a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 0;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 >= a.length;
    //@ requires 1 <= a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin != 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin != 2;
    //@ requires iBegin <= 1;
    //@ requires iBegin >= 0;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd <= a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 0;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd <= -1;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:34: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:119:) in method SetZero
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
                                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:119: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:34:
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:66: verify: Precondition conjunct is false: iEnd <= -1
    //@ requires iEnd <= -1;
                      ^
3 verification failures

public class SetZero {

	//@ requires 5 >= a.length;
	//@ requires 1 <= a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin <= 1;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd <= a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 0;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 >= a.length;
    //@ requires 1 <= a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin != 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin != 2;
    //@ requires iBegin <= 1;
    //@ requires iBegin >= 0;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd <= a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 0;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd == -1;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:34: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:118:) in method SetZero
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
                                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:118: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:34:
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:66: verify: Precondition conjunct is false: iEnd == -1
    //@ requires iEnd == -1;
                      ^
3 verification failures

public class SetZero {

	//@ requires 5 >= a.length;
	//@ requires 1 <= a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin <= 1;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd <= a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 0;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 >= a.length;
    //@ requires 1 <= a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin != 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin != 2;
    //@ requires iBegin <= 1;
    //@ requires iBegin >= 0;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd <= a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 0;
    //@ requires iEnd >= iBegin;
    //@ requires iEnd > iBegin;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:34: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:117:) in method SetZero
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
                                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:117: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:34:
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:64: verify: Precondition conjunct is false: iEnd >= iBegin
    //@ requires iEnd >= iBegin;
                      ^
3 verification failures

public class SetZero {

	//@ requires 5 >= a.length;
	//@ requires 1 <= a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin <= 1;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd <= a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 0;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 >= a.length;
    //@ requires 1 <= a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin != 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin != 2;
    //@ requires iBegin <= 1;
    //@ requires iBegin >= 0;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd <= a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 0;
    //@ requires iEnd > iBegin;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k == iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:34: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:116:) in method SetZero
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
                                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:116: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:34:
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:70: verify: Precondition conjunct is false: k == iEnd
    //@ requires k == iEnd;
                   ^
3 verification failures

public class SetZero {

	//@ requires 5 >= a.length;
	//@ requires 1 <= a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin <= 1;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd <= a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 0;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 >= a.length;
    //@ requires 1 <= a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin != 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin != 2;
    //@ requires iBegin <= 1;
    //@ requires iBegin >= 0;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd <= a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 0;
    //@ requires iEnd > iBegin;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k != iEnd;
    //@ requires k >= iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:34: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:115:) in method SetZero
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
                                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:115: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:34:
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:71: verify: Precondition conjunct is false: k >= iEnd
    //@ requires k >= iEnd;
                   ^
3 verification failures

public class SetZero {

	//@ requires 5 >= a.length;
	//@ requires 1 <= a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin <= 1;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd <= a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 0;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 >= a.length;
    //@ requires 1 <= a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin != 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin != 2;
    //@ requires iBegin <= 1;
    //@ requires iBegin >= 0;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd <= a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 0;
    //@ requires iEnd > iBegin;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k != iEnd;
    //@ requires k > iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:34: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:114:) in method SetZero
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
                                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:114: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:34:
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:71: verify: Precondition conjunct is false: k > iEnd
    //@ requires k > iEnd;
                   ^
3 verification failures

public class SetZero {

	//@ requires 5 >= a.length;
	//@ requires 1 <= a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin <= 1;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd <= a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 0;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 >= a.length;
    //@ requires 1 <= a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin != 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin != 2;
    //@ requires iBegin <= 1;
    //@ requires iBegin >= 0;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd <= a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 0;
    //@ requires iEnd > iBegin;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k != iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k == a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:34: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:113:) in method SetZero
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
                                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:113: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:34:
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:73: verify: Precondition conjunct is false: k == a.length
    //@ requires k == a.length;
                   ^
3 verification failures

public class SetZero {

	//@ requires 5 >= a.length;
	//@ requires 1 <= a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin <= 1;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd <= a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 0;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 >= a.length;
    //@ requires 1 <= a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin != 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin != 2;
    //@ requires iBegin <= 1;
    //@ requires iBegin >= 0;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd <= a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 0;
    //@ requires iEnd > iBegin;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k != iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k != a.length;
    //@ requires k >= a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:34: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:112:) in method SetZero
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
                                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:112: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:34:
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:74: verify: Precondition conjunct is false: k >= a.length
    //@ requires k >= a.length;
                   ^
3 verification failures

public class SetZero {

	//@ requires 5 >= a.length;
	//@ requires 1 <= a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin <= 1;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd <= a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 0;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 >= a.length;
    //@ requires 1 <= a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin != 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin != 2;
    //@ requires iBegin <= 1;
    //@ requires iBegin >= 0;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd <= a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 0;
    //@ requires iEnd > iBegin;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k != iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k != a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:34: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:111:) in method SetZero
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
                                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:111: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:34:
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:64: verify: Precondition conjunct is false: iEnd > iBegin
    //@ requires iEnd > iBegin;
                      ^
3 verification failures

public class SetZero {

	//@ requires 5 >= a.length;
	//@ requires 1 <= a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin <= 1;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd <= a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 0;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 >= a.length;
    //@ requires 1 <= a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin != 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin != 2;
    //@ requires iBegin <= 1;
    //@ requires iBegin >= 0;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd <= a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 0;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k != iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k != a.length;
    //@ requires k > a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:34: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:110:) in method SetZero
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
                                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:110: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:34:
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:73: verify: Precondition conjunct is false: k > a.length
    //@ requires k > a.length;
                   ^
3 verification failures

public class SetZero {

	//@ requires 5 >= a.length;
	//@ requires 1 <= a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin <= 1;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd <= a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 0;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 >= a.length;
    //@ requires 1 <= a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin != 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin != 2;
    //@ requires iBegin <= 1;
    //@ requires iBegin >= 0;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd <= a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 0;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k != iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k != a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k == 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:34: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:109:) in method SetZero
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
                                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:109: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:34:
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:75: verify: Precondition conjunct is false: k == 5
    //@ requires k == 5;
                   ^
3 verification failures

public class SetZero {

	//@ requires 5 >= a.length;
	//@ requires 1 <= a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin <= 1;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd <= a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 0;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 >= a.length;
    //@ requires 1 <= a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin != 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin != 2;
    //@ requires iBegin <= 1;
    //@ requires iBegin >= 0;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd <= a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 0;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k != iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k != a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k != 5;
    //@ requires k >= 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:34: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:108:) in method SetZero
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
                                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:108: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:34:
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:76: verify: Precondition conjunct is false: k >= 5
    //@ requires k >= 5;
                   ^
3 verification failures

public class SetZero {

	//@ requires 5 >= a.length;
	//@ requires 1 <= a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin <= 1;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd <= a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 0;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 >= a.length;
    //@ requires 1 <= a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin != 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin != 2;
    //@ requires iBegin <= 1;
    //@ requires iBegin >= 0;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd <= a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 0;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k != iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k != a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k != 5;
    //@ requires k > 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:34: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:107:) in method SetZero
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
                                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:107: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:34:
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:76: verify: Precondition conjunct is false: k > 5
    //@ requires k > 5;
                   ^
3 verification failures

public class SetZero {

	//@ requires 5 >= a.length;
	//@ requires 1 <= a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin <= 1;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd <= a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 0;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 >= a.length;
    //@ requires 1 <= a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin != 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin != 2;
    //@ requires iBegin <= 1;
    //@ requires iBegin >= 0;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd <= a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 0;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k != iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k != a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k != 5;
    //@ requires k < 2;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:34: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:106:) in method SetZero
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
                                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:106: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:34:
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:76: verify: Precondition conjunct is false: k < 2
    //@ requires k < 2;
                   ^
3 verification failures

public class SetZero {

	//@ requires 5 >= a.length;
	//@ requires 1 <= a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin <= 1;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd <= a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 0;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 >= a.length;
    //@ requires 1 <= a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin != 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin != 2;
    //@ requires iBegin <= 1;
    //@ requires iBegin >= 0;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd <= a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 0;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k != iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k != a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k != 5;
    //@ requires k <= 2;
    //@ requires k == 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:34: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:105:) in method SetZero
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
                                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:105: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:34:
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:77: verify: Precondition conjunct is false: k == 2
    //@ requires k == 2;
                   ^
3 verification failures

public class SetZero {

	//@ requires 5 >= a.length;
	//@ requires 1 <= a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin <= 1;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd <= a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 0;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 >= a.length;
    //@ requires 1 <= a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin != 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin != 2;
    //@ requires iBegin <= 1;
    //@ requires iBegin >= 0;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd <= a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 0;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k != iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k != a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k != 5;
    //@ requires k <= 2;
    //@ requires k != 2;
    //@ requires k >= 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:34: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:104:) in method SetZero
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
                                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:104: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:34:
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:78: verify: Precondition conjunct is false: k >= 2
    //@ requires k >= 2;
                   ^
3 verification failures

public class SetZero {

	//@ requires 5 >= a.length;
	//@ requires 1 <= a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin <= 1;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd <= a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 0;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 >= a.length;
    //@ requires 1 <= a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin != 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin != 2;
    //@ requires iBegin <= 1;
    //@ requires iBegin >= 0;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd <= a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 0;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k != iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k != a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k != 5;
    //@ requires k <= 2;
    //@ requires k != 2;
    //@ requires k > 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:34: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:103:) in method SetZero
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
                                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:103: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:34:
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:78: verify: Precondition conjunct is false: k > 2
    //@ requires k > 2;
                   ^
3 verification failures

public class SetZero {

	//@ requires 5 >= a.length;
	//@ requires 1 <= a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin <= 1;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd <= a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 0;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 >= a.length;
    //@ requires 1 <= a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin != 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin != 2;
    //@ requires iBegin <= 1;
    //@ requires iBegin >= 0;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd <= a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 0;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k != iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k != a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k != 5;
    //@ requires k <= 2;
    //@ requires k != 2;
    //@ requires k < 1;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:34: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:102:) in method SetZero
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
                                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:102: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:34:
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:78: verify: Precondition conjunct is false: k < 1
    //@ requires k < 1;
                   ^
3 verification failures

public class SetZero {

	//@ requires 5 >= a.length;
	//@ requires 1 <= a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin <= 1;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd <= a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 0;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 >= a.length;
    //@ requires 1 <= a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin != 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin != 2;
    //@ requires iBegin <= 1;
    //@ requires iBegin >= 0;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd <= a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 0;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k != iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k != a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k != 5;
    //@ requires k <= 2;
    //@ requires k != 2;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k != 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:34: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:101:) in method SetZero
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
                                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:101: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:34:
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:80: verify: Precondition conjunct is false: k != 1
    //@ requires k != 1;
                   ^
3 verification failures

public class SetZero {

	//@ requires 5 >= a.length;
	//@ requires 1 <= a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin <= 1;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd <= a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 0;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 >= a.length;
    //@ requires 1 <= a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin != 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin != 2;
    //@ requires iBegin <= 1;
    //@ requires iBegin >= 0;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd <= a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 0;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k != iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k != a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k != 5;
    //@ requires k <= 2;
    //@ requires k != 2;
    //@ requires k <= 1;
    //@ requires k == 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:34: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:100:) in method SetZero
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
                                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:100: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:34:
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:79: verify: Precondition conjunct is false: k == 1
    //@ requires k == 1;
                   ^
3 verification failures

public class SetZero {

	//@ requires 5 >= a.length;
	//@ requires 1 <= a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin <= 1;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd <= a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 0;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 >= a.length;
    //@ requires 1 <= a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin != 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin != 2;
    //@ requires iBegin <= 1;
    //@ requires iBegin >= 0;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd <= a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 0;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k != iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k != a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k != 5;
    //@ requires k <= 2;
    //@ requires k != 2;
    //@ requires k <= 1;
    //@ requires k >= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:34: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:99:) in method SetZero
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
                                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:99: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:34:
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:79: verify: Precondition conjunct is false: k >= 1
    //@ requires k >= 1;
                   ^
3 verification failures

public class SetZero {

	//@ requires 5 >= a.length;
	//@ requires 1 <= a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin <= 1;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd <= a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 0;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 >= a.length;
    //@ requires 1 <= a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin != 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin != 2;
    //@ requires iBegin <= 1;
    //@ requires iBegin >= 0;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd <= a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 0;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k != iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k != a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k != 5;
    //@ requires k <= 2;
    //@ requires k != 2;
    //@ requires k <= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:34: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:98:) in method SetZero
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
                                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:98: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:34:
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:76: verify: Precondition conjunct is false: k <= 2
    //@ requires k <= 2;
                   ^
3 verification failures

public class SetZero {

	//@ requires 5 >= a.length;
	//@ requires 1 <= a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin <= 1;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd <= a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 0;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 >= a.length;
    //@ requires 1 <= a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin != 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin != 2;
    //@ requires iBegin <= 1;
    //@ requires iBegin >= 0;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd <= a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 0;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k != iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k != a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k != 5;
    //@ requires k != 2;
    //@ requires k <= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:34: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:97:) in method SetZero
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
                                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:97: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:34:
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:76: verify: Precondition conjunct is false: k != 2
    //@ requires k != 2;
                   ^
3 verification failures

public class SetZero {

	//@ requires 5 >= a.length;
	//@ requires 1 <= a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin <= 1;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd <= a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 0;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 >= a.length;
    //@ requires 1 <= a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin != 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin != 2;
    //@ requires iBegin <= 1;
    //@ requires iBegin >= 0;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd <= a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 0;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k != iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k != a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k != 5;
    //@ requires k <= 1;
    //@ requires k > 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:34: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:96:) in method SetZero
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
                                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:96: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:34:
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:77: verify: Precondition conjunct is false: k > 1
    //@ requires k > 1;
                   ^
3 verification failures

public class SetZero {

	//@ requires 5 >= a.length;
	//@ requires 1 <= a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin <= 1;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd <= a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 0;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 >= a.length;
    //@ requires 1 <= a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin != 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin != 2;
    //@ requires iBegin <= 1;
    //@ requires iBegin >= 0;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd <= a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 0;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k != iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k != a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k != 5;
    //@ requires k <= 1;
    //@ requires k < 0;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:34: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:95:) in method SetZero
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
                                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:95: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:34:
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:77: verify: Precondition conjunct is false: k < 0
    //@ requires k < 0;
                   ^
3 verification failures

public class SetZero {

	//@ requires 5 >= a.length;
	//@ requires 1 <= a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin <= 1;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd <= a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 0;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 >= a.length;
    //@ requires 1 <= a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin != 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin != 2;
    //@ requires iBegin <= 1;
    //@ requires iBegin >= 0;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd <= a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 0;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k != iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k != a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k != 5;
    //@ requires k <= 1;
    //@ requires k <= 0;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:34: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:94:) in method SetZero
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
                                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:94: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:34:
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:77: verify: Precondition conjunct is false: k <= 0
    //@ requires k <= 0;
                   ^
3 verification failures

public class SetZero {

	//@ requires 5 >= a.length;
	//@ requires 1 <= a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin <= 1;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd <= a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 0;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 >= a.length;
    //@ requires 1 <= a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin != 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin != 2;
    //@ requires iBegin <= 1;
    //@ requires iBegin >= 0;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd <= a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 0;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k != iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k != a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k != 5;
    //@ requires k <= 1;
    //@ requires k == 0;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:34: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:93:) in method SetZero
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
                                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:93: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:34:
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:77: verify: Precondition conjunct is false: k == 0
    //@ requires k == 0;
                   ^
3 verification failures

public class SetZero {

	//@ requires 5 >= a.length;
	//@ requires 1 <= a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin <= 1;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd <= a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 0;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 >= a.length;
    //@ requires 1 <= a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin != 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin != 2;
    //@ requires iBegin <= 1;
    //@ requires iBegin >= 0;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd <= a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 0;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k != iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k != a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k != 5;
    //@ requires k <= 1;
    //@ requires k != 0;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:34: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:92:) in method SetZero
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
                                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:92: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:34:
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:77: verify: Precondition conjunct is false: k != 0
    //@ requires k != 0;
                   ^
3 verification failures

public class SetZero {

	//@ requires 5 >= a.length;
	//@ requires 1 <= a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin <= 1;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd <= a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 0;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 >= a.length;
    //@ requires 1 <= a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin != 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin != 2;
    //@ requires iBegin <= 1;
    //@ requires iBegin >= 0;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd <= a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 0;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k != iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k != a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k != 5;
    //@ requires k <= 1;
    //@ requires k >= 0;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:34: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:91:) in method SetZero
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
                                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:91: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:34:
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:77: verify: Precondition conjunct is false: k >= 0
    //@ requires k >= 0;
                   ^
3 verification failures

public class SetZero {

	//@ requires 5 >= a.length;
	//@ requires 1 <= a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin <= 1;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd <= a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 0;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 >= a.length;
    //@ requires 1 <= a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin != 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin != 2;
    //@ requires iBegin <= 1;
    //@ requires iBegin >= 0;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd <= a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 0;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k != iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k != a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k != 5;
    //@ requires k <= 1;
    //@ requires k > 0;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:34: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:90:) in method SetZero
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
                                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:90: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:34:
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:77: verify: Precondition conjunct is false: k > 0
    //@ requires k > 0;
                   ^
3 verification failures

public class SetZero {

	//@ requires 5 >= a.length;
	//@ requires 1 <= a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin <= 1;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd <= a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 0;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 >= a.length;
    //@ requires 1 <= a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin != 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin != 2;
    //@ requires iBegin <= 1;
    //@ requires iBegin >= 0;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd <= a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 0;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k != iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k != a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k != 5;
    //@ requires k <= 1;
    //@ requires k < iBegin;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:34: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:89:) in method SetZero
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
                                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:89: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:34:
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:77: verify: Precondition conjunct is false: k < iBegin
    //@ requires k < iBegin;
                   ^
3 verification failures

public class SetZero {

	//@ requires 5 >= a.length;
	//@ requires 1 <= a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin <= 1;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd <= a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 0;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 >= a.length;
    //@ requires 1 <= a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin != 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin != 2;
    //@ requires iBegin <= 1;
    //@ requires iBegin >= 0;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd <= a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 0;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k != iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k != a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k != 5;
    //@ requires k <= 1;
    //@ requires k <= iBegin;
    //@ requires k == iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:34: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:88:) in method SetZero
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
                                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:88: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:34:
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:78: verify: Precondition conjunct is false: k == iBegin
    //@ requires k == iBegin;
                   ^
3 verification failures

public class SetZero {

	//@ requires 5 >= a.length;
	//@ requires 1 <= a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin <= 1;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd <= a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 0;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 >= a.length;
    //@ requires 1 <= a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin != 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin != 2;
    //@ requires iBegin <= 1;
    //@ requires iBegin >= 0;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd <= a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 0;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k != iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k != a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k != 5;
    //@ requires k <= 1;
    //@ requires k <= iBegin;
    //@ requires k != iBegin;
    //@ requires k >= iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:34: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:87:) in method SetZero
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
                                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:87: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:34:
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:79: verify: Precondition conjunct is false: k >= iBegin
    //@ requires k >= iBegin;
                   ^
3 verification failures

public class SetZero {

	//@ requires 5 >= a.length;
	//@ requires 1 <= a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin <= 1;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd <= a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 0;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 >= a.length;
    //@ requires 1 <= a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin != 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin != 2;
    //@ requires iBegin <= 1;
    //@ requires iBegin >= 0;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd <= a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 0;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k != iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k != a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k != 5;
    //@ requires k <= 1;
    //@ requires k <= iBegin;
    //@ requires k != iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:34: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:86:) in method SetZero
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
                                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:86: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:34:
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:76: verify: Precondition conjunct is false: k <= 1
    //@ requires k <= 1;
                   ^
3 verification failures

public class SetZero {

	//@ requires 5 >= a.length;
	//@ requires 1 <= a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin <= 1;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd <= a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 0;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 >= a.length;
    //@ requires 1 <= a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin != 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin != 2;
    //@ requires iBegin <= 1;
    //@ requires iBegin >= 0;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd <= a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 0;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k != iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k != a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k != 5;
    //@ requires k <= iBegin;
    //@ requires k != iBegin;
    //@ requires k > iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:34: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:85:) in method SetZero
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
                                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:85: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:34:
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:78: verify: Precondition conjunct is false: k > iBegin
    //@ requires k > iBegin;
                   ^
3 verification failures

public class SetZero {

	//@ requires 5 >= a.length;
	//@ requires 1 <= a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin <= 1;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd <= a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 0;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 >= a.length;
    //@ requires 1 <= a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin != 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin != 2;
    //@ requires iBegin <= 1;
    //@ requires iBegin >= 0;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd <= a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 0;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k != iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k != a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k != 5;
    //@ requires k <= iBegin;
    //@ requires k != iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:34: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:84:) in method SetZero
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
                                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:84: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:34:
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:76: verify: Precondition conjunct is false: k <= iBegin
    //@ requires k <= iBegin;
                   ^
3 verification failures

public class SetZero {

	//@ requires 5 >= a.length;
	//@ requires 1 <= a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin <= 1;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd <= a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 0;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 >= a.length;
    //@ requires 1 <= a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin != 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin != 2;
    //@ requires iBegin <= 1;
    //@ requires iBegin >= 0;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd <= a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 0;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k != iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k != a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k != 5;
    //@ requires k != iBegin;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:34: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:83:) in method SetZero
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
                                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:83: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:34:
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:76: verify: Precondition conjunct is false: k != iBegin
    //@ requires k != iBegin;
                   ^
3 verification failures

public class SetZero {

	//@ requires 5 >= a.length;
	//@ requires 1 <= a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin <= 1;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd <= a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 0;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 >= a.length;
    //@ requires 1 <= a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin != 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin != 2;
    //@ requires iBegin <= 1;
    //@ requires iBegin >= 0;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd <= a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 0;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k != iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k != a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k != 5;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k == -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:34: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:82:) in method SetZero
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
                                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:82: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:34:
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:78: verify: Precondition conjunct is false: k == -1
    //@ requires k == -1;
                   ^
3 verification failures

public class SetZero {

	//@ requires 5 >= a.length;
	//@ requires 1 <= a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin <= 1;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd <= a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 0;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 >= a.length;
    //@ requires 1 <= a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin != 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin != 2;
    //@ requires iBegin <= 1;
    //@ requires iBegin >= 0;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd <= a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 0;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k != iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k != a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k != 5;
    //@ requires k < -1;
    //@ requires k <= -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:34: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:81:) in method SetZero
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
                                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:81: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:34:
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:76: verify: Precondition conjunct is false: k < -1
    //@ requires k < -1;
                   ^
3 verification failures

public class SetZero {

	//@ requires 5 >= a.length;
	//@ requires 1 <= a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin <= 1;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd <= a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 0;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 >= a.length;
    //@ requires 1 <= a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin != 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin != 2;
    //@ requires iBegin <= 1;
    //@ requires iBegin >= 0;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd <= a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 0;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k != iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k != a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k != 5;
    //@ requires k <= -1;
    //@ requires k != -1;
    //@ requires k >= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:34: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:80:) in method SetZero
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
                                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:80: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:34:
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:78: verify: Precondition conjunct is false: k >= -1
    //@ requires k >= -1;
                   ^
3 verification failures

public class SetZero {

	//@ requires 5 >= a.length;
	//@ requires 1 <= a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin <= 1;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd <= a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 0;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 >= a.length;
    //@ requires 1 <= a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin != 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin != 2;
    //@ requires iBegin <= 1;
    //@ requires iBegin >= 0;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd <= a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 0;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k != iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k != a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k != 5;
    //@ requires k <= -1;
    //@ requires k != -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:34: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:79:) in method SetZero
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
                                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:79: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:34:
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:77: verify: Precondition conjunct is false: k != -1
    //@ requires k != -1;
                   ^
3 verification failures

public class SetZero {

	//@ requires 5 >= a.length;
	//@ requires 1 <= a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin <= 1;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd <= a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 0;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 >= a.length;
    //@ requires 1 <= a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin != 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin != 2;
    //@ requires iBegin <= 1;
    //@ requires iBegin >= 0;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd <= a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 0;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k != iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k != a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k != 5;
    //@ requires k <= -1;
    //@ requires k > -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:34: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:78:) in method SetZero
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
                                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:78: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:34:
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:77: verify: Precondition conjunct is false: k > -1
    //@ requires k > -1;
                   ^
3 verification failures

public class SetZero {

	//@ requires 5 >= a.length;
	//@ requires 1 <= a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin <= 1;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd <= a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 0;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 >= a.length;
    //@ requires 1 <= a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin != 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin != 2;
    //@ requires iBegin <= 1;
    //@ requires iBegin >= 0;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd <= a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 0;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k != iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k != a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k != 5;
    //@ requires k <= -1;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:34: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SetZero.java:77:) in method SetZero
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
                                   ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:77: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SetZero.java:34:
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}
                       ^
/home/max/Documents/JMLGPT/tmp/SetZero.java:76: verify: Precondition conjunct is false: k <= -1
    //@ requires k <= -1;
                   ^
3 verification failures

public class SetZero {

	//@ requires 5 >= a.length;
	//@ requires 1 <= a.length;
	//@ requires -1 < a.length;
	//@ requires -1 <= a.length;
	//@ requires -1 != a.length;
	//@ requires iBegin < a.length;
	//@ requires iBegin <= a.length;
	//@ requires iBegin != a.length;
	//@ requires iBegin < 5;
	//@ requires iBegin <= 5;
	//@ requires iBegin != 5;
	//@ requires iBegin < 2;
	//@ requires iBegin <= 2;
	//@ requires iBegin != 2;
	//@ requires iBegin <= 1;
	//@ requires iBegin >= 0;
	//@ requires iBegin != -1;
	//@ requires iBegin >= -1;
	//@ requires iBegin > -1;
	//@ requires iEnd <= a.length;
	//@ requires iEnd < 5;
	//@ requires iEnd <= 5;
	//@ requires iEnd != 5;
	//@ requires iEnd >= 0;
	//@ requires iEnd != -1;
	//@ requires iEnd >= -1;
	//@ requires iEnd > -1;
	public static void SetZero(int[] a, int iBegin, int iEnd) {
		int k = iBegin;

		while (k < iEnd) {
            __Loop_Invariant_Dummy1(a, iBegin, iEnd, k);
            a[k] = 0;
            k = k + 1 ;
        }
	}

    //@ requires 5 >= a.length;
    //@ requires 1 <= a.length;
    //@ requires -1 < a.length;
    //@ requires -1 <= a.length;
    //@ requires -1 != a.length;
    //@ requires iBegin < a.length;
    //@ requires iBegin <= a.length;
    //@ requires iBegin != a.length;
    //@ requires iBegin < 5;
    //@ requires iBegin <= 5;
    //@ requires iBegin != 5;
    //@ requires iBegin < 2;
    //@ requires iBegin <= 2;
    //@ requires iBegin != 2;
    //@ requires iBegin <= 1;
    //@ requires iBegin >= 0;
    //@ requires iBegin != -1;
    //@ requires iBegin >= -1;
    //@ requires iBegin > -1;
    //@ requires iEnd <= a.length;
    //@ requires iEnd < 5;
    //@ requires iEnd <= 5;
    //@ requires iEnd != 5;
    //@ requires iEnd >= 0;
    //@ requires iEnd != -1;
    //@ requires iEnd >= -1;
    //@ requires iEnd > -1;
    //@ requires k < iEnd;
    //@ requires k <= iEnd;
    //@ requires k != iEnd;
    //@ requires k < a.length;
    //@ requires k <= a.length;
    //@ requires k != a.length;
    //@ requires k < 5;
    //@ requires k <= 5;
    //@ requires k != 5;
    public static void __Loop_Invariant_Dummy1(int[] a, int iBegin, int iEnd, int k) {}

	public void __HoudiniInvoker() {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        SetZero(arr, 0, 4);
        arr = new int[]{0};
        SetZero(arr, 0, 1);
        arr = new int[]{-2, -1};
        SetZero(arr, 1, 2);
        arr = new int[]{2, 3};
        SetZero(arr, 0, 1);
        arr = new int[]{0, 1};
        SetZero(arr, 1, 0);
        arr = new int[]{-2, -3};
        SetZero(arr, 0, 0);
    }
}


/home/max/Documents/JMLGPT/tmp/SetZero.java:35: verify: The prover cannot establish an assertion (PossiblyNegativeIndex) in method SetZero
            a[k] = 0;
             ^
1 verification failure

