class UglyNum {
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> \result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        int temp = n;
        int[] factors = {2, 3, 5};
        int i = 0;
        for (i = 0; i < factors.length; i++) {
            __Loop_Invariant_Dummy1(n, temp, factors, i);
            int factor = factors[i];
            while (temp % factor == 0) {
                temp /= factor;
            }
        }
        __Loop_Invariant_Dummy1(n, temp, factors, i);
        return temp == 1;
    }

    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires temp < 3;
    //@ requires temp <= 3;
    //@ requires temp == 3;
    //@ requires temp != 3;
    //@ requires temp >= 3;
    //@ requires temp > 3;
    //@ requires temp < 1;
    //@ requires temp <= 1;
    //@ requires temp == 1;
    //@ requires temp != 1;
    //@ requires temp >= 1;
    //@ requires temp > 1;
    //@ requires temp < 0;
    //@ requires temp <= 0;
    //@ requires temp == 0;
    //@ requires temp != 0;
    //@ requires temp >= 0;
    //@ requires temp > 0;
    //@ requires temp < -1;
    //@ requires temp <= -1;
    //@ requires temp == -1;
    //@ requires temp != -1;
    //@ requires temp >= -1;
    //@ requires temp > -1;
    //@ requires temp < n;
    //@ requires temp <= n;
    //@ requires temp == n;
    //@ requires temp != n;
    //@ requires temp >= n;
    //@ requires temp > n;
    //@ non_null
    //@ requires temp < factors.length;
    //@ requires temp <= factors.length;
    //@ requires temp == factors.length;
    //@ requires temp != factors.length;
    //@ requires temp >= factors.length;
    //@ requires temp > factors.length;
    //@ requires 3 < factors.length;
    //@ requires 3 <= factors.length;
    //@ requires 3 == factors.length;
    //@ requires 3 != factors.length;
    //@ requires 3 >= factors.length;
    //@ requires 3 > factors.length;
    //@ requires 1 < factors.length;
    //@ requires 1 <= factors.length;
    //@ requires 1 == factors.length;
    //@ requires 1 != factors.length;
    //@ requires 1 >= factors.length;
    //@ requires 1 > factors.length;
    //@ requires -1 < factors.length;
    //@ requires -1 <= factors.length;
    //@ requires -1 == factors.length;
    //@ requires -1 != factors.length;
    //@ requires -1 >= factors.length;
    //@ requires -1 > factors.length;
    //@ requires n < factors.length;
    //@ requires n <= factors.length;
    //@ requires n == factors.length;
    //@ requires n != factors.length;
    //@ requires n >= factors.length;
    //@ requires n > factors.length;
    //@ requires i < temp;
    //@ requires i <= temp;
    //@ requires i == temp;
    //@ requires i != temp;
    //@ requires i >= temp;
    //@ requires i > temp;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < factors.length;
    //@ requires i <= factors.length;
    //@ requires i == factors.length;
    //@ requires i != factors.length;
    //@ requires i >= factors.length;
    //@ requires i > factors.length;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isUgly(0);
        isUgly(1);
        isUgly(2);
        isUgly(3);
        isUgly(15);
        isUgly(-1);
        isUgly(-2);
        isUgly(-3);
		isUgly(4);
        isUgly(5);
        isUgly(7);
        isUgly(8);
		isUgly(13);
		isUgly(17);
		isUgly(12);
		isUgly(16);
    }
}


/home/max/Documents/JMLGPT/tmp/UglyNum.java:102: error: No modifiers are allowed prior to a lightweight specification case
    //@ non_null
        ^
1 error

class UglyNum {
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> \result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        int temp = n;
        int[] factors = {2, 3, 5};
        int i = 0;
        for (i = 0; i < factors.length; i++) {
            __Loop_Invariant_Dummy1(n, temp, factors, i);
            int factor = factors[i];
            while (temp % factor == 0) {
                temp /= factor;
            }
        }
        __Loop_Invariant_Dummy1(n, temp, factors, i);
        return temp == 1;
    }

    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires temp < 3;
    //@ requires temp <= 3;
    //@ requires temp == 3;
    //@ requires temp != 3;
    //@ requires temp >= 3;
    //@ requires temp > 3;
    //@ requires temp < 1;
    //@ requires temp <= 1;
    //@ requires temp == 1;
    //@ requires temp != 1;
    //@ requires temp >= 1;
    //@ requires temp > 1;
    //@ requires temp < 0;
    //@ requires temp <= 0;
    //@ requires temp == 0;
    //@ requires temp != 0;
    //@ requires temp >= 0;
    //@ requires temp > 0;
    //@ requires temp < -1;
    //@ requires temp <= -1;
    //@ requires temp == -1;
    //@ requires temp != -1;
    //@ requires temp >= -1;
    //@ requires temp > -1;
    //@ requires temp < n;
    //@ requires temp <= n;
    //@ requires temp == n;
    //@ requires temp != n;
    //@ requires temp >= n;
    //@ requires temp > n;
    //@ requires temp < factors.length;
    //@ requires temp <= factors.length;
    //@ requires temp == factors.length;
    //@ requires temp != factors.length;
    //@ requires temp >= factors.length;
    //@ requires temp > factors.length;
    //@ requires 3 < factors.length;
    //@ requires 3 <= factors.length;
    //@ requires 3 == factors.length;
    //@ requires 3 != factors.length;
    //@ requires 3 >= factors.length;
    //@ requires 3 > factors.length;
    //@ requires 1 < factors.length;
    //@ requires 1 <= factors.length;
    //@ requires 1 == factors.length;
    //@ requires 1 != factors.length;
    //@ requires 1 >= factors.length;
    //@ requires 1 > factors.length;
    //@ requires -1 < factors.length;
    //@ requires -1 <= factors.length;
    //@ requires -1 == factors.length;
    //@ requires -1 != factors.length;
    //@ requires -1 >= factors.length;
    //@ requires -1 > factors.length;
    //@ requires n < factors.length;
    //@ requires n <= factors.length;
    //@ requires n == factors.length;
    //@ requires n != factors.length;
    //@ requires n >= factors.length;
    //@ requires n > factors.length;
    //@ requires i < temp;
    //@ requires i <= temp;
    //@ requires i == temp;
    //@ requires i != temp;
    //@ requires i >= temp;
    //@ requires i > temp;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < factors.length;
    //@ requires i <= factors.length;
    //@ requires i == factors.length;
    //@ requires i != factors.length;
    //@ requires i >= factors.length;
    //@ requires i > factors.length;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isUgly(0);
        isUgly(1);
        isUgly(2);
        isUgly(3);
        isUgly(15);
        isUgly(-1);
        isUgly(-2);
        isUgly(-3);
		isUgly(4);
        isUgly(5);
        isUgly(7);
        isUgly(8);
		isUgly(13);
		isUgly(17);
		isUgly(12);
		isUgly(16);
    }
}


/home/max/Documents/JMLGPT/tmp/UglyNum.java:178: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:30:) in method main
        isUgly(0);
              ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:30: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:178:
    public static boolean isUgly(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:4: verify: Precondition conjunct is false: n == 3
    //@ requires n == 3;
                   ^
3 verification failures

class UglyNum {
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> \result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        int temp = n;
        int[] factors = {2, 3, 5};
        int i = 0;
        for (i = 0; i < factors.length; i++) {
            __Loop_Invariant_Dummy1(n, temp, factors, i);
            int factor = factors[i];
            while (temp % factor == 0) {
                temp /= factor;
            }
        }
        __Loop_Invariant_Dummy1(n, temp, factors, i);
        return temp == 1;
    }

    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires temp < 3;
    //@ requires temp <= 3;
    //@ requires temp == 3;
    //@ requires temp != 3;
    //@ requires temp >= 3;
    //@ requires temp > 3;
    //@ requires temp < 1;
    //@ requires temp <= 1;
    //@ requires temp == 1;
    //@ requires temp != 1;
    //@ requires temp >= 1;
    //@ requires temp > 1;
    //@ requires temp < 0;
    //@ requires temp <= 0;
    //@ requires temp == 0;
    //@ requires temp != 0;
    //@ requires temp >= 0;
    //@ requires temp > 0;
    //@ requires temp < -1;
    //@ requires temp <= -1;
    //@ requires temp == -1;
    //@ requires temp != -1;
    //@ requires temp >= -1;
    //@ requires temp > -1;
    //@ requires temp < n;
    //@ requires temp <= n;
    //@ requires temp == n;
    //@ requires temp != n;
    //@ requires temp >= n;
    //@ requires temp > n;
    //@ requires temp < factors.length;
    //@ requires temp <= factors.length;
    //@ requires temp == factors.length;
    //@ requires temp != factors.length;
    //@ requires temp >= factors.length;
    //@ requires temp > factors.length;
    //@ requires 3 < factors.length;
    //@ requires 3 <= factors.length;
    //@ requires 3 == factors.length;
    //@ requires 3 != factors.length;
    //@ requires 3 >= factors.length;
    //@ requires 3 > factors.length;
    //@ requires 1 < factors.length;
    //@ requires 1 <= factors.length;
    //@ requires 1 == factors.length;
    //@ requires 1 != factors.length;
    //@ requires 1 >= factors.length;
    //@ requires 1 > factors.length;
    //@ requires -1 < factors.length;
    //@ requires -1 <= factors.length;
    //@ requires -1 == factors.length;
    //@ requires -1 != factors.length;
    //@ requires -1 >= factors.length;
    //@ requires -1 > factors.length;
    //@ requires n < factors.length;
    //@ requires n <= factors.length;
    //@ requires n == factors.length;
    //@ requires n != factors.length;
    //@ requires n >= factors.length;
    //@ requires n > factors.length;
    //@ requires i < temp;
    //@ requires i <= temp;
    //@ requires i == temp;
    //@ requires i != temp;
    //@ requires i >= temp;
    //@ requires i > temp;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < factors.length;
    //@ requires i <= factors.length;
    //@ requires i == factors.length;
    //@ requires i != factors.length;
    //@ requires i >= factors.length;
    //@ requires i > factors.length;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isUgly(0);
        isUgly(1);
        isUgly(2);
        isUgly(3);
        isUgly(15);
        isUgly(-1);
        isUgly(-2);
        isUgly(-3);
		isUgly(4);
        isUgly(5);
        isUgly(7);
        isUgly(8);
		isUgly(13);
		isUgly(17);
		isUgly(12);
		isUgly(16);
    }
}


/home/max/Documents/JMLGPT/tmp/UglyNum.java:177: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:29:) in method main
        isUgly(0);
              ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:29: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:177:
    public static boolean isUgly(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:5: verify: Precondition conjunct is false: n >= 3
    //@ requires n >= 3;
                   ^
3 verification failures

class UglyNum {
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n > 3;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> \result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        int temp = n;
        int[] factors = {2, 3, 5};
        int i = 0;
        for (i = 0; i < factors.length; i++) {
            __Loop_Invariant_Dummy1(n, temp, factors, i);
            int factor = factors[i];
            while (temp % factor == 0) {
                temp /= factor;
            }
        }
        __Loop_Invariant_Dummy1(n, temp, factors, i);
        return temp == 1;
    }

    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires temp < 3;
    //@ requires temp <= 3;
    //@ requires temp == 3;
    //@ requires temp != 3;
    //@ requires temp >= 3;
    //@ requires temp > 3;
    //@ requires temp < 1;
    //@ requires temp <= 1;
    //@ requires temp == 1;
    //@ requires temp != 1;
    //@ requires temp >= 1;
    //@ requires temp > 1;
    //@ requires temp < 0;
    //@ requires temp <= 0;
    //@ requires temp == 0;
    //@ requires temp != 0;
    //@ requires temp >= 0;
    //@ requires temp > 0;
    //@ requires temp < -1;
    //@ requires temp <= -1;
    //@ requires temp == -1;
    //@ requires temp != -1;
    //@ requires temp >= -1;
    //@ requires temp > -1;
    //@ requires temp < n;
    //@ requires temp <= n;
    //@ requires temp == n;
    //@ requires temp != n;
    //@ requires temp >= n;
    //@ requires temp > n;
    //@ requires temp < factors.length;
    //@ requires temp <= factors.length;
    //@ requires temp == factors.length;
    //@ requires temp != factors.length;
    //@ requires temp >= factors.length;
    //@ requires temp > factors.length;
    //@ requires 3 < factors.length;
    //@ requires 3 <= factors.length;
    //@ requires 3 == factors.length;
    //@ requires 3 != factors.length;
    //@ requires 3 >= factors.length;
    //@ requires 3 > factors.length;
    //@ requires 1 < factors.length;
    //@ requires 1 <= factors.length;
    //@ requires 1 == factors.length;
    //@ requires 1 != factors.length;
    //@ requires 1 >= factors.length;
    //@ requires 1 > factors.length;
    //@ requires -1 < factors.length;
    //@ requires -1 <= factors.length;
    //@ requires -1 == factors.length;
    //@ requires -1 != factors.length;
    //@ requires -1 >= factors.length;
    //@ requires -1 > factors.length;
    //@ requires n < factors.length;
    //@ requires n <= factors.length;
    //@ requires n == factors.length;
    //@ requires n != factors.length;
    //@ requires n >= factors.length;
    //@ requires n > factors.length;
    //@ requires i < temp;
    //@ requires i <= temp;
    //@ requires i == temp;
    //@ requires i != temp;
    //@ requires i >= temp;
    //@ requires i > temp;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < factors.length;
    //@ requires i <= factors.length;
    //@ requires i == factors.length;
    //@ requires i != factors.length;
    //@ requires i >= factors.length;
    //@ requires i > factors.length;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isUgly(0);
        isUgly(1);
        isUgly(2);
        isUgly(3);
        isUgly(15);
        isUgly(-1);
        isUgly(-2);
        isUgly(-3);
		isUgly(4);
        isUgly(5);
        isUgly(7);
        isUgly(8);
		isUgly(13);
		isUgly(17);
		isUgly(12);
		isUgly(16);
    }
}


/home/max/Documents/JMLGPT/tmp/UglyNum.java:176: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:28:) in method main
        isUgly(0);
              ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:28: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:176:
    public static boolean isUgly(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:5: verify: Precondition conjunct is false: n > 3
    //@ requires n > 3;
                   ^
3 verification failures

class UglyNum {
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> \result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        int temp = n;
        int[] factors = {2, 3, 5};
        int i = 0;
        for (i = 0; i < factors.length; i++) {
            __Loop_Invariant_Dummy1(n, temp, factors, i);
            int factor = factors[i];
            while (temp % factor == 0) {
                temp /= factor;
            }
        }
        __Loop_Invariant_Dummy1(n, temp, factors, i);
        return temp == 1;
    }

    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires temp < 3;
    //@ requires temp <= 3;
    //@ requires temp == 3;
    //@ requires temp != 3;
    //@ requires temp >= 3;
    //@ requires temp > 3;
    //@ requires temp < 1;
    //@ requires temp <= 1;
    //@ requires temp == 1;
    //@ requires temp != 1;
    //@ requires temp >= 1;
    //@ requires temp > 1;
    //@ requires temp < 0;
    //@ requires temp <= 0;
    //@ requires temp == 0;
    //@ requires temp != 0;
    //@ requires temp >= 0;
    //@ requires temp > 0;
    //@ requires temp < -1;
    //@ requires temp <= -1;
    //@ requires temp == -1;
    //@ requires temp != -1;
    //@ requires temp >= -1;
    //@ requires temp > -1;
    //@ requires temp < n;
    //@ requires temp <= n;
    //@ requires temp == n;
    //@ requires temp != n;
    //@ requires temp >= n;
    //@ requires temp > n;
    //@ requires temp < factors.length;
    //@ requires temp <= factors.length;
    //@ requires temp == factors.length;
    //@ requires temp != factors.length;
    //@ requires temp >= factors.length;
    //@ requires temp > factors.length;
    //@ requires 3 < factors.length;
    //@ requires 3 <= factors.length;
    //@ requires 3 == factors.length;
    //@ requires 3 != factors.length;
    //@ requires 3 >= factors.length;
    //@ requires 3 > factors.length;
    //@ requires 1 < factors.length;
    //@ requires 1 <= factors.length;
    //@ requires 1 == factors.length;
    //@ requires 1 != factors.length;
    //@ requires 1 >= factors.length;
    //@ requires 1 > factors.length;
    //@ requires -1 < factors.length;
    //@ requires -1 <= factors.length;
    //@ requires -1 == factors.length;
    //@ requires -1 != factors.length;
    //@ requires -1 >= factors.length;
    //@ requires -1 > factors.length;
    //@ requires n < factors.length;
    //@ requires n <= factors.length;
    //@ requires n == factors.length;
    //@ requires n != factors.length;
    //@ requires n >= factors.length;
    //@ requires n > factors.length;
    //@ requires i < temp;
    //@ requires i <= temp;
    //@ requires i == temp;
    //@ requires i != temp;
    //@ requires i >= temp;
    //@ requires i > temp;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < factors.length;
    //@ requires i <= factors.length;
    //@ requires i == factors.length;
    //@ requires i != factors.length;
    //@ requires i >= factors.length;
    //@ requires i > factors.length;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isUgly(0);
        isUgly(1);
        isUgly(2);
        isUgly(3);
        isUgly(15);
        isUgly(-1);
        isUgly(-2);
        isUgly(-3);
		isUgly(4);
        isUgly(5);
        isUgly(7);
        isUgly(8);
		isUgly(13);
		isUgly(17);
		isUgly(12);
		isUgly(16);
    }
}


/home/max/Documents/JMLGPT/tmp/UglyNum.java:175: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:27:) in method main
        isUgly(0);
              ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:27: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:175:
    public static boolean isUgly(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:7: verify: Precondition conjunct is false: n == 1
    //@ requires n == 1;
                   ^
3 verification failures

class UglyNum {
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> \result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        int temp = n;
        int[] factors = {2, 3, 5};
        int i = 0;
        for (i = 0; i < factors.length; i++) {
            __Loop_Invariant_Dummy1(n, temp, factors, i);
            int factor = factors[i];
            while (temp % factor == 0) {
                temp /= factor;
            }
        }
        __Loop_Invariant_Dummy1(n, temp, factors, i);
        return temp == 1;
    }

    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires temp < 3;
    //@ requires temp <= 3;
    //@ requires temp == 3;
    //@ requires temp != 3;
    //@ requires temp >= 3;
    //@ requires temp > 3;
    //@ requires temp < 1;
    //@ requires temp <= 1;
    //@ requires temp == 1;
    //@ requires temp != 1;
    //@ requires temp >= 1;
    //@ requires temp > 1;
    //@ requires temp < 0;
    //@ requires temp <= 0;
    //@ requires temp == 0;
    //@ requires temp != 0;
    //@ requires temp >= 0;
    //@ requires temp > 0;
    //@ requires temp < -1;
    //@ requires temp <= -1;
    //@ requires temp == -1;
    //@ requires temp != -1;
    //@ requires temp >= -1;
    //@ requires temp > -1;
    //@ requires temp < n;
    //@ requires temp <= n;
    //@ requires temp == n;
    //@ requires temp != n;
    //@ requires temp >= n;
    //@ requires temp > n;
    //@ requires temp < factors.length;
    //@ requires temp <= factors.length;
    //@ requires temp == factors.length;
    //@ requires temp != factors.length;
    //@ requires temp >= factors.length;
    //@ requires temp > factors.length;
    //@ requires 3 < factors.length;
    //@ requires 3 <= factors.length;
    //@ requires 3 == factors.length;
    //@ requires 3 != factors.length;
    //@ requires 3 >= factors.length;
    //@ requires 3 > factors.length;
    //@ requires 1 < factors.length;
    //@ requires 1 <= factors.length;
    //@ requires 1 == factors.length;
    //@ requires 1 != factors.length;
    //@ requires 1 >= factors.length;
    //@ requires 1 > factors.length;
    //@ requires -1 < factors.length;
    //@ requires -1 <= factors.length;
    //@ requires -1 == factors.length;
    //@ requires -1 != factors.length;
    //@ requires -1 >= factors.length;
    //@ requires -1 > factors.length;
    //@ requires n < factors.length;
    //@ requires n <= factors.length;
    //@ requires n == factors.length;
    //@ requires n != factors.length;
    //@ requires n >= factors.length;
    //@ requires n > factors.length;
    //@ requires i < temp;
    //@ requires i <= temp;
    //@ requires i == temp;
    //@ requires i != temp;
    //@ requires i >= temp;
    //@ requires i > temp;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < factors.length;
    //@ requires i <= factors.length;
    //@ requires i == factors.length;
    //@ requires i != factors.length;
    //@ requires i >= factors.length;
    //@ requires i > factors.length;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isUgly(0);
        isUgly(1);
        isUgly(2);
        isUgly(3);
        isUgly(15);
        isUgly(-1);
        isUgly(-2);
        isUgly(-3);
		isUgly(4);
        isUgly(5);
        isUgly(7);
        isUgly(8);
		isUgly(13);
		isUgly(17);
		isUgly(12);
		isUgly(16);
    }
}


/home/max/Documents/JMLGPT/tmp/UglyNum.java:174: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:26:) in method main
        isUgly(0);
              ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:26: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:174:
    public static boolean isUgly(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:8: verify: Precondition conjunct is false: n >= 1
    //@ requires n >= 1;
                   ^
3 verification failures

class UglyNum {
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> \result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        int temp = n;
        int[] factors = {2, 3, 5};
        int i = 0;
        for (i = 0; i < factors.length; i++) {
            __Loop_Invariant_Dummy1(n, temp, factors, i);
            int factor = factors[i];
            while (temp % factor == 0) {
                temp /= factor;
            }
        }
        __Loop_Invariant_Dummy1(n, temp, factors, i);
        return temp == 1;
    }

    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires temp < 3;
    //@ requires temp <= 3;
    //@ requires temp == 3;
    //@ requires temp != 3;
    //@ requires temp >= 3;
    //@ requires temp > 3;
    //@ requires temp < 1;
    //@ requires temp <= 1;
    //@ requires temp == 1;
    //@ requires temp != 1;
    //@ requires temp >= 1;
    //@ requires temp > 1;
    //@ requires temp < 0;
    //@ requires temp <= 0;
    //@ requires temp == 0;
    //@ requires temp != 0;
    //@ requires temp >= 0;
    //@ requires temp > 0;
    //@ requires temp < -1;
    //@ requires temp <= -1;
    //@ requires temp == -1;
    //@ requires temp != -1;
    //@ requires temp >= -1;
    //@ requires temp > -1;
    //@ requires temp < n;
    //@ requires temp <= n;
    //@ requires temp == n;
    //@ requires temp != n;
    //@ requires temp >= n;
    //@ requires temp > n;
    //@ requires temp < factors.length;
    //@ requires temp <= factors.length;
    //@ requires temp == factors.length;
    //@ requires temp != factors.length;
    //@ requires temp >= factors.length;
    //@ requires temp > factors.length;
    //@ requires 3 < factors.length;
    //@ requires 3 <= factors.length;
    //@ requires 3 == factors.length;
    //@ requires 3 != factors.length;
    //@ requires 3 >= factors.length;
    //@ requires 3 > factors.length;
    //@ requires 1 < factors.length;
    //@ requires 1 <= factors.length;
    //@ requires 1 == factors.length;
    //@ requires 1 != factors.length;
    //@ requires 1 >= factors.length;
    //@ requires 1 > factors.length;
    //@ requires -1 < factors.length;
    //@ requires -1 <= factors.length;
    //@ requires -1 == factors.length;
    //@ requires -1 != factors.length;
    //@ requires -1 >= factors.length;
    //@ requires -1 > factors.length;
    //@ requires n < factors.length;
    //@ requires n <= factors.length;
    //@ requires n == factors.length;
    //@ requires n != factors.length;
    //@ requires n >= factors.length;
    //@ requires n > factors.length;
    //@ requires i < temp;
    //@ requires i <= temp;
    //@ requires i == temp;
    //@ requires i != temp;
    //@ requires i >= temp;
    //@ requires i > temp;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < factors.length;
    //@ requires i <= factors.length;
    //@ requires i == factors.length;
    //@ requires i != factors.length;
    //@ requires i >= factors.length;
    //@ requires i > factors.length;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isUgly(0);
        isUgly(1);
        isUgly(2);
        isUgly(3);
        isUgly(15);
        isUgly(-1);
        isUgly(-2);
        isUgly(-3);
		isUgly(4);
        isUgly(5);
        isUgly(7);
        isUgly(8);
		isUgly(13);
		isUgly(17);
		isUgly(12);
		isUgly(16);
    }
}


/home/max/Documents/JMLGPT/tmp/UglyNum.java:173: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:25:) in method main
        isUgly(0);
              ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:25: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:173:
    public static boolean isUgly(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:8: verify: Precondition conjunct is false: n > 1
    //@ requires n > 1;
                   ^
3 verification failures

class UglyNum {
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> \result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        int temp = n;
        int[] factors = {2, 3, 5};
        int i = 0;
        for (i = 0; i < factors.length; i++) {
            __Loop_Invariant_Dummy1(n, temp, factors, i);
            int factor = factors[i];
            while (temp % factor == 0) {
                temp /= factor;
            }
        }
        __Loop_Invariant_Dummy1(n, temp, factors, i);
        return temp == 1;
    }

    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires temp < 3;
    //@ requires temp <= 3;
    //@ requires temp == 3;
    //@ requires temp != 3;
    //@ requires temp >= 3;
    //@ requires temp > 3;
    //@ requires temp < 1;
    //@ requires temp <= 1;
    //@ requires temp == 1;
    //@ requires temp != 1;
    //@ requires temp >= 1;
    //@ requires temp > 1;
    //@ requires temp < 0;
    //@ requires temp <= 0;
    //@ requires temp == 0;
    //@ requires temp != 0;
    //@ requires temp >= 0;
    //@ requires temp > 0;
    //@ requires temp < -1;
    //@ requires temp <= -1;
    //@ requires temp == -1;
    //@ requires temp != -1;
    //@ requires temp >= -1;
    //@ requires temp > -1;
    //@ requires temp < n;
    //@ requires temp <= n;
    //@ requires temp == n;
    //@ requires temp != n;
    //@ requires temp >= n;
    //@ requires temp > n;
    //@ requires temp < factors.length;
    //@ requires temp <= factors.length;
    //@ requires temp == factors.length;
    //@ requires temp != factors.length;
    //@ requires temp >= factors.length;
    //@ requires temp > factors.length;
    //@ requires 3 < factors.length;
    //@ requires 3 <= factors.length;
    //@ requires 3 == factors.length;
    //@ requires 3 != factors.length;
    //@ requires 3 >= factors.length;
    //@ requires 3 > factors.length;
    //@ requires 1 < factors.length;
    //@ requires 1 <= factors.length;
    //@ requires 1 == factors.length;
    //@ requires 1 != factors.length;
    //@ requires 1 >= factors.length;
    //@ requires 1 > factors.length;
    //@ requires -1 < factors.length;
    //@ requires -1 <= factors.length;
    //@ requires -1 == factors.length;
    //@ requires -1 != factors.length;
    //@ requires -1 >= factors.length;
    //@ requires -1 > factors.length;
    //@ requires n < factors.length;
    //@ requires n <= factors.length;
    //@ requires n == factors.length;
    //@ requires n != factors.length;
    //@ requires n >= factors.length;
    //@ requires n > factors.length;
    //@ requires i < temp;
    //@ requires i <= temp;
    //@ requires i == temp;
    //@ requires i != temp;
    //@ requires i >= temp;
    //@ requires i > temp;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < factors.length;
    //@ requires i <= factors.length;
    //@ requires i == factors.length;
    //@ requires i != factors.length;
    //@ requires i >= factors.length;
    //@ requires i > factors.length;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isUgly(0);
        isUgly(1);
        isUgly(2);
        isUgly(3);
        isUgly(15);
        isUgly(-1);
        isUgly(-2);
        isUgly(-3);
		isUgly(4);
        isUgly(5);
        isUgly(7);
        isUgly(8);
		isUgly(13);
		isUgly(17);
		isUgly(12);
		isUgly(16);
    }
}


/home/max/Documents/JMLGPT/tmp/UglyNum.java:172: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:24:) in method main
        isUgly(0);
              ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:172:
    public static boolean isUgly(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:8: verify: Precondition conjunct is false: n < 0
    //@ requires n < 0;
                   ^
3 verification failures

class UglyNum {
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> \result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        int temp = n;
        int[] factors = {2, 3, 5};
        int i = 0;
        for (i = 0; i < factors.length; i++) {
            __Loop_Invariant_Dummy1(n, temp, factors, i);
            int factor = factors[i];
            while (temp % factor == 0) {
                temp /= factor;
            }
        }
        __Loop_Invariant_Dummy1(n, temp, factors, i);
        return temp == 1;
    }

    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires temp < 3;
    //@ requires temp <= 3;
    //@ requires temp == 3;
    //@ requires temp != 3;
    //@ requires temp >= 3;
    //@ requires temp > 3;
    //@ requires temp < 1;
    //@ requires temp <= 1;
    //@ requires temp == 1;
    //@ requires temp != 1;
    //@ requires temp >= 1;
    //@ requires temp > 1;
    //@ requires temp < 0;
    //@ requires temp <= 0;
    //@ requires temp == 0;
    //@ requires temp != 0;
    //@ requires temp >= 0;
    //@ requires temp > 0;
    //@ requires temp < -1;
    //@ requires temp <= -1;
    //@ requires temp == -1;
    //@ requires temp != -1;
    //@ requires temp >= -1;
    //@ requires temp > -1;
    //@ requires temp < n;
    //@ requires temp <= n;
    //@ requires temp == n;
    //@ requires temp != n;
    //@ requires temp >= n;
    //@ requires temp > n;
    //@ requires temp < factors.length;
    //@ requires temp <= factors.length;
    //@ requires temp == factors.length;
    //@ requires temp != factors.length;
    //@ requires temp >= factors.length;
    //@ requires temp > factors.length;
    //@ requires 3 < factors.length;
    //@ requires 3 <= factors.length;
    //@ requires 3 == factors.length;
    //@ requires 3 != factors.length;
    //@ requires 3 >= factors.length;
    //@ requires 3 > factors.length;
    //@ requires 1 < factors.length;
    //@ requires 1 <= factors.length;
    //@ requires 1 == factors.length;
    //@ requires 1 != factors.length;
    //@ requires 1 >= factors.length;
    //@ requires 1 > factors.length;
    //@ requires -1 < factors.length;
    //@ requires -1 <= factors.length;
    //@ requires -1 == factors.length;
    //@ requires -1 != factors.length;
    //@ requires -1 >= factors.length;
    //@ requires -1 > factors.length;
    //@ requires n < factors.length;
    //@ requires n <= factors.length;
    //@ requires n == factors.length;
    //@ requires n != factors.length;
    //@ requires n >= factors.length;
    //@ requires n > factors.length;
    //@ requires i < temp;
    //@ requires i <= temp;
    //@ requires i == temp;
    //@ requires i != temp;
    //@ requires i >= temp;
    //@ requires i > temp;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < factors.length;
    //@ requires i <= factors.length;
    //@ requires i == factors.length;
    //@ requires i != factors.length;
    //@ requires i >= factors.length;
    //@ requires i > factors.length;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isUgly(0);
        isUgly(1);
        isUgly(2);
        isUgly(3);
        isUgly(15);
        isUgly(-1);
        isUgly(-2);
        isUgly(-3);
		isUgly(4);
        isUgly(5);
        isUgly(7);
        isUgly(8);
		isUgly(13);
		isUgly(17);
		isUgly(12);
		isUgly(16);
    }
}


/home/max/Documents/JMLGPT/tmp/UglyNum.java:171: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:23:) in method main
        isUgly(0);
              ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:23: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:171:
    public static boolean isUgly(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:10: verify: Precondition conjunct is false: n != 0
    //@ requires n != 0;
                   ^
3 verification failures

class UglyNum {
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> \result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        int temp = n;
        int[] factors = {2, 3, 5};
        int i = 0;
        for (i = 0; i < factors.length; i++) {
            __Loop_Invariant_Dummy1(n, temp, factors, i);
            int factor = factors[i];
            while (temp % factor == 0) {
                temp /= factor;
            }
        }
        __Loop_Invariant_Dummy1(n, temp, factors, i);
        return temp == 1;
    }

    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires temp < 3;
    //@ requires temp <= 3;
    //@ requires temp == 3;
    //@ requires temp != 3;
    //@ requires temp >= 3;
    //@ requires temp > 3;
    //@ requires temp < 1;
    //@ requires temp <= 1;
    //@ requires temp == 1;
    //@ requires temp != 1;
    //@ requires temp >= 1;
    //@ requires temp > 1;
    //@ requires temp < 0;
    //@ requires temp <= 0;
    //@ requires temp == 0;
    //@ requires temp != 0;
    //@ requires temp >= 0;
    //@ requires temp > 0;
    //@ requires temp < -1;
    //@ requires temp <= -1;
    //@ requires temp == -1;
    //@ requires temp != -1;
    //@ requires temp >= -1;
    //@ requires temp > -1;
    //@ requires temp < n;
    //@ requires temp <= n;
    //@ requires temp == n;
    //@ requires temp != n;
    //@ requires temp >= n;
    //@ requires temp > n;
    //@ requires temp < factors.length;
    //@ requires temp <= factors.length;
    //@ requires temp == factors.length;
    //@ requires temp != factors.length;
    //@ requires temp >= factors.length;
    //@ requires temp > factors.length;
    //@ requires 3 < factors.length;
    //@ requires 3 <= factors.length;
    //@ requires 3 == factors.length;
    //@ requires 3 != factors.length;
    //@ requires 3 >= factors.length;
    //@ requires 3 > factors.length;
    //@ requires 1 < factors.length;
    //@ requires 1 <= factors.length;
    //@ requires 1 == factors.length;
    //@ requires 1 != factors.length;
    //@ requires 1 >= factors.length;
    //@ requires 1 > factors.length;
    //@ requires -1 < factors.length;
    //@ requires -1 <= factors.length;
    //@ requires -1 == factors.length;
    //@ requires -1 != factors.length;
    //@ requires -1 >= factors.length;
    //@ requires -1 > factors.length;
    //@ requires n < factors.length;
    //@ requires n <= factors.length;
    //@ requires n == factors.length;
    //@ requires n != factors.length;
    //@ requires n >= factors.length;
    //@ requires n > factors.length;
    //@ requires i < temp;
    //@ requires i <= temp;
    //@ requires i == temp;
    //@ requires i != temp;
    //@ requires i >= temp;
    //@ requires i > temp;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < factors.length;
    //@ requires i <= factors.length;
    //@ requires i == factors.length;
    //@ requires i != factors.length;
    //@ requires i >= factors.length;
    //@ requires i > factors.length;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isUgly(0);
        isUgly(1);
        isUgly(2);
        isUgly(3);
        isUgly(15);
        isUgly(-1);
        isUgly(-2);
        isUgly(-3);
		isUgly(4);
        isUgly(5);
        isUgly(7);
        isUgly(8);
		isUgly(13);
		isUgly(17);
		isUgly(12);
		isUgly(16);
    }
}


/home/max/Documents/JMLGPT/tmp/UglyNum.java:170: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:22:) in method main
        isUgly(0);
              ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:22: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:170:
    public static boolean isUgly(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:11: verify: Precondition conjunct is false: n > 0
    //@ requires n > 0;
                   ^
3 verification failures

class UglyNum {
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> \result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        int temp = n;
        int[] factors = {2, 3, 5};
        int i = 0;
        for (i = 0; i < factors.length; i++) {
            __Loop_Invariant_Dummy1(n, temp, factors, i);
            int factor = factors[i];
            while (temp % factor == 0) {
                temp /= factor;
            }
        }
        __Loop_Invariant_Dummy1(n, temp, factors, i);
        return temp == 1;
    }

    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires temp < 3;
    //@ requires temp <= 3;
    //@ requires temp == 3;
    //@ requires temp != 3;
    //@ requires temp >= 3;
    //@ requires temp > 3;
    //@ requires temp < 1;
    //@ requires temp <= 1;
    //@ requires temp == 1;
    //@ requires temp != 1;
    //@ requires temp >= 1;
    //@ requires temp > 1;
    //@ requires temp < 0;
    //@ requires temp <= 0;
    //@ requires temp == 0;
    //@ requires temp != 0;
    //@ requires temp >= 0;
    //@ requires temp > 0;
    //@ requires temp < -1;
    //@ requires temp <= -1;
    //@ requires temp == -1;
    //@ requires temp != -1;
    //@ requires temp >= -1;
    //@ requires temp > -1;
    //@ requires temp < n;
    //@ requires temp <= n;
    //@ requires temp == n;
    //@ requires temp != n;
    //@ requires temp >= n;
    //@ requires temp > n;
    //@ requires temp < factors.length;
    //@ requires temp <= factors.length;
    //@ requires temp == factors.length;
    //@ requires temp != factors.length;
    //@ requires temp >= factors.length;
    //@ requires temp > factors.length;
    //@ requires 3 < factors.length;
    //@ requires 3 <= factors.length;
    //@ requires 3 == factors.length;
    //@ requires 3 != factors.length;
    //@ requires 3 >= factors.length;
    //@ requires 3 > factors.length;
    //@ requires 1 < factors.length;
    //@ requires 1 <= factors.length;
    //@ requires 1 == factors.length;
    //@ requires 1 != factors.length;
    //@ requires 1 >= factors.length;
    //@ requires 1 > factors.length;
    //@ requires -1 < factors.length;
    //@ requires -1 <= factors.length;
    //@ requires -1 == factors.length;
    //@ requires -1 != factors.length;
    //@ requires -1 >= factors.length;
    //@ requires -1 > factors.length;
    //@ requires n < factors.length;
    //@ requires n <= factors.length;
    //@ requires n == factors.length;
    //@ requires n != factors.length;
    //@ requires n >= factors.length;
    //@ requires n > factors.length;
    //@ requires i < temp;
    //@ requires i <= temp;
    //@ requires i == temp;
    //@ requires i != temp;
    //@ requires i >= temp;
    //@ requires i > temp;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < factors.length;
    //@ requires i <= factors.length;
    //@ requires i == factors.length;
    //@ requires i != factors.length;
    //@ requires i >= factors.length;
    //@ requires i > factors.length;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isUgly(0);
        isUgly(1);
        isUgly(2);
        isUgly(3);
        isUgly(15);
        isUgly(-1);
        isUgly(-2);
        isUgly(-3);
		isUgly(4);
        isUgly(5);
        isUgly(7);
        isUgly(8);
		isUgly(13);
		isUgly(17);
		isUgly(12);
		isUgly(16);
    }
}


/home/max/Documents/JMLGPT/tmp/UglyNum.java:169: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:21:) in method main
        isUgly(0);
              ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:21: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:169:
    public static boolean isUgly(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:11: verify: Precondition conjunct is false: n < -1
    //@ requires n < -1;
                   ^
3 verification failures

class UglyNum {
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> \result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        int temp = n;
        int[] factors = {2, 3, 5};
        int i = 0;
        for (i = 0; i < factors.length; i++) {
            __Loop_Invariant_Dummy1(n, temp, factors, i);
            int factor = factors[i];
            while (temp % factor == 0) {
                temp /= factor;
            }
        }
        __Loop_Invariant_Dummy1(n, temp, factors, i);
        return temp == 1;
    }

    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires temp < 3;
    //@ requires temp <= 3;
    //@ requires temp == 3;
    //@ requires temp != 3;
    //@ requires temp >= 3;
    //@ requires temp > 3;
    //@ requires temp < 1;
    //@ requires temp <= 1;
    //@ requires temp == 1;
    //@ requires temp != 1;
    //@ requires temp >= 1;
    //@ requires temp > 1;
    //@ requires temp < 0;
    //@ requires temp <= 0;
    //@ requires temp == 0;
    //@ requires temp != 0;
    //@ requires temp >= 0;
    //@ requires temp > 0;
    //@ requires temp < -1;
    //@ requires temp <= -1;
    //@ requires temp == -1;
    //@ requires temp != -1;
    //@ requires temp >= -1;
    //@ requires temp > -1;
    //@ requires temp < n;
    //@ requires temp <= n;
    //@ requires temp == n;
    //@ requires temp != n;
    //@ requires temp >= n;
    //@ requires temp > n;
    //@ requires temp < factors.length;
    //@ requires temp <= factors.length;
    //@ requires temp == factors.length;
    //@ requires temp != factors.length;
    //@ requires temp >= factors.length;
    //@ requires temp > factors.length;
    //@ requires 3 < factors.length;
    //@ requires 3 <= factors.length;
    //@ requires 3 == factors.length;
    //@ requires 3 != factors.length;
    //@ requires 3 >= factors.length;
    //@ requires 3 > factors.length;
    //@ requires 1 < factors.length;
    //@ requires 1 <= factors.length;
    //@ requires 1 == factors.length;
    //@ requires 1 != factors.length;
    //@ requires 1 >= factors.length;
    //@ requires 1 > factors.length;
    //@ requires -1 < factors.length;
    //@ requires -1 <= factors.length;
    //@ requires -1 == factors.length;
    //@ requires -1 != factors.length;
    //@ requires -1 >= factors.length;
    //@ requires -1 > factors.length;
    //@ requires n < factors.length;
    //@ requires n <= factors.length;
    //@ requires n == factors.length;
    //@ requires n != factors.length;
    //@ requires n >= factors.length;
    //@ requires n > factors.length;
    //@ requires i < temp;
    //@ requires i <= temp;
    //@ requires i == temp;
    //@ requires i != temp;
    //@ requires i >= temp;
    //@ requires i > temp;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < factors.length;
    //@ requires i <= factors.length;
    //@ requires i == factors.length;
    //@ requires i != factors.length;
    //@ requires i >= factors.length;
    //@ requires i > factors.length;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isUgly(0);
        isUgly(1);
        isUgly(2);
        isUgly(3);
        isUgly(15);
        isUgly(-1);
        isUgly(-2);
        isUgly(-3);
		isUgly(4);
        isUgly(5);
        isUgly(7);
        isUgly(8);
		isUgly(13);
		isUgly(17);
		isUgly(12);
		isUgly(16);
    }
}


/home/max/Documents/JMLGPT/tmp/UglyNum.java:168: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:20:) in method main
        isUgly(0);
              ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:20: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:168:
    public static boolean isUgly(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:11: verify: Precondition conjunct is false: n <= -1
    //@ requires n <= -1;
                   ^
3 verification failures

class UglyNum {
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> \result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        int temp = n;
        int[] factors = {2, 3, 5};
        int i = 0;
        for (i = 0; i < factors.length; i++) {
            __Loop_Invariant_Dummy1(n, temp, factors, i);
            int factor = factors[i];
            while (temp % factor == 0) {
                temp /= factor;
            }
        }
        __Loop_Invariant_Dummy1(n, temp, factors, i);
        return temp == 1;
    }

    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires temp < 3;
    //@ requires temp <= 3;
    //@ requires temp == 3;
    //@ requires temp != 3;
    //@ requires temp >= 3;
    //@ requires temp > 3;
    //@ requires temp < 1;
    //@ requires temp <= 1;
    //@ requires temp == 1;
    //@ requires temp != 1;
    //@ requires temp >= 1;
    //@ requires temp > 1;
    //@ requires temp < 0;
    //@ requires temp <= 0;
    //@ requires temp == 0;
    //@ requires temp != 0;
    //@ requires temp >= 0;
    //@ requires temp > 0;
    //@ requires temp < -1;
    //@ requires temp <= -1;
    //@ requires temp == -1;
    //@ requires temp != -1;
    //@ requires temp >= -1;
    //@ requires temp > -1;
    //@ requires temp < n;
    //@ requires temp <= n;
    //@ requires temp == n;
    //@ requires temp != n;
    //@ requires temp >= n;
    //@ requires temp > n;
    //@ requires temp < factors.length;
    //@ requires temp <= factors.length;
    //@ requires temp == factors.length;
    //@ requires temp != factors.length;
    //@ requires temp >= factors.length;
    //@ requires temp > factors.length;
    //@ requires 3 < factors.length;
    //@ requires 3 <= factors.length;
    //@ requires 3 == factors.length;
    //@ requires 3 != factors.length;
    //@ requires 3 >= factors.length;
    //@ requires 3 > factors.length;
    //@ requires 1 < factors.length;
    //@ requires 1 <= factors.length;
    //@ requires 1 == factors.length;
    //@ requires 1 != factors.length;
    //@ requires 1 >= factors.length;
    //@ requires 1 > factors.length;
    //@ requires -1 < factors.length;
    //@ requires -1 <= factors.length;
    //@ requires -1 == factors.length;
    //@ requires -1 != factors.length;
    //@ requires -1 >= factors.length;
    //@ requires -1 > factors.length;
    //@ requires n < factors.length;
    //@ requires n <= factors.length;
    //@ requires n == factors.length;
    //@ requires n != factors.length;
    //@ requires n >= factors.length;
    //@ requires n > factors.length;
    //@ requires i < temp;
    //@ requires i <= temp;
    //@ requires i == temp;
    //@ requires i != temp;
    //@ requires i >= temp;
    //@ requires i > temp;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < factors.length;
    //@ requires i <= factors.length;
    //@ requires i == factors.length;
    //@ requires i != factors.length;
    //@ requires i >= factors.length;
    //@ requires i > factors.length;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isUgly(0);
        isUgly(1);
        isUgly(2);
        isUgly(3);
        isUgly(15);
        isUgly(-1);
        isUgly(-2);
        isUgly(-3);
		isUgly(4);
        isUgly(5);
        isUgly(7);
        isUgly(8);
		isUgly(13);
		isUgly(17);
		isUgly(12);
		isUgly(16);
    }
}


/home/max/Documents/JMLGPT/tmp/UglyNum.java:167: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:19:) in method main
        isUgly(0);
              ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:19: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:167:
    public static boolean isUgly(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:11: verify: Precondition conjunct is false: n == -1
    //@ requires n == -1;
                   ^
3 verification failures

class UglyNum {
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> \result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        int temp = n;
        int[] factors = {2, 3, 5};
        int i = 0;
        for (i = 0; i < factors.length; i++) {
            __Loop_Invariant_Dummy1(n, temp, factors, i);
            int factor = factors[i];
            while (temp % factor == 0) {
                temp /= factor;
            }
        }
        __Loop_Invariant_Dummy1(n, temp, factors, i);
        return temp == 1;
    }

    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires temp < 3;
    //@ requires temp <= 3;
    //@ requires temp == 3;
    //@ requires temp != 3;
    //@ requires temp >= 3;
    //@ requires temp > 3;
    //@ requires temp < 1;
    //@ requires temp <= 1;
    //@ requires temp == 1;
    //@ requires temp != 1;
    //@ requires temp >= 1;
    //@ requires temp > 1;
    //@ requires temp < 0;
    //@ requires temp <= 0;
    //@ requires temp == 0;
    //@ requires temp != 0;
    //@ requires temp >= 0;
    //@ requires temp > 0;
    //@ requires temp < -1;
    //@ requires temp <= -1;
    //@ requires temp == -1;
    //@ requires temp != -1;
    //@ requires temp >= -1;
    //@ requires temp > -1;
    //@ requires temp < n;
    //@ requires temp <= n;
    //@ requires temp == n;
    //@ requires temp != n;
    //@ requires temp >= n;
    //@ requires temp > n;
    //@ requires temp < factors.length;
    //@ requires temp <= factors.length;
    //@ requires temp == factors.length;
    //@ requires temp != factors.length;
    //@ requires temp >= factors.length;
    //@ requires temp > factors.length;
    //@ requires 3 < factors.length;
    //@ requires 3 <= factors.length;
    //@ requires 3 == factors.length;
    //@ requires 3 != factors.length;
    //@ requires 3 >= factors.length;
    //@ requires 3 > factors.length;
    //@ requires 1 < factors.length;
    //@ requires 1 <= factors.length;
    //@ requires 1 == factors.length;
    //@ requires 1 != factors.length;
    //@ requires 1 >= factors.length;
    //@ requires 1 > factors.length;
    //@ requires -1 < factors.length;
    //@ requires -1 <= factors.length;
    //@ requires -1 == factors.length;
    //@ requires -1 != factors.length;
    //@ requires -1 >= factors.length;
    //@ requires -1 > factors.length;
    //@ requires n < factors.length;
    //@ requires n <= factors.length;
    //@ requires n == factors.length;
    //@ requires n != factors.length;
    //@ requires n >= factors.length;
    //@ requires n > factors.length;
    //@ requires i < temp;
    //@ requires i <= temp;
    //@ requires i == temp;
    //@ requires i != temp;
    //@ requires i >= temp;
    //@ requires i > temp;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < factors.length;
    //@ requires i <= factors.length;
    //@ requires i == factors.length;
    //@ requires i != factors.length;
    //@ requires i >= factors.length;
    //@ requires i > factors.length;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isUgly(0);
        isUgly(1);
        isUgly(2);
        isUgly(3);
        isUgly(15);
        isUgly(-1);
        isUgly(-2);
        isUgly(-3);
		isUgly(4);
        isUgly(5);
        isUgly(7);
        isUgly(8);
		isUgly(13);
		isUgly(17);
		isUgly(12);
		isUgly(16);
    }
}


/home/max/Documents/JMLGPT/tmp/UglyNum.java:20: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:14:) in method isUgly
            return false;
            ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:14: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:20:
    //@ ensures \result;
        ^
2 verification failures

class UglyNum {
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> \result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        int temp = n;
        int[] factors = {2, 3, 5};
        int i = 0;
        for (i = 0; i < factors.length; i++) {
            __Loop_Invariant_Dummy1(n, temp, factors, i);
            int factor = factors[i];
            while (temp % factor == 0) {
                temp /= factor;
            }
        }
        __Loop_Invariant_Dummy1(n, temp, factors, i);
        return temp == 1;
    }

    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires temp < 3;
    //@ requires temp <= 3;
    //@ requires temp == 3;
    //@ requires temp != 3;
    //@ requires temp >= 3;
    //@ requires temp > 3;
    //@ requires temp < 1;
    //@ requires temp <= 1;
    //@ requires temp == 1;
    //@ requires temp != 1;
    //@ requires temp >= 1;
    //@ requires temp > 1;
    //@ requires temp < 0;
    //@ requires temp <= 0;
    //@ requires temp == 0;
    //@ requires temp != 0;
    //@ requires temp >= 0;
    //@ requires temp > 0;
    //@ requires temp < -1;
    //@ requires temp <= -1;
    //@ requires temp == -1;
    //@ requires temp != -1;
    //@ requires temp >= -1;
    //@ requires temp > -1;
    //@ requires temp < n;
    //@ requires temp <= n;
    //@ requires temp == n;
    //@ requires temp != n;
    //@ requires temp >= n;
    //@ requires temp > n;
    //@ requires temp < factors.length;
    //@ requires temp <= factors.length;
    //@ requires temp == factors.length;
    //@ requires temp != factors.length;
    //@ requires temp >= factors.length;
    //@ requires temp > factors.length;
    //@ requires 3 < factors.length;
    //@ requires 3 <= factors.length;
    //@ requires 3 == factors.length;
    //@ requires 3 != factors.length;
    //@ requires 3 >= factors.length;
    //@ requires 3 > factors.length;
    //@ requires 1 < factors.length;
    //@ requires 1 <= factors.length;
    //@ requires 1 == factors.length;
    //@ requires 1 != factors.length;
    //@ requires 1 >= factors.length;
    //@ requires 1 > factors.length;
    //@ requires -1 < factors.length;
    //@ requires -1 <= factors.length;
    //@ requires -1 == factors.length;
    //@ requires -1 != factors.length;
    //@ requires -1 >= factors.length;
    //@ requires -1 > factors.length;
    //@ requires n < factors.length;
    //@ requires n <= factors.length;
    //@ requires n == factors.length;
    //@ requires n != factors.length;
    //@ requires n >= factors.length;
    //@ requires n > factors.length;
    //@ requires i < temp;
    //@ requires i <= temp;
    //@ requires i == temp;
    //@ requires i != temp;
    //@ requires i >= temp;
    //@ requires i > temp;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < factors.length;
    //@ requires i <= factors.length;
    //@ requires i == factors.length;
    //@ requires i != factors.length;
    //@ requires i >= factors.length;
    //@ requires i > factors.length;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isUgly(0);
        isUgly(1);
        isUgly(2);
        isUgly(3);
        isUgly(15);
        isUgly(-1);
        isUgly(-2);
        isUgly(-3);
		isUgly(4);
        isUgly(5);
        isUgly(7);
        isUgly(8);
		isUgly(13);
		isUgly(17);
		isUgly(12);
		isUgly(16);
    }
}


/home/max/Documents/JMLGPT/tmp/UglyNum.java:19: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:15:) in method isUgly
            return false;
            ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:15: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:19:
    //@ ensures n >= 0 ==> \result;
        ^
2 verification failures

class UglyNum {
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        int temp = n;
        int[] factors = {2, 3, 5};
        int i = 0;
        for (i = 0; i < factors.length; i++) {
            __Loop_Invariant_Dummy1(n, temp, factors, i);
            int factor = factors[i];
            while (temp % factor == 0) {
                temp /= factor;
            }
        }
        __Loop_Invariant_Dummy1(n, temp, factors, i);
        return temp == 1;
    }

    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires temp < 3;
    //@ requires temp <= 3;
    //@ requires temp == 3;
    //@ requires temp != 3;
    //@ requires temp >= 3;
    //@ requires temp > 3;
    //@ requires temp < 1;
    //@ requires temp <= 1;
    //@ requires temp == 1;
    //@ requires temp != 1;
    //@ requires temp >= 1;
    //@ requires temp > 1;
    //@ requires temp < 0;
    //@ requires temp <= 0;
    //@ requires temp == 0;
    //@ requires temp != 0;
    //@ requires temp >= 0;
    //@ requires temp > 0;
    //@ requires temp < -1;
    //@ requires temp <= -1;
    //@ requires temp == -1;
    //@ requires temp != -1;
    //@ requires temp >= -1;
    //@ requires temp > -1;
    //@ requires temp < n;
    //@ requires temp <= n;
    //@ requires temp == n;
    //@ requires temp != n;
    //@ requires temp >= n;
    //@ requires temp > n;
    //@ requires temp < factors.length;
    //@ requires temp <= factors.length;
    //@ requires temp == factors.length;
    //@ requires temp != factors.length;
    //@ requires temp >= factors.length;
    //@ requires temp > factors.length;
    //@ requires 3 < factors.length;
    //@ requires 3 <= factors.length;
    //@ requires 3 == factors.length;
    //@ requires 3 != factors.length;
    //@ requires 3 >= factors.length;
    //@ requires 3 > factors.length;
    //@ requires 1 < factors.length;
    //@ requires 1 <= factors.length;
    //@ requires 1 == factors.length;
    //@ requires 1 != factors.length;
    //@ requires 1 >= factors.length;
    //@ requires 1 > factors.length;
    //@ requires -1 < factors.length;
    //@ requires -1 <= factors.length;
    //@ requires -1 == factors.length;
    //@ requires -1 != factors.length;
    //@ requires -1 >= factors.length;
    //@ requires -1 > factors.length;
    //@ requires n < factors.length;
    //@ requires n <= factors.length;
    //@ requires n == factors.length;
    //@ requires n != factors.length;
    //@ requires n >= factors.length;
    //@ requires n > factors.length;
    //@ requires i < temp;
    //@ requires i <= temp;
    //@ requires i == temp;
    //@ requires i != temp;
    //@ requires i >= temp;
    //@ requires i > temp;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < factors.length;
    //@ requires i <= factors.length;
    //@ requires i == factors.length;
    //@ requires i != factors.length;
    //@ requires i >= factors.length;
    //@ requires i > factors.length;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isUgly(0);
        isUgly(1);
        isUgly(2);
        isUgly(3);
        isUgly(15);
        isUgly(-1);
        isUgly(-2);
        isUgly(-3);
		isUgly(4);
        isUgly(5);
        isUgly(7);
        isUgly(8);
		isUgly(13);
		isUgly(17);
		isUgly(12);
		isUgly(16);
    }
}


/home/max/Documents/JMLGPT/tmp/UglyNum.java:165: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:16:) in method main
        isUgly(1);
              ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:16: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:165:
    public static boolean isUgly(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:5: verify: Precondition conjunct is false: n < 1
    //@ requires n < 1;
                   ^
3 verification failures

class UglyNum {
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        int temp = n;
        int[] factors = {2, 3, 5};
        int i = 0;
        for (i = 0; i < factors.length; i++) {
            __Loop_Invariant_Dummy1(n, temp, factors, i);
            int factor = factors[i];
            while (temp % factor == 0) {
                temp /= factor;
            }
        }
        __Loop_Invariant_Dummy1(n, temp, factors, i);
        return temp == 1;
    }

    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires temp < 3;
    //@ requires temp <= 3;
    //@ requires temp == 3;
    //@ requires temp != 3;
    //@ requires temp >= 3;
    //@ requires temp > 3;
    //@ requires temp < 1;
    //@ requires temp <= 1;
    //@ requires temp == 1;
    //@ requires temp != 1;
    //@ requires temp >= 1;
    //@ requires temp > 1;
    //@ requires temp < 0;
    //@ requires temp <= 0;
    //@ requires temp == 0;
    //@ requires temp != 0;
    //@ requires temp >= 0;
    //@ requires temp > 0;
    //@ requires temp < -1;
    //@ requires temp <= -1;
    //@ requires temp == -1;
    //@ requires temp != -1;
    //@ requires temp >= -1;
    //@ requires temp > -1;
    //@ requires temp < n;
    //@ requires temp <= n;
    //@ requires temp == n;
    //@ requires temp != n;
    //@ requires temp >= n;
    //@ requires temp > n;
    //@ requires temp < factors.length;
    //@ requires temp <= factors.length;
    //@ requires temp == factors.length;
    //@ requires temp != factors.length;
    //@ requires temp >= factors.length;
    //@ requires temp > factors.length;
    //@ requires 3 < factors.length;
    //@ requires 3 <= factors.length;
    //@ requires 3 == factors.length;
    //@ requires 3 != factors.length;
    //@ requires 3 >= factors.length;
    //@ requires 3 > factors.length;
    //@ requires 1 < factors.length;
    //@ requires 1 <= factors.length;
    //@ requires 1 == factors.length;
    //@ requires 1 != factors.length;
    //@ requires 1 >= factors.length;
    //@ requires 1 > factors.length;
    //@ requires -1 < factors.length;
    //@ requires -1 <= factors.length;
    //@ requires -1 == factors.length;
    //@ requires -1 != factors.length;
    //@ requires -1 >= factors.length;
    //@ requires -1 > factors.length;
    //@ requires n < factors.length;
    //@ requires n <= factors.length;
    //@ requires n == factors.length;
    //@ requires n != factors.length;
    //@ requires n >= factors.length;
    //@ requires n > factors.length;
    //@ requires i < temp;
    //@ requires i <= temp;
    //@ requires i == temp;
    //@ requires i != temp;
    //@ requires i >= temp;
    //@ requires i > temp;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < factors.length;
    //@ requires i <= factors.length;
    //@ requires i == factors.length;
    //@ requires i != factors.length;
    //@ requires i >= factors.length;
    //@ requires i > factors.length;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isUgly(0);
        isUgly(1);
        isUgly(2);
        isUgly(3);
        isUgly(15);
        isUgly(-1);
        isUgly(-2);
        isUgly(-3);
		isUgly(4);
        isUgly(5);
        isUgly(7);
        isUgly(8);
		isUgly(13);
		isUgly(17);
		isUgly(12);
		isUgly(16);
    }
}


/home/max/Documents/JMLGPT/tmp/UglyNum.java:164: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:15:) in method main
        isUgly(1);
              ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:15: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:164:
    public static boolean isUgly(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:6: verify: Precondition conjunct is false: n != 1
    //@ requires n != 1;
                   ^
3 verification failures

class UglyNum {
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        int temp = n;
        int[] factors = {2, 3, 5};
        int i = 0;
        for (i = 0; i < factors.length; i++) {
            __Loop_Invariant_Dummy1(n, temp, factors, i);
            int factor = factors[i];
            while (temp % factor == 0) {
                temp /= factor;
            }
        }
        __Loop_Invariant_Dummy1(n, temp, factors, i);
        return temp == 1;
    }

    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires temp < 3;
    //@ requires temp <= 3;
    //@ requires temp == 3;
    //@ requires temp != 3;
    //@ requires temp >= 3;
    //@ requires temp > 3;
    //@ requires temp < 1;
    //@ requires temp <= 1;
    //@ requires temp == 1;
    //@ requires temp != 1;
    //@ requires temp >= 1;
    //@ requires temp > 1;
    //@ requires temp < 0;
    //@ requires temp <= 0;
    //@ requires temp == 0;
    //@ requires temp != 0;
    //@ requires temp >= 0;
    //@ requires temp > 0;
    //@ requires temp < -1;
    //@ requires temp <= -1;
    //@ requires temp == -1;
    //@ requires temp != -1;
    //@ requires temp >= -1;
    //@ requires temp > -1;
    //@ requires temp < n;
    //@ requires temp <= n;
    //@ requires temp == n;
    //@ requires temp != n;
    //@ requires temp >= n;
    //@ requires temp > n;
    //@ requires temp < factors.length;
    //@ requires temp <= factors.length;
    //@ requires temp == factors.length;
    //@ requires temp != factors.length;
    //@ requires temp >= factors.length;
    //@ requires temp > factors.length;
    //@ requires 3 < factors.length;
    //@ requires 3 <= factors.length;
    //@ requires 3 == factors.length;
    //@ requires 3 != factors.length;
    //@ requires 3 >= factors.length;
    //@ requires 3 > factors.length;
    //@ requires 1 < factors.length;
    //@ requires 1 <= factors.length;
    //@ requires 1 == factors.length;
    //@ requires 1 != factors.length;
    //@ requires 1 >= factors.length;
    //@ requires 1 > factors.length;
    //@ requires -1 < factors.length;
    //@ requires -1 <= factors.length;
    //@ requires -1 == factors.length;
    //@ requires -1 != factors.length;
    //@ requires -1 >= factors.length;
    //@ requires -1 > factors.length;
    //@ requires n < factors.length;
    //@ requires n <= factors.length;
    //@ requires n == factors.length;
    //@ requires n != factors.length;
    //@ requires n >= factors.length;
    //@ requires n > factors.length;
    //@ requires i < temp;
    //@ requires i <= temp;
    //@ requires i == temp;
    //@ requires i != temp;
    //@ requires i >= temp;
    //@ requires i > temp;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < factors.length;
    //@ requires i <= factors.length;
    //@ requires i == factors.length;
    //@ requires i != factors.length;
    //@ requires i >= factors.length;
    //@ requires i > factors.length;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isUgly(0);
        isUgly(1);
        isUgly(2);
        isUgly(3);
        isUgly(15);
        isUgly(-1);
        isUgly(-2);
        isUgly(-3);
		isUgly(4);
        isUgly(5);
        isUgly(7);
        isUgly(8);
		isUgly(13);
		isUgly(17);
		isUgly(12);
		isUgly(16);
    }
}


/home/max/Documents/JMLGPT/tmp/UglyNum.java:163: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:14:) in method main
        isUgly(1);
              ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:14: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:163:
    public static boolean isUgly(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:6: verify: Precondition conjunct is false: n <= 0
    //@ requires n <= 0;
                   ^
3 verification failures

class UglyNum {
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        int temp = n;
        int[] factors = {2, 3, 5};
        int i = 0;
        for (i = 0; i < factors.length; i++) {
            __Loop_Invariant_Dummy1(n, temp, factors, i);
            int factor = factors[i];
            while (temp % factor == 0) {
                temp /= factor;
            }
        }
        __Loop_Invariant_Dummy1(n, temp, factors, i);
        return temp == 1;
    }

    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires temp < 3;
    //@ requires temp <= 3;
    //@ requires temp == 3;
    //@ requires temp != 3;
    //@ requires temp >= 3;
    //@ requires temp > 3;
    //@ requires temp < 1;
    //@ requires temp <= 1;
    //@ requires temp == 1;
    //@ requires temp != 1;
    //@ requires temp >= 1;
    //@ requires temp > 1;
    //@ requires temp < 0;
    //@ requires temp <= 0;
    //@ requires temp == 0;
    //@ requires temp != 0;
    //@ requires temp >= 0;
    //@ requires temp > 0;
    //@ requires temp < -1;
    //@ requires temp <= -1;
    //@ requires temp == -1;
    //@ requires temp != -1;
    //@ requires temp >= -1;
    //@ requires temp > -1;
    //@ requires temp < n;
    //@ requires temp <= n;
    //@ requires temp == n;
    //@ requires temp != n;
    //@ requires temp >= n;
    //@ requires temp > n;
    //@ requires temp < factors.length;
    //@ requires temp <= factors.length;
    //@ requires temp == factors.length;
    //@ requires temp != factors.length;
    //@ requires temp >= factors.length;
    //@ requires temp > factors.length;
    //@ requires 3 < factors.length;
    //@ requires 3 <= factors.length;
    //@ requires 3 == factors.length;
    //@ requires 3 != factors.length;
    //@ requires 3 >= factors.length;
    //@ requires 3 > factors.length;
    //@ requires 1 < factors.length;
    //@ requires 1 <= factors.length;
    //@ requires 1 == factors.length;
    //@ requires 1 != factors.length;
    //@ requires 1 >= factors.length;
    //@ requires 1 > factors.length;
    //@ requires -1 < factors.length;
    //@ requires -1 <= factors.length;
    //@ requires -1 == factors.length;
    //@ requires -1 != factors.length;
    //@ requires -1 >= factors.length;
    //@ requires -1 > factors.length;
    //@ requires n < factors.length;
    //@ requires n <= factors.length;
    //@ requires n == factors.length;
    //@ requires n != factors.length;
    //@ requires n >= factors.length;
    //@ requires n > factors.length;
    //@ requires i < temp;
    //@ requires i <= temp;
    //@ requires i == temp;
    //@ requires i != temp;
    //@ requires i >= temp;
    //@ requires i > temp;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < factors.length;
    //@ requires i <= factors.length;
    //@ requires i == factors.length;
    //@ requires i != factors.length;
    //@ requires i >= factors.length;
    //@ requires i > factors.length;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isUgly(0);
        isUgly(1);
        isUgly(2);
        isUgly(3);
        isUgly(15);
        isUgly(-1);
        isUgly(-2);
        isUgly(-3);
		isUgly(4);
        isUgly(5);
        isUgly(7);
        isUgly(8);
		isUgly(13);
		isUgly(17);
		isUgly(12);
		isUgly(16);
    }
}


/home/max/Documents/JMLGPT/tmp/UglyNum.java:162: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:13:) in method main
        isUgly(1);
              ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:162:
    public static boolean isUgly(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:6: verify: Precondition conjunct is false: n == 0
    //@ requires n == 0;
                   ^
3 verification failures

class UglyNum {
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        int temp = n;
        int[] factors = {2, 3, 5};
        int i = 0;
        for (i = 0; i < factors.length; i++) {
            __Loop_Invariant_Dummy1(n, temp, factors, i);
            int factor = factors[i];
            while (temp % factor == 0) {
                temp /= factor;
            }
        }
        __Loop_Invariant_Dummy1(n, temp, factors, i);
        return temp == 1;
    }

    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires temp < 3;
    //@ requires temp <= 3;
    //@ requires temp == 3;
    //@ requires temp != 3;
    //@ requires temp >= 3;
    //@ requires temp > 3;
    //@ requires temp < 1;
    //@ requires temp <= 1;
    //@ requires temp == 1;
    //@ requires temp != 1;
    //@ requires temp >= 1;
    //@ requires temp > 1;
    //@ requires temp < 0;
    //@ requires temp <= 0;
    //@ requires temp == 0;
    //@ requires temp != 0;
    //@ requires temp >= 0;
    //@ requires temp > 0;
    //@ requires temp < -1;
    //@ requires temp <= -1;
    //@ requires temp == -1;
    //@ requires temp != -1;
    //@ requires temp >= -1;
    //@ requires temp > -1;
    //@ requires temp < n;
    //@ requires temp <= n;
    //@ requires temp == n;
    //@ requires temp != n;
    //@ requires temp >= n;
    //@ requires temp > n;
    //@ requires temp < factors.length;
    //@ requires temp <= factors.length;
    //@ requires temp == factors.length;
    //@ requires temp != factors.length;
    //@ requires temp >= factors.length;
    //@ requires temp > factors.length;
    //@ requires 3 < factors.length;
    //@ requires 3 <= factors.length;
    //@ requires 3 == factors.length;
    //@ requires 3 != factors.length;
    //@ requires 3 >= factors.length;
    //@ requires 3 > factors.length;
    //@ requires 1 < factors.length;
    //@ requires 1 <= factors.length;
    //@ requires 1 == factors.length;
    //@ requires 1 != factors.length;
    //@ requires 1 >= factors.length;
    //@ requires 1 > factors.length;
    //@ requires -1 < factors.length;
    //@ requires -1 <= factors.length;
    //@ requires -1 == factors.length;
    //@ requires -1 != factors.length;
    //@ requires -1 >= factors.length;
    //@ requires -1 > factors.length;
    //@ requires n < factors.length;
    //@ requires n <= factors.length;
    //@ requires n == factors.length;
    //@ requires n != factors.length;
    //@ requires n >= factors.length;
    //@ requires n > factors.length;
    //@ requires i < temp;
    //@ requires i <= temp;
    //@ requires i == temp;
    //@ requires i != temp;
    //@ requires i >= temp;
    //@ requires i > temp;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < factors.length;
    //@ requires i <= factors.length;
    //@ requires i == factors.length;
    //@ requires i != factors.length;
    //@ requires i >= factors.length;
    //@ requires i > factors.length;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isUgly(0);
        isUgly(1);
        isUgly(2);
        isUgly(3);
        isUgly(15);
        isUgly(-1);
        isUgly(-2);
        isUgly(-3);
		isUgly(4);
        isUgly(5);
        isUgly(7);
        isUgly(8);
		isUgly(13);
		isUgly(17);
		isUgly(12);
		isUgly(16);
    }
}


/home/max/Documents/JMLGPT/tmp/UglyNum.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:156:) in method isUgly
        __Loop_Invariant_Dummy1(n, temp, factors, i);
                               ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:156: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:26:
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:32: verify: Precondition conjunct is false: n == 3
    //@ requires n == 3;
                   ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:162: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:12:) in method main
        isUgly(2);
              ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:12: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:162:
    public static boolean isUgly(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:5: verify: Precondition conjunct is false: n <= 1
    //@ requires n <= 1;
                   ^
6 verification failures

class UglyNum {
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        int temp = n;
        int[] factors = {2, 3, 5};
        int i = 0;
        for (i = 0; i < factors.length; i++) {
            __Loop_Invariant_Dummy1(n, temp, factors, i);
            int factor = factors[i];
            while (temp % factor == 0) {
                temp /= factor;
            }
        }
        __Loop_Invariant_Dummy1(n, temp, factors, i);
        return temp == 1;
    }

    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires temp < 3;
    //@ requires temp <= 3;
    //@ requires temp == 3;
    //@ requires temp != 3;
    //@ requires temp >= 3;
    //@ requires temp > 3;
    //@ requires temp < 1;
    //@ requires temp <= 1;
    //@ requires temp == 1;
    //@ requires temp != 1;
    //@ requires temp >= 1;
    //@ requires temp > 1;
    //@ requires temp < 0;
    //@ requires temp <= 0;
    //@ requires temp == 0;
    //@ requires temp != 0;
    //@ requires temp >= 0;
    //@ requires temp > 0;
    //@ requires temp < -1;
    //@ requires temp <= -1;
    //@ requires temp == -1;
    //@ requires temp != -1;
    //@ requires temp >= -1;
    //@ requires temp > -1;
    //@ requires temp < n;
    //@ requires temp <= n;
    //@ requires temp == n;
    //@ requires temp != n;
    //@ requires temp >= n;
    //@ requires temp > n;
    //@ requires temp < factors.length;
    //@ requires temp <= factors.length;
    //@ requires temp == factors.length;
    //@ requires temp != factors.length;
    //@ requires temp >= factors.length;
    //@ requires temp > factors.length;
    //@ requires 3 < factors.length;
    //@ requires 3 <= factors.length;
    //@ requires 3 == factors.length;
    //@ requires 3 != factors.length;
    //@ requires 3 >= factors.length;
    //@ requires 3 > factors.length;
    //@ requires 1 < factors.length;
    //@ requires 1 <= factors.length;
    //@ requires 1 == factors.length;
    //@ requires 1 != factors.length;
    //@ requires 1 >= factors.length;
    //@ requires 1 > factors.length;
    //@ requires -1 < factors.length;
    //@ requires -1 <= factors.length;
    //@ requires -1 == factors.length;
    //@ requires -1 != factors.length;
    //@ requires -1 >= factors.length;
    //@ requires -1 > factors.length;
    //@ requires n < factors.length;
    //@ requires n <= factors.length;
    //@ requires n == factors.length;
    //@ requires n != factors.length;
    //@ requires n >= factors.length;
    //@ requires n > factors.length;
    //@ requires i < temp;
    //@ requires i <= temp;
    //@ requires i == temp;
    //@ requires i != temp;
    //@ requires i >= temp;
    //@ requires i > temp;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < factors.length;
    //@ requires i <= factors.length;
    //@ requires i == factors.length;
    //@ requires i != factors.length;
    //@ requires i >= factors.length;
    //@ requires i > factors.length;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isUgly(0);
        isUgly(1);
        isUgly(2);
        isUgly(3);
        isUgly(15);
        isUgly(-1);
        isUgly(-2);
        isUgly(-3);
		isUgly(4);
        isUgly(5);
        isUgly(7);
        isUgly(8);
		isUgly(13);
		isUgly(17);
		isUgly(12);
		isUgly(16);
    }
}


/home/max/Documents/JMLGPT/tmp/UglyNum.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:155:) in method isUgly
        __Loop_Invariant_Dummy1(n, temp, factors, i);
                               ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:155: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:26:
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:33: verify: Precondition conjunct is false: n >= 3
    //@ requires n >= 3;
                   ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:161: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:12:) in method main
        isUgly(2);
              ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:12: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:161:
    public static boolean isUgly(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:5: verify: Precondition conjunct is false: n <= 1
    //@ requires n <= 1;
                   ^
6 verification failures

class UglyNum {
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        int temp = n;
        int[] factors = {2, 3, 5};
        int i = 0;
        for (i = 0; i < factors.length; i++) {
            __Loop_Invariant_Dummy1(n, temp, factors, i);
            int factor = factors[i];
            while (temp % factor == 0) {
                temp /= factor;
            }
        }
        __Loop_Invariant_Dummy1(n, temp, factors, i);
        return temp == 1;
    }

    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n > 3;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires temp < 3;
    //@ requires temp <= 3;
    //@ requires temp == 3;
    //@ requires temp != 3;
    //@ requires temp >= 3;
    //@ requires temp > 3;
    //@ requires temp < 1;
    //@ requires temp <= 1;
    //@ requires temp == 1;
    //@ requires temp != 1;
    //@ requires temp >= 1;
    //@ requires temp > 1;
    //@ requires temp < 0;
    //@ requires temp <= 0;
    //@ requires temp == 0;
    //@ requires temp != 0;
    //@ requires temp >= 0;
    //@ requires temp > 0;
    //@ requires temp < -1;
    //@ requires temp <= -1;
    //@ requires temp == -1;
    //@ requires temp != -1;
    //@ requires temp >= -1;
    //@ requires temp > -1;
    //@ requires temp < n;
    //@ requires temp <= n;
    //@ requires temp == n;
    //@ requires temp != n;
    //@ requires temp >= n;
    //@ requires temp > n;
    //@ requires temp < factors.length;
    //@ requires temp <= factors.length;
    //@ requires temp == factors.length;
    //@ requires temp != factors.length;
    //@ requires temp >= factors.length;
    //@ requires temp > factors.length;
    //@ requires 3 < factors.length;
    //@ requires 3 <= factors.length;
    //@ requires 3 == factors.length;
    //@ requires 3 != factors.length;
    //@ requires 3 >= factors.length;
    //@ requires 3 > factors.length;
    //@ requires 1 < factors.length;
    //@ requires 1 <= factors.length;
    //@ requires 1 == factors.length;
    //@ requires 1 != factors.length;
    //@ requires 1 >= factors.length;
    //@ requires 1 > factors.length;
    //@ requires -1 < factors.length;
    //@ requires -1 <= factors.length;
    //@ requires -1 == factors.length;
    //@ requires -1 != factors.length;
    //@ requires -1 >= factors.length;
    //@ requires -1 > factors.length;
    //@ requires n < factors.length;
    //@ requires n <= factors.length;
    //@ requires n == factors.length;
    //@ requires n != factors.length;
    //@ requires n >= factors.length;
    //@ requires n > factors.length;
    //@ requires i < temp;
    //@ requires i <= temp;
    //@ requires i == temp;
    //@ requires i != temp;
    //@ requires i >= temp;
    //@ requires i > temp;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < factors.length;
    //@ requires i <= factors.length;
    //@ requires i == factors.length;
    //@ requires i != factors.length;
    //@ requires i >= factors.length;
    //@ requires i > factors.length;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isUgly(0);
        isUgly(1);
        isUgly(2);
        isUgly(3);
        isUgly(15);
        isUgly(-1);
        isUgly(-2);
        isUgly(-3);
		isUgly(4);
        isUgly(5);
        isUgly(7);
        isUgly(8);
		isUgly(13);
		isUgly(17);
		isUgly(12);
		isUgly(16);
    }
}


/home/max/Documents/JMLGPT/tmp/UglyNum.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:154:) in method isUgly
        __Loop_Invariant_Dummy1(n, temp, factors, i);
                               ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:154: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:26:
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:33: verify: Precondition conjunct is false: n > 3
    //@ requires n > 3;
                   ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:160: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:12:) in method main
        isUgly(2);
              ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:12: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:160:
    public static boolean isUgly(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:5: verify: Precondition conjunct is false: n <= 1
    //@ requires n <= 1;
                   ^
6 verification failures

class UglyNum {
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        int temp = n;
        int[] factors = {2, 3, 5};
        int i = 0;
        for (i = 0; i < factors.length; i++) {
            __Loop_Invariant_Dummy1(n, temp, factors, i);
            int factor = factors[i];
            while (temp % factor == 0) {
                temp /= factor;
            }
        }
        __Loop_Invariant_Dummy1(n, temp, factors, i);
        return temp == 1;
    }

    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires temp < 3;
    //@ requires temp <= 3;
    //@ requires temp == 3;
    //@ requires temp != 3;
    //@ requires temp >= 3;
    //@ requires temp > 3;
    //@ requires temp < 1;
    //@ requires temp <= 1;
    //@ requires temp == 1;
    //@ requires temp != 1;
    //@ requires temp >= 1;
    //@ requires temp > 1;
    //@ requires temp < 0;
    //@ requires temp <= 0;
    //@ requires temp == 0;
    //@ requires temp != 0;
    //@ requires temp >= 0;
    //@ requires temp > 0;
    //@ requires temp < -1;
    //@ requires temp <= -1;
    //@ requires temp == -1;
    //@ requires temp != -1;
    //@ requires temp >= -1;
    //@ requires temp > -1;
    //@ requires temp < n;
    //@ requires temp <= n;
    //@ requires temp == n;
    //@ requires temp != n;
    //@ requires temp >= n;
    //@ requires temp > n;
    //@ requires temp < factors.length;
    //@ requires temp <= factors.length;
    //@ requires temp == factors.length;
    //@ requires temp != factors.length;
    //@ requires temp >= factors.length;
    //@ requires temp > factors.length;
    //@ requires 3 < factors.length;
    //@ requires 3 <= factors.length;
    //@ requires 3 == factors.length;
    //@ requires 3 != factors.length;
    //@ requires 3 >= factors.length;
    //@ requires 3 > factors.length;
    //@ requires 1 < factors.length;
    //@ requires 1 <= factors.length;
    //@ requires 1 == factors.length;
    //@ requires 1 != factors.length;
    //@ requires 1 >= factors.length;
    //@ requires 1 > factors.length;
    //@ requires -1 < factors.length;
    //@ requires -1 <= factors.length;
    //@ requires -1 == factors.length;
    //@ requires -1 != factors.length;
    //@ requires -1 >= factors.length;
    //@ requires -1 > factors.length;
    //@ requires n < factors.length;
    //@ requires n <= factors.length;
    //@ requires n == factors.length;
    //@ requires n != factors.length;
    //@ requires n >= factors.length;
    //@ requires n > factors.length;
    //@ requires i < temp;
    //@ requires i <= temp;
    //@ requires i == temp;
    //@ requires i != temp;
    //@ requires i >= temp;
    //@ requires i > temp;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < factors.length;
    //@ requires i <= factors.length;
    //@ requires i == factors.length;
    //@ requires i != factors.length;
    //@ requires i >= factors.length;
    //@ requires i > factors.length;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isUgly(0);
        isUgly(1);
        isUgly(2);
        isUgly(3);
        isUgly(15);
        isUgly(-1);
        isUgly(-2);
        isUgly(-3);
		isUgly(4);
        isUgly(5);
        isUgly(7);
        isUgly(8);
		isUgly(13);
		isUgly(17);
		isUgly(12);
		isUgly(16);
    }
}


/home/max/Documents/JMLGPT/tmp/UglyNum.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:153:) in method isUgly
        __Loop_Invariant_Dummy1(n, temp, factors, i);
                               ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:153: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:26:
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:33: verify: Precondition conjunct is false: n < 1
    //@ requires n < 1;
                   ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:159: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:12:) in method main
        isUgly(2);
              ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:12: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:159:
    public static boolean isUgly(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:5: verify: Precondition conjunct is false: n <= 1
    //@ requires n <= 1;
                   ^
6 verification failures

class UglyNum {
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        int temp = n;
        int[] factors = {2, 3, 5};
        int i = 0;
        for (i = 0; i < factors.length; i++) {
            __Loop_Invariant_Dummy1(n, temp, factors, i);
            int factor = factors[i];
            while (temp % factor == 0) {
                temp /= factor;
            }
        }
        __Loop_Invariant_Dummy1(n, temp, factors, i);
        return temp == 1;
    }

    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires temp < 3;
    //@ requires temp <= 3;
    //@ requires temp == 3;
    //@ requires temp != 3;
    //@ requires temp >= 3;
    //@ requires temp > 3;
    //@ requires temp < 1;
    //@ requires temp <= 1;
    //@ requires temp == 1;
    //@ requires temp != 1;
    //@ requires temp >= 1;
    //@ requires temp > 1;
    //@ requires temp < 0;
    //@ requires temp <= 0;
    //@ requires temp == 0;
    //@ requires temp != 0;
    //@ requires temp >= 0;
    //@ requires temp > 0;
    //@ requires temp < -1;
    //@ requires temp <= -1;
    //@ requires temp == -1;
    //@ requires temp != -1;
    //@ requires temp >= -1;
    //@ requires temp > -1;
    //@ requires temp < n;
    //@ requires temp <= n;
    //@ requires temp == n;
    //@ requires temp != n;
    //@ requires temp >= n;
    //@ requires temp > n;
    //@ requires temp < factors.length;
    //@ requires temp <= factors.length;
    //@ requires temp == factors.length;
    //@ requires temp != factors.length;
    //@ requires temp >= factors.length;
    //@ requires temp > factors.length;
    //@ requires 3 < factors.length;
    //@ requires 3 <= factors.length;
    //@ requires 3 == factors.length;
    //@ requires 3 != factors.length;
    //@ requires 3 >= factors.length;
    //@ requires 3 > factors.length;
    //@ requires 1 < factors.length;
    //@ requires 1 <= factors.length;
    //@ requires 1 == factors.length;
    //@ requires 1 != factors.length;
    //@ requires 1 >= factors.length;
    //@ requires 1 > factors.length;
    //@ requires -1 < factors.length;
    //@ requires -1 <= factors.length;
    //@ requires -1 == factors.length;
    //@ requires -1 != factors.length;
    //@ requires -1 >= factors.length;
    //@ requires -1 > factors.length;
    //@ requires n < factors.length;
    //@ requires n <= factors.length;
    //@ requires n == factors.length;
    //@ requires n != factors.length;
    //@ requires n >= factors.length;
    //@ requires n > factors.length;
    //@ requires i < temp;
    //@ requires i <= temp;
    //@ requires i == temp;
    //@ requires i != temp;
    //@ requires i >= temp;
    //@ requires i > temp;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < factors.length;
    //@ requires i <= factors.length;
    //@ requires i == factors.length;
    //@ requires i != factors.length;
    //@ requires i >= factors.length;
    //@ requires i > factors.length;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isUgly(0);
        isUgly(1);
        isUgly(2);
        isUgly(3);
        isUgly(15);
        isUgly(-1);
        isUgly(-2);
        isUgly(-3);
		isUgly(4);
        isUgly(5);
        isUgly(7);
        isUgly(8);
		isUgly(13);
		isUgly(17);
		isUgly(12);
		isUgly(16);
    }
}


/home/max/Documents/JMLGPT/tmp/UglyNum.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:152:) in method isUgly
        __Loop_Invariant_Dummy1(n, temp, factors, i);
                               ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:152: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:26:
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:35: verify: Precondition conjunct is false: n != 1
    //@ requires n != 1;
                   ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:158: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:12:) in method main
        isUgly(2);
              ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:12: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:158:
    public static boolean isUgly(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:5: verify: Precondition conjunct is false: n <= 1
    //@ requires n <= 1;
                   ^
6 verification failures

class UglyNum {
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        int temp = n;
        int[] factors = {2, 3, 5};
        int i = 0;
        for (i = 0; i < factors.length; i++) {
            __Loop_Invariant_Dummy1(n, temp, factors, i);
            int factor = factors[i];
            while (temp % factor == 0) {
                temp /= factor;
            }
        }
        __Loop_Invariant_Dummy1(n, temp, factors, i);
        return temp == 1;
    }

    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires temp < 3;
    //@ requires temp <= 3;
    //@ requires temp == 3;
    //@ requires temp != 3;
    //@ requires temp >= 3;
    //@ requires temp > 3;
    //@ requires temp < 1;
    //@ requires temp <= 1;
    //@ requires temp == 1;
    //@ requires temp != 1;
    //@ requires temp >= 1;
    //@ requires temp > 1;
    //@ requires temp < 0;
    //@ requires temp <= 0;
    //@ requires temp == 0;
    //@ requires temp != 0;
    //@ requires temp >= 0;
    //@ requires temp > 0;
    //@ requires temp < -1;
    //@ requires temp <= -1;
    //@ requires temp == -1;
    //@ requires temp != -1;
    //@ requires temp >= -1;
    //@ requires temp > -1;
    //@ requires temp < n;
    //@ requires temp <= n;
    //@ requires temp == n;
    //@ requires temp != n;
    //@ requires temp >= n;
    //@ requires temp > n;
    //@ requires temp < factors.length;
    //@ requires temp <= factors.length;
    //@ requires temp == factors.length;
    //@ requires temp != factors.length;
    //@ requires temp >= factors.length;
    //@ requires temp > factors.length;
    //@ requires 3 < factors.length;
    //@ requires 3 <= factors.length;
    //@ requires 3 == factors.length;
    //@ requires 3 != factors.length;
    //@ requires 3 >= factors.length;
    //@ requires 3 > factors.length;
    //@ requires 1 < factors.length;
    //@ requires 1 <= factors.length;
    //@ requires 1 == factors.length;
    //@ requires 1 != factors.length;
    //@ requires 1 >= factors.length;
    //@ requires 1 > factors.length;
    //@ requires -1 < factors.length;
    //@ requires -1 <= factors.length;
    //@ requires -1 == factors.length;
    //@ requires -1 != factors.length;
    //@ requires -1 >= factors.length;
    //@ requires -1 > factors.length;
    //@ requires n < factors.length;
    //@ requires n <= factors.length;
    //@ requires n == factors.length;
    //@ requires n != factors.length;
    //@ requires n >= factors.length;
    //@ requires n > factors.length;
    //@ requires i < temp;
    //@ requires i <= temp;
    //@ requires i == temp;
    //@ requires i != temp;
    //@ requires i >= temp;
    //@ requires i > temp;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < factors.length;
    //@ requires i <= factors.length;
    //@ requires i == factors.length;
    //@ requires i != factors.length;
    //@ requires i >= factors.length;
    //@ requires i > factors.length;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isUgly(0);
        isUgly(1);
        isUgly(2);
        isUgly(3);
        isUgly(15);
        isUgly(-1);
        isUgly(-2);
        isUgly(-3);
		isUgly(4);
        isUgly(5);
        isUgly(7);
        isUgly(8);
		isUgly(13);
		isUgly(17);
		isUgly(12);
		isUgly(16);
    }
}


/home/max/Documents/JMLGPT/tmp/UglyNum.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:151:) in method isUgly
        __Loop_Invariant_Dummy1(n, temp, factors, i);
                               ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:151: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:26:
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:36: verify: Precondition conjunct is false: n > 1
    //@ requires n > 1;
                   ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:157: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:12:) in method main
        isUgly(2);
              ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:12: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:157:
    public static boolean isUgly(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:5: verify: Precondition conjunct is false: n <= 1
    //@ requires n <= 1;
                   ^
6 verification failures

class UglyNum {
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        int temp = n;
        int[] factors = {2, 3, 5};
        int i = 0;
        for (i = 0; i < factors.length; i++) {
            __Loop_Invariant_Dummy1(n, temp, factors, i);
            int factor = factors[i];
            while (temp % factor == 0) {
                temp /= factor;
            }
        }
        __Loop_Invariant_Dummy1(n, temp, factors, i);
        return temp == 1;
    }

    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires temp < 3;
    //@ requires temp <= 3;
    //@ requires temp == 3;
    //@ requires temp != 3;
    //@ requires temp >= 3;
    //@ requires temp > 3;
    //@ requires temp < 1;
    //@ requires temp <= 1;
    //@ requires temp == 1;
    //@ requires temp != 1;
    //@ requires temp >= 1;
    //@ requires temp > 1;
    //@ requires temp < 0;
    //@ requires temp <= 0;
    //@ requires temp == 0;
    //@ requires temp != 0;
    //@ requires temp >= 0;
    //@ requires temp > 0;
    //@ requires temp < -1;
    //@ requires temp <= -1;
    //@ requires temp == -1;
    //@ requires temp != -1;
    //@ requires temp >= -1;
    //@ requires temp > -1;
    //@ requires temp < n;
    //@ requires temp <= n;
    //@ requires temp == n;
    //@ requires temp != n;
    //@ requires temp >= n;
    //@ requires temp > n;
    //@ requires temp < factors.length;
    //@ requires temp <= factors.length;
    //@ requires temp == factors.length;
    //@ requires temp != factors.length;
    //@ requires temp >= factors.length;
    //@ requires temp > factors.length;
    //@ requires 3 < factors.length;
    //@ requires 3 <= factors.length;
    //@ requires 3 == factors.length;
    //@ requires 3 != factors.length;
    //@ requires 3 >= factors.length;
    //@ requires 3 > factors.length;
    //@ requires 1 < factors.length;
    //@ requires 1 <= factors.length;
    //@ requires 1 == factors.length;
    //@ requires 1 != factors.length;
    //@ requires 1 >= factors.length;
    //@ requires 1 > factors.length;
    //@ requires -1 < factors.length;
    //@ requires -1 <= factors.length;
    //@ requires -1 == factors.length;
    //@ requires -1 != factors.length;
    //@ requires -1 >= factors.length;
    //@ requires -1 > factors.length;
    //@ requires n < factors.length;
    //@ requires n <= factors.length;
    //@ requires n == factors.length;
    //@ requires n != factors.length;
    //@ requires n >= factors.length;
    //@ requires n > factors.length;
    //@ requires i < temp;
    //@ requires i <= temp;
    //@ requires i == temp;
    //@ requires i != temp;
    //@ requires i >= temp;
    //@ requires i > temp;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < factors.length;
    //@ requires i <= factors.length;
    //@ requires i == factors.length;
    //@ requires i != factors.length;
    //@ requires i >= factors.length;
    //@ requires i > factors.length;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isUgly(0);
        isUgly(1);
        isUgly(2);
        isUgly(3);
        isUgly(15);
        isUgly(-1);
        isUgly(-2);
        isUgly(-3);
		isUgly(4);
        isUgly(5);
        isUgly(7);
        isUgly(8);
		isUgly(13);
		isUgly(17);
		isUgly(12);
		isUgly(16);
    }
}


/home/max/Documents/JMLGPT/tmp/UglyNum.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:150:) in method isUgly
        __Loop_Invariant_Dummy1(n, temp, factors, i);
                               ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:150: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:26:
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:36: verify: Precondition conjunct is false: n < 0
    //@ requires n < 0;
                   ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:156: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:12:) in method main
        isUgly(2);
              ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:12: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:156:
    public static boolean isUgly(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:5: verify: Precondition conjunct is false: n <= 1
    //@ requires n <= 1;
                   ^
6 verification failures

class UglyNum {
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        int temp = n;
        int[] factors = {2, 3, 5};
        int i = 0;
        for (i = 0; i < factors.length; i++) {
            __Loop_Invariant_Dummy1(n, temp, factors, i);
            int factor = factors[i];
            while (temp % factor == 0) {
                temp /= factor;
            }
        }
        __Loop_Invariant_Dummy1(n, temp, factors, i);
        return temp == 1;
    }

    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires temp < 3;
    //@ requires temp <= 3;
    //@ requires temp == 3;
    //@ requires temp != 3;
    //@ requires temp >= 3;
    //@ requires temp > 3;
    //@ requires temp < 1;
    //@ requires temp <= 1;
    //@ requires temp == 1;
    //@ requires temp != 1;
    //@ requires temp >= 1;
    //@ requires temp > 1;
    //@ requires temp < 0;
    //@ requires temp <= 0;
    //@ requires temp == 0;
    //@ requires temp != 0;
    //@ requires temp >= 0;
    //@ requires temp > 0;
    //@ requires temp < -1;
    //@ requires temp <= -1;
    //@ requires temp == -1;
    //@ requires temp != -1;
    //@ requires temp >= -1;
    //@ requires temp > -1;
    //@ requires temp < n;
    //@ requires temp <= n;
    //@ requires temp == n;
    //@ requires temp != n;
    //@ requires temp >= n;
    //@ requires temp > n;
    //@ requires temp < factors.length;
    //@ requires temp <= factors.length;
    //@ requires temp == factors.length;
    //@ requires temp != factors.length;
    //@ requires temp >= factors.length;
    //@ requires temp > factors.length;
    //@ requires 3 < factors.length;
    //@ requires 3 <= factors.length;
    //@ requires 3 == factors.length;
    //@ requires 3 != factors.length;
    //@ requires 3 >= factors.length;
    //@ requires 3 > factors.length;
    //@ requires 1 < factors.length;
    //@ requires 1 <= factors.length;
    //@ requires 1 == factors.length;
    //@ requires 1 != factors.length;
    //@ requires 1 >= factors.length;
    //@ requires 1 > factors.length;
    //@ requires -1 < factors.length;
    //@ requires -1 <= factors.length;
    //@ requires -1 == factors.length;
    //@ requires -1 != factors.length;
    //@ requires -1 >= factors.length;
    //@ requires -1 > factors.length;
    //@ requires n < factors.length;
    //@ requires n <= factors.length;
    //@ requires n == factors.length;
    //@ requires n != factors.length;
    //@ requires n >= factors.length;
    //@ requires n > factors.length;
    //@ requires i < temp;
    //@ requires i <= temp;
    //@ requires i == temp;
    //@ requires i != temp;
    //@ requires i >= temp;
    //@ requires i > temp;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < factors.length;
    //@ requires i <= factors.length;
    //@ requires i == factors.length;
    //@ requires i != factors.length;
    //@ requires i >= factors.length;
    //@ requires i > factors.length;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isUgly(0);
        isUgly(1);
        isUgly(2);
        isUgly(3);
        isUgly(15);
        isUgly(-1);
        isUgly(-2);
        isUgly(-3);
		isUgly(4);
        isUgly(5);
        isUgly(7);
        isUgly(8);
		isUgly(13);
		isUgly(17);
		isUgly(12);
		isUgly(16);
    }
}


/home/max/Documents/JMLGPT/tmp/UglyNum.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:149:) in method isUgly
        __Loop_Invariant_Dummy1(n, temp, factors, i);
                               ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:149: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:26:
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:36: verify: Precondition conjunct is false: n <= 0
    //@ requires n <= 0;
                   ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:155: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:12:) in method main
        isUgly(2);
              ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:12: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:155:
    public static boolean isUgly(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:5: verify: Precondition conjunct is false: n <= 1
    //@ requires n <= 1;
                   ^
6 verification failures

class UglyNum {
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        int temp = n;
        int[] factors = {2, 3, 5};
        int i = 0;
        for (i = 0; i < factors.length; i++) {
            __Loop_Invariant_Dummy1(n, temp, factors, i);
            int factor = factors[i];
            while (temp % factor == 0) {
                temp /= factor;
            }
        }
        __Loop_Invariant_Dummy1(n, temp, factors, i);
        return temp == 1;
    }

    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires temp < 3;
    //@ requires temp <= 3;
    //@ requires temp == 3;
    //@ requires temp != 3;
    //@ requires temp >= 3;
    //@ requires temp > 3;
    //@ requires temp < 1;
    //@ requires temp <= 1;
    //@ requires temp == 1;
    //@ requires temp != 1;
    //@ requires temp >= 1;
    //@ requires temp > 1;
    //@ requires temp < 0;
    //@ requires temp <= 0;
    //@ requires temp == 0;
    //@ requires temp != 0;
    //@ requires temp >= 0;
    //@ requires temp > 0;
    //@ requires temp < -1;
    //@ requires temp <= -1;
    //@ requires temp == -1;
    //@ requires temp != -1;
    //@ requires temp >= -1;
    //@ requires temp > -1;
    //@ requires temp < n;
    //@ requires temp <= n;
    //@ requires temp == n;
    //@ requires temp != n;
    //@ requires temp >= n;
    //@ requires temp > n;
    //@ requires temp < factors.length;
    //@ requires temp <= factors.length;
    //@ requires temp == factors.length;
    //@ requires temp != factors.length;
    //@ requires temp >= factors.length;
    //@ requires temp > factors.length;
    //@ requires 3 < factors.length;
    //@ requires 3 <= factors.length;
    //@ requires 3 == factors.length;
    //@ requires 3 != factors.length;
    //@ requires 3 >= factors.length;
    //@ requires 3 > factors.length;
    //@ requires 1 < factors.length;
    //@ requires 1 <= factors.length;
    //@ requires 1 == factors.length;
    //@ requires 1 != factors.length;
    //@ requires 1 >= factors.length;
    //@ requires 1 > factors.length;
    //@ requires -1 < factors.length;
    //@ requires -1 <= factors.length;
    //@ requires -1 == factors.length;
    //@ requires -1 != factors.length;
    //@ requires -1 >= factors.length;
    //@ requires -1 > factors.length;
    //@ requires n < factors.length;
    //@ requires n <= factors.length;
    //@ requires n == factors.length;
    //@ requires n != factors.length;
    //@ requires n >= factors.length;
    //@ requires n > factors.length;
    //@ requires i < temp;
    //@ requires i <= temp;
    //@ requires i == temp;
    //@ requires i != temp;
    //@ requires i >= temp;
    //@ requires i > temp;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < factors.length;
    //@ requires i <= factors.length;
    //@ requires i == factors.length;
    //@ requires i != factors.length;
    //@ requires i >= factors.length;
    //@ requires i > factors.length;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isUgly(0);
        isUgly(1);
        isUgly(2);
        isUgly(3);
        isUgly(15);
        isUgly(-1);
        isUgly(-2);
        isUgly(-3);
		isUgly(4);
        isUgly(5);
        isUgly(7);
        isUgly(8);
		isUgly(13);
		isUgly(17);
		isUgly(12);
		isUgly(16);
    }
}


/home/max/Documents/JMLGPT/tmp/UglyNum.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:148:) in method isUgly
        __Loop_Invariant_Dummy1(n, temp, factors, i);
                               ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:148: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:26:
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:36: verify: Precondition conjunct is false: n == 0
    //@ requires n == 0;
                   ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:154: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:12:) in method main
        isUgly(2);
              ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:12: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:154:
    public static boolean isUgly(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:5: verify: Precondition conjunct is false: n <= 1
    //@ requires n <= 1;
                   ^
6 verification failures

class UglyNum {
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        int temp = n;
        int[] factors = {2, 3, 5};
        int i = 0;
        for (i = 0; i < factors.length; i++) {
            __Loop_Invariant_Dummy1(n, temp, factors, i);
            int factor = factors[i];
            while (temp % factor == 0) {
                temp /= factor;
            }
        }
        __Loop_Invariant_Dummy1(n, temp, factors, i);
        return temp == 1;
    }

    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires temp < 3;
    //@ requires temp <= 3;
    //@ requires temp == 3;
    //@ requires temp != 3;
    //@ requires temp >= 3;
    //@ requires temp > 3;
    //@ requires temp < 1;
    //@ requires temp <= 1;
    //@ requires temp == 1;
    //@ requires temp != 1;
    //@ requires temp >= 1;
    //@ requires temp > 1;
    //@ requires temp < 0;
    //@ requires temp <= 0;
    //@ requires temp == 0;
    //@ requires temp != 0;
    //@ requires temp >= 0;
    //@ requires temp > 0;
    //@ requires temp < -1;
    //@ requires temp <= -1;
    //@ requires temp == -1;
    //@ requires temp != -1;
    //@ requires temp >= -1;
    //@ requires temp > -1;
    //@ requires temp < n;
    //@ requires temp <= n;
    //@ requires temp == n;
    //@ requires temp != n;
    //@ requires temp >= n;
    //@ requires temp > n;
    //@ requires temp < factors.length;
    //@ requires temp <= factors.length;
    //@ requires temp == factors.length;
    //@ requires temp != factors.length;
    //@ requires temp >= factors.length;
    //@ requires temp > factors.length;
    //@ requires 3 < factors.length;
    //@ requires 3 <= factors.length;
    //@ requires 3 == factors.length;
    //@ requires 3 != factors.length;
    //@ requires 3 >= factors.length;
    //@ requires 3 > factors.length;
    //@ requires 1 < factors.length;
    //@ requires 1 <= factors.length;
    //@ requires 1 == factors.length;
    //@ requires 1 != factors.length;
    //@ requires 1 >= factors.length;
    //@ requires 1 > factors.length;
    //@ requires -1 < factors.length;
    //@ requires -1 <= factors.length;
    //@ requires -1 == factors.length;
    //@ requires -1 != factors.length;
    //@ requires -1 >= factors.length;
    //@ requires -1 > factors.length;
    //@ requires n < factors.length;
    //@ requires n <= factors.length;
    //@ requires n == factors.length;
    //@ requires n != factors.length;
    //@ requires n >= factors.length;
    //@ requires n > factors.length;
    //@ requires i < temp;
    //@ requires i <= temp;
    //@ requires i == temp;
    //@ requires i != temp;
    //@ requires i >= temp;
    //@ requires i > temp;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < factors.length;
    //@ requires i <= factors.length;
    //@ requires i == factors.length;
    //@ requires i != factors.length;
    //@ requires i >= factors.length;
    //@ requires i > factors.length;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isUgly(0);
        isUgly(1);
        isUgly(2);
        isUgly(3);
        isUgly(15);
        isUgly(-1);
        isUgly(-2);
        isUgly(-3);
		isUgly(4);
        isUgly(5);
        isUgly(7);
        isUgly(8);
		isUgly(13);
		isUgly(17);
		isUgly(12);
		isUgly(16);
    }
}


/home/max/Documents/JMLGPT/tmp/UglyNum.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:147:) in method isUgly
        __Loop_Invariant_Dummy1(n, temp, factors, i);
                               ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:147: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:26:
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:39: verify: Precondition conjunct is false: n < -1
    //@ requires n < -1;
                   ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:153: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:12:) in method main
        isUgly(2);
              ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:12: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:153:
    public static boolean isUgly(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:5: verify: Precondition conjunct is false: n <= 1
    //@ requires n <= 1;
                   ^
6 verification failures

class UglyNum {
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        int temp = n;
        int[] factors = {2, 3, 5};
        int i = 0;
        for (i = 0; i < factors.length; i++) {
            __Loop_Invariant_Dummy1(n, temp, factors, i);
            int factor = factors[i];
            while (temp % factor == 0) {
                temp /= factor;
            }
        }
        __Loop_Invariant_Dummy1(n, temp, factors, i);
        return temp == 1;
    }

    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires temp < 3;
    //@ requires temp <= 3;
    //@ requires temp == 3;
    //@ requires temp != 3;
    //@ requires temp >= 3;
    //@ requires temp > 3;
    //@ requires temp < 1;
    //@ requires temp <= 1;
    //@ requires temp == 1;
    //@ requires temp != 1;
    //@ requires temp >= 1;
    //@ requires temp > 1;
    //@ requires temp < 0;
    //@ requires temp <= 0;
    //@ requires temp == 0;
    //@ requires temp != 0;
    //@ requires temp >= 0;
    //@ requires temp > 0;
    //@ requires temp < -1;
    //@ requires temp <= -1;
    //@ requires temp == -1;
    //@ requires temp != -1;
    //@ requires temp >= -1;
    //@ requires temp > -1;
    //@ requires temp < n;
    //@ requires temp <= n;
    //@ requires temp == n;
    //@ requires temp != n;
    //@ requires temp >= n;
    //@ requires temp > n;
    //@ requires temp < factors.length;
    //@ requires temp <= factors.length;
    //@ requires temp == factors.length;
    //@ requires temp != factors.length;
    //@ requires temp >= factors.length;
    //@ requires temp > factors.length;
    //@ requires 3 < factors.length;
    //@ requires 3 <= factors.length;
    //@ requires 3 == factors.length;
    //@ requires 3 != factors.length;
    //@ requires 3 >= factors.length;
    //@ requires 3 > factors.length;
    //@ requires 1 < factors.length;
    //@ requires 1 <= factors.length;
    //@ requires 1 == factors.length;
    //@ requires 1 != factors.length;
    //@ requires 1 >= factors.length;
    //@ requires 1 > factors.length;
    //@ requires -1 < factors.length;
    //@ requires -1 <= factors.length;
    //@ requires -1 == factors.length;
    //@ requires -1 != factors.length;
    //@ requires -1 >= factors.length;
    //@ requires -1 > factors.length;
    //@ requires n < factors.length;
    //@ requires n <= factors.length;
    //@ requires n == factors.length;
    //@ requires n != factors.length;
    //@ requires n >= factors.length;
    //@ requires n > factors.length;
    //@ requires i < temp;
    //@ requires i <= temp;
    //@ requires i == temp;
    //@ requires i != temp;
    //@ requires i >= temp;
    //@ requires i > temp;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < factors.length;
    //@ requires i <= factors.length;
    //@ requires i == factors.length;
    //@ requires i != factors.length;
    //@ requires i >= factors.length;
    //@ requires i > factors.length;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isUgly(0);
        isUgly(1);
        isUgly(2);
        isUgly(3);
        isUgly(15);
        isUgly(-1);
        isUgly(-2);
        isUgly(-3);
		isUgly(4);
        isUgly(5);
        isUgly(7);
        isUgly(8);
		isUgly(13);
		isUgly(17);
		isUgly(12);
		isUgly(16);
    }
}


/home/max/Documents/JMLGPT/tmp/UglyNum.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:146:) in method isUgly
        __Loop_Invariant_Dummy1(n, temp, factors, i);
                               ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:146: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:26:
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:39: verify: Precondition conjunct is false: n <= -1
    //@ requires n <= -1;
                   ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:152: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:12:) in method main
        isUgly(2);
              ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:12: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:152:
    public static boolean isUgly(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:5: verify: Precondition conjunct is false: n <= 1
    //@ requires n <= 1;
                   ^
6 verification failures

class UglyNum {
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        int temp = n;
        int[] factors = {2, 3, 5};
        int i = 0;
        for (i = 0; i < factors.length; i++) {
            __Loop_Invariant_Dummy1(n, temp, factors, i);
            int factor = factors[i];
            while (temp % factor == 0) {
                temp /= factor;
            }
        }
        __Loop_Invariant_Dummy1(n, temp, factors, i);
        return temp == 1;
    }

    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires temp < 3;
    //@ requires temp <= 3;
    //@ requires temp == 3;
    //@ requires temp != 3;
    //@ requires temp >= 3;
    //@ requires temp > 3;
    //@ requires temp < 1;
    //@ requires temp <= 1;
    //@ requires temp == 1;
    //@ requires temp != 1;
    //@ requires temp >= 1;
    //@ requires temp > 1;
    //@ requires temp < 0;
    //@ requires temp <= 0;
    //@ requires temp == 0;
    //@ requires temp != 0;
    //@ requires temp >= 0;
    //@ requires temp > 0;
    //@ requires temp < -1;
    //@ requires temp <= -1;
    //@ requires temp == -1;
    //@ requires temp != -1;
    //@ requires temp >= -1;
    //@ requires temp > -1;
    //@ requires temp < n;
    //@ requires temp <= n;
    //@ requires temp == n;
    //@ requires temp != n;
    //@ requires temp >= n;
    //@ requires temp > n;
    //@ requires temp < factors.length;
    //@ requires temp <= factors.length;
    //@ requires temp == factors.length;
    //@ requires temp != factors.length;
    //@ requires temp >= factors.length;
    //@ requires temp > factors.length;
    //@ requires 3 < factors.length;
    //@ requires 3 <= factors.length;
    //@ requires 3 == factors.length;
    //@ requires 3 != factors.length;
    //@ requires 3 >= factors.length;
    //@ requires 3 > factors.length;
    //@ requires 1 < factors.length;
    //@ requires 1 <= factors.length;
    //@ requires 1 == factors.length;
    //@ requires 1 != factors.length;
    //@ requires 1 >= factors.length;
    //@ requires 1 > factors.length;
    //@ requires -1 < factors.length;
    //@ requires -1 <= factors.length;
    //@ requires -1 == factors.length;
    //@ requires -1 != factors.length;
    //@ requires -1 >= factors.length;
    //@ requires -1 > factors.length;
    //@ requires n < factors.length;
    //@ requires n <= factors.length;
    //@ requires n == factors.length;
    //@ requires n != factors.length;
    //@ requires n >= factors.length;
    //@ requires n > factors.length;
    //@ requires i < temp;
    //@ requires i <= temp;
    //@ requires i == temp;
    //@ requires i != temp;
    //@ requires i >= temp;
    //@ requires i > temp;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < factors.length;
    //@ requires i <= factors.length;
    //@ requires i == factors.length;
    //@ requires i != factors.length;
    //@ requires i >= factors.length;
    //@ requires i > factors.length;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isUgly(0);
        isUgly(1);
        isUgly(2);
        isUgly(3);
        isUgly(15);
        isUgly(-1);
        isUgly(-2);
        isUgly(-3);
		isUgly(4);
        isUgly(5);
        isUgly(7);
        isUgly(8);
		isUgly(13);
		isUgly(17);
		isUgly(12);
		isUgly(16);
    }
}


/home/max/Documents/JMLGPT/tmp/UglyNum.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:145:) in method isUgly
        __Loop_Invariant_Dummy1(n, temp, factors, i);
                               ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:145: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:26:
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:39: verify: Precondition conjunct is false: n == -1
    //@ requires n == -1;
                   ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:151: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:12:) in method main
        isUgly(2);
              ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:12: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:151:
    public static boolean isUgly(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:5: verify: Precondition conjunct is false: n <= 1
    //@ requires n <= 1;
                   ^
6 verification failures

class UglyNum {
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        int temp = n;
        int[] factors = {2, 3, 5};
        int i = 0;
        for (i = 0; i < factors.length; i++) {
            __Loop_Invariant_Dummy1(n, temp, factors, i);
            int factor = factors[i];
            while (temp % factor == 0) {
                temp /= factor;
            }
        }
        __Loop_Invariant_Dummy1(n, temp, factors, i);
        return temp == 1;
    }

    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires temp < 3;
    //@ requires temp <= 3;
    //@ requires temp == 3;
    //@ requires temp != 3;
    //@ requires temp >= 3;
    //@ requires temp > 3;
    //@ requires temp < 1;
    //@ requires temp <= 1;
    //@ requires temp == 1;
    //@ requires temp != 1;
    //@ requires temp >= 1;
    //@ requires temp > 1;
    //@ requires temp < 0;
    //@ requires temp <= 0;
    //@ requires temp == 0;
    //@ requires temp != 0;
    //@ requires temp >= 0;
    //@ requires temp > 0;
    //@ requires temp < -1;
    //@ requires temp <= -1;
    //@ requires temp == -1;
    //@ requires temp != -1;
    //@ requires temp >= -1;
    //@ requires temp > -1;
    //@ requires temp < n;
    //@ requires temp <= n;
    //@ requires temp == n;
    //@ requires temp != n;
    //@ requires temp >= n;
    //@ requires temp > n;
    //@ requires temp < factors.length;
    //@ requires temp <= factors.length;
    //@ requires temp == factors.length;
    //@ requires temp != factors.length;
    //@ requires temp >= factors.length;
    //@ requires temp > factors.length;
    //@ requires 3 < factors.length;
    //@ requires 3 <= factors.length;
    //@ requires 3 == factors.length;
    //@ requires 3 != factors.length;
    //@ requires 3 >= factors.length;
    //@ requires 3 > factors.length;
    //@ requires 1 < factors.length;
    //@ requires 1 <= factors.length;
    //@ requires 1 == factors.length;
    //@ requires 1 != factors.length;
    //@ requires 1 >= factors.length;
    //@ requires 1 > factors.length;
    //@ requires -1 < factors.length;
    //@ requires -1 <= factors.length;
    //@ requires -1 == factors.length;
    //@ requires -1 != factors.length;
    //@ requires -1 >= factors.length;
    //@ requires -1 > factors.length;
    //@ requires n < factors.length;
    //@ requires n <= factors.length;
    //@ requires n == factors.length;
    //@ requires n != factors.length;
    //@ requires n >= factors.length;
    //@ requires n > factors.length;
    //@ requires i < temp;
    //@ requires i <= temp;
    //@ requires i == temp;
    //@ requires i != temp;
    //@ requires i >= temp;
    //@ requires i > temp;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < factors.length;
    //@ requires i <= factors.length;
    //@ requires i == factors.length;
    //@ requires i != factors.length;
    //@ requires i >= factors.length;
    //@ requires i > factors.length;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isUgly(0);
        isUgly(1);
        isUgly(2);
        isUgly(3);
        isUgly(15);
        isUgly(-1);
        isUgly(-2);
        isUgly(-3);
		isUgly(4);
        isUgly(5);
        isUgly(7);
        isUgly(8);
		isUgly(13);
		isUgly(17);
		isUgly(12);
		isUgly(16);
    }
}


/home/max/Documents/JMLGPT/tmp/UglyNum.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:144:) in method isUgly
        __Loop_Invariant_Dummy1(n, temp, factors, i);
                               ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:144: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:26:
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:42: verify: Precondition conjunct is false: temp < 3
    //@ requires temp < 3;
                      ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:150: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:12:) in method main
        isUgly(2);
              ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:12: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:150:
    public static boolean isUgly(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:5: verify: Precondition conjunct is false: n <= 1
    //@ requires n <= 1;
                   ^
6 verification failures

class UglyNum {
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        int temp = n;
        int[] factors = {2, 3, 5};
        int i = 0;
        for (i = 0; i < factors.length; i++) {
            __Loop_Invariant_Dummy1(n, temp, factors, i);
            int factor = factors[i];
            while (temp % factor == 0) {
                temp /= factor;
            }
        }
        __Loop_Invariant_Dummy1(n, temp, factors, i);
        return temp == 1;
    }

    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires temp <= 3;
    //@ requires temp == 3;
    //@ requires temp != 3;
    //@ requires temp >= 3;
    //@ requires temp > 3;
    //@ requires temp < 1;
    //@ requires temp <= 1;
    //@ requires temp == 1;
    //@ requires temp != 1;
    //@ requires temp >= 1;
    //@ requires temp > 1;
    //@ requires temp < 0;
    //@ requires temp <= 0;
    //@ requires temp == 0;
    //@ requires temp != 0;
    //@ requires temp >= 0;
    //@ requires temp > 0;
    //@ requires temp < -1;
    //@ requires temp <= -1;
    //@ requires temp == -1;
    //@ requires temp != -1;
    //@ requires temp >= -1;
    //@ requires temp > -1;
    //@ requires temp < n;
    //@ requires temp <= n;
    //@ requires temp == n;
    //@ requires temp != n;
    //@ requires temp >= n;
    //@ requires temp > n;
    //@ requires temp < factors.length;
    //@ requires temp <= factors.length;
    //@ requires temp == factors.length;
    //@ requires temp != factors.length;
    //@ requires temp >= factors.length;
    //@ requires temp > factors.length;
    //@ requires 3 < factors.length;
    //@ requires 3 <= factors.length;
    //@ requires 3 == factors.length;
    //@ requires 3 != factors.length;
    //@ requires 3 >= factors.length;
    //@ requires 3 > factors.length;
    //@ requires 1 < factors.length;
    //@ requires 1 <= factors.length;
    //@ requires 1 == factors.length;
    //@ requires 1 != factors.length;
    //@ requires 1 >= factors.length;
    //@ requires 1 > factors.length;
    //@ requires -1 < factors.length;
    //@ requires -1 <= factors.length;
    //@ requires -1 == factors.length;
    //@ requires -1 != factors.length;
    //@ requires -1 >= factors.length;
    //@ requires -1 > factors.length;
    //@ requires n < factors.length;
    //@ requires n <= factors.length;
    //@ requires n == factors.length;
    //@ requires n != factors.length;
    //@ requires n >= factors.length;
    //@ requires n > factors.length;
    //@ requires i < temp;
    //@ requires i <= temp;
    //@ requires i == temp;
    //@ requires i != temp;
    //@ requires i >= temp;
    //@ requires i > temp;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < factors.length;
    //@ requires i <= factors.length;
    //@ requires i == factors.length;
    //@ requires i != factors.length;
    //@ requires i >= factors.length;
    //@ requires i > factors.length;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isUgly(0);
        isUgly(1);
        isUgly(2);
        isUgly(3);
        isUgly(15);
        isUgly(-1);
        isUgly(-2);
        isUgly(-3);
		isUgly(4);
        isUgly(5);
        isUgly(7);
        isUgly(8);
		isUgly(13);
		isUgly(17);
		isUgly(12);
		isUgly(16);
    }
}


/home/max/Documents/JMLGPT/tmp/UglyNum.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:143:) in method isUgly
        __Loop_Invariant_Dummy1(n, temp, factors, i);
                               ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:143: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:26:
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:42: verify: Precondition conjunct is false: temp <= 3
    //@ requires temp <= 3;
                      ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:149: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:12:) in method main
        isUgly(2);
              ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:12: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:149:
    public static boolean isUgly(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:5: verify: Precondition conjunct is false: n <= 1
    //@ requires n <= 1;
                   ^
6 verification failures

class UglyNum {
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        int temp = n;
        int[] factors = {2, 3, 5};
        int i = 0;
        for (i = 0; i < factors.length; i++) {
            __Loop_Invariant_Dummy1(n, temp, factors, i);
            int factor = factors[i];
            while (temp % factor == 0) {
                temp /= factor;
            }
        }
        __Loop_Invariant_Dummy1(n, temp, factors, i);
        return temp == 1;
    }

    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires temp == 3;
    //@ requires temp != 3;
    //@ requires temp >= 3;
    //@ requires temp > 3;
    //@ requires temp < 1;
    //@ requires temp <= 1;
    //@ requires temp == 1;
    //@ requires temp != 1;
    //@ requires temp >= 1;
    //@ requires temp > 1;
    //@ requires temp < 0;
    //@ requires temp <= 0;
    //@ requires temp == 0;
    //@ requires temp != 0;
    //@ requires temp >= 0;
    //@ requires temp > 0;
    //@ requires temp < -1;
    //@ requires temp <= -1;
    //@ requires temp == -1;
    //@ requires temp != -1;
    //@ requires temp >= -1;
    //@ requires temp > -1;
    //@ requires temp < n;
    //@ requires temp <= n;
    //@ requires temp == n;
    //@ requires temp != n;
    //@ requires temp >= n;
    //@ requires temp > n;
    //@ requires temp < factors.length;
    //@ requires temp <= factors.length;
    //@ requires temp == factors.length;
    //@ requires temp != factors.length;
    //@ requires temp >= factors.length;
    //@ requires temp > factors.length;
    //@ requires 3 < factors.length;
    //@ requires 3 <= factors.length;
    //@ requires 3 == factors.length;
    //@ requires 3 != factors.length;
    //@ requires 3 >= factors.length;
    //@ requires 3 > factors.length;
    //@ requires 1 < factors.length;
    //@ requires 1 <= factors.length;
    //@ requires 1 == factors.length;
    //@ requires 1 != factors.length;
    //@ requires 1 >= factors.length;
    //@ requires 1 > factors.length;
    //@ requires -1 < factors.length;
    //@ requires -1 <= factors.length;
    //@ requires -1 == factors.length;
    //@ requires -1 != factors.length;
    //@ requires -1 >= factors.length;
    //@ requires -1 > factors.length;
    //@ requires n < factors.length;
    //@ requires n <= factors.length;
    //@ requires n == factors.length;
    //@ requires n != factors.length;
    //@ requires n >= factors.length;
    //@ requires n > factors.length;
    //@ requires i < temp;
    //@ requires i <= temp;
    //@ requires i == temp;
    //@ requires i != temp;
    //@ requires i >= temp;
    //@ requires i > temp;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < factors.length;
    //@ requires i <= factors.length;
    //@ requires i == factors.length;
    //@ requires i != factors.length;
    //@ requires i >= factors.length;
    //@ requires i > factors.length;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isUgly(0);
        isUgly(1);
        isUgly(2);
        isUgly(3);
        isUgly(15);
        isUgly(-1);
        isUgly(-2);
        isUgly(-3);
		isUgly(4);
        isUgly(5);
        isUgly(7);
        isUgly(8);
		isUgly(13);
		isUgly(17);
		isUgly(12);
		isUgly(16);
    }
}


/home/max/Documents/JMLGPT/tmp/UglyNum.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:142:) in method isUgly
        __Loop_Invariant_Dummy1(n, temp, factors, i);
                               ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:142: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:26:
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:42: verify: Precondition conjunct is false: temp == 3
    //@ requires temp == 3;
                      ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:148: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:12:) in method main
        isUgly(2);
              ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:12: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:148:
    public static boolean isUgly(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:5: verify: Precondition conjunct is false: n <= 1
    //@ requires n <= 1;
                   ^
6 verification failures

class UglyNum {
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        int temp = n;
        int[] factors = {2, 3, 5};
        int i = 0;
        for (i = 0; i < factors.length; i++) {
            __Loop_Invariant_Dummy1(n, temp, factors, i);
            int factor = factors[i];
            while (temp % factor == 0) {
                temp /= factor;
            }
        }
        __Loop_Invariant_Dummy1(n, temp, factors, i);
        return temp == 1;
    }

    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires temp != 3;
    //@ requires temp >= 3;
    //@ requires temp > 3;
    //@ requires temp < 1;
    //@ requires temp <= 1;
    //@ requires temp == 1;
    //@ requires temp != 1;
    //@ requires temp >= 1;
    //@ requires temp > 1;
    //@ requires temp < 0;
    //@ requires temp <= 0;
    //@ requires temp == 0;
    //@ requires temp != 0;
    //@ requires temp >= 0;
    //@ requires temp > 0;
    //@ requires temp < -1;
    //@ requires temp <= -1;
    //@ requires temp == -1;
    //@ requires temp != -1;
    //@ requires temp >= -1;
    //@ requires temp > -1;
    //@ requires temp < n;
    //@ requires temp <= n;
    //@ requires temp == n;
    //@ requires temp != n;
    //@ requires temp >= n;
    //@ requires temp > n;
    //@ requires temp < factors.length;
    //@ requires temp <= factors.length;
    //@ requires temp == factors.length;
    //@ requires temp != factors.length;
    //@ requires temp >= factors.length;
    //@ requires temp > factors.length;
    //@ requires 3 < factors.length;
    //@ requires 3 <= factors.length;
    //@ requires 3 == factors.length;
    //@ requires 3 != factors.length;
    //@ requires 3 >= factors.length;
    //@ requires 3 > factors.length;
    //@ requires 1 < factors.length;
    //@ requires 1 <= factors.length;
    //@ requires 1 == factors.length;
    //@ requires 1 != factors.length;
    //@ requires 1 >= factors.length;
    //@ requires 1 > factors.length;
    //@ requires -1 < factors.length;
    //@ requires -1 <= factors.length;
    //@ requires -1 == factors.length;
    //@ requires -1 != factors.length;
    //@ requires -1 >= factors.length;
    //@ requires -1 > factors.length;
    //@ requires n < factors.length;
    //@ requires n <= factors.length;
    //@ requires n == factors.length;
    //@ requires n != factors.length;
    //@ requires n >= factors.length;
    //@ requires n > factors.length;
    //@ requires i < temp;
    //@ requires i <= temp;
    //@ requires i == temp;
    //@ requires i != temp;
    //@ requires i >= temp;
    //@ requires i > temp;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < factors.length;
    //@ requires i <= factors.length;
    //@ requires i == factors.length;
    //@ requires i != factors.length;
    //@ requires i >= factors.length;
    //@ requires i > factors.length;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isUgly(0);
        isUgly(1);
        isUgly(2);
        isUgly(3);
        isUgly(15);
        isUgly(-1);
        isUgly(-2);
        isUgly(-3);
		isUgly(4);
        isUgly(5);
        isUgly(7);
        isUgly(8);
		isUgly(13);
		isUgly(17);
		isUgly(12);
		isUgly(16);
    }
}


/home/max/Documents/JMLGPT/tmp/UglyNum.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:141:) in method isUgly
        __Loop_Invariant_Dummy1(n, temp, factors, i);
                               ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:141: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:26:
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:42: verify: Precondition conjunct is false: temp != 3
    //@ requires temp != 3;
                      ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:147: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:12:) in method main
        isUgly(2);
              ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:12: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:147:
    public static boolean isUgly(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:5: verify: Precondition conjunct is false: n <= 1
    //@ requires n <= 1;
                   ^
6 verification failures

class UglyNum {
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        int temp = n;
        int[] factors = {2, 3, 5};
        int i = 0;
        for (i = 0; i < factors.length; i++) {
            __Loop_Invariant_Dummy1(n, temp, factors, i);
            int factor = factors[i];
            while (temp % factor == 0) {
                temp /= factor;
            }
        }
        __Loop_Invariant_Dummy1(n, temp, factors, i);
        return temp == 1;
    }

    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires temp >= 3;
    //@ requires temp > 3;
    //@ requires temp < 1;
    //@ requires temp <= 1;
    //@ requires temp == 1;
    //@ requires temp != 1;
    //@ requires temp >= 1;
    //@ requires temp > 1;
    //@ requires temp < 0;
    //@ requires temp <= 0;
    //@ requires temp == 0;
    //@ requires temp != 0;
    //@ requires temp >= 0;
    //@ requires temp > 0;
    //@ requires temp < -1;
    //@ requires temp <= -1;
    //@ requires temp == -1;
    //@ requires temp != -1;
    //@ requires temp >= -1;
    //@ requires temp > -1;
    //@ requires temp < n;
    //@ requires temp <= n;
    //@ requires temp == n;
    //@ requires temp != n;
    //@ requires temp >= n;
    //@ requires temp > n;
    //@ requires temp < factors.length;
    //@ requires temp <= factors.length;
    //@ requires temp == factors.length;
    //@ requires temp != factors.length;
    //@ requires temp >= factors.length;
    //@ requires temp > factors.length;
    //@ requires 3 < factors.length;
    //@ requires 3 <= factors.length;
    //@ requires 3 == factors.length;
    //@ requires 3 != factors.length;
    //@ requires 3 >= factors.length;
    //@ requires 3 > factors.length;
    //@ requires 1 < factors.length;
    //@ requires 1 <= factors.length;
    //@ requires 1 == factors.length;
    //@ requires 1 != factors.length;
    //@ requires 1 >= factors.length;
    //@ requires 1 > factors.length;
    //@ requires -1 < factors.length;
    //@ requires -1 <= factors.length;
    //@ requires -1 == factors.length;
    //@ requires -1 != factors.length;
    //@ requires -1 >= factors.length;
    //@ requires -1 > factors.length;
    //@ requires n < factors.length;
    //@ requires n <= factors.length;
    //@ requires n == factors.length;
    //@ requires n != factors.length;
    //@ requires n >= factors.length;
    //@ requires n > factors.length;
    //@ requires i < temp;
    //@ requires i <= temp;
    //@ requires i == temp;
    //@ requires i != temp;
    //@ requires i >= temp;
    //@ requires i > temp;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < factors.length;
    //@ requires i <= factors.length;
    //@ requires i == factors.length;
    //@ requires i != factors.length;
    //@ requires i >= factors.length;
    //@ requires i > factors.length;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isUgly(0);
        isUgly(1);
        isUgly(2);
        isUgly(3);
        isUgly(15);
        isUgly(-1);
        isUgly(-2);
        isUgly(-3);
		isUgly(4);
        isUgly(5);
        isUgly(7);
        isUgly(8);
		isUgly(13);
		isUgly(17);
		isUgly(12);
		isUgly(16);
    }
}


/home/max/Documents/JMLGPT/tmp/UglyNum.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:140:) in method isUgly
        __Loop_Invariant_Dummy1(n, temp, factors, i);
                               ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:140: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:26:
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:42: verify: Precondition conjunct is false: temp >= 3
    //@ requires temp >= 3;
                      ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:146: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:12:) in method main
        isUgly(2);
              ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:12: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:146:
    public static boolean isUgly(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:5: verify: Precondition conjunct is false: n <= 1
    //@ requires n <= 1;
                   ^
6 verification failures

class UglyNum {
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        int temp = n;
        int[] factors = {2, 3, 5};
        int i = 0;
        for (i = 0; i < factors.length; i++) {
            __Loop_Invariant_Dummy1(n, temp, factors, i);
            int factor = factors[i];
            while (temp % factor == 0) {
                temp /= factor;
            }
        }
        __Loop_Invariant_Dummy1(n, temp, factors, i);
        return temp == 1;
    }

    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires temp > 3;
    //@ requires temp < 1;
    //@ requires temp <= 1;
    //@ requires temp == 1;
    //@ requires temp != 1;
    //@ requires temp >= 1;
    //@ requires temp > 1;
    //@ requires temp < 0;
    //@ requires temp <= 0;
    //@ requires temp == 0;
    //@ requires temp != 0;
    //@ requires temp >= 0;
    //@ requires temp > 0;
    //@ requires temp < -1;
    //@ requires temp <= -1;
    //@ requires temp == -1;
    //@ requires temp != -1;
    //@ requires temp >= -1;
    //@ requires temp > -1;
    //@ requires temp < n;
    //@ requires temp <= n;
    //@ requires temp == n;
    //@ requires temp != n;
    //@ requires temp >= n;
    //@ requires temp > n;
    //@ requires temp < factors.length;
    //@ requires temp <= factors.length;
    //@ requires temp == factors.length;
    //@ requires temp != factors.length;
    //@ requires temp >= factors.length;
    //@ requires temp > factors.length;
    //@ requires 3 < factors.length;
    //@ requires 3 <= factors.length;
    //@ requires 3 == factors.length;
    //@ requires 3 != factors.length;
    //@ requires 3 >= factors.length;
    //@ requires 3 > factors.length;
    //@ requires 1 < factors.length;
    //@ requires 1 <= factors.length;
    //@ requires 1 == factors.length;
    //@ requires 1 != factors.length;
    //@ requires 1 >= factors.length;
    //@ requires 1 > factors.length;
    //@ requires -1 < factors.length;
    //@ requires -1 <= factors.length;
    //@ requires -1 == factors.length;
    //@ requires -1 != factors.length;
    //@ requires -1 >= factors.length;
    //@ requires -1 > factors.length;
    //@ requires n < factors.length;
    //@ requires n <= factors.length;
    //@ requires n == factors.length;
    //@ requires n != factors.length;
    //@ requires n >= factors.length;
    //@ requires n > factors.length;
    //@ requires i < temp;
    //@ requires i <= temp;
    //@ requires i == temp;
    //@ requires i != temp;
    //@ requires i >= temp;
    //@ requires i > temp;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < factors.length;
    //@ requires i <= factors.length;
    //@ requires i == factors.length;
    //@ requires i != factors.length;
    //@ requires i >= factors.length;
    //@ requires i > factors.length;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isUgly(0);
        isUgly(1);
        isUgly(2);
        isUgly(3);
        isUgly(15);
        isUgly(-1);
        isUgly(-2);
        isUgly(-3);
		isUgly(4);
        isUgly(5);
        isUgly(7);
        isUgly(8);
		isUgly(13);
		isUgly(17);
		isUgly(12);
		isUgly(16);
    }
}


/home/max/Documents/JMLGPT/tmp/UglyNum.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:139:) in method isUgly
        __Loop_Invariant_Dummy1(n, temp, factors, i);
                               ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:139: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:26:
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:42: verify: Precondition conjunct is false: temp > 3
    //@ requires temp > 3;
                      ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:145: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:12:) in method main
        isUgly(2);
              ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:12: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:145:
    public static boolean isUgly(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:5: verify: Precondition conjunct is false: n <= 1
    //@ requires n <= 1;
                   ^
6 verification failures

class UglyNum {
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        int temp = n;
        int[] factors = {2, 3, 5};
        int i = 0;
        for (i = 0; i < factors.length; i++) {
            __Loop_Invariant_Dummy1(n, temp, factors, i);
            int factor = factors[i];
            while (temp % factor == 0) {
                temp /= factor;
            }
        }
        __Loop_Invariant_Dummy1(n, temp, factors, i);
        return temp == 1;
    }

    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires temp < 1;
    //@ requires temp <= 1;
    //@ requires temp == 1;
    //@ requires temp != 1;
    //@ requires temp >= 1;
    //@ requires temp > 1;
    //@ requires temp < 0;
    //@ requires temp <= 0;
    //@ requires temp == 0;
    //@ requires temp != 0;
    //@ requires temp >= 0;
    //@ requires temp > 0;
    //@ requires temp < -1;
    //@ requires temp <= -1;
    //@ requires temp == -1;
    //@ requires temp != -1;
    //@ requires temp >= -1;
    //@ requires temp > -1;
    //@ requires temp < n;
    //@ requires temp <= n;
    //@ requires temp == n;
    //@ requires temp != n;
    //@ requires temp >= n;
    //@ requires temp > n;
    //@ requires temp < factors.length;
    //@ requires temp <= factors.length;
    //@ requires temp == factors.length;
    //@ requires temp != factors.length;
    //@ requires temp >= factors.length;
    //@ requires temp > factors.length;
    //@ requires 3 < factors.length;
    //@ requires 3 <= factors.length;
    //@ requires 3 == factors.length;
    //@ requires 3 != factors.length;
    //@ requires 3 >= factors.length;
    //@ requires 3 > factors.length;
    //@ requires 1 < factors.length;
    //@ requires 1 <= factors.length;
    //@ requires 1 == factors.length;
    //@ requires 1 != factors.length;
    //@ requires 1 >= factors.length;
    //@ requires 1 > factors.length;
    //@ requires -1 < factors.length;
    //@ requires -1 <= factors.length;
    //@ requires -1 == factors.length;
    //@ requires -1 != factors.length;
    //@ requires -1 >= factors.length;
    //@ requires -1 > factors.length;
    //@ requires n < factors.length;
    //@ requires n <= factors.length;
    //@ requires n == factors.length;
    //@ requires n != factors.length;
    //@ requires n >= factors.length;
    //@ requires n > factors.length;
    //@ requires i < temp;
    //@ requires i <= temp;
    //@ requires i == temp;
    //@ requires i != temp;
    //@ requires i >= temp;
    //@ requires i > temp;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < factors.length;
    //@ requires i <= factors.length;
    //@ requires i == factors.length;
    //@ requires i != factors.length;
    //@ requires i >= factors.length;
    //@ requires i > factors.length;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isUgly(0);
        isUgly(1);
        isUgly(2);
        isUgly(3);
        isUgly(15);
        isUgly(-1);
        isUgly(-2);
        isUgly(-3);
		isUgly(4);
        isUgly(5);
        isUgly(7);
        isUgly(8);
		isUgly(13);
		isUgly(17);
		isUgly(12);
		isUgly(16);
    }
}


/home/max/Documents/JMLGPT/tmp/UglyNum.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:138:) in method isUgly
        __Loop_Invariant_Dummy1(n, temp, factors, i);
                               ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:138: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:26:
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:42: verify: Precondition conjunct is false: temp < 1
    //@ requires temp < 1;
                      ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:144: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:12:) in method main
        isUgly(2);
              ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:12: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:144:
    public static boolean isUgly(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:5: verify: Precondition conjunct is false: n <= 1
    //@ requires n <= 1;
                   ^
6 verification failures

class UglyNum {
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        int temp = n;
        int[] factors = {2, 3, 5};
        int i = 0;
        for (i = 0; i < factors.length; i++) {
            __Loop_Invariant_Dummy1(n, temp, factors, i);
            int factor = factors[i];
            while (temp % factor == 0) {
                temp /= factor;
            }
        }
        __Loop_Invariant_Dummy1(n, temp, factors, i);
        return temp == 1;
    }

    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires temp <= 1;
    //@ requires temp == 1;
    //@ requires temp != 1;
    //@ requires temp >= 1;
    //@ requires temp > 1;
    //@ requires temp < 0;
    //@ requires temp <= 0;
    //@ requires temp == 0;
    //@ requires temp != 0;
    //@ requires temp >= 0;
    //@ requires temp > 0;
    //@ requires temp < -1;
    //@ requires temp <= -1;
    //@ requires temp == -1;
    //@ requires temp != -1;
    //@ requires temp >= -1;
    //@ requires temp > -1;
    //@ requires temp < n;
    //@ requires temp <= n;
    //@ requires temp == n;
    //@ requires temp != n;
    //@ requires temp >= n;
    //@ requires temp > n;
    //@ requires temp < factors.length;
    //@ requires temp <= factors.length;
    //@ requires temp == factors.length;
    //@ requires temp != factors.length;
    //@ requires temp >= factors.length;
    //@ requires temp > factors.length;
    //@ requires 3 < factors.length;
    //@ requires 3 <= factors.length;
    //@ requires 3 == factors.length;
    //@ requires 3 != factors.length;
    //@ requires 3 >= factors.length;
    //@ requires 3 > factors.length;
    //@ requires 1 < factors.length;
    //@ requires 1 <= factors.length;
    //@ requires 1 == factors.length;
    //@ requires 1 != factors.length;
    //@ requires 1 >= factors.length;
    //@ requires 1 > factors.length;
    //@ requires -1 < factors.length;
    //@ requires -1 <= factors.length;
    //@ requires -1 == factors.length;
    //@ requires -1 != factors.length;
    //@ requires -1 >= factors.length;
    //@ requires -1 > factors.length;
    //@ requires n < factors.length;
    //@ requires n <= factors.length;
    //@ requires n == factors.length;
    //@ requires n != factors.length;
    //@ requires n >= factors.length;
    //@ requires n > factors.length;
    //@ requires i < temp;
    //@ requires i <= temp;
    //@ requires i == temp;
    //@ requires i != temp;
    //@ requires i >= temp;
    //@ requires i > temp;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < factors.length;
    //@ requires i <= factors.length;
    //@ requires i == factors.length;
    //@ requires i != factors.length;
    //@ requires i >= factors.length;
    //@ requires i > factors.length;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isUgly(0);
        isUgly(1);
        isUgly(2);
        isUgly(3);
        isUgly(15);
        isUgly(-1);
        isUgly(-2);
        isUgly(-3);
		isUgly(4);
        isUgly(5);
        isUgly(7);
        isUgly(8);
		isUgly(13);
		isUgly(17);
		isUgly(12);
		isUgly(16);
    }
}


/home/max/Documents/JMLGPT/tmp/UglyNum.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:137:) in method isUgly
        __Loop_Invariant_Dummy1(n, temp, factors, i);
                               ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:137: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:26:
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:42: verify: Precondition conjunct is false: temp <= 1
    //@ requires temp <= 1;
                      ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:143: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:12:) in method main
        isUgly(2);
              ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:12: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:143:
    public static boolean isUgly(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:5: verify: Precondition conjunct is false: n <= 1
    //@ requires n <= 1;
                   ^
6 verification failures

class UglyNum {
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        int temp = n;
        int[] factors = {2, 3, 5};
        int i = 0;
        for (i = 0; i < factors.length; i++) {
            __Loop_Invariant_Dummy1(n, temp, factors, i);
            int factor = factors[i];
            while (temp % factor == 0) {
                temp /= factor;
            }
        }
        __Loop_Invariant_Dummy1(n, temp, factors, i);
        return temp == 1;
    }

    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires temp == 1;
    //@ requires temp != 1;
    //@ requires temp >= 1;
    //@ requires temp > 1;
    //@ requires temp < 0;
    //@ requires temp <= 0;
    //@ requires temp == 0;
    //@ requires temp != 0;
    //@ requires temp >= 0;
    //@ requires temp > 0;
    //@ requires temp < -1;
    //@ requires temp <= -1;
    //@ requires temp == -1;
    //@ requires temp != -1;
    //@ requires temp >= -1;
    //@ requires temp > -1;
    //@ requires temp < n;
    //@ requires temp <= n;
    //@ requires temp == n;
    //@ requires temp != n;
    //@ requires temp >= n;
    //@ requires temp > n;
    //@ requires temp < factors.length;
    //@ requires temp <= factors.length;
    //@ requires temp == factors.length;
    //@ requires temp != factors.length;
    //@ requires temp >= factors.length;
    //@ requires temp > factors.length;
    //@ requires 3 < factors.length;
    //@ requires 3 <= factors.length;
    //@ requires 3 == factors.length;
    //@ requires 3 != factors.length;
    //@ requires 3 >= factors.length;
    //@ requires 3 > factors.length;
    //@ requires 1 < factors.length;
    //@ requires 1 <= factors.length;
    //@ requires 1 == factors.length;
    //@ requires 1 != factors.length;
    //@ requires 1 >= factors.length;
    //@ requires 1 > factors.length;
    //@ requires -1 < factors.length;
    //@ requires -1 <= factors.length;
    //@ requires -1 == factors.length;
    //@ requires -1 != factors.length;
    //@ requires -1 >= factors.length;
    //@ requires -1 > factors.length;
    //@ requires n < factors.length;
    //@ requires n <= factors.length;
    //@ requires n == factors.length;
    //@ requires n != factors.length;
    //@ requires n >= factors.length;
    //@ requires n > factors.length;
    //@ requires i < temp;
    //@ requires i <= temp;
    //@ requires i == temp;
    //@ requires i != temp;
    //@ requires i >= temp;
    //@ requires i > temp;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < factors.length;
    //@ requires i <= factors.length;
    //@ requires i == factors.length;
    //@ requires i != factors.length;
    //@ requires i >= factors.length;
    //@ requires i > factors.length;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isUgly(0);
        isUgly(1);
        isUgly(2);
        isUgly(3);
        isUgly(15);
        isUgly(-1);
        isUgly(-2);
        isUgly(-3);
		isUgly(4);
        isUgly(5);
        isUgly(7);
        isUgly(8);
		isUgly(13);
		isUgly(17);
		isUgly(12);
		isUgly(16);
    }
}


/home/max/Documents/JMLGPT/tmp/UglyNum.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:136:) in method isUgly
        __Loop_Invariant_Dummy1(n, temp, factors, i);
                               ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:136: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:26:
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:42: verify: Precondition conjunct is false: temp == 1
    //@ requires temp == 1;
                      ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:142: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:12:) in method main
        isUgly(2);
              ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:12: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:142:
    public static boolean isUgly(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:5: verify: Precondition conjunct is false: n <= 1
    //@ requires n <= 1;
                   ^
6 verification failures

class UglyNum {
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        int temp = n;
        int[] factors = {2, 3, 5};
        int i = 0;
        for (i = 0; i < factors.length; i++) {
            __Loop_Invariant_Dummy1(n, temp, factors, i);
            int factor = factors[i];
            while (temp % factor == 0) {
                temp /= factor;
            }
        }
        __Loop_Invariant_Dummy1(n, temp, factors, i);
        return temp == 1;
    }

    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires temp != 1;
    //@ requires temp >= 1;
    //@ requires temp > 1;
    //@ requires temp < 0;
    //@ requires temp <= 0;
    //@ requires temp == 0;
    //@ requires temp != 0;
    //@ requires temp >= 0;
    //@ requires temp > 0;
    //@ requires temp < -1;
    //@ requires temp <= -1;
    //@ requires temp == -1;
    //@ requires temp != -1;
    //@ requires temp >= -1;
    //@ requires temp > -1;
    //@ requires temp < n;
    //@ requires temp <= n;
    //@ requires temp == n;
    //@ requires temp != n;
    //@ requires temp >= n;
    //@ requires temp > n;
    //@ requires temp < factors.length;
    //@ requires temp <= factors.length;
    //@ requires temp == factors.length;
    //@ requires temp != factors.length;
    //@ requires temp >= factors.length;
    //@ requires temp > factors.length;
    //@ requires 3 < factors.length;
    //@ requires 3 <= factors.length;
    //@ requires 3 == factors.length;
    //@ requires 3 != factors.length;
    //@ requires 3 >= factors.length;
    //@ requires 3 > factors.length;
    //@ requires 1 < factors.length;
    //@ requires 1 <= factors.length;
    //@ requires 1 == factors.length;
    //@ requires 1 != factors.length;
    //@ requires 1 >= factors.length;
    //@ requires 1 > factors.length;
    //@ requires -1 < factors.length;
    //@ requires -1 <= factors.length;
    //@ requires -1 == factors.length;
    //@ requires -1 != factors.length;
    //@ requires -1 >= factors.length;
    //@ requires -1 > factors.length;
    //@ requires n < factors.length;
    //@ requires n <= factors.length;
    //@ requires n == factors.length;
    //@ requires n != factors.length;
    //@ requires n >= factors.length;
    //@ requires n > factors.length;
    //@ requires i < temp;
    //@ requires i <= temp;
    //@ requires i == temp;
    //@ requires i != temp;
    //@ requires i >= temp;
    //@ requires i > temp;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < factors.length;
    //@ requires i <= factors.length;
    //@ requires i == factors.length;
    //@ requires i != factors.length;
    //@ requires i >= factors.length;
    //@ requires i > factors.length;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isUgly(0);
        isUgly(1);
        isUgly(2);
        isUgly(3);
        isUgly(15);
        isUgly(-1);
        isUgly(-2);
        isUgly(-3);
		isUgly(4);
        isUgly(5);
        isUgly(7);
        isUgly(8);
		isUgly(13);
		isUgly(17);
		isUgly(12);
		isUgly(16);
    }
}


/home/max/Documents/JMLGPT/tmp/UglyNum.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:135:) in method isUgly
        __Loop_Invariant_Dummy1(n, temp, factors, i);
                               ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:135: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:26:
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:42: verify: Precondition conjunct is false: temp != 1
    //@ requires temp != 1;
                      ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:141: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:12:) in method main
        isUgly(2);
              ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:12: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:141:
    public static boolean isUgly(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:5: verify: Precondition conjunct is false: n <= 1
    //@ requires n <= 1;
                   ^
6 verification failures

class UglyNum {
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        int temp = n;
        int[] factors = {2, 3, 5};
        int i = 0;
        for (i = 0; i < factors.length; i++) {
            __Loop_Invariant_Dummy1(n, temp, factors, i);
            int factor = factors[i];
            while (temp % factor == 0) {
                temp /= factor;
            }
        }
        __Loop_Invariant_Dummy1(n, temp, factors, i);
        return temp == 1;
    }

    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires temp >= 1;
    //@ requires temp > 1;
    //@ requires temp < 0;
    //@ requires temp <= 0;
    //@ requires temp == 0;
    //@ requires temp != 0;
    //@ requires temp >= 0;
    //@ requires temp > 0;
    //@ requires temp < -1;
    //@ requires temp <= -1;
    //@ requires temp == -1;
    //@ requires temp != -1;
    //@ requires temp >= -1;
    //@ requires temp > -1;
    //@ requires temp < n;
    //@ requires temp <= n;
    //@ requires temp == n;
    //@ requires temp != n;
    //@ requires temp >= n;
    //@ requires temp > n;
    //@ requires temp < factors.length;
    //@ requires temp <= factors.length;
    //@ requires temp == factors.length;
    //@ requires temp != factors.length;
    //@ requires temp >= factors.length;
    //@ requires temp > factors.length;
    //@ requires 3 < factors.length;
    //@ requires 3 <= factors.length;
    //@ requires 3 == factors.length;
    //@ requires 3 != factors.length;
    //@ requires 3 >= factors.length;
    //@ requires 3 > factors.length;
    //@ requires 1 < factors.length;
    //@ requires 1 <= factors.length;
    //@ requires 1 == factors.length;
    //@ requires 1 != factors.length;
    //@ requires 1 >= factors.length;
    //@ requires 1 > factors.length;
    //@ requires -1 < factors.length;
    //@ requires -1 <= factors.length;
    //@ requires -1 == factors.length;
    //@ requires -1 != factors.length;
    //@ requires -1 >= factors.length;
    //@ requires -1 > factors.length;
    //@ requires n < factors.length;
    //@ requires n <= factors.length;
    //@ requires n == factors.length;
    //@ requires n != factors.length;
    //@ requires n >= factors.length;
    //@ requires n > factors.length;
    //@ requires i < temp;
    //@ requires i <= temp;
    //@ requires i == temp;
    //@ requires i != temp;
    //@ requires i >= temp;
    //@ requires i > temp;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < factors.length;
    //@ requires i <= factors.length;
    //@ requires i == factors.length;
    //@ requires i != factors.length;
    //@ requires i >= factors.length;
    //@ requires i > factors.length;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isUgly(0);
        isUgly(1);
        isUgly(2);
        isUgly(3);
        isUgly(15);
        isUgly(-1);
        isUgly(-2);
        isUgly(-3);
		isUgly(4);
        isUgly(5);
        isUgly(7);
        isUgly(8);
		isUgly(13);
		isUgly(17);
		isUgly(12);
		isUgly(16);
    }
}


/home/max/Documents/JMLGPT/tmp/UglyNum.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:134:) in method isUgly
        __Loop_Invariant_Dummy1(n, temp, factors, i);
                               ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:134: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:26:
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:42: verify: Precondition conjunct is false: temp >= 1
    //@ requires temp >= 1;
                      ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:140: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:12:) in method main
        isUgly(2);
              ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:12: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:140:
    public static boolean isUgly(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:5: verify: Precondition conjunct is false: n <= 1
    //@ requires n <= 1;
                   ^
6 verification failures

class UglyNum {
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        int temp = n;
        int[] factors = {2, 3, 5};
        int i = 0;
        for (i = 0; i < factors.length; i++) {
            __Loop_Invariant_Dummy1(n, temp, factors, i);
            int factor = factors[i];
            while (temp % factor == 0) {
                temp /= factor;
            }
        }
        __Loop_Invariant_Dummy1(n, temp, factors, i);
        return temp == 1;
    }

    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires temp > 1;
    //@ requires temp < 0;
    //@ requires temp <= 0;
    //@ requires temp == 0;
    //@ requires temp != 0;
    //@ requires temp >= 0;
    //@ requires temp > 0;
    //@ requires temp < -1;
    //@ requires temp <= -1;
    //@ requires temp == -1;
    //@ requires temp != -1;
    //@ requires temp >= -1;
    //@ requires temp > -1;
    //@ requires temp < n;
    //@ requires temp <= n;
    //@ requires temp == n;
    //@ requires temp != n;
    //@ requires temp >= n;
    //@ requires temp > n;
    //@ requires temp < factors.length;
    //@ requires temp <= factors.length;
    //@ requires temp == factors.length;
    //@ requires temp != factors.length;
    //@ requires temp >= factors.length;
    //@ requires temp > factors.length;
    //@ requires 3 < factors.length;
    //@ requires 3 <= factors.length;
    //@ requires 3 == factors.length;
    //@ requires 3 != factors.length;
    //@ requires 3 >= factors.length;
    //@ requires 3 > factors.length;
    //@ requires 1 < factors.length;
    //@ requires 1 <= factors.length;
    //@ requires 1 == factors.length;
    //@ requires 1 != factors.length;
    //@ requires 1 >= factors.length;
    //@ requires 1 > factors.length;
    //@ requires -1 < factors.length;
    //@ requires -1 <= factors.length;
    //@ requires -1 == factors.length;
    //@ requires -1 != factors.length;
    //@ requires -1 >= factors.length;
    //@ requires -1 > factors.length;
    //@ requires n < factors.length;
    //@ requires n <= factors.length;
    //@ requires n == factors.length;
    //@ requires n != factors.length;
    //@ requires n >= factors.length;
    //@ requires n > factors.length;
    //@ requires i < temp;
    //@ requires i <= temp;
    //@ requires i == temp;
    //@ requires i != temp;
    //@ requires i >= temp;
    //@ requires i > temp;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < factors.length;
    //@ requires i <= factors.length;
    //@ requires i == factors.length;
    //@ requires i != factors.length;
    //@ requires i >= factors.length;
    //@ requires i > factors.length;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isUgly(0);
        isUgly(1);
        isUgly(2);
        isUgly(3);
        isUgly(15);
        isUgly(-1);
        isUgly(-2);
        isUgly(-3);
		isUgly(4);
        isUgly(5);
        isUgly(7);
        isUgly(8);
		isUgly(13);
		isUgly(17);
		isUgly(12);
		isUgly(16);
    }
}


/home/max/Documents/JMLGPT/tmp/UglyNum.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:133:) in method isUgly
        __Loop_Invariant_Dummy1(n, temp, factors, i);
                               ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:133: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:26:
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:42: verify: Precondition conjunct is false: temp > 1
    //@ requires temp > 1;
                      ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:139: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:12:) in method main
        isUgly(2);
              ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:12: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:139:
    public static boolean isUgly(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:5: verify: Precondition conjunct is false: n <= 1
    //@ requires n <= 1;
                   ^
6 verification failures

class UglyNum {
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        int temp = n;
        int[] factors = {2, 3, 5};
        int i = 0;
        for (i = 0; i < factors.length; i++) {
            __Loop_Invariant_Dummy1(n, temp, factors, i);
            int factor = factors[i];
            while (temp % factor == 0) {
                temp /= factor;
            }
        }
        __Loop_Invariant_Dummy1(n, temp, factors, i);
        return temp == 1;
    }

    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires temp < 0;
    //@ requires temp <= 0;
    //@ requires temp == 0;
    //@ requires temp != 0;
    //@ requires temp >= 0;
    //@ requires temp > 0;
    //@ requires temp < -1;
    //@ requires temp <= -1;
    //@ requires temp == -1;
    //@ requires temp != -1;
    //@ requires temp >= -1;
    //@ requires temp > -1;
    //@ requires temp < n;
    //@ requires temp <= n;
    //@ requires temp == n;
    //@ requires temp != n;
    //@ requires temp >= n;
    //@ requires temp > n;
    //@ requires temp < factors.length;
    //@ requires temp <= factors.length;
    //@ requires temp == factors.length;
    //@ requires temp != factors.length;
    //@ requires temp >= factors.length;
    //@ requires temp > factors.length;
    //@ requires 3 < factors.length;
    //@ requires 3 <= factors.length;
    //@ requires 3 == factors.length;
    //@ requires 3 != factors.length;
    //@ requires 3 >= factors.length;
    //@ requires 3 > factors.length;
    //@ requires 1 < factors.length;
    //@ requires 1 <= factors.length;
    //@ requires 1 == factors.length;
    //@ requires 1 != factors.length;
    //@ requires 1 >= factors.length;
    //@ requires 1 > factors.length;
    //@ requires -1 < factors.length;
    //@ requires -1 <= factors.length;
    //@ requires -1 == factors.length;
    //@ requires -1 != factors.length;
    //@ requires -1 >= factors.length;
    //@ requires -1 > factors.length;
    //@ requires n < factors.length;
    //@ requires n <= factors.length;
    //@ requires n == factors.length;
    //@ requires n != factors.length;
    //@ requires n >= factors.length;
    //@ requires n > factors.length;
    //@ requires i < temp;
    //@ requires i <= temp;
    //@ requires i == temp;
    //@ requires i != temp;
    //@ requires i >= temp;
    //@ requires i > temp;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < factors.length;
    //@ requires i <= factors.length;
    //@ requires i == factors.length;
    //@ requires i != factors.length;
    //@ requires i >= factors.length;
    //@ requires i > factors.length;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isUgly(0);
        isUgly(1);
        isUgly(2);
        isUgly(3);
        isUgly(15);
        isUgly(-1);
        isUgly(-2);
        isUgly(-3);
		isUgly(4);
        isUgly(5);
        isUgly(7);
        isUgly(8);
		isUgly(13);
		isUgly(17);
		isUgly(12);
		isUgly(16);
    }
}


/home/max/Documents/JMLGPT/tmp/UglyNum.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:132:) in method isUgly
        __Loop_Invariant_Dummy1(n, temp, factors, i);
                               ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:132: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:26:
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:42: verify: Precondition conjunct is false: temp < 0
    //@ requires temp < 0;
                      ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:138: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:12:) in method main
        isUgly(2);
              ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:12: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:138:
    public static boolean isUgly(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:5: verify: Precondition conjunct is false: n <= 1
    //@ requires n <= 1;
                   ^
6 verification failures

class UglyNum {
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        int temp = n;
        int[] factors = {2, 3, 5};
        int i = 0;
        for (i = 0; i < factors.length; i++) {
            __Loop_Invariant_Dummy1(n, temp, factors, i);
            int factor = factors[i];
            while (temp % factor == 0) {
                temp /= factor;
            }
        }
        __Loop_Invariant_Dummy1(n, temp, factors, i);
        return temp == 1;
    }

    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires temp <= 0;
    //@ requires temp == 0;
    //@ requires temp != 0;
    //@ requires temp >= 0;
    //@ requires temp > 0;
    //@ requires temp < -1;
    //@ requires temp <= -1;
    //@ requires temp == -1;
    //@ requires temp != -1;
    //@ requires temp >= -1;
    //@ requires temp > -1;
    //@ requires temp < n;
    //@ requires temp <= n;
    //@ requires temp == n;
    //@ requires temp != n;
    //@ requires temp >= n;
    //@ requires temp > n;
    //@ requires temp < factors.length;
    //@ requires temp <= factors.length;
    //@ requires temp == factors.length;
    //@ requires temp != factors.length;
    //@ requires temp >= factors.length;
    //@ requires temp > factors.length;
    //@ requires 3 < factors.length;
    //@ requires 3 <= factors.length;
    //@ requires 3 == factors.length;
    //@ requires 3 != factors.length;
    //@ requires 3 >= factors.length;
    //@ requires 3 > factors.length;
    //@ requires 1 < factors.length;
    //@ requires 1 <= factors.length;
    //@ requires 1 == factors.length;
    //@ requires 1 != factors.length;
    //@ requires 1 >= factors.length;
    //@ requires 1 > factors.length;
    //@ requires -1 < factors.length;
    //@ requires -1 <= factors.length;
    //@ requires -1 == factors.length;
    //@ requires -1 != factors.length;
    //@ requires -1 >= factors.length;
    //@ requires -1 > factors.length;
    //@ requires n < factors.length;
    //@ requires n <= factors.length;
    //@ requires n == factors.length;
    //@ requires n != factors.length;
    //@ requires n >= factors.length;
    //@ requires n > factors.length;
    //@ requires i < temp;
    //@ requires i <= temp;
    //@ requires i == temp;
    //@ requires i != temp;
    //@ requires i >= temp;
    //@ requires i > temp;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < factors.length;
    //@ requires i <= factors.length;
    //@ requires i == factors.length;
    //@ requires i != factors.length;
    //@ requires i >= factors.length;
    //@ requires i > factors.length;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isUgly(0);
        isUgly(1);
        isUgly(2);
        isUgly(3);
        isUgly(15);
        isUgly(-1);
        isUgly(-2);
        isUgly(-3);
		isUgly(4);
        isUgly(5);
        isUgly(7);
        isUgly(8);
		isUgly(13);
		isUgly(17);
		isUgly(12);
		isUgly(16);
    }
}


/home/max/Documents/JMLGPT/tmp/UglyNum.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:131:) in method isUgly
        __Loop_Invariant_Dummy1(n, temp, factors, i);
                               ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:131: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:26:
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:42: verify: Precondition conjunct is false: temp <= 0
    //@ requires temp <= 0;
                      ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:137: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:12:) in method main
        isUgly(2);
              ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:12: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:137:
    public static boolean isUgly(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:5: verify: Precondition conjunct is false: n <= 1
    //@ requires n <= 1;
                   ^
6 verification failures

class UglyNum {
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        int temp = n;
        int[] factors = {2, 3, 5};
        int i = 0;
        for (i = 0; i < factors.length; i++) {
            __Loop_Invariant_Dummy1(n, temp, factors, i);
            int factor = factors[i];
            while (temp % factor == 0) {
                temp /= factor;
            }
        }
        __Loop_Invariant_Dummy1(n, temp, factors, i);
        return temp == 1;
    }

    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires temp == 0;
    //@ requires temp != 0;
    //@ requires temp >= 0;
    //@ requires temp > 0;
    //@ requires temp < -1;
    //@ requires temp <= -1;
    //@ requires temp == -1;
    //@ requires temp != -1;
    //@ requires temp >= -1;
    //@ requires temp > -1;
    //@ requires temp < n;
    //@ requires temp <= n;
    //@ requires temp == n;
    //@ requires temp != n;
    //@ requires temp >= n;
    //@ requires temp > n;
    //@ requires temp < factors.length;
    //@ requires temp <= factors.length;
    //@ requires temp == factors.length;
    //@ requires temp != factors.length;
    //@ requires temp >= factors.length;
    //@ requires temp > factors.length;
    //@ requires 3 < factors.length;
    //@ requires 3 <= factors.length;
    //@ requires 3 == factors.length;
    //@ requires 3 != factors.length;
    //@ requires 3 >= factors.length;
    //@ requires 3 > factors.length;
    //@ requires 1 < factors.length;
    //@ requires 1 <= factors.length;
    //@ requires 1 == factors.length;
    //@ requires 1 != factors.length;
    //@ requires 1 >= factors.length;
    //@ requires 1 > factors.length;
    //@ requires -1 < factors.length;
    //@ requires -1 <= factors.length;
    //@ requires -1 == factors.length;
    //@ requires -1 != factors.length;
    //@ requires -1 >= factors.length;
    //@ requires -1 > factors.length;
    //@ requires n < factors.length;
    //@ requires n <= factors.length;
    //@ requires n == factors.length;
    //@ requires n != factors.length;
    //@ requires n >= factors.length;
    //@ requires n > factors.length;
    //@ requires i < temp;
    //@ requires i <= temp;
    //@ requires i == temp;
    //@ requires i != temp;
    //@ requires i >= temp;
    //@ requires i > temp;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < factors.length;
    //@ requires i <= factors.length;
    //@ requires i == factors.length;
    //@ requires i != factors.length;
    //@ requires i >= factors.length;
    //@ requires i > factors.length;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isUgly(0);
        isUgly(1);
        isUgly(2);
        isUgly(3);
        isUgly(15);
        isUgly(-1);
        isUgly(-2);
        isUgly(-3);
		isUgly(4);
        isUgly(5);
        isUgly(7);
        isUgly(8);
		isUgly(13);
		isUgly(17);
		isUgly(12);
		isUgly(16);
    }
}


/home/max/Documents/JMLGPT/tmp/UglyNum.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:130:) in method isUgly
        __Loop_Invariant_Dummy1(n, temp, factors, i);
                               ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:130: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:26:
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:42: verify: Precondition conjunct is false: temp == 0
    //@ requires temp == 0;
                      ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:136: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:12:) in method main
        isUgly(2);
              ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:12: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:136:
    public static boolean isUgly(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:5: verify: Precondition conjunct is false: n <= 1
    //@ requires n <= 1;
                   ^
6 verification failures

class UglyNum {
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        int temp = n;
        int[] factors = {2, 3, 5};
        int i = 0;
        for (i = 0; i < factors.length; i++) {
            __Loop_Invariant_Dummy1(n, temp, factors, i);
            int factor = factors[i];
            while (temp % factor == 0) {
                temp /= factor;
            }
        }
        __Loop_Invariant_Dummy1(n, temp, factors, i);
        return temp == 1;
    }

    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires temp != 0;
    //@ requires temp >= 0;
    //@ requires temp > 0;
    //@ requires temp < -1;
    //@ requires temp <= -1;
    //@ requires temp == -1;
    //@ requires temp != -1;
    //@ requires temp >= -1;
    //@ requires temp > -1;
    //@ requires temp < n;
    //@ requires temp <= n;
    //@ requires temp == n;
    //@ requires temp != n;
    //@ requires temp >= n;
    //@ requires temp > n;
    //@ requires temp < factors.length;
    //@ requires temp <= factors.length;
    //@ requires temp == factors.length;
    //@ requires temp != factors.length;
    //@ requires temp >= factors.length;
    //@ requires temp > factors.length;
    //@ requires 3 < factors.length;
    //@ requires 3 <= factors.length;
    //@ requires 3 == factors.length;
    //@ requires 3 != factors.length;
    //@ requires 3 >= factors.length;
    //@ requires 3 > factors.length;
    //@ requires 1 < factors.length;
    //@ requires 1 <= factors.length;
    //@ requires 1 == factors.length;
    //@ requires 1 != factors.length;
    //@ requires 1 >= factors.length;
    //@ requires 1 > factors.length;
    //@ requires -1 < factors.length;
    //@ requires -1 <= factors.length;
    //@ requires -1 == factors.length;
    //@ requires -1 != factors.length;
    //@ requires -1 >= factors.length;
    //@ requires -1 > factors.length;
    //@ requires n < factors.length;
    //@ requires n <= factors.length;
    //@ requires n == factors.length;
    //@ requires n != factors.length;
    //@ requires n >= factors.length;
    //@ requires n > factors.length;
    //@ requires i < temp;
    //@ requires i <= temp;
    //@ requires i == temp;
    //@ requires i != temp;
    //@ requires i >= temp;
    //@ requires i > temp;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < factors.length;
    //@ requires i <= factors.length;
    //@ requires i == factors.length;
    //@ requires i != factors.length;
    //@ requires i >= factors.length;
    //@ requires i > factors.length;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isUgly(0);
        isUgly(1);
        isUgly(2);
        isUgly(3);
        isUgly(15);
        isUgly(-1);
        isUgly(-2);
        isUgly(-3);
		isUgly(4);
        isUgly(5);
        isUgly(7);
        isUgly(8);
		isUgly(13);
		isUgly(17);
		isUgly(12);
		isUgly(16);
    }
}


/home/max/Documents/JMLGPT/tmp/UglyNum.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:129:) in method isUgly
        __Loop_Invariant_Dummy1(n, temp, factors, i);
                               ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:129: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:26:
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:42: verify: Precondition conjunct is false: temp != 0
    //@ requires temp != 0;
                      ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:135: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:12:) in method main
        isUgly(2);
              ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:12: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:135:
    public static boolean isUgly(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:5: verify: Precondition conjunct is false: n <= 1
    //@ requires n <= 1;
                   ^
6 verification failures

class UglyNum {
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        int temp = n;
        int[] factors = {2, 3, 5};
        int i = 0;
        for (i = 0; i < factors.length; i++) {
            __Loop_Invariant_Dummy1(n, temp, factors, i);
            int factor = factors[i];
            while (temp % factor == 0) {
                temp /= factor;
            }
        }
        __Loop_Invariant_Dummy1(n, temp, factors, i);
        return temp == 1;
    }

    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires temp >= 0;
    //@ requires temp > 0;
    //@ requires temp < -1;
    //@ requires temp <= -1;
    //@ requires temp == -1;
    //@ requires temp != -1;
    //@ requires temp >= -1;
    //@ requires temp > -1;
    //@ requires temp < n;
    //@ requires temp <= n;
    //@ requires temp == n;
    //@ requires temp != n;
    //@ requires temp >= n;
    //@ requires temp > n;
    //@ requires temp < factors.length;
    //@ requires temp <= factors.length;
    //@ requires temp == factors.length;
    //@ requires temp != factors.length;
    //@ requires temp >= factors.length;
    //@ requires temp > factors.length;
    //@ requires 3 < factors.length;
    //@ requires 3 <= factors.length;
    //@ requires 3 == factors.length;
    //@ requires 3 != factors.length;
    //@ requires 3 >= factors.length;
    //@ requires 3 > factors.length;
    //@ requires 1 < factors.length;
    //@ requires 1 <= factors.length;
    //@ requires 1 == factors.length;
    //@ requires 1 != factors.length;
    //@ requires 1 >= factors.length;
    //@ requires 1 > factors.length;
    //@ requires -1 < factors.length;
    //@ requires -1 <= factors.length;
    //@ requires -1 == factors.length;
    //@ requires -1 != factors.length;
    //@ requires -1 >= factors.length;
    //@ requires -1 > factors.length;
    //@ requires n < factors.length;
    //@ requires n <= factors.length;
    //@ requires n == factors.length;
    //@ requires n != factors.length;
    //@ requires n >= factors.length;
    //@ requires n > factors.length;
    //@ requires i < temp;
    //@ requires i <= temp;
    //@ requires i == temp;
    //@ requires i != temp;
    //@ requires i >= temp;
    //@ requires i > temp;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < factors.length;
    //@ requires i <= factors.length;
    //@ requires i == factors.length;
    //@ requires i != factors.length;
    //@ requires i >= factors.length;
    //@ requires i > factors.length;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isUgly(0);
        isUgly(1);
        isUgly(2);
        isUgly(3);
        isUgly(15);
        isUgly(-1);
        isUgly(-2);
        isUgly(-3);
		isUgly(4);
        isUgly(5);
        isUgly(7);
        isUgly(8);
		isUgly(13);
		isUgly(17);
		isUgly(12);
		isUgly(16);
    }
}


/home/max/Documents/JMLGPT/tmp/UglyNum.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:128:) in method isUgly
        __Loop_Invariant_Dummy1(n, temp, factors, i);
                               ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:128: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:26:
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:42: verify: Precondition conjunct is false: temp >= 0
    //@ requires temp >= 0;
                      ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:134: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:12:) in method main
        isUgly(2);
              ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:12: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:134:
    public static boolean isUgly(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:5: verify: Precondition conjunct is false: n <= 1
    //@ requires n <= 1;
                   ^
6 verification failures

class UglyNum {
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        int temp = n;
        int[] factors = {2, 3, 5};
        int i = 0;
        for (i = 0; i < factors.length; i++) {
            __Loop_Invariant_Dummy1(n, temp, factors, i);
            int factor = factors[i];
            while (temp % factor == 0) {
                temp /= factor;
            }
        }
        __Loop_Invariant_Dummy1(n, temp, factors, i);
        return temp == 1;
    }

    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires temp > 0;
    //@ requires temp < -1;
    //@ requires temp <= -1;
    //@ requires temp == -1;
    //@ requires temp != -1;
    //@ requires temp >= -1;
    //@ requires temp > -1;
    //@ requires temp < n;
    //@ requires temp <= n;
    //@ requires temp == n;
    //@ requires temp != n;
    //@ requires temp >= n;
    //@ requires temp > n;
    //@ requires temp < factors.length;
    //@ requires temp <= factors.length;
    //@ requires temp == factors.length;
    //@ requires temp != factors.length;
    //@ requires temp >= factors.length;
    //@ requires temp > factors.length;
    //@ requires 3 < factors.length;
    //@ requires 3 <= factors.length;
    //@ requires 3 == factors.length;
    //@ requires 3 != factors.length;
    //@ requires 3 >= factors.length;
    //@ requires 3 > factors.length;
    //@ requires 1 < factors.length;
    //@ requires 1 <= factors.length;
    //@ requires 1 == factors.length;
    //@ requires 1 != factors.length;
    //@ requires 1 >= factors.length;
    //@ requires 1 > factors.length;
    //@ requires -1 < factors.length;
    //@ requires -1 <= factors.length;
    //@ requires -1 == factors.length;
    //@ requires -1 != factors.length;
    //@ requires -1 >= factors.length;
    //@ requires -1 > factors.length;
    //@ requires n < factors.length;
    //@ requires n <= factors.length;
    //@ requires n == factors.length;
    //@ requires n != factors.length;
    //@ requires n >= factors.length;
    //@ requires n > factors.length;
    //@ requires i < temp;
    //@ requires i <= temp;
    //@ requires i == temp;
    //@ requires i != temp;
    //@ requires i >= temp;
    //@ requires i > temp;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < factors.length;
    //@ requires i <= factors.length;
    //@ requires i == factors.length;
    //@ requires i != factors.length;
    //@ requires i >= factors.length;
    //@ requires i > factors.length;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isUgly(0);
        isUgly(1);
        isUgly(2);
        isUgly(3);
        isUgly(15);
        isUgly(-1);
        isUgly(-2);
        isUgly(-3);
		isUgly(4);
        isUgly(5);
        isUgly(7);
        isUgly(8);
		isUgly(13);
		isUgly(17);
		isUgly(12);
		isUgly(16);
    }
}


/home/max/Documents/JMLGPT/tmp/UglyNum.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:127:) in method isUgly
        __Loop_Invariant_Dummy1(n, temp, factors, i);
                               ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:127: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:26:
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:42: verify: Precondition conjunct is false: temp > 0
    //@ requires temp > 0;
                      ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:133: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:12:) in method main
        isUgly(2);
              ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:12: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:133:
    public static boolean isUgly(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:5: verify: Precondition conjunct is false: n <= 1
    //@ requires n <= 1;
                   ^
6 verification failures

class UglyNum {
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        int temp = n;
        int[] factors = {2, 3, 5};
        int i = 0;
        for (i = 0; i < factors.length; i++) {
            __Loop_Invariant_Dummy1(n, temp, factors, i);
            int factor = factors[i];
            while (temp % factor == 0) {
                temp /= factor;
            }
        }
        __Loop_Invariant_Dummy1(n, temp, factors, i);
        return temp == 1;
    }

    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires temp < -1;
    //@ requires temp <= -1;
    //@ requires temp == -1;
    //@ requires temp != -1;
    //@ requires temp >= -1;
    //@ requires temp > -1;
    //@ requires temp < n;
    //@ requires temp <= n;
    //@ requires temp == n;
    //@ requires temp != n;
    //@ requires temp >= n;
    //@ requires temp > n;
    //@ requires temp < factors.length;
    //@ requires temp <= factors.length;
    //@ requires temp == factors.length;
    //@ requires temp != factors.length;
    //@ requires temp >= factors.length;
    //@ requires temp > factors.length;
    //@ requires 3 < factors.length;
    //@ requires 3 <= factors.length;
    //@ requires 3 == factors.length;
    //@ requires 3 != factors.length;
    //@ requires 3 >= factors.length;
    //@ requires 3 > factors.length;
    //@ requires 1 < factors.length;
    //@ requires 1 <= factors.length;
    //@ requires 1 == factors.length;
    //@ requires 1 != factors.length;
    //@ requires 1 >= factors.length;
    //@ requires 1 > factors.length;
    //@ requires -1 < factors.length;
    //@ requires -1 <= factors.length;
    //@ requires -1 == factors.length;
    //@ requires -1 != factors.length;
    //@ requires -1 >= factors.length;
    //@ requires -1 > factors.length;
    //@ requires n < factors.length;
    //@ requires n <= factors.length;
    //@ requires n == factors.length;
    //@ requires n != factors.length;
    //@ requires n >= factors.length;
    //@ requires n > factors.length;
    //@ requires i < temp;
    //@ requires i <= temp;
    //@ requires i == temp;
    //@ requires i != temp;
    //@ requires i >= temp;
    //@ requires i > temp;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < factors.length;
    //@ requires i <= factors.length;
    //@ requires i == factors.length;
    //@ requires i != factors.length;
    //@ requires i >= factors.length;
    //@ requires i > factors.length;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isUgly(0);
        isUgly(1);
        isUgly(2);
        isUgly(3);
        isUgly(15);
        isUgly(-1);
        isUgly(-2);
        isUgly(-3);
		isUgly(4);
        isUgly(5);
        isUgly(7);
        isUgly(8);
		isUgly(13);
		isUgly(17);
		isUgly(12);
		isUgly(16);
    }
}


/home/max/Documents/JMLGPT/tmp/UglyNum.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:126:) in method isUgly
        __Loop_Invariant_Dummy1(n, temp, factors, i);
                               ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:126: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:26:
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:42: verify: Precondition conjunct is false: temp < -1
    //@ requires temp < -1;
                      ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:132: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:12:) in method main
        isUgly(2);
              ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:12: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:132:
    public static boolean isUgly(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:5: verify: Precondition conjunct is false: n <= 1
    //@ requires n <= 1;
                   ^
6 verification failures

class UglyNum {
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        int temp = n;
        int[] factors = {2, 3, 5};
        int i = 0;
        for (i = 0; i < factors.length; i++) {
            __Loop_Invariant_Dummy1(n, temp, factors, i);
            int factor = factors[i];
            while (temp % factor == 0) {
                temp /= factor;
            }
        }
        __Loop_Invariant_Dummy1(n, temp, factors, i);
        return temp == 1;
    }

    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires temp <= -1;
    //@ requires temp == -1;
    //@ requires temp != -1;
    //@ requires temp >= -1;
    //@ requires temp > -1;
    //@ requires temp < n;
    //@ requires temp <= n;
    //@ requires temp == n;
    //@ requires temp != n;
    //@ requires temp >= n;
    //@ requires temp > n;
    //@ requires temp < factors.length;
    //@ requires temp <= factors.length;
    //@ requires temp == factors.length;
    //@ requires temp != factors.length;
    //@ requires temp >= factors.length;
    //@ requires temp > factors.length;
    //@ requires 3 < factors.length;
    //@ requires 3 <= factors.length;
    //@ requires 3 == factors.length;
    //@ requires 3 != factors.length;
    //@ requires 3 >= factors.length;
    //@ requires 3 > factors.length;
    //@ requires 1 < factors.length;
    //@ requires 1 <= factors.length;
    //@ requires 1 == factors.length;
    //@ requires 1 != factors.length;
    //@ requires 1 >= factors.length;
    //@ requires 1 > factors.length;
    //@ requires -1 < factors.length;
    //@ requires -1 <= factors.length;
    //@ requires -1 == factors.length;
    //@ requires -1 != factors.length;
    //@ requires -1 >= factors.length;
    //@ requires -1 > factors.length;
    //@ requires n < factors.length;
    //@ requires n <= factors.length;
    //@ requires n == factors.length;
    //@ requires n != factors.length;
    //@ requires n >= factors.length;
    //@ requires n > factors.length;
    //@ requires i < temp;
    //@ requires i <= temp;
    //@ requires i == temp;
    //@ requires i != temp;
    //@ requires i >= temp;
    //@ requires i > temp;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < factors.length;
    //@ requires i <= factors.length;
    //@ requires i == factors.length;
    //@ requires i != factors.length;
    //@ requires i >= factors.length;
    //@ requires i > factors.length;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isUgly(0);
        isUgly(1);
        isUgly(2);
        isUgly(3);
        isUgly(15);
        isUgly(-1);
        isUgly(-2);
        isUgly(-3);
		isUgly(4);
        isUgly(5);
        isUgly(7);
        isUgly(8);
		isUgly(13);
		isUgly(17);
		isUgly(12);
		isUgly(16);
    }
}


/home/max/Documents/JMLGPT/tmp/UglyNum.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:125:) in method isUgly
        __Loop_Invariant_Dummy1(n, temp, factors, i);
                               ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:125: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:26:
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:42: verify: Precondition conjunct is false: temp <= -1
    //@ requires temp <= -1;
                      ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:131: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:12:) in method main
        isUgly(2);
              ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:12: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:131:
    public static boolean isUgly(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:5: verify: Precondition conjunct is false: n <= 1
    //@ requires n <= 1;
                   ^
6 verification failures

class UglyNum {
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        int temp = n;
        int[] factors = {2, 3, 5};
        int i = 0;
        for (i = 0; i < factors.length; i++) {
            __Loop_Invariant_Dummy1(n, temp, factors, i);
            int factor = factors[i];
            while (temp % factor == 0) {
                temp /= factor;
            }
        }
        __Loop_Invariant_Dummy1(n, temp, factors, i);
        return temp == 1;
    }

    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires temp == -1;
    //@ requires temp != -1;
    //@ requires temp >= -1;
    //@ requires temp > -1;
    //@ requires temp < n;
    //@ requires temp <= n;
    //@ requires temp == n;
    //@ requires temp != n;
    //@ requires temp >= n;
    //@ requires temp > n;
    //@ requires temp < factors.length;
    //@ requires temp <= factors.length;
    //@ requires temp == factors.length;
    //@ requires temp != factors.length;
    //@ requires temp >= factors.length;
    //@ requires temp > factors.length;
    //@ requires 3 < factors.length;
    //@ requires 3 <= factors.length;
    //@ requires 3 == factors.length;
    //@ requires 3 != factors.length;
    //@ requires 3 >= factors.length;
    //@ requires 3 > factors.length;
    //@ requires 1 < factors.length;
    //@ requires 1 <= factors.length;
    //@ requires 1 == factors.length;
    //@ requires 1 != factors.length;
    //@ requires 1 >= factors.length;
    //@ requires 1 > factors.length;
    //@ requires -1 < factors.length;
    //@ requires -1 <= factors.length;
    //@ requires -1 == factors.length;
    //@ requires -1 != factors.length;
    //@ requires -1 >= factors.length;
    //@ requires -1 > factors.length;
    //@ requires n < factors.length;
    //@ requires n <= factors.length;
    //@ requires n == factors.length;
    //@ requires n != factors.length;
    //@ requires n >= factors.length;
    //@ requires n > factors.length;
    //@ requires i < temp;
    //@ requires i <= temp;
    //@ requires i == temp;
    //@ requires i != temp;
    //@ requires i >= temp;
    //@ requires i > temp;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < factors.length;
    //@ requires i <= factors.length;
    //@ requires i == factors.length;
    //@ requires i != factors.length;
    //@ requires i >= factors.length;
    //@ requires i > factors.length;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isUgly(0);
        isUgly(1);
        isUgly(2);
        isUgly(3);
        isUgly(15);
        isUgly(-1);
        isUgly(-2);
        isUgly(-3);
		isUgly(4);
        isUgly(5);
        isUgly(7);
        isUgly(8);
		isUgly(13);
		isUgly(17);
		isUgly(12);
		isUgly(16);
    }
}


/home/max/Documents/JMLGPT/tmp/UglyNum.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:124:) in method isUgly
        __Loop_Invariant_Dummy1(n, temp, factors, i);
                               ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:124: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:26:
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:42: verify: Precondition conjunct is false: temp == -1
    //@ requires temp == -1;
                      ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:130: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:12:) in method main
        isUgly(2);
              ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:12: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:130:
    public static boolean isUgly(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:5: verify: Precondition conjunct is false: n <= 1
    //@ requires n <= 1;
                   ^
6 verification failures

class UglyNum {
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        int temp = n;
        int[] factors = {2, 3, 5};
        int i = 0;
        for (i = 0; i < factors.length; i++) {
            __Loop_Invariant_Dummy1(n, temp, factors, i);
            int factor = factors[i];
            while (temp % factor == 0) {
                temp /= factor;
            }
        }
        __Loop_Invariant_Dummy1(n, temp, factors, i);
        return temp == 1;
    }

    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires temp != -1;
    //@ requires temp >= -1;
    //@ requires temp > -1;
    //@ requires temp < n;
    //@ requires temp <= n;
    //@ requires temp == n;
    //@ requires temp != n;
    //@ requires temp >= n;
    //@ requires temp > n;
    //@ requires temp < factors.length;
    //@ requires temp <= factors.length;
    //@ requires temp == factors.length;
    //@ requires temp != factors.length;
    //@ requires temp >= factors.length;
    //@ requires temp > factors.length;
    //@ requires 3 < factors.length;
    //@ requires 3 <= factors.length;
    //@ requires 3 == factors.length;
    //@ requires 3 != factors.length;
    //@ requires 3 >= factors.length;
    //@ requires 3 > factors.length;
    //@ requires 1 < factors.length;
    //@ requires 1 <= factors.length;
    //@ requires 1 == factors.length;
    //@ requires 1 != factors.length;
    //@ requires 1 >= factors.length;
    //@ requires 1 > factors.length;
    //@ requires -1 < factors.length;
    //@ requires -1 <= factors.length;
    //@ requires -1 == factors.length;
    //@ requires -1 != factors.length;
    //@ requires -1 >= factors.length;
    //@ requires -1 > factors.length;
    //@ requires n < factors.length;
    //@ requires n <= factors.length;
    //@ requires n == factors.length;
    //@ requires n != factors.length;
    //@ requires n >= factors.length;
    //@ requires n > factors.length;
    //@ requires i < temp;
    //@ requires i <= temp;
    //@ requires i == temp;
    //@ requires i != temp;
    //@ requires i >= temp;
    //@ requires i > temp;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < factors.length;
    //@ requires i <= factors.length;
    //@ requires i == factors.length;
    //@ requires i != factors.length;
    //@ requires i >= factors.length;
    //@ requires i > factors.length;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isUgly(0);
        isUgly(1);
        isUgly(2);
        isUgly(3);
        isUgly(15);
        isUgly(-1);
        isUgly(-2);
        isUgly(-3);
		isUgly(4);
        isUgly(5);
        isUgly(7);
        isUgly(8);
		isUgly(13);
		isUgly(17);
		isUgly(12);
		isUgly(16);
    }
}


/home/max/Documents/JMLGPT/tmp/UglyNum.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:123:) in method isUgly
        __Loop_Invariant_Dummy1(n, temp, factors, i);
                               ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:123: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:26:
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:42: verify: Precondition conjunct is false: temp != -1
    //@ requires temp != -1;
                      ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:129: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:12:) in method main
        isUgly(2);
              ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:12: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:129:
    public static boolean isUgly(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:5: verify: Precondition conjunct is false: n <= 1
    //@ requires n <= 1;
                   ^
6 verification failures

class UglyNum {
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        int temp = n;
        int[] factors = {2, 3, 5};
        int i = 0;
        for (i = 0; i < factors.length; i++) {
            __Loop_Invariant_Dummy1(n, temp, factors, i);
            int factor = factors[i];
            while (temp % factor == 0) {
                temp /= factor;
            }
        }
        __Loop_Invariant_Dummy1(n, temp, factors, i);
        return temp == 1;
    }

    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires temp >= -1;
    //@ requires temp > -1;
    //@ requires temp < n;
    //@ requires temp <= n;
    //@ requires temp == n;
    //@ requires temp != n;
    //@ requires temp >= n;
    //@ requires temp > n;
    //@ requires temp < factors.length;
    //@ requires temp <= factors.length;
    //@ requires temp == factors.length;
    //@ requires temp != factors.length;
    //@ requires temp >= factors.length;
    //@ requires temp > factors.length;
    //@ requires 3 < factors.length;
    //@ requires 3 <= factors.length;
    //@ requires 3 == factors.length;
    //@ requires 3 != factors.length;
    //@ requires 3 >= factors.length;
    //@ requires 3 > factors.length;
    //@ requires 1 < factors.length;
    //@ requires 1 <= factors.length;
    //@ requires 1 == factors.length;
    //@ requires 1 != factors.length;
    //@ requires 1 >= factors.length;
    //@ requires 1 > factors.length;
    //@ requires -1 < factors.length;
    //@ requires -1 <= factors.length;
    //@ requires -1 == factors.length;
    //@ requires -1 != factors.length;
    //@ requires -1 >= factors.length;
    //@ requires -1 > factors.length;
    //@ requires n < factors.length;
    //@ requires n <= factors.length;
    //@ requires n == factors.length;
    //@ requires n != factors.length;
    //@ requires n >= factors.length;
    //@ requires n > factors.length;
    //@ requires i < temp;
    //@ requires i <= temp;
    //@ requires i == temp;
    //@ requires i != temp;
    //@ requires i >= temp;
    //@ requires i > temp;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < factors.length;
    //@ requires i <= factors.length;
    //@ requires i == factors.length;
    //@ requires i != factors.length;
    //@ requires i >= factors.length;
    //@ requires i > factors.length;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isUgly(0);
        isUgly(1);
        isUgly(2);
        isUgly(3);
        isUgly(15);
        isUgly(-1);
        isUgly(-2);
        isUgly(-3);
		isUgly(4);
        isUgly(5);
        isUgly(7);
        isUgly(8);
		isUgly(13);
		isUgly(17);
		isUgly(12);
		isUgly(16);
    }
}


/home/max/Documents/JMLGPT/tmp/UglyNum.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:122:) in method isUgly
        __Loop_Invariant_Dummy1(n, temp, factors, i);
                               ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:122: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:26:
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:42: verify: Precondition conjunct is false: temp >= -1
    //@ requires temp >= -1;
                      ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:128: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:12:) in method main
        isUgly(2);
              ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:12: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:128:
    public static boolean isUgly(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:5: verify: Precondition conjunct is false: n <= 1
    //@ requires n <= 1;
                   ^
6 verification failures

class UglyNum {
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        int temp = n;
        int[] factors = {2, 3, 5};
        int i = 0;
        for (i = 0; i < factors.length; i++) {
            __Loop_Invariant_Dummy1(n, temp, factors, i);
            int factor = factors[i];
            while (temp % factor == 0) {
                temp /= factor;
            }
        }
        __Loop_Invariant_Dummy1(n, temp, factors, i);
        return temp == 1;
    }

    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires temp > -1;
    //@ requires temp < n;
    //@ requires temp <= n;
    //@ requires temp == n;
    //@ requires temp != n;
    //@ requires temp >= n;
    //@ requires temp > n;
    //@ requires temp < factors.length;
    //@ requires temp <= factors.length;
    //@ requires temp == factors.length;
    //@ requires temp != factors.length;
    //@ requires temp >= factors.length;
    //@ requires temp > factors.length;
    //@ requires 3 < factors.length;
    //@ requires 3 <= factors.length;
    //@ requires 3 == factors.length;
    //@ requires 3 != factors.length;
    //@ requires 3 >= factors.length;
    //@ requires 3 > factors.length;
    //@ requires 1 < factors.length;
    //@ requires 1 <= factors.length;
    //@ requires 1 == factors.length;
    //@ requires 1 != factors.length;
    //@ requires 1 >= factors.length;
    //@ requires 1 > factors.length;
    //@ requires -1 < factors.length;
    //@ requires -1 <= factors.length;
    //@ requires -1 == factors.length;
    //@ requires -1 != factors.length;
    //@ requires -1 >= factors.length;
    //@ requires -1 > factors.length;
    //@ requires n < factors.length;
    //@ requires n <= factors.length;
    //@ requires n == factors.length;
    //@ requires n != factors.length;
    //@ requires n >= factors.length;
    //@ requires n > factors.length;
    //@ requires i < temp;
    //@ requires i <= temp;
    //@ requires i == temp;
    //@ requires i != temp;
    //@ requires i >= temp;
    //@ requires i > temp;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < factors.length;
    //@ requires i <= factors.length;
    //@ requires i == factors.length;
    //@ requires i != factors.length;
    //@ requires i >= factors.length;
    //@ requires i > factors.length;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isUgly(0);
        isUgly(1);
        isUgly(2);
        isUgly(3);
        isUgly(15);
        isUgly(-1);
        isUgly(-2);
        isUgly(-3);
		isUgly(4);
        isUgly(5);
        isUgly(7);
        isUgly(8);
		isUgly(13);
		isUgly(17);
		isUgly(12);
		isUgly(16);
    }
}


/home/max/Documents/JMLGPT/tmp/UglyNum.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:121:) in method isUgly
        __Loop_Invariant_Dummy1(n, temp, factors, i);
                               ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:121: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:26:
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:42: verify: Precondition conjunct is false: temp > -1
    //@ requires temp > -1;
                      ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:127: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:12:) in method main
        isUgly(2);
              ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:12: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:127:
    public static boolean isUgly(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:5: verify: Precondition conjunct is false: n <= 1
    //@ requires n <= 1;
                   ^
6 verification failures

class UglyNum {
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        int temp = n;
        int[] factors = {2, 3, 5};
        int i = 0;
        for (i = 0; i < factors.length; i++) {
            __Loop_Invariant_Dummy1(n, temp, factors, i);
            int factor = factors[i];
            while (temp % factor == 0) {
                temp /= factor;
            }
        }
        __Loop_Invariant_Dummy1(n, temp, factors, i);
        return temp == 1;
    }

    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires temp < n;
    //@ requires temp <= n;
    //@ requires temp == n;
    //@ requires temp != n;
    //@ requires temp >= n;
    //@ requires temp > n;
    //@ requires temp < factors.length;
    //@ requires temp <= factors.length;
    //@ requires temp == factors.length;
    //@ requires temp != factors.length;
    //@ requires temp >= factors.length;
    //@ requires temp > factors.length;
    //@ requires 3 < factors.length;
    //@ requires 3 <= factors.length;
    //@ requires 3 == factors.length;
    //@ requires 3 != factors.length;
    //@ requires 3 >= factors.length;
    //@ requires 3 > factors.length;
    //@ requires 1 < factors.length;
    //@ requires 1 <= factors.length;
    //@ requires 1 == factors.length;
    //@ requires 1 != factors.length;
    //@ requires 1 >= factors.length;
    //@ requires 1 > factors.length;
    //@ requires -1 < factors.length;
    //@ requires -1 <= factors.length;
    //@ requires -1 == factors.length;
    //@ requires -1 != factors.length;
    //@ requires -1 >= factors.length;
    //@ requires -1 > factors.length;
    //@ requires n < factors.length;
    //@ requires n <= factors.length;
    //@ requires n == factors.length;
    //@ requires n != factors.length;
    //@ requires n >= factors.length;
    //@ requires n > factors.length;
    //@ requires i < temp;
    //@ requires i <= temp;
    //@ requires i == temp;
    //@ requires i != temp;
    //@ requires i >= temp;
    //@ requires i > temp;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < factors.length;
    //@ requires i <= factors.length;
    //@ requires i == factors.length;
    //@ requires i != factors.length;
    //@ requires i >= factors.length;
    //@ requires i > factors.length;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isUgly(0);
        isUgly(1);
        isUgly(2);
        isUgly(3);
        isUgly(15);
        isUgly(-1);
        isUgly(-2);
        isUgly(-3);
		isUgly(4);
        isUgly(5);
        isUgly(7);
        isUgly(8);
		isUgly(13);
		isUgly(17);
		isUgly(12);
		isUgly(16);
    }
}


/home/max/Documents/JMLGPT/tmp/UglyNum.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:120:) in method isUgly
        __Loop_Invariant_Dummy1(n, temp, factors, i);
                               ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:120: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:26:
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:42: verify: Precondition conjunct is false: temp < n
    //@ requires temp < n;
                      ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:126: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:12:) in method main
        isUgly(2);
              ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:12: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:126:
    public static boolean isUgly(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:5: verify: Precondition conjunct is false: n <= 1
    //@ requires n <= 1;
                   ^
6 verification failures

class UglyNum {
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        int temp = n;
        int[] factors = {2, 3, 5};
        int i = 0;
        for (i = 0; i < factors.length; i++) {
            __Loop_Invariant_Dummy1(n, temp, factors, i);
            int factor = factors[i];
            while (temp % factor == 0) {
                temp /= factor;
            }
        }
        __Loop_Invariant_Dummy1(n, temp, factors, i);
        return temp == 1;
    }

    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires temp <= n;
    //@ requires temp == n;
    //@ requires temp != n;
    //@ requires temp >= n;
    //@ requires temp > n;
    //@ requires temp < factors.length;
    //@ requires temp <= factors.length;
    //@ requires temp == factors.length;
    //@ requires temp != factors.length;
    //@ requires temp >= factors.length;
    //@ requires temp > factors.length;
    //@ requires 3 < factors.length;
    //@ requires 3 <= factors.length;
    //@ requires 3 == factors.length;
    //@ requires 3 != factors.length;
    //@ requires 3 >= factors.length;
    //@ requires 3 > factors.length;
    //@ requires 1 < factors.length;
    //@ requires 1 <= factors.length;
    //@ requires 1 == factors.length;
    //@ requires 1 != factors.length;
    //@ requires 1 >= factors.length;
    //@ requires 1 > factors.length;
    //@ requires -1 < factors.length;
    //@ requires -1 <= factors.length;
    //@ requires -1 == factors.length;
    //@ requires -1 != factors.length;
    //@ requires -1 >= factors.length;
    //@ requires -1 > factors.length;
    //@ requires n < factors.length;
    //@ requires n <= factors.length;
    //@ requires n == factors.length;
    //@ requires n != factors.length;
    //@ requires n >= factors.length;
    //@ requires n > factors.length;
    //@ requires i < temp;
    //@ requires i <= temp;
    //@ requires i == temp;
    //@ requires i != temp;
    //@ requires i >= temp;
    //@ requires i > temp;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < factors.length;
    //@ requires i <= factors.length;
    //@ requires i == factors.length;
    //@ requires i != factors.length;
    //@ requires i >= factors.length;
    //@ requires i > factors.length;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isUgly(0);
        isUgly(1);
        isUgly(2);
        isUgly(3);
        isUgly(15);
        isUgly(-1);
        isUgly(-2);
        isUgly(-3);
		isUgly(4);
        isUgly(5);
        isUgly(7);
        isUgly(8);
		isUgly(13);
		isUgly(17);
		isUgly(12);
		isUgly(16);
    }
}


/home/max/Documents/JMLGPT/tmp/UglyNum.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:119:) in method isUgly
        __Loop_Invariant_Dummy1(n, temp, factors, i);
                               ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:119: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:26:
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:42: verify: Precondition conjunct is false: temp <= n
    //@ requires temp <= n;
                      ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:125: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:12:) in method main
        isUgly(2);
              ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:12: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:125:
    public static boolean isUgly(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:5: verify: Precondition conjunct is false: n <= 1
    //@ requires n <= 1;
                   ^
6 verification failures

class UglyNum {
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        int temp = n;
        int[] factors = {2, 3, 5};
        int i = 0;
        for (i = 0; i < factors.length; i++) {
            __Loop_Invariant_Dummy1(n, temp, factors, i);
            int factor = factors[i];
            while (temp % factor == 0) {
                temp /= factor;
            }
        }
        __Loop_Invariant_Dummy1(n, temp, factors, i);
        return temp == 1;
    }

    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires temp == n;
    //@ requires temp != n;
    //@ requires temp >= n;
    //@ requires temp > n;
    //@ requires temp < factors.length;
    //@ requires temp <= factors.length;
    //@ requires temp == factors.length;
    //@ requires temp != factors.length;
    //@ requires temp >= factors.length;
    //@ requires temp > factors.length;
    //@ requires 3 < factors.length;
    //@ requires 3 <= factors.length;
    //@ requires 3 == factors.length;
    //@ requires 3 != factors.length;
    //@ requires 3 >= factors.length;
    //@ requires 3 > factors.length;
    //@ requires 1 < factors.length;
    //@ requires 1 <= factors.length;
    //@ requires 1 == factors.length;
    //@ requires 1 != factors.length;
    //@ requires 1 >= factors.length;
    //@ requires 1 > factors.length;
    //@ requires -1 < factors.length;
    //@ requires -1 <= factors.length;
    //@ requires -1 == factors.length;
    //@ requires -1 != factors.length;
    //@ requires -1 >= factors.length;
    //@ requires -1 > factors.length;
    //@ requires n < factors.length;
    //@ requires n <= factors.length;
    //@ requires n == factors.length;
    //@ requires n != factors.length;
    //@ requires n >= factors.length;
    //@ requires n > factors.length;
    //@ requires i < temp;
    //@ requires i <= temp;
    //@ requires i == temp;
    //@ requires i != temp;
    //@ requires i >= temp;
    //@ requires i > temp;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < factors.length;
    //@ requires i <= factors.length;
    //@ requires i == factors.length;
    //@ requires i != factors.length;
    //@ requires i >= factors.length;
    //@ requires i > factors.length;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isUgly(0);
        isUgly(1);
        isUgly(2);
        isUgly(3);
        isUgly(15);
        isUgly(-1);
        isUgly(-2);
        isUgly(-3);
		isUgly(4);
        isUgly(5);
        isUgly(7);
        isUgly(8);
		isUgly(13);
		isUgly(17);
		isUgly(12);
		isUgly(16);
    }
}


/home/max/Documents/JMLGPT/tmp/UglyNum.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:118:) in method isUgly
        __Loop_Invariant_Dummy1(n, temp, factors, i);
                               ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:118: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:26:
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:42: verify: Precondition conjunct is false: temp == n
    //@ requires temp == n;
                      ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:124: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:12:) in method main
        isUgly(2);
              ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:12: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:124:
    public static boolean isUgly(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:5: verify: Precondition conjunct is false: n <= 1
    //@ requires n <= 1;
                   ^
6 verification failures

class UglyNum {
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        int temp = n;
        int[] factors = {2, 3, 5};
        int i = 0;
        for (i = 0; i < factors.length; i++) {
            __Loop_Invariant_Dummy1(n, temp, factors, i);
            int factor = factors[i];
            while (temp % factor == 0) {
                temp /= factor;
            }
        }
        __Loop_Invariant_Dummy1(n, temp, factors, i);
        return temp == 1;
    }

    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires temp != n;
    //@ requires temp >= n;
    //@ requires temp > n;
    //@ requires temp < factors.length;
    //@ requires temp <= factors.length;
    //@ requires temp == factors.length;
    //@ requires temp != factors.length;
    //@ requires temp >= factors.length;
    //@ requires temp > factors.length;
    //@ requires 3 < factors.length;
    //@ requires 3 <= factors.length;
    //@ requires 3 == factors.length;
    //@ requires 3 != factors.length;
    //@ requires 3 >= factors.length;
    //@ requires 3 > factors.length;
    //@ requires 1 < factors.length;
    //@ requires 1 <= factors.length;
    //@ requires 1 == factors.length;
    //@ requires 1 != factors.length;
    //@ requires 1 >= factors.length;
    //@ requires 1 > factors.length;
    //@ requires -1 < factors.length;
    //@ requires -1 <= factors.length;
    //@ requires -1 == factors.length;
    //@ requires -1 != factors.length;
    //@ requires -1 >= factors.length;
    //@ requires -1 > factors.length;
    //@ requires n < factors.length;
    //@ requires n <= factors.length;
    //@ requires n == factors.length;
    //@ requires n != factors.length;
    //@ requires n >= factors.length;
    //@ requires n > factors.length;
    //@ requires i < temp;
    //@ requires i <= temp;
    //@ requires i == temp;
    //@ requires i != temp;
    //@ requires i >= temp;
    //@ requires i > temp;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < factors.length;
    //@ requires i <= factors.length;
    //@ requires i == factors.length;
    //@ requires i != factors.length;
    //@ requires i >= factors.length;
    //@ requires i > factors.length;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isUgly(0);
        isUgly(1);
        isUgly(2);
        isUgly(3);
        isUgly(15);
        isUgly(-1);
        isUgly(-2);
        isUgly(-3);
		isUgly(4);
        isUgly(5);
        isUgly(7);
        isUgly(8);
		isUgly(13);
		isUgly(17);
		isUgly(12);
		isUgly(16);
    }
}


/home/max/Documents/JMLGPT/tmp/UglyNum.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:117:) in method isUgly
        __Loop_Invariant_Dummy1(n, temp, factors, i);
                               ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:117: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:26:
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:42: verify: Precondition conjunct is false: temp != n
    //@ requires temp != n;
                      ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:123: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:12:) in method main
        isUgly(2);
              ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:12: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:123:
    public static boolean isUgly(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:5: verify: Precondition conjunct is false: n <= 1
    //@ requires n <= 1;
                   ^
6 verification failures

class UglyNum {
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        int temp = n;
        int[] factors = {2, 3, 5};
        int i = 0;
        for (i = 0; i < factors.length; i++) {
            __Loop_Invariant_Dummy1(n, temp, factors, i);
            int factor = factors[i];
            while (temp % factor == 0) {
                temp /= factor;
            }
        }
        __Loop_Invariant_Dummy1(n, temp, factors, i);
        return temp == 1;
    }

    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires temp >= n;
    //@ requires temp > n;
    //@ requires temp < factors.length;
    //@ requires temp <= factors.length;
    //@ requires temp == factors.length;
    //@ requires temp != factors.length;
    //@ requires temp >= factors.length;
    //@ requires temp > factors.length;
    //@ requires 3 < factors.length;
    //@ requires 3 <= factors.length;
    //@ requires 3 == factors.length;
    //@ requires 3 != factors.length;
    //@ requires 3 >= factors.length;
    //@ requires 3 > factors.length;
    //@ requires 1 < factors.length;
    //@ requires 1 <= factors.length;
    //@ requires 1 == factors.length;
    //@ requires 1 != factors.length;
    //@ requires 1 >= factors.length;
    //@ requires 1 > factors.length;
    //@ requires -1 < factors.length;
    //@ requires -1 <= factors.length;
    //@ requires -1 == factors.length;
    //@ requires -1 != factors.length;
    //@ requires -1 >= factors.length;
    //@ requires -1 > factors.length;
    //@ requires n < factors.length;
    //@ requires n <= factors.length;
    //@ requires n == factors.length;
    //@ requires n != factors.length;
    //@ requires n >= factors.length;
    //@ requires n > factors.length;
    //@ requires i < temp;
    //@ requires i <= temp;
    //@ requires i == temp;
    //@ requires i != temp;
    //@ requires i >= temp;
    //@ requires i > temp;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < factors.length;
    //@ requires i <= factors.length;
    //@ requires i == factors.length;
    //@ requires i != factors.length;
    //@ requires i >= factors.length;
    //@ requires i > factors.length;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isUgly(0);
        isUgly(1);
        isUgly(2);
        isUgly(3);
        isUgly(15);
        isUgly(-1);
        isUgly(-2);
        isUgly(-3);
		isUgly(4);
        isUgly(5);
        isUgly(7);
        isUgly(8);
		isUgly(13);
		isUgly(17);
		isUgly(12);
		isUgly(16);
    }
}


/home/max/Documents/JMLGPT/tmp/UglyNum.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:116:) in method isUgly
        __Loop_Invariant_Dummy1(n, temp, factors, i);
                               ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:116: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:26:
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:42: verify: Precondition conjunct is false: temp >= n
    //@ requires temp >= n;
                      ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:122: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:12:) in method main
        isUgly(2);
              ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:12: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:122:
    public static boolean isUgly(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:5: verify: Precondition conjunct is false: n <= 1
    //@ requires n <= 1;
                   ^
6 verification failures

class UglyNum {
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        int temp = n;
        int[] factors = {2, 3, 5};
        int i = 0;
        for (i = 0; i < factors.length; i++) {
            __Loop_Invariant_Dummy1(n, temp, factors, i);
            int factor = factors[i];
            while (temp % factor == 0) {
                temp /= factor;
            }
        }
        __Loop_Invariant_Dummy1(n, temp, factors, i);
        return temp == 1;
    }

    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires temp > n;
    //@ requires temp < factors.length;
    //@ requires temp <= factors.length;
    //@ requires temp == factors.length;
    //@ requires temp != factors.length;
    //@ requires temp >= factors.length;
    //@ requires temp > factors.length;
    //@ requires 3 < factors.length;
    //@ requires 3 <= factors.length;
    //@ requires 3 == factors.length;
    //@ requires 3 != factors.length;
    //@ requires 3 >= factors.length;
    //@ requires 3 > factors.length;
    //@ requires 1 < factors.length;
    //@ requires 1 <= factors.length;
    //@ requires 1 == factors.length;
    //@ requires 1 != factors.length;
    //@ requires 1 >= factors.length;
    //@ requires 1 > factors.length;
    //@ requires -1 < factors.length;
    //@ requires -1 <= factors.length;
    //@ requires -1 == factors.length;
    //@ requires -1 != factors.length;
    //@ requires -1 >= factors.length;
    //@ requires -1 > factors.length;
    //@ requires n < factors.length;
    //@ requires n <= factors.length;
    //@ requires n == factors.length;
    //@ requires n != factors.length;
    //@ requires n >= factors.length;
    //@ requires n > factors.length;
    //@ requires i < temp;
    //@ requires i <= temp;
    //@ requires i == temp;
    //@ requires i != temp;
    //@ requires i >= temp;
    //@ requires i > temp;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < factors.length;
    //@ requires i <= factors.length;
    //@ requires i == factors.length;
    //@ requires i != factors.length;
    //@ requires i >= factors.length;
    //@ requires i > factors.length;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isUgly(0);
        isUgly(1);
        isUgly(2);
        isUgly(3);
        isUgly(15);
        isUgly(-1);
        isUgly(-2);
        isUgly(-3);
		isUgly(4);
        isUgly(5);
        isUgly(7);
        isUgly(8);
		isUgly(13);
		isUgly(17);
		isUgly(12);
		isUgly(16);
    }
}


/home/max/Documents/JMLGPT/tmp/UglyNum.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:115:) in method isUgly
        __Loop_Invariant_Dummy1(n, temp, factors, i);
                               ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:115: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:26:
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:42: verify: Precondition conjunct is false: temp > n
    //@ requires temp > n;
                      ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:121: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:12:) in method main
        isUgly(2);
              ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:12: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:121:
    public static boolean isUgly(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:5: verify: Precondition conjunct is false: n <= 1
    //@ requires n <= 1;
                   ^
6 verification failures

class UglyNum {
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        int temp = n;
        int[] factors = {2, 3, 5};
        int i = 0;
        for (i = 0; i < factors.length; i++) {
            __Loop_Invariant_Dummy1(n, temp, factors, i);
            int factor = factors[i];
            while (temp % factor == 0) {
                temp /= factor;
            }
        }
        __Loop_Invariant_Dummy1(n, temp, factors, i);
        return temp == 1;
    }

    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires temp < factors.length;
    //@ requires temp <= factors.length;
    //@ requires temp == factors.length;
    //@ requires temp != factors.length;
    //@ requires temp >= factors.length;
    //@ requires temp > factors.length;
    //@ requires 3 < factors.length;
    //@ requires 3 <= factors.length;
    //@ requires 3 == factors.length;
    //@ requires 3 != factors.length;
    //@ requires 3 >= factors.length;
    //@ requires 3 > factors.length;
    //@ requires 1 < factors.length;
    //@ requires 1 <= factors.length;
    //@ requires 1 == factors.length;
    //@ requires 1 != factors.length;
    //@ requires 1 >= factors.length;
    //@ requires 1 > factors.length;
    //@ requires -1 < factors.length;
    //@ requires -1 <= factors.length;
    //@ requires -1 == factors.length;
    //@ requires -1 != factors.length;
    //@ requires -1 >= factors.length;
    //@ requires -1 > factors.length;
    //@ requires n < factors.length;
    //@ requires n <= factors.length;
    //@ requires n == factors.length;
    //@ requires n != factors.length;
    //@ requires n >= factors.length;
    //@ requires n > factors.length;
    //@ requires i < temp;
    //@ requires i <= temp;
    //@ requires i == temp;
    //@ requires i != temp;
    //@ requires i >= temp;
    //@ requires i > temp;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < factors.length;
    //@ requires i <= factors.length;
    //@ requires i == factors.length;
    //@ requires i != factors.length;
    //@ requires i >= factors.length;
    //@ requires i > factors.length;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isUgly(0);
        isUgly(1);
        isUgly(2);
        isUgly(3);
        isUgly(15);
        isUgly(-1);
        isUgly(-2);
        isUgly(-3);
		isUgly(4);
        isUgly(5);
        isUgly(7);
        isUgly(8);
		isUgly(13);
		isUgly(17);
		isUgly(12);
		isUgly(16);
    }
}


/home/max/Documents/JMLGPT/tmp/UglyNum.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:114:) in method isUgly
        __Loop_Invariant_Dummy1(n, temp, factors, i);
                               ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:114: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:26:
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:42: verify: Precondition conjunct is false: temp < factors.length
    //@ requires temp < factors.length;
                      ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:120: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:12:) in method main
        isUgly(2);
              ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:12: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:120:
    public static boolean isUgly(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:5: verify: Precondition conjunct is false: n <= 1
    //@ requires n <= 1;
                   ^
6 verification failures

class UglyNum {
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        int temp = n;
        int[] factors = {2, 3, 5};
        int i = 0;
        for (i = 0; i < factors.length; i++) {
            __Loop_Invariant_Dummy1(n, temp, factors, i);
            int factor = factors[i];
            while (temp % factor == 0) {
                temp /= factor;
            }
        }
        __Loop_Invariant_Dummy1(n, temp, factors, i);
        return temp == 1;
    }

    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires temp <= factors.length;
    //@ requires temp == factors.length;
    //@ requires temp != factors.length;
    //@ requires temp >= factors.length;
    //@ requires temp > factors.length;
    //@ requires 3 < factors.length;
    //@ requires 3 <= factors.length;
    //@ requires 3 == factors.length;
    //@ requires 3 != factors.length;
    //@ requires 3 >= factors.length;
    //@ requires 3 > factors.length;
    //@ requires 1 < factors.length;
    //@ requires 1 <= factors.length;
    //@ requires 1 == factors.length;
    //@ requires 1 != factors.length;
    //@ requires 1 >= factors.length;
    //@ requires 1 > factors.length;
    //@ requires -1 < factors.length;
    //@ requires -1 <= factors.length;
    //@ requires -1 == factors.length;
    //@ requires -1 != factors.length;
    //@ requires -1 >= factors.length;
    //@ requires -1 > factors.length;
    //@ requires n < factors.length;
    //@ requires n <= factors.length;
    //@ requires n == factors.length;
    //@ requires n != factors.length;
    //@ requires n >= factors.length;
    //@ requires n > factors.length;
    //@ requires i < temp;
    //@ requires i <= temp;
    //@ requires i == temp;
    //@ requires i != temp;
    //@ requires i >= temp;
    //@ requires i > temp;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < factors.length;
    //@ requires i <= factors.length;
    //@ requires i == factors.length;
    //@ requires i != factors.length;
    //@ requires i >= factors.length;
    //@ requires i > factors.length;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isUgly(0);
        isUgly(1);
        isUgly(2);
        isUgly(3);
        isUgly(15);
        isUgly(-1);
        isUgly(-2);
        isUgly(-3);
		isUgly(4);
        isUgly(5);
        isUgly(7);
        isUgly(8);
		isUgly(13);
		isUgly(17);
		isUgly(12);
		isUgly(16);
    }
}


/home/max/Documents/JMLGPT/tmp/UglyNum.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:113:) in method isUgly
        __Loop_Invariant_Dummy1(n, temp, factors, i);
                               ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:113: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:26:
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:42: verify: Precondition conjunct is false: temp <= factors.length
    //@ requires temp <= factors.length;
                      ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:119: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:12:) in method main
        isUgly(2);
              ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:12: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:119:
    public static boolean isUgly(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:5: verify: Precondition conjunct is false: n <= 1
    //@ requires n <= 1;
                   ^
6 verification failures

class UglyNum {
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        int temp = n;
        int[] factors = {2, 3, 5};
        int i = 0;
        for (i = 0; i < factors.length; i++) {
            __Loop_Invariant_Dummy1(n, temp, factors, i);
            int factor = factors[i];
            while (temp % factor == 0) {
                temp /= factor;
            }
        }
        __Loop_Invariant_Dummy1(n, temp, factors, i);
        return temp == 1;
    }

    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires temp == factors.length;
    //@ requires temp != factors.length;
    //@ requires temp >= factors.length;
    //@ requires temp > factors.length;
    //@ requires 3 < factors.length;
    //@ requires 3 <= factors.length;
    //@ requires 3 == factors.length;
    //@ requires 3 != factors.length;
    //@ requires 3 >= factors.length;
    //@ requires 3 > factors.length;
    //@ requires 1 < factors.length;
    //@ requires 1 <= factors.length;
    //@ requires 1 == factors.length;
    //@ requires 1 != factors.length;
    //@ requires 1 >= factors.length;
    //@ requires 1 > factors.length;
    //@ requires -1 < factors.length;
    //@ requires -1 <= factors.length;
    //@ requires -1 == factors.length;
    //@ requires -1 != factors.length;
    //@ requires -1 >= factors.length;
    //@ requires -1 > factors.length;
    //@ requires n < factors.length;
    //@ requires n <= factors.length;
    //@ requires n == factors.length;
    //@ requires n != factors.length;
    //@ requires n >= factors.length;
    //@ requires n > factors.length;
    //@ requires i < temp;
    //@ requires i <= temp;
    //@ requires i == temp;
    //@ requires i != temp;
    //@ requires i >= temp;
    //@ requires i > temp;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < factors.length;
    //@ requires i <= factors.length;
    //@ requires i == factors.length;
    //@ requires i != factors.length;
    //@ requires i >= factors.length;
    //@ requires i > factors.length;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isUgly(0);
        isUgly(1);
        isUgly(2);
        isUgly(3);
        isUgly(15);
        isUgly(-1);
        isUgly(-2);
        isUgly(-3);
		isUgly(4);
        isUgly(5);
        isUgly(7);
        isUgly(8);
		isUgly(13);
		isUgly(17);
		isUgly(12);
		isUgly(16);
    }
}


/home/max/Documents/JMLGPT/tmp/UglyNum.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:112:) in method isUgly
        __Loop_Invariant_Dummy1(n, temp, factors, i);
                               ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:112: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:26:
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:42: verify: Precondition conjunct is false: temp == factors.length
    //@ requires temp == factors.length;
                      ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:118: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:12:) in method main
        isUgly(2);
              ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:12: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:118:
    public static boolean isUgly(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:5: verify: Precondition conjunct is false: n <= 1
    //@ requires n <= 1;
                   ^
6 verification failures

class UglyNum {
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        int temp = n;
        int[] factors = {2, 3, 5};
        int i = 0;
        for (i = 0; i < factors.length; i++) {
            __Loop_Invariant_Dummy1(n, temp, factors, i);
            int factor = factors[i];
            while (temp % factor == 0) {
                temp /= factor;
            }
        }
        __Loop_Invariant_Dummy1(n, temp, factors, i);
        return temp == 1;
    }

    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires temp != factors.length;
    //@ requires temp >= factors.length;
    //@ requires temp > factors.length;
    //@ requires 3 < factors.length;
    //@ requires 3 <= factors.length;
    //@ requires 3 == factors.length;
    //@ requires 3 != factors.length;
    //@ requires 3 >= factors.length;
    //@ requires 3 > factors.length;
    //@ requires 1 < factors.length;
    //@ requires 1 <= factors.length;
    //@ requires 1 == factors.length;
    //@ requires 1 != factors.length;
    //@ requires 1 >= factors.length;
    //@ requires 1 > factors.length;
    //@ requires -1 < factors.length;
    //@ requires -1 <= factors.length;
    //@ requires -1 == factors.length;
    //@ requires -1 != factors.length;
    //@ requires -1 >= factors.length;
    //@ requires -1 > factors.length;
    //@ requires n < factors.length;
    //@ requires n <= factors.length;
    //@ requires n == factors.length;
    //@ requires n != factors.length;
    //@ requires n >= factors.length;
    //@ requires n > factors.length;
    //@ requires i < temp;
    //@ requires i <= temp;
    //@ requires i == temp;
    //@ requires i != temp;
    //@ requires i >= temp;
    //@ requires i > temp;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < factors.length;
    //@ requires i <= factors.length;
    //@ requires i == factors.length;
    //@ requires i != factors.length;
    //@ requires i >= factors.length;
    //@ requires i > factors.length;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isUgly(0);
        isUgly(1);
        isUgly(2);
        isUgly(3);
        isUgly(15);
        isUgly(-1);
        isUgly(-2);
        isUgly(-3);
		isUgly(4);
        isUgly(5);
        isUgly(7);
        isUgly(8);
		isUgly(13);
		isUgly(17);
		isUgly(12);
		isUgly(16);
    }
}


/home/max/Documents/JMLGPT/tmp/UglyNum.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:111:) in method isUgly
        __Loop_Invariant_Dummy1(n, temp, factors, i);
                               ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:111: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:26:
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:42: verify: Precondition conjunct is false: temp != factors.length
    //@ requires temp != factors.length;
                      ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:117: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:12:) in method main
        isUgly(2);
              ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:12: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:117:
    public static boolean isUgly(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:5: verify: Precondition conjunct is false: n <= 1
    //@ requires n <= 1;
                   ^
6 verification failures

class UglyNum {
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        int temp = n;
        int[] factors = {2, 3, 5};
        int i = 0;
        for (i = 0; i < factors.length; i++) {
            __Loop_Invariant_Dummy1(n, temp, factors, i);
            int factor = factors[i];
            while (temp % factor == 0) {
                temp /= factor;
            }
        }
        __Loop_Invariant_Dummy1(n, temp, factors, i);
        return temp == 1;
    }

    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires temp >= factors.length;
    //@ requires temp > factors.length;
    //@ requires 3 < factors.length;
    //@ requires 3 <= factors.length;
    //@ requires 3 == factors.length;
    //@ requires 3 != factors.length;
    //@ requires 3 >= factors.length;
    //@ requires 3 > factors.length;
    //@ requires 1 < factors.length;
    //@ requires 1 <= factors.length;
    //@ requires 1 == factors.length;
    //@ requires 1 != factors.length;
    //@ requires 1 >= factors.length;
    //@ requires 1 > factors.length;
    //@ requires -1 < factors.length;
    //@ requires -1 <= factors.length;
    //@ requires -1 == factors.length;
    //@ requires -1 != factors.length;
    //@ requires -1 >= factors.length;
    //@ requires -1 > factors.length;
    //@ requires n < factors.length;
    //@ requires n <= factors.length;
    //@ requires n == factors.length;
    //@ requires n != factors.length;
    //@ requires n >= factors.length;
    //@ requires n > factors.length;
    //@ requires i < temp;
    //@ requires i <= temp;
    //@ requires i == temp;
    //@ requires i != temp;
    //@ requires i >= temp;
    //@ requires i > temp;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < factors.length;
    //@ requires i <= factors.length;
    //@ requires i == factors.length;
    //@ requires i != factors.length;
    //@ requires i >= factors.length;
    //@ requires i > factors.length;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isUgly(0);
        isUgly(1);
        isUgly(2);
        isUgly(3);
        isUgly(15);
        isUgly(-1);
        isUgly(-2);
        isUgly(-3);
		isUgly(4);
        isUgly(5);
        isUgly(7);
        isUgly(8);
		isUgly(13);
		isUgly(17);
		isUgly(12);
		isUgly(16);
    }
}


/home/max/Documents/JMLGPT/tmp/UglyNum.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:110:) in method isUgly
        __Loop_Invariant_Dummy1(n, temp, factors, i);
                               ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:110: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:26:
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:42: verify: Precondition conjunct is false: temp >= factors.length
    //@ requires temp >= factors.length;
                      ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:116: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:12:) in method main
        isUgly(2);
              ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:12: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:116:
    public static boolean isUgly(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:5: verify: Precondition conjunct is false: n <= 1
    //@ requires n <= 1;
                   ^
6 verification failures

class UglyNum {
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        int temp = n;
        int[] factors = {2, 3, 5};
        int i = 0;
        for (i = 0; i < factors.length; i++) {
            __Loop_Invariant_Dummy1(n, temp, factors, i);
            int factor = factors[i];
            while (temp % factor == 0) {
                temp /= factor;
            }
        }
        __Loop_Invariant_Dummy1(n, temp, factors, i);
        return temp == 1;
    }

    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires temp > factors.length;
    //@ requires 3 < factors.length;
    //@ requires 3 <= factors.length;
    //@ requires 3 == factors.length;
    //@ requires 3 != factors.length;
    //@ requires 3 >= factors.length;
    //@ requires 3 > factors.length;
    //@ requires 1 < factors.length;
    //@ requires 1 <= factors.length;
    //@ requires 1 == factors.length;
    //@ requires 1 != factors.length;
    //@ requires 1 >= factors.length;
    //@ requires 1 > factors.length;
    //@ requires -1 < factors.length;
    //@ requires -1 <= factors.length;
    //@ requires -1 == factors.length;
    //@ requires -1 != factors.length;
    //@ requires -1 >= factors.length;
    //@ requires -1 > factors.length;
    //@ requires n < factors.length;
    //@ requires n <= factors.length;
    //@ requires n == factors.length;
    //@ requires n != factors.length;
    //@ requires n >= factors.length;
    //@ requires n > factors.length;
    //@ requires i < temp;
    //@ requires i <= temp;
    //@ requires i == temp;
    //@ requires i != temp;
    //@ requires i >= temp;
    //@ requires i > temp;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < factors.length;
    //@ requires i <= factors.length;
    //@ requires i == factors.length;
    //@ requires i != factors.length;
    //@ requires i >= factors.length;
    //@ requires i > factors.length;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isUgly(0);
        isUgly(1);
        isUgly(2);
        isUgly(3);
        isUgly(15);
        isUgly(-1);
        isUgly(-2);
        isUgly(-3);
		isUgly(4);
        isUgly(5);
        isUgly(7);
        isUgly(8);
		isUgly(13);
		isUgly(17);
		isUgly(12);
		isUgly(16);
    }
}


/home/max/Documents/JMLGPT/tmp/UglyNum.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:109:) in method isUgly
        __Loop_Invariant_Dummy1(n, temp, factors, i);
                               ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:109: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:26:
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:42: verify: Precondition conjunct is false: temp > factors.length
    //@ requires temp > factors.length;
                      ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:115: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:12:) in method main
        isUgly(2);
              ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:12: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:115:
    public static boolean isUgly(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:5: verify: Precondition conjunct is false: n <= 1
    //@ requires n <= 1;
                   ^
6 verification failures

class UglyNum {
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        int temp = n;
        int[] factors = {2, 3, 5};
        int i = 0;
        for (i = 0; i < factors.length; i++) {
            __Loop_Invariant_Dummy1(n, temp, factors, i);
            int factor = factors[i];
            while (temp % factor == 0) {
                temp /= factor;
            }
        }
        __Loop_Invariant_Dummy1(n, temp, factors, i);
        return temp == 1;
    }

    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires 3 < factors.length;
    //@ requires 3 <= factors.length;
    //@ requires 3 == factors.length;
    //@ requires 3 != factors.length;
    //@ requires 3 >= factors.length;
    //@ requires 3 > factors.length;
    //@ requires 1 < factors.length;
    //@ requires 1 <= factors.length;
    //@ requires 1 == factors.length;
    //@ requires 1 != factors.length;
    //@ requires 1 >= factors.length;
    //@ requires 1 > factors.length;
    //@ requires -1 < factors.length;
    //@ requires -1 <= factors.length;
    //@ requires -1 == factors.length;
    //@ requires -1 != factors.length;
    //@ requires -1 >= factors.length;
    //@ requires -1 > factors.length;
    //@ requires n < factors.length;
    //@ requires n <= factors.length;
    //@ requires n == factors.length;
    //@ requires n != factors.length;
    //@ requires n >= factors.length;
    //@ requires n > factors.length;
    //@ requires i < temp;
    //@ requires i <= temp;
    //@ requires i == temp;
    //@ requires i != temp;
    //@ requires i >= temp;
    //@ requires i > temp;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < factors.length;
    //@ requires i <= factors.length;
    //@ requires i == factors.length;
    //@ requires i != factors.length;
    //@ requires i >= factors.length;
    //@ requires i > factors.length;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isUgly(0);
        isUgly(1);
        isUgly(2);
        isUgly(3);
        isUgly(15);
        isUgly(-1);
        isUgly(-2);
        isUgly(-3);
		isUgly(4);
        isUgly(5);
        isUgly(7);
        isUgly(8);
		isUgly(13);
		isUgly(17);
		isUgly(12);
		isUgly(16);
    }
}


/home/max/Documents/JMLGPT/tmp/UglyNum.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:108:) in method isUgly
        __Loop_Invariant_Dummy1(n, temp, factors, i);
                               ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:108: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:26:
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:42: verify: Precondition conjunct is false: 3 < factors.length
    //@ requires 3 < factors.length;
                   ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:114: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:12:) in method main
        isUgly(2);
              ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:12: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:114:
    public static boolean isUgly(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:5: verify: Precondition conjunct is false: n <= 1
    //@ requires n <= 1;
                   ^
6 verification failures

class UglyNum {
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        int temp = n;
        int[] factors = {2, 3, 5};
        int i = 0;
        for (i = 0; i < factors.length; i++) {
            __Loop_Invariant_Dummy1(n, temp, factors, i);
            int factor = factors[i];
            while (temp % factor == 0) {
                temp /= factor;
            }
        }
        __Loop_Invariant_Dummy1(n, temp, factors, i);
        return temp == 1;
    }

    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires 3 <= factors.length;
    //@ requires 3 == factors.length;
    //@ requires 3 != factors.length;
    //@ requires 3 >= factors.length;
    //@ requires 3 > factors.length;
    //@ requires 1 < factors.length;
    //@ requires 1 <= factors.length;
    //@ requires 1 == factors.length;
    //@ requires 1 != factors.length;
    //@ requires 1 >= factors.length;
    //@ requires 1 > factors.length;
    //@ requires -1 < factors.length;
    //@ requires -1 <= factors.length;
    //@ requires -1 == factors.length;
    //@ requires -1 != factors.length;
    //@ requires -1 >= factors.length;
    //@ requires -1 > factors.length;
    //@ requires n < factors.length;
    //@ requires n <= factors.length;
    //@ requires n == factors.length;
    //@ requires n != factors.length;
    //@ requires n >= factors.length;
    //@ requires n > factors.length;
    //@ requires i < temp;
    //@ requires i <= temp;
    //@ requires i == temp;
    //@ requires i != temp;
    //@ requires i >= temp;
    //@ requires i > temp;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < factors.length;
    //@ requires i <= factors.length;
    //@ requires i == factors.length;
    //@ requires i != factors.length;
    //@ requires i >= factors.length;
    //@ requires i > factors.length;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isUgly(0);
        isUgly(1);
        isUgly(2);
        isUgly(3);
        isUgly(15);
        isUgly(-1);
        isUgly(-2);
        isUgly(-3);
		isUgly(4);
        isUgly(5);
        isUgly(7);
        isUgly(8);
		isUgly(13);
		isUgly(17);
		isUgly(12);
		isUgly(16);
    }
}


/home/max/Documents/JMLGPT/tmp/UglyNum.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:107:) in method isUgly
        __Loop_Invariant_Dummy1(n, temp, factors, i);
                               ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:107: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:26:
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:44: verify: Precondition conjunct is false: 3 != factors.length
    //@ requires 3 != factors.length;
                   ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:113: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:12:) in method main
        isUgly(2);
              ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:12: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:113:
    public static boolean isUgly(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:5: verify: Precondition conjunct is false: n <= 1
    //@ requires n <= 1;
                   ^
6 verification failures

class UglyNum {
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        int temp = n;
        int[] factors = {2, 3, 5};
        int i = 0;
        for (i = 0; i < factors.length; i++) {
            __Loop_Invariant_Dummy1(n, temp, factors, i);
            int factor = factors[i];
            while (temp % factor == 0) {
                temp /= factor;
            }
        }
        __Loop_Invariant_Dummy1(n, temp, factors, i);
        return temp == 1;
    }

    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires 3 <= factors.length;
    //@ requires 3 == factors.length;
    //@ requires 3 >= factors.length;
    //@ requires 3 > factors.length;
    //@ requires 1 < factors.length;
    //@ requires 1 <= factors.length;
    //@ requires 1 == factors.length;
    //@ requires 1 != factors.length;
    //@ requires 1 >= factors.length;
    //@ requires 1 > factors.length;
    //@ requires -1 < factors.length;
    //@ requires -1 <= factors.length;
    //@ requires -1 == factors.length;
    //@ requires -1 != factors.length;
    //@ requires -1 >= factors.length;
    //@ requires -1 > factors.length;
    //@ requires n < factors.length;
    //@ requires n <= factors.length;
    //@ requires n == factors.length;
    //@ requires n != factors.length;
    //@ requires n >= factors.length;
    //@ requires n > factors.length;
    //@ requires i < temp;
    //@ requires i <= temp;
    //@ requires i == temp;
    //@ requires i != temp;
    //@ requires i >= temp;
    //@ requires i > temp;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < factors.length;
    //@ requires i <= factors.length;
    //@ requires i == factors.length;
    //@ requires i != factors.length;
    //@ requires i >= factors.length;
    //@ requires i > factors.length;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isUgly(0);
        isUgly(1);
        isUgly(2);
        isUgly(3);
        isUgly(15);
        isUgly(-1);
        isUgly(-2);
        isUgly(-3);
		isUgly(4);
        isUgly(5);
        isUgly(7);
        isUgly(8);
		isUgly(13);
		isUgly(17);
		isUgly(12);
		isUgly(16);
    }
}


/home/max/Documents/JMLGPT/tmp/UglyNum.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:106:) in method isUgly
        __Loop_Invariant_Dummy1(n, temp, factors, i);
                               ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:106: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:26:
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:45: verify: Precondition conjunct is false: 3 > factors.length
    //@ requires 3 > factors.length;
                   ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:112: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:12:) in method main
        isUgly(2);
              ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:12: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:112:
    public static boolean isUgly(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:5: verify: Precondition conjunct is false: n <= 1
    //@ requires n <= 1;
                   ^
6 verification failures

class UglyNum {
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        int temp = n;
        int[] factors = {2, 3, 5};
        int i = 0;
        for (i = 0; i < factors.length; i++) {
            __Loop_Invariant_Dummy1(n, temp, factors, i);
            int factor = factors[i];
            while (temp % factor == 0) {
                temp /= factor;
            }
        }
        __Loop_Invariant_Dummy1(n, temp, factors, i);
        return temp == 1;
    }

    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires 3 <= factors.length;
    //@ requires 3 == factors.length;
    //@ requires 3 >= factors.length;
    //@ requires 1 < factors.length;
    //@ requires 1 <= factors.length;
    //@ requires 1 == factors.length;
    //@ requires 1 != factors.length;
    //@ requires 1 >= factors.length;
    //@ requires 1 > factors.length;
    //@ requires -1 < factors.length;
    //@ requires -1 <= factors.length;
    //@ requires -1 == factors.length;
    //@ requires -1 != factors.length;
    //@ requires -1 >= factors.length;
    //@ requires -1 > factors.length;
    //@ requires n < factors.length;
    //@ requires n <= factors.length;
    //@ requires n == factors.length;
    //@ requires n != factors.length;
    //@ requires n >= factors.length;
    //@ requires n > factors.length;
    //@ requires i < temp;
    //@ requires i <= temp;
    //@ requires i == temp;
    //@ requires i != temp;
    //@ requires i >= temp;
    //@ requires i > temp;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < factors.length;
    //@ requires i <= factors.length;
    //@ requires i == factors.length;
    //@ requires i != factors.length;
    //@ requires i >= factors.length;
    //@ requires i > factors.length;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isUgly(0);
        isUgly(1);
        isUgly(2);
        isUgly(3);
        isUgly(15);
        isUgly(-1);
        isUgly(-2);
        isUgly(-3);
		isUgly(4);
        isUgly(5);
        isUgly(7);
        isUgly(8);
		isUgly(13);
		isUgly(17);
		isUgly(12);
		isUgly(16);
    }
}


/home/max/Documents/JMLGPT/tmp/UglyNum.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:105:) in method isUgly
        __Loop_Invariant_Dummy1(n, temp, factors, i);
                               ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:105: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:26:
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:47: verify: Precondition conjunct is false: 1 == factors.length
    //@ requires 1 == factors.length;
                   ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:111: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:12:) in method main
        isUgly(2);
              ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:12: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:111:
    public static boolean isUgly(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:5: verify: Precondition conjunct is false: n <= 1
    //@ requires n <= 1;
                   ^
6 verification failures

class UglyNum {
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        int temp = n;
        int[] factors = {2, 3, 5};
        int i = 0;
        for (i = 0; i < factors.length; i++) {
            __Loop_Invariant_Dummy1(n, temp, factors, i);
            int factor = factors[i];
            while (temp % factor == 0) {
                temp /= factor;
            }
        }
        __Loop_Invariant_Dummy1(n, temp, factors, i);
        return temp == 1;
    }

    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires 3 <= factors.length;
    //@ requires 3 == factors.length;
    //@ requires 3 >= factors.length;
    //@ requires 1 < factors.length;
    //@ requires 1 <= factors.length;
    //@ requires 1 != factors.length;
    //@ requires 1 >= factors.length;
    //@ requires 1 > factors.length;
    //@ requires -1 < factors.length;
    //@ requires -1 <= factors.length;
    //@ requires -1 == factors.length;
    //@ requires -1 != factors.length;
    //@ requires -1 >= factors.length;
    //@ requires -1 > factors.length;
    //@ requires n < factors.length;
    //@ requires n <= factors.length;
    //@ requires n == factors.length;
    //@ requires n != factors.length;
    //@ requires n >= factors.length;
    //@ requires n > factors.length;
    //@ requires i < temp;
    //@ requires i <= temp;
    //@ requires i == temp;
    //@ requires i != temp;
    //@ requires i >= temp;
    //@ requires i > temp;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < factors.length;
    //@ requires i <= factors.length;
    //@ requires i == factors.length;
    //@ requires i != factors.length;
    //@ requires i >= factors.length;
    //@ requires i > factors.length;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isUgly(0);
        isUgly(1);
        isUgly(2);
        isUgly(3);
        isUgly(15);
        isUgly(-1);
        isUgly(-2);
        isUgly(-3);
		isUgly(4);
        isUgly(5);
        isUgly(7);
        isUgly(8);
		isUgly(13);
		isUgly(17);
		isUgly(12);
		isUgly(16);
    }
}


/home/max/Documents/JMLGPT/tmp/UglyNum.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:104:) in method isUgly
        __Loop_Invariant_Dummy1(n, temp, factors, i);
                               ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:104: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:26:
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:48: verify: Precondition conjunct is false: 1 >= factors.length
    //@ requires 1 >= factors.length;
                   ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:110: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:12:) in method main
        isUgly(2);
              ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:12: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:110:
    public static boolean isUgly(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:5: verify: Precondition conjunct is false: n <= 1
    //@ requires n <= 1;
                   ^
6 verification failures

class UglyNum {
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        int temp = n;
        int[] factors = {2, 3, 5};
        int i = 0;
        for (i = 0; i < factors.length; i++) {
            __Loop_Invariant_Dummy1(n, temp, factors, i);
            int factor = factors[i];
            while (temp % factor == 0) {
                temp /= factor;
            }
        }
        __Loop_Invariant_Dummy1(n, temp, factors, i);
        return temp == 1;
    }

    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires 3 <= factors.length;
    //@ requires 3 == factors.length;
    //@ requires 3 >= factors.length;
    //@ requires 1 < factors.length;
    //@ requires 1 <= factors.length;
    //@ requires 1 != factors.length;
    //@ requires 1 > factors.length;
    //@ requires -1 < factors.length;
    //@ requires -1 <= factors.length;
    //@ requires -1 == factors.length;
    //@ requires -1 != factors.length;
    //@ requires -1 >= factors.length;
    //@ requires -1 > factors.length;
    //@ requires n < factors.length;
    //@ requires n <= factors.length;
    //@ requires n == factors.length;
    //@ requires n != factors.length;
    //@ requires n >= factors.length;
    //@ requires n > factors.length;
    //@ requires i < temp;
    //@ requires i <= temp;
    //@ requires i == temp;
    //@ requires i != temp;
    //@ requires i >= temp;
    //@ requires i > temp;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < factors.length;
    //@ requires i <= factors.length;
    //@ requires i == factors.length;
    //@ requires i != factors.length;
    //@ requires i >= factors.length;
    //@ requires i > factors.length;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isUgly(0);
        isUgly(1);
        isUgly(2);
        isUgly(3);
        isUgly(15);
        isUgly(-1);
        isUgly(-2);
        isUgly(-3);
		isUgly(4);
        isUgly(5);
        isUgly(7);
        isUgly(8);
		isUgly(13);
		isUgly(17);
		isUgly(12);
		isUgly(16);
    }
}


/home/max/Documents/JMLGPT/tmp/UglyNum.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:103:) in method isUgly
        __Loop_Invariant_Dummy1(n, temp, factors, i);
                               ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:103: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:26:
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:48: verify: Precondition conjunct is false: 1 > factors.length
    //@ requires 1 > factors.length;
                   ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:109: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:12:) in method main
        isUgly(2);
              ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:12: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:109:
    public static boolean isUgly(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:5: verify: Precondition conjunct is false: n <= 1
    //@ requires n <= 1;
                   ^
6 verification failures

class UglyNum {
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        int temp = n;
        int[] factors = {2, 3, 5};
        int i = 0;
        for (i = 0; i < factors.length; i++) {
            __Loop_Invariant_Dummy1(n, temp, factors, i);
            int factor = factors[i];
            while (temp % factor == 0) {
                temp /= factor;
            }
        }
        __Loop_Invariant_Dummy1(n, temp, factors, i);
        return temp == 1;
    }

    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires 3 <= factors.length;
    //@ requires 3 == factors.length;
    //@ requires 3 >= factors.length;
    //@ requires 1 < factors.length;
    //@ requires 1 <= factors.length;
    //@ requires 1 != factors.length;
    //@ requires -1 < factors.length;
    //@ requires -1 <= factors.length;
    //@ requires -1 == factors.length;
    //@ requires -1 != factors.length;
    //@ requires -1 >= factors.length;
    //@ requires -1 > factors.length;
    //@ requires n < factors.length;
    //@ requires n <= factors.length;
    //@ requires n == factors.length;
    //@ requires n != factors.length;
    //@ requires n >= factors.length;
    //@ requires n > factors.length;
    //@ requires i < temp;
    //@ requires i <= temp;
    //@ requires i == temp;
    //@ requires i != temp;
    //@ requires i >= temp;
    //@ requires i > temp;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < factors.length;
    //@ requires i <= factors.length;
    //@ requires i == factors.length;
    //@ requires i != factors.length;
    //@ requires i >= factors.length;
    //@ requires i > factors.length;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isUgly(0);
        isUgly(1);
        isUgly(2);
        isUgly(3);
        isUgly(15);
        isUgly(-1);
        isUgly(-2);
        isUgly(-3);
		isUgly(4);
        isUgly(5);
        isUgly(7);
        isUgly(8);
		isUgly(13);
		isUgly(17);
		isUgly(12);
		isUgly(16);
    }
}


/home/max/Documents/JMLGPT/tmp/UglyNum.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:102:) in method isUgly
        __Loop_Invariant_Dummy1(n, temp, factors, i);
                               ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:102: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:26:
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:50: verify: Precondition conjunct is false: -1 == factors.length
    //@ requires -1 == factors.length;
                    ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:108: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:12:) in method main
        isUgly(2);
              ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:12: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:108:
    public static boolean isUgly(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:5: verify: Precondition conjunct is false: n <= 1
    //@ requires n <= 1;
                   ^
6 verification failures

class UglyNum {
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        int temp = n;
        int[] factors = {2, 3, 5};
        int i = 0;
        for (i = 0; i < factors.length; i++) {
            __Loop_Invariant_Dummy1(n, temp, factors, i);
            int factor = factors[i];
            while (temp % factor == 0) {
                temp /= factor;
            }
        }
        __Loop_Invariant_Dummy1(n, temp, factors, i);
        return temp == 1;
    }

    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires 3 <= factors.length;
    //@ requires 3 == factors.length;
    //@ requires 3 >= factors.length;
    //@ requires 1 < factors.length;
    //@ requires 1 <= factors.length;
    //@ requires 1 != factors.length;
    //@ requires -1 < factors.length;
    //@ requires -1 <= factors.length;
    //@ requires -1 != factors.length;
    //@ requires -1 >= factors.length;
    //@ requires -1 > factors.length;
    //@ requires n < factors.length;
    //@ requires n <= factors.length;
    //@ requires n == factors.length;
    //@ requires n != factors.length;
    //@ requires n >= factors.length;
    //@ requires n > factors.length;
    //@ requires i < temp;
    //@ requires i <= temp;
    //@ requires i == temp;
    //@ requires i != temp;
    //@ requires i >= temp;
    //@ requires i > temp;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < factors.length;
    //@ requires i <= factors.length;
    //@ requires i == factors.length;
    //@ requires i != factors.length;
    //@ requires i >= factors.length;
    //@ requires i > factors.length;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isUgly(0);
        isUgly(1);
        isUgly(2);
        isUgly(3);
        isUgly(15);
        isUgly(-1);
        isUgly(-2);
        isUgly(-3);
		isUgly(4);
        isUgly(5);
        isUgly(7);
        isUgly(8);
		isUgly(13);
		isUgly(17);
		isUgly(12);
		isUgly(16);
    }
}


/home/max/Documents/JMLGPT/tmp/UglyNum.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:101:) in method isUgly
        __Loop_Invariant_Dummy1(n, temp, factors, i);
                               ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:101: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:26:
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:51: verify: Precondition conjunct is false: -1 >= factors.length
    //@ requires -1 >= factors.length;
                    ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:107: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:12:) in method main
        isUgly(2);
              ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:12: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:107:
    public static boolean isUgly(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:5: verify: Precondition conjunct is false: n <= 1
    //@ requires n <= 1;
                   ^
6 verification failures

class UglyNum {
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        int temp = n;
        int[] factors = {2, 3, 5};
        int i = 0;
        for (i = 0; i < factors.length; i++) {
            __Loop_Invariant_Dummy1(n, temp, factors, i);
            int factor = factors[i];
            while (temp % factor == 0) {
                temp /= factor;
            }
        }
        __Loop_Invariant_Dummy1(n, temp, factors, i);
        return temp == 1;
    }

    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires 3 <= factors.length;
    //@ requires 3 == factors.length;
    //@ requires 3 >= factors.length;
    //@ requires 1 < factors.length;
    //@ requires 1 <= factors.length;
    //@ requires 1 != factors.length;
    //@ requires -1 < factors.length;
    //@ requires -1 <= factors.length;
    //@ requires -1 != factors.length;
    //@ requires -1 > factors.length;
    //@ requires n < factors.length;
    //@ requires n <= factors.length;
    //@ requires n == factors.length;
    //@ requires n != factors.length;
    //@ requires n >= factors.length;
    //@ requires n > factors.length;
    //@ requires i < temp;
    //@ requires i <= temp;
    //@ requires i == temp;
    //@ requires i != temp;
    //@ requires i >= temp;
    //@ requires i > temp;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < factors.length;
    //@ requires i <= factors.length;
    //@ requires i == factors.length;
    //@ requires i != factors.length;
    //@ requires i >= factors.length;
    //@ requires i > factors.length;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isUgly(0);
        isUgly(1);
        isUgly(2);
        isUgly(3);
        isUgly(15);
        isUgly(-1);
        isUgly(-2);
        isUgly(-3);
		isUgly(4);
        isUgly(5);
        isUgly(7);
        isUgly(8);
		isUgly(13);
		isUgly(17);
		isUgly(12);
		isUgly(16);
    }
}


/home/max/Documents/JMLGPT/tmp/UglyNum.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:100:) in method isUgly
        __Loop_Invariant_Dummy1(n, temp, factors, i);
                               ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:100: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:26:
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:51: verify: Precondition conjunct is false: -1 > factors.length
    //@ requires -1 > factors.length;
                    ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:106: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:12:) in method main
        isUgly(2);
              ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:12: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:106:
    public static boolean isUgly(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:5: verify: Precondition conjunct is false: n <= 1
    //@ requires n <= 1;
                   ^
6 verification failures

class UglyNum {
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        int temp = n;
        int[] factors = {2, 3, 5};
        int i = 0;
        for (i = 0; i < factors.length; i++) {
            __Loop_Invariant_Dummy1(n, temp, factors, i);
            int factor = factors[i];
            while (temp % factor == 0) {
                temp /= factor;
            }
        }
        __Loop_Invariant_Dummy1(n, temp, factors, i);
        return temp == 1;
    }

    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires 3 <= factors.length;
    //@ requires 3 == factors.length;
    //@ requires 3 >= factors.length;
    //@ requires 1 < factors.length;
    //@ requires 1 <= factors.length;
    //@ requires 1 != factors.length;
    //@ requires -1 < factors.length;
    //@ requires -1 <= factors.length;
    //@ requires -1 != factors.length;
    //@ requires n < factors.length;
    //@ requires n <= factors.length;
    //@ requires n == factors.length;
    //@ requires n != factors.length;
    //@ requires n >= factors.length;
    //@ requires n > factors.length;
    //@ requires i < temp;
    //@ requires i <= temp;
    //@ requires i == temp;
    //@ requires i != temp;
    //@ requires i >= temp;
    //@ requires i > temp;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < factors.length;
    //@ requires i <= factors.length;
    //@ requires i == factors.length;
    //@ requires i != factors.length;
    //@ requires i >= factors.length;
    //@ requires i > factors.length;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isUgly(0);
        isUgly(1);
        isUgly(2);
        isUgly(3);
        isUgly(15);
        isUgly(-1);
        isUgly(-2);
        isUgly(-3);
		isUgly(4);
        isUgly(5);
        isUgly(7);
        isUgly(8);
		isUgly(13);
		isUgly(17);
		isUgly(12);
		isUgly(16);
    }
}


/home/max/Documents/JMLGPT/tmp/UglyNum.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:99:) in method isUgly
        __Loop_Invariant_Dummy1(n, temp, factors, i);
                               ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:99: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:26:
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:53: verify: Precondition conjunct is false: n == factors.length
    //@ requires n == factors.length;
                   ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:105: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:12:) in method main
        isUgly(2);
              ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:12: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:105:
    public static boolean isUgly(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:5: verify: Precondition conjunct is false: n <= 1
    //@ requires n <= 1;
                   ^
6 verification failures

class UglyNum {
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        int temp = n;
        int[] factors = {2, 3, 5};
        int i = 0;
        for (i = 0; i < factors.length; i++) {
            __Loop_Invariant_Dummy1(n, temp, factors, i);
            int factor = factors[i];
            while (temp % factor == 0) {
                temp /= factor;
            }
        }
        __Loop_Invariant_Dummy1(n, temp, factors, i);
        return temp == 1;
    }

    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires 3 <= factors.length;
    //@ requires 3 == factors.length;
    //@ requires 3 >= factors.length;
    //@ requires 1 < factors.length;
    //@ requires 1 <= factors.length;
    //@ requires 1 != factors.length;
    //@ requires -1 < factors.length;
    //@ requires -1 <= factors.length;
    //@ requires -1 != factors.length;
    //@ requires n < factors.length;
    //@ requires n <= factors.length;
    //@ requires n != factors.length;
    //@ requires n >= factors.length;
    //@ requires n > factors.length;
    //@ requires i < temp;
    //@ requires i <= temp;
    //@ requires i == temp;
    //@ requires i != temp;
    //@ requires i >= temp;
    //@ requires i > temp;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < factors.length;
    //@ requires i <= factors.length;
    //@ requires i == factors.length;
    //@ requires i != factors.length;
    //@ requires i >= factors.length;
    //@ requires i > factors.length;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isUgly(0);
        isUgly(1);
        isUgly(2);
        isUgly(3);
        isUgly(15);
        isUgly(-1);
        isUgly(-2);
        isUgly(-3);
		isUgly(4);
        isUgly(5);
        isUgly(7);
        isUgly(8);
		isUgly(13);
		isUgly(17);
		isUgly(12);
		isUgly(16);
    }
}


/home/max/Documents/JMLGPT/tmp/UglyNum.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:98:) in method isUgly
        __Loop_Invariant_Dummy1(n, temp, factors, i);
                               ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:98: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:26:
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:54: verify: Precondition conjunct is false: n >= factors.length
    //@ requires n >= factors.length;
                   ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:104: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:12:) in method main
        isUgly(2);
              ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:12: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:104:
    public static boolean isUgly(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:5: verify: Precondition conjunct is false: n <= 1
    //@ requires n <= 1;
                   ^
6 verification failures

class UglyNum {
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        int temp = n;
        int[] factors = {2, 3, 5};
        int i = 0;
        for (i = 0; i < factors.length; i++) {
            __Loop_Invariant_Dummy1(n, temp, factors, i);
            int factor = factors[i];
            while (temp % factor == 0) {
                temp /= factor;
            }
        }
        __Loop_Invariant_Dummy1(n, temp, factors, i);
        return temp == 1;
    }

    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires 3 <= factors.length;
    //@ requires 3 == factors.length;
    //@ requires 3 >= factors.length;
    //@ requires 1 < factors.length;
    //@ requires 1 <= factors.length;
    //@ requires 1 != factors.length;
    //@ requires -1 < factors.length;
    //@ requires -1 <= factors.length;
    //@ requires -1 != factors.length;
    //@ requires n < factors.length;
    //@ requires n <= factors.length;
    //@ requires n != factors.length;
    //@ requires n > factors.length;
    //@ requires i < temp;
    //@ requires i <= temp;
    //@ requires i == temp;
    //@ requires i != temp;
    //@ requires i >= temp;
    //@ requires i > temp;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < factors.length;
    //@ requires i <= factors.length;
    //@ requires i == factors.length;
    //@ requires i != factors.length;
    //@ requires i >= factors.length;
    //@ requires i > factors.length;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isUgly(0);
        isUgly(1);
        isUgly(2);
        isUgly(3);
        isUgly(15);
        isUgly(-1);
        isUgly(-2);
        isUgly(-3);
		isUgly(4);
        isUgly(5);
        isUgly(7);
        isUgly(8);
		isUgly(13);
		isUgly(17);
		isUgly(12);
		isUgly(16);
    }
}


/home/max/Documents/JMLGPT/tmp/UglyNum.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:97:) in method isUgly
        __Loop_Invariant_Dummy1(n, temp, factors, i);
                               ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:97: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:26:
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:54: verify: Precondition conjunct is false: n > factors.length
    //@ requires n > factors.length;
                   ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:103: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:12:) in method main
        isUgly(2);
              ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:12: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:103:
    public static boolean isUgly(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:5: verify: Precondition conjunct is false: n <= 1
    //@ requires n <= 1;
                   ^
6 verification failures

class UglyNum {
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        int temp = n;
        int[] factors = {2, 3, 5};
        int i = 0;
        for (i = 0; i < factors.length; i++) {
            __Loop_Invariant_Dummy1(n, temp, factors, i);
            int factor = factors[i];
            while (temp % factor == 0) {
                temp /= factor;
            }
        }
        __Loop_Invariant_Dummy1(n, temp, factors, i);
        return temp == 1;
    }

    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires 3 <= factors.length;
    //@ requires 3 == factors.length;
    //@ requires 3 >= factors.length;
    //@ requires 1 < factors.length;
    //@ requires 1 <= factors.length;
    //@ requires 1 != factors.length;
    //@ requires -1 < factors.length;
    //@ requires -1 <= factors.length;
    //@ requires -1 != factors.length;
    //@ requires n < factors.length;
    //@ requires n <= factors.length;
    //@ requires n != factors.length;
    //@ requires i < temp;
    //@ requires i <= temp;
    //@ requires i == temp;
    //@ requires i != temp;
    //@ requires i >= temp;
    //@ requires i > temp;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < factors.length;
    //@ requires i <= factors.length;
    //@ requires i == factors.length;
    //@ requires i != factors.length;
    //@ requires i >= factors.length;
    //@ requires i > factors.length;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isUgly(0);
        isUgly(1);
        isUgly(2);
        isUgly(3);
        isUgly(15);
        isUgly(-1);
        isUgly(-2);
        isUgly(-3);
		isUgly(4);
        isUgly(5);
        isUgly(7);
        isUgly(8);
		isUgly(13);
		isUgly(17);
		isUgly(12);
		isUgly(16);
    }
}


/home/max/Documents/JMLGPT/tmp/UglyNum.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:96:) in method isUgly
        __Loop_Invariant_Dummy1(n, temp, factors, i);
                               ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:96: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:26:
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:54: verify: Precondition conjunct is false: i < temp
    //@ requires i < temp;
                   ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:102: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:12:) in method main
        isUgly(2);
              ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:12: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:102:
    public static boolean isUgly(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:5: verify: Precondition conjunct is false: n <= 1
    //@ requires n <= 1;
                   ^
6 verification failures

class UglyNum {
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        int temp = n;
        int[] factors = {2, 3, 5};
        int i = 0;
        for (i = 0; i < factors.length; i++) {
            __Loop_Invariant_Dummy1(n, temp, factors, i);
            int factor = factors[i];
            while (temp % factor == 0) {
                temp /= factor;
            }
        }
        __Loop_Invariant_Dummy1(n, temp, factors, i);
        return temp == 1;
    }

    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires 3 <= factors.length;
    //@ requires 3 == factors.length;
    //@ requires 3 >= factors.length;
    //@ requires 1 < factors.length;
    //@ requires 1 <= factors.length;
    //@ requires 1 != factors.length;
    //@ requires -1 < factors.length;
    //@ requires -1 <= factors.length;
    //@ requires -1 != factors.length;
    //@ requires n < factors.length;
    //@ requires n <= factors.length;
    //@ requires n != factors.length;
    //@ requires i <= temp;
    //@ requires i == temp;
    //@ requires i != temp;
    //@ requires i >= temp;
    //@ requires i > temp;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < factors.length;
    //@ requires i <= factors.length;
    //@ requires i == factors.length;
    //@ requires i != factors.length;
    //@ requires i >= factors.length;
    //@ requires i > factors.length;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isUgly(0);
        isUgly(1);
        isUgly(2);
        isUgly(3);
        isUgly(15);
        isUgly(-1);
        isUgly(-2);
        isUgly(-3);
		isUgly(4);
        isUgly(5);
        isUgly(7);
        isUgly(8);
		isUgly(13);
		isUgly(17);
		isUgly(12);
		isUgly(16);
    }
}


/home/max/Documents/JMLGPT/tmp/UglyNum.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:95:) in method isUgly
        __Loop_Invariant_Dummy1(n, temp, factors, i);
                               ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:95: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:26:
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:54: verify: Precondition conjunct is false: i <= temp
    //@ requires i <= temp;
                   ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:101: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:12:) in method main
        isUgly(2);
              ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:12: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:101:
    public static boolean isUgly(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:5: verify: Precondition conjunct is false: n <= 1
    //@ requires n <= 1;
                   ^
6 verification failures

class UglyNum {
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        int temp = n;
        int[] factors = {2, 3, 5};
        int i = 0;
        for (i = 0; i < factors.length; i++) {
            __Loop_Invariant_Dummy1(n, temp, factors, i);
            int factor = factors[i];
            while (temp % factor == 0) {
                temp /= factor;
            }
        }
        __Loop_Invariant_Dummy1(n, temp, factors, i);
        return temp == 1;
    }

    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires 3 <= factors.length;
    //@ requires 3 == factors.length;
    //@ requires 3 >= factors.length;
    //@ requires 1 < factors.length;
    //@ requires 1 <= factors.length;
    //@ requires 1 != factors.length;
    //@ requires -1 < factors.length;
    //@ requires -1 <= factors.length;
    //@ requires -1 != factors.length;
    //@ requires n < factors.length;
    //@ requires n <= factors.length;
    //@ requires n != factors.length;
    //@ requires i == temp;
    //@ requires i != temp;
    //@ requires i >= temp;
    //@ requires i > temp;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < factors.length;
    //@ requires i <= factors.length;
    //@ requires i == factors.length;
    //@ requires i != factors.length;
    //@ requires i >= factors.length;
    //@ requires i > factors.length;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isUgly(0);
        isUgly(1);
        isUgly(2);
        isUgly(3);
        isUgly(15);
        isUgly(-1);
        isUgly(-2);
        isUgly(-3);
		isUgly(4);
        isUgly(5);
        isUgly(7);
        isUgly(8);
		isUgly(13);
		isUgly(17);
		isUgly(12);
		isUgly(16);
    }
}


/home/max/Documents/JMLGPT/tmp/UglyNum.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:94:) in method isUgly
        __Loop_Invariant_Dummy1(n, temp, factors, i);
                               ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:94: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:26:
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:54: verify: Precondition conjunct is false: i == temp
    //@ requires i == temp;
                   ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:100: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:12:) in method main
        isUgly(2);
              ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:12: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:100:
    public static boolean isUgly(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:5: verify: Precondition conjunct is false: n <= 1
    //@ requires n <= 1;
                   ^
6 verification failures

class UglyNum {
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        int temp = n;
        int[] factors = {2, 3, 5};
        int i = 0;
        for (i = 0; i < factors.length; i++) {
            __Loop_Invariant_Dummy1(n, temp, factors, i);
            int factor = factors[i];
            while (temp % factor == 0) {
                temp /= factor;
            }
        }
        __Loop_Invariant_Dummy1(n, temp, factors, i);
        return temp == 1;
    }

    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires 3 <= factors.length;
    //@ requires 3 == factors.length;
    //@ requires 3 >= factors.length;
    //@ requires 1 < factors.length;
    //@ requires 1 <= factors.length;
    //@ requires 1 != factors.length;
    //@ requires -1 < factors.length;
    //@ requires -1 <= factors.length;
    //@ requires -1 != factors.length;
    //@ requires n < factors.length;
    //@ requires n <= factors.length;
    //@ requires n != factors.length;
    //@ requires i != temp;
    //@ requires i >= temp;
    //@ requires i > temp;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < factors.length;
    //@ requires i <= factors.length;
    //@ requires i == factors.length;
    //@ requires i != factors.length;
    //@ requires i >= factors.length;
    //@ requires i > factors.length;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isUgly(0);
        isUgly(1);
        isUgly(2);
        isUgly(3);
        isUgly(15);
        isUgly(-1);
        isUgly(-2);
        isUgly(-3);
		isUgly(4);
        isUgly(5);
        isUgly(7);
        isUgly(8);
		isUgly(13);
		isUgly(17);
		isUgly(12);
		isUgly(16);
    }
}


/home/max/Documents/JMLGPT/tmp/UglyNum.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:93:) in method isUgly
        __Loop_Invariant_Dummy1(n, temp, factors, i);
                               ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:93: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:26:
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:54: verify: Precondition conjunct is false: i != temp
    //@ requires i != temp;
                   ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:99: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:12:) in method main
        isUgly(2);
              ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:12: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:99:
    public static boolean isUgly(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:5: verify: Precondition conjunct is false: n <= 1
    //@ requires n <= 1;
                   ^
6 verification failures

class UglyNum {
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        int temp = n;
        int[] factors = {2, 3, 5};
        int i = 0;
        for (i = 0; i < factors.length; i++) {
            __Loop_Invariant_Dummy1(n, temp, factors, i);
            int factor = factors[i];
            while (temp % factor == 0) {
                temp /= factor;
            }
        }
        __Loop_Invariant_Dummy1(n, temp, factors, i);
        return temp == 1;
    }

    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires 3 <= factors.length;
    //@ requires 3 == factors.length;
    //@ requires 3 >= factors.length;
    //@ requires 1 < factors.length;
    //@ requires 1 <= factors.length;
    //@ requires 1 != factors.length;
    //@ requires -1 < factors.length;
    //@ requires -1 <= factors.length;
    //@ requires -1 != factors.length;
    //@ requires n < factors.length;
    //@ requires n <= factors.length;
    //@ requires n != factors.length;
    //@ requires i >= temp;
    //@ requires i > temp;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < factors.length;
    //@ requires i <= factors.length;
    //@ requires i == factors.length;
    //@ requires i != factors.length;
    //@ requires i >= factors.length;
    //@ requires i > factors.length;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isUgly(0);
        isUgly(1);
        isUgly(2);
        isUgly(3);
        isUgly(15);
        isUgly(-1);
        isUgly(-2);
        isUgly(-3);
		isUgly(4);
        isUgly(5);
        isUgly(7);
        isUgly(8);
		isUgly(13);
		isUgly(17);
		isUgly(12);
		isUgly(16);
    }
}


/home/max/Documents/JMLGPT/tmp/UglyNum.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:92:) in method isUgly
        __Loop_Invariant_Dummy1(n, temp, factors, i);
                               ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:92: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:26:
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:54: verify: Precondition conjunct is false: i >= temp
    //@ requires i >= temp;
                   ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:98: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:12:) in method main
        isUgly(2);
              ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:12: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:98:
    public static boolean isUgly(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:5: verify: Precondition conjunct is false: n <= 1
    //@ requires n <= 1;
                   ^
6 verification failures

class UglyNum {
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        int temp = n;
        int[] factors = {2, 3, 5};
        int i = 0;
        for (i = 0; i < factors.length; i++) {
            __Loop_Invariant_Dummy1(n, temp, factors, i);
            int factor = factors[i];
            while (temp % factor == 0) {
                temp /= factor;
            }
        }
        __Loop_Invariant_Dummy1(n, temp, factors, i);
        return temp == 1;
    }

    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires 3 <= factors.length;
    //@ requires 3 == factors.length;
    //@ requires 3 >= factors.length;
    //@ requires 1 < factors.length;
    //@ requires 1 <= factors.length;
    //@ requires 1 != factors.length;
    //@ requires -1 < factors.length;
    //@ requires -1 <= factors.length;
    //@ requires -1 != factors.length;
    //@ requires n < factors.length;
    //@ requires n <= factors.length;
    //@ requires n != factors.length;
    //@ requires i > temp;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < factors.length;
    //@ requires i <= factors.length;
    //@ requires i == factors.length;
    //@ requires i != factors.length;
    //@ requires i >= factors.length;
    //@ requires i > factors.length;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isUgly(0);
        isUgly(1);
        isUgly(2);
        isUgly(3);
        isUgly(15);
        isUgly(-1);
        isUgly(-2);
        isUgly(-3);
		isUgly(4);
        isUgly(5);
        isUgly(7);
        isUgly(8);
		isUgly(13);
		isUgly(17);
		isUgly(12);
		isUgly(16);
    }
}


/home/max/Documents/JMLGPT/tmp/UglyNum.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:91:) in method isUgly
        __Loop_Invariant_Dummy1(n, temp, factors, i);
                               ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:91: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:26:
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:54: verify: Precondition conjunct is false: i > temp
    //@ requires i > temp;
                   ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:97: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:12:) in method main
        isUgly(2);
              ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:12: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:97:
    public static boolean isUgly(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:5: verify: Precondition conjunct is false: n <= 1
    //@ requires n <= 1;
                   ^
6 verification failures

class UglyNum {
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        int temp = n;
        int[] factors = {2, 3, 5};
        int i = 0;
        for (i = 0; i < factors.length; i++) {
            __Loop_Invariant_Dummy1(n, temp, factors, i);
            int factor = factors[i];
            while (temp % factor == 0) {
                temp /= factor;
            }
        }
        __Loop_Invariant_Dummy1(n, temp, factors, i);
        return temp == 1;
    }

    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires 3 <= factors.length;
    //@ requires 3 == factors.length;
    //@ requires 3 >= factors.length;
    //@ requires 1 < factors.length;
    //@ requires 1 <= factors.length;
    //@ requires 1 != factors.length;
    //@ requires -1 < factors.length;
    //@ requires -1 <= factors.length;
    //@ requires -1 != factors.length;
    //@ requires n < factors.length;
    //@ requires n <= factors.length;
    //@ requires n != factors.length;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < factors.length;
    //@ requires i <= factors.length;
    //@ requires i == factors.length;
    //@ requires i != factors.length;
    //@ requires i >= factors.length;
    //@ requires i > factors.length;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isUgly(0);
        isUgly(1);
        isUgly(2);
        isUgly(3);
        isUgly(15);
        isUgly(-1);
        isUgly(-2);
        isUgly(-3);
		isUgly(4);
        isUgly(5);
        isUgly(7);
        isUgly(8);
		isUgly(13);
		isUgly(17);
		isUgly(12);
		isUgly(16);
    }
}


/home/max/Documents/JMLGPT/tmp/UglyNum.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:90:) in method isUgly
        __Loop_Invariant_Dummy1(n, temp, factors, i);
                               ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:90: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:26:
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:54: verify: Precondition conjunct is false: i < 3
    //@ requires i < 3;
                   ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:96: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:12:) in method main
        isUgly(2);
              ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:12: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:96:
    public static boolean isUgly(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:5: verify: Precondition conjunct is false: n <= 1
    //@ requires n <= 1;
                   ^
6 verification failures

class UglyNum {
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        int temp = n;
        int[] factors = {2, 3, 5};
        int i = 0;
        for (i = 0; i < factors.length; i++) {
            __Loop_Invariant_Dummy1(n, temp, factors, i);
            int factor = factors[i];
            while (temp % factor == 0) {
                temp /= factor;
            }
        }
        __Loop_Invariant_Dummy1(n, temp, factors, i);
        return temp == 1;
    }

    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires 3 <= factors.length;
    //@ requires 3 == factors.length;
    //@ requires 3 >= factors.length;
    //@ requires 1 < factors.length;
    //@ requires 1 <= factors.length;
    //@ requires 1 != factors.length;
    //@ requires -1 < factors.length;
    //@ requires -1 <= factors.length;
    //@ requires -1 != factors.length;
    //@ requires n < factors.length;
    //@ requires n <= factors.length;
    //@ requires n != factors.length;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < factors.length;
    //@ requires i <= factors.length;
    //@ requires i == factors.length;
    //@ requires i != factors.length;
    //@ requires i >= factors.length;
    //@ requires i > factors.length;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isUgly(0);
        isUgly(1);
        isUgly(2);
        isUgly(3);
        isUgly(15);
        isUgly(-1);
        isUgly(-2);
        isUgly(-3);
		isUgly(4);
        isUgly(5);
        isUgly(7);
        isUgly(8);
		isUgly(13);
		isUgly(17);
		isUgly(12);
		isUgly(16);
    }
}


/home/max/Documents/JMLGPT/tmp/UglyNum.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:89:) in method isUgly
        __Loop_Invariant_Dummy1(n, temp, factors, i);
                               ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:89: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:26:
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:54: verify: Precondition conjunct is false: i <= 3
    //@ requires i <= 3;
                   ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:95: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:12:) in method main
        isUgly(2);
              ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:12: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:95:
    public static boolean isUgly(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:5: verify: Precondition conjunct is false: n <= 1
    //@ requires n <= 1;
                   ^
6 verification failures

class UglyNum {
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        int temp = n;
        int[] factors = {2, 3, 5};
        int i = 0;
        for (i = 0; i < factors.length; i++) {
            __Loop_Invariant_Dummy1(n, temp, factors, i);
            int factor = factors[i];
            while (temp % factor == 0) {
                temp /= factor;
            }
        }
        __Loop_Invariant_Dummy1(n, temp, factors, i);
        return temp == 1;
    }

    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires 3 <= factors.length;
    //@ requires 3 == factors.length;
    //@ requires 3 >= factors.length;
    //@ requires 1 < factors.length;
    //@ requires 1 <= factors.length;
    //@ requires 1 != factors.length;
    //@ requires -1 < factors.length;
    //@ requires -1 <= factors.length;
    //@ requires -1 != factors.length;
    //@ requires n < factors.length;
    //@ requires n <= factors.length;
    //@ requires n != factors.length;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < factors.length;
    //@ requires i <= factors.length;
    //@ requires i == factors.length;
    //@ requires i != factors.length;
    //@ requires i >= factors.length;
    //@ requires i > factors.length;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isUgly(0);
        isUgly(1);
        isUgly(2);
        isUgly(3);
        isUgly(15);
        isUgly(-1);
        isUgly(-2);
        isUgly(-3);
		isUgly(4);
        isUgly(5);
        isUgly(7);
        isUgly(8);
		isUgly(13);
		isUgly(17);
		isUgly(12);
		isUgly(16);
    }
}


/home/max/Documents/JMLGPT/tmp/UglyNum.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:88:) in method isUgly
        __Loop_Invariant_Dummy1(n, temp, factors, i);
                               ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:88: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:26:
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:54: verify: Precondition conjunct is false: i == 3
    //@ requires i == 3;
                   ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:94: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:12:) in method main
        isUgly(2);
              ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:12: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:94:
    public static boolean isUgly(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:5: verify: Precondition conjunct is false: n <= 1
    //@ requires n <= 1;
                   ^
6 verification failures

class UglyNum {
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        int temp = n;
        int[] factors = {2, 3, 5};
        int i = 0;
        for (i = 0; i < factors.length; i++) {
            __Loop_Invariant_Dummy1(n, temp, factors, i);
            int factor = factors[i];
            while (temp % factor == 0) {
                temp /= factor;
            }
        }
        __Loop_Invariant_Dummy1(n, temp, factors, i);
        return temp == 1;
    }

    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires 3 <= factors.length;
    //@ requires 3 == factors.length;
    //@ requires 3 >= factors.length;
    //@ requires 1 < factors.length;
    //@ requires 1 <= factors.length;
    //@ requires 1 != factors.length;
    //@ requires -1 < factors.length;
    //@ requires -1 <= factors.length;
    //@ requires -1 != factors.length;
    //@ requires n < factors.length;
    //@ requires n <= factors.length;
    //@ requires n != factors.length;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < factors.length;
    //@ requires i <= factors.length;
    //@ requires i == factors.length;
    //@ requires i != factors.length;
    //@ requires i >= factors.length;
    //@ requires i > factors.length;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isUgly(0);
        isUgly(1);
        isUgly(2);
        isUgly(3);
        isUgly(15);
        isUgly(-1);
        isUgly(-2);
        isUgly(-3);
		isUgly(4);
        isUgly(5);
        isUgly(7);
        isUgly(8);
		isUgly(13);
		isUgly(17);
		isUgly(12);
		isUgly(16);
    }
}


/home/max/Documents/JMLGPT/tmp/UglyNum.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:87:) in method isUgly
        __Loop_Invariant_Dummy1(n, temp, factors, i);
                               ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:87: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:26:
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:54: verify: Precondition conjunct is false: i != 3
    //@ requires i != 3;
                   ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:93: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:12:) in method main
        isUgly(2);
              ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:12: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:93:
    public static boolean isUgly(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:5: verify: Precondition conjunct is false: n <= 1
    //@ requires n <= 1;
                   ^
6 verification failures

class UglyNum {
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        int temp = n;
        int[] factors = {2, 3, 5};
        int i = 0;
        for (i = 0; i < factors.length; i++) {
            __Loop_Invariant_Dummy1(n, temp, factors, i);
            int factor = factors[i];
            while (temp % factor == 0) {
                temp /= factor;
            }
        }
        __Loop_Invariant_Dummy1(n, temp, factors, i);
        return temp == 1;
    }

    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires 3 <= factors.length;
    //@ requires 3 == factors.length;
    //@ requires 3 >= factors.length;
    //@ requires 1 < factors.length;
    //@ requires 1 <= factors.length;
    //@ requires 1 != factors.length;
    //@ requires -1 < factors.length;
    //@ requires -1 <= factors.length;
    //@ requires -1 != factors.length;
    //@ requires n < factors.length;
    //@ requires n <= factors.length;
    //@ requires n != factors.length;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < factors.length;
    //@ requires i <= factors.length;
    //@ requires i == factors.length;
    //@ requires i != factors.length;
    //@ requires i >= factors.length;
    //@ requires i > factors.length;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isUgly(0);
        isUgly(1);
        isUgly(2);
        isUgly(3);
        isUgly(15);
        isUgly(-1);
        isUgly(-2);
        isUgly(-3);
		isUgly(4);
        isUgly(5);
        isUgly(7);
        isUgly(8);
		isUgly(13);
		isUgly(17);
		isUgly(12);
		isUgly(16);
    }
}


/home/max/Documents/JMLGPT/tmp/UglyNum.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:86:) in method isUgly
        __Loop_Invariant_Dummy1(n, temp, factors, i);
                               ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:86: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:26:
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:55: verify: Precondition conjunct is false: i > 3
    //@ requires i > 3;
                   ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:92: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:12:) in method main
        isUgly(2);
              ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:12: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:92:
    public static boolean isUgly(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:5: verify: Precondition conjunct is false: n <= 1
    //@ requires n <= 1;
                   ^
6 verification failures

class UglyNum {
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        int temp = n;
        int[] factors = {2, 3, 5};
        int i = 0;
        for (i = 0; i < factors.length; i++) {
            __Loop_Invariant_Dummy1(n, temp, factors, i);
            int factor = factors[i];
            while (temp % factor == 0) {
                temp /= factor;
            }
        }
        __Loop_Invariant_Dummy1(n, temp, factors, i);
        return temp == 1;
    }

    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires 3 <= factors.length;
    //@ requires 3 == factors.length;
    //@ requires 3 >= factors.length;
    //@ requires 1 < factors.length;
    //@ requires 1 <= factors.length;
    //@ requires 1 != factors.length;
    //@ requires -1 < factors.length;
    //@ requires -1 <= factors.length;
    //@ requires -1 != factors.length;
    //@ requires n < factors.length;
    //@ requires n <= factors.length;
    //@ requires n != factors.length;
    //@ requires i >= 3;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < factors.length;
    //@ requires i <= factors.length;
    //@ requires i == factors.length;
    //@ requires i != factors.length;
    //@ requires i >= factors.length;
    //@ requires i > factors.length;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isUgly(0);
        isUgly(1);
        isUgly(2);
        isUgly(3);
        isUgly(15);
        isUgly(-1);
        isUgly(-2);
        isUgly(-3);
		isUgly(4);
        isUgly(5);
        isUgly(7);
        isUgly(8);
		isUgly(13);
		isUgly(17);
		isUgly(12);
		isUgly(16);
    }
}


/home/max/Documents/JMLGPT/tmp/UglyNum.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:85:) in method isUgly
        __Loop_Invariant_Dummy1(n, temp, factors, i);
                               ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:85: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:26:
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:55: verify: Precondition conjunct is false: i < 1
    //@ requires i < 1;
                   ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:91: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:12:) in method main
        isUgly(2);
              ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:12: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:91:
    public static boolean isUgly(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:5: verify: Precondition conjunct is false: n <= 1
    //@ requires n <= 1;
                   ^
6 verification failures

class UglyNum {
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        int temp = n;
        int[] factors = {2, 3, 5};
        int i = 0;
        for (i = 0; i < factors.length; i++) {
            __Loop_Invariant_Dummy1(n, temp, factors, i);
            int factor = factors[i];
            while (temp % factor == 0) {
                temp /= factor;
            }
        }
        __Loop_Invariant_Dummy1(n, temp, factors, i);
        return temp == 1;
    }

    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires 3 <= factors.length;
    //@ requires 3 == factors.length;
    //@ requires 3 >= factors.length;
    //@ requires 1 < factors.length;
    //@ requires 1 <= factors.length;
    //@ requires 1 != factors.length;
    //@ requires -1 < factors.length;
    //@ requires -1 <= factors.length;
    //@ requires -1 != factors.length;
    //@ requires n < factors.length;
    //@ requires n <= factors.length;
    //@ requires n != factors.length;
    //@ requires i >= 3;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < factors.length;
    //@ requires i <= factors.length;
    //@ requires i == factors.length;
    //@ requires i != factors.length;
    //@ requires i >= factors.length;
    //@ requires i > factors.length;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isUgly(0);
        isUgly(1);
        isUgly(2);
        isUgly(3);
        isUgly(15);
        isUgly(-1);
        isUgly(-2);
        isUgly(-3);
		isUgly(4);
        isUgly(5);
        isUgly(7);
        isUgly(8);
		isUgly(13);
		isUgly(17);
		isUgly(12);
		isUgly(16);
    }
}


/home/max/Documents/JMLGPT/tmp/UglyNum.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:84:) in method isUgly
        __Loop_Invariant_Dummy1(n, temp, factors, i);
                               ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:84: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:26:
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:55: verify: Precondition conjunct is false: i <= 1
    //@ requires i <= 1;
                   ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:90: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:12:) in method main
        isUgly(2);
              ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:12: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:90:
    public static boolean isUgly(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:5: verify: Precondition conjunct is false: n <= 1
    //@ requires n <= 1;
                   ^
6 verification failures

class UglyNum {
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        int temp = n;
        int[] factors = {2, 3, 5};
        int i = 0;
        for (i = 0; i < factors.length; i++) {
            __Loop_Invariant_Dummy1(n, temp, factors, i);
            int factor = factors[i];
            while (temp % factor == 0) {
                temp /= factor;
            }
        }
        __Loop_Invariant_Dummy1(n, temp, factors, i);
        return temp == 1;
    }

    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires 3 <= factors.length;
    //@ requires 3 == factors.length;
    //@ requires 3 >= factors.length;
    //@ requires 1 < factors.length;
    //@ requires 1 <= factors.length;
    //@ requires 1 != factors.length;
    //@ requires -1 < factors.length;
    //@ requires -1 <= factors.length;
    //@ requires -1 != factors.length;
    //@ requires n < factors.length;
    //@ requires n <= factors.length;
    //@ requires n != factors.length;
    //@ requires i >= 3;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < factors.length;
    //@ requires i <= factors.length;
    //@ requires i == factors.length;
    //@ requires i != factors.length;
    //@ requires i >= factors.length;
    //@ requires i > factors.length;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isUgly(0);
        isUgly(1);
        isUgly(2);
        isUgly(3);
        isUgly(15);
        isUgly(-1);
        isUgly(-2);
        isUgly(-3);
		isUgly(4);
        isUgly(5);
        isUgly(7);
        isUgly(8);
		isUgly(13);
		isUgly(17);
		isUgly(12);
		isUgly(16);
    }
}


/home/max/Documents/JMLGPT/tmp/UglyNum.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:83:) in method isUgly
        __Loop_Invariant_Dummy1(n, temp, factors, i);
                               ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:83: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:26:
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:55: verify: Precondition conjunct is false: i == 1
    //@ requires i == 1;
                   ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:89: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:12:) in method main
        isUgly(2);
              ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:12: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:89:
    public static boolean isUgly(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:5: verify: Precondition conjunct is false: n <= 1
    //@ requires n <= 1;
                   ^
6 verification failures

class UglyNum {
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        int temp = n;
        int[] factors = {2, 3, 5};
        int i = 0;
        for (i = 0; i < factors.length; i++) {
            __Loop_Invariant_Dummy1(n, temp, factors, i);
            int factor = factors[i];
            while (temp % factor == 0) {
                temp /= factor;
            }
        }
        __Loop_Invariant_Dummy1(n, temp, factors, i);
        return temp == 1;
    }

    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires 3 <= factors.length;
    //@ requires 3 == factors.length;
    //@ requires 3 >= factors.length;
    //@ requires 1 < factors.length;
    //@ requires 1 <= factors.length;
    //@ requires 1 != factors.length;
    //@ requires -1 < factors.length;
    //@ requires -1 <= factors.length;
    //@ requires -1 != factors.length;
    //@ requires n < factors.length;
    //@ requires n <= factors.length;
    //@ requires n != factors.length;
    //@ requires i >= 3;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < factors.length;
    //@ requires i <= factors.length;
    //@ requires i == factors.length;
    //@ requires i != factors.length;
    //@ requires i >= factors.length;
    //@ requires i > factors.length;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isUgly(0);
        isUgly(1);
        isUgly(2);
        isUgly(3);
        isUgly(15);
        isUgly(-1);
        isUgly(-2);
        isUgly(-3);
		isUgly(4);
        isUgly(5);
        isUgly(7);
        isUgly(8);
		isUgly(13);
		isUgly(17);
		isUgly(12);
		isUgly(16);
    }
}


/home/max/Documents/JMLGPT/tmp/UglyNum.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:82:) in method isUgly
        __Loop_Invariant_Dummy1(n, temp, factors, i);
                               ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:82: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:26:
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:58: verify: Precondition conjunct is false: i < 0
    //@ requires i < 0;
                   ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:88: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:12:) in method main
        isUgly(2);
              ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:12: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:88:
    public static boolean isUgly(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:5: verify: Precondition conjunct is false: n <= 1
    //@ requires n <= 1;
                   ^
6 verification failures

class UglyNum {
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        int temp = n;
        int[] factors = {2, 3, 5};
        int i = 0;
        for (i = 0; i < factors.length; i++) {
            __Loop_Invariant_Dummy1(n, temp, factors, i);
            int factor = factors[i];
            while (temp % factor == 0) {
                temp /= factor;
            }
        }
        __Loop_Invariant_Dummy1(n, temp, factors, i);
        return temp == 1;
    }

    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires 3 <= factors.length;
    //@ requires 3 == factors.length;
    //@ requires 3 >= factors.length;
    //@ requires 1 < factors.length;
    //@ requires 1 <= factors.length;
    //@ requires 1 != factors.length;
    //@ requires -1 < factors.length;
    //@ requires -1 <= factors.length;
    //@ requires -1 != factors.length;
    //@ requires n < factors.length;
    //@ requires n <= factors.length;
    //@ requires n != factors.length;
    //@ requires i >= 3;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < factors.length;
    //@ requires i <= factors.length;
    //@ requires i == factors.length;
    //@ requires i != factors.length;
    //@ requires i >= factors.length;
    //@ requires i > factors.length;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isUgly(0);
        isUgly(1);
        isUgly(2);
        isUgly(3);
        isUgly(15);
        isUgly(-1);
        isUgly(-2);
        isUgly(-3);
		isUgly(4);
        isUgly(5);
        isUgly(7);
        isUgly(8);
		isUgly(13);
		isUgly(17);
		isUgly(12);
		isUgly(16);
    }
}


/home/max/Documents/JMLGPT/tmp/UglyNum.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:81:) in method isUgly
        __Loop_Invariant_Dummy1(n, temp, factors, i);
                               ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:81: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:26:
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:58: verify: Precondition conjunct is false: i <= 0
    //@ requires i <= 0;
                   ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:87: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:12:) in method main
        isUgly(2);
              ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:12: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:87:
    public static boolean isUgly(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:5: verify: Precondition conjunct is false: n <= 1
    //@ requires n <= 1;
                   ^
6 verification failures

class UglyNum {
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        int temp = n;
        int[] factors = {2, 3, 5};
        int i = 0;
        for (i = 0; i < factors.length; i++) {
            __Loop_Invariant_Dummy1(n, temp, factors, i);
            int factor = factors[i];
            while (temp % factor == 0) {
                temp /= factor;
            }
        }
        __Loop_Invariant_Dummy1(n, temp, factors, i);
        return temp == 1;
    }

    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires 3 <= factors.length;
    //@ requires 3 == factors.length;
    //@ requires 3 >= factors.length;
    //@ requires 1 < factors.length;
    //@ requires 1 <= factors.length;
    //@ requires 1 != factors.length;
    //@ requires -1 < factors.length;
    //@ requires -1 <= factors.length;
    //@ requires -1 != factors.length;
    //@ requires n < factors.length;
    //@ requires n <= factors.length;
    //@ requires n != factors.length;
    //@ requires i >= 3;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < factors.length;
    //@ requires i <= factors.length;
    //@ requires i == factors.length;
    //@ requires i != factors.length;
    //@ requires i >= factors.length;
    //@ requires i > factors.length;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isUgly(0);
        isUgly(1);
        isUgly(2);
        isUgly(3);
        isUgly(15);
        isUgly(-1);
        isUgly(-2);
        isUgly(-3);
		isUgly(4);
        isUgly(5);
        isUgly(7);
        isUgly(8);
		isUgly(13);
		isUgly(17);
		isUgly(12);
		isUgly(16);
    }
}


/home/max/Documents/JMLGPT/tmp/UglyNum.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:80:) in method isUgly
        __Loop_Invariant_Dummy1(n, temp, factors, i);
                               ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:80: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:26:
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:58: verify: Precondition conjunct is false: i == 0
    //@ requires i == 0;
                   ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:86: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:12:) in method main
        isUgly(2);
              ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:12: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:86:
    public static boolean isUgly(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:5: verify: Precondition conjunct is false: n <= 1
    //@ requires n <= 1;
                   ^
6 verification failures

class UglyNum {
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        int temp = n;
        int[] factors = {2, 3, 5};
        int i = 0;
        for (i = 0; i < factors.length; i++) {
            __Loop_Invariant_Dummy1(n, temp, factors, i);
            int factor = factors[i];
            while (temp % factor == 0) {
                temp /= factor;
            }
        }
        __Loop_Invariant_Dummy1(n, temp, factors, i);
        return temp == 1;
    }

    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires 3 <= factors.length;
    //@ requires 3 == factors.length;
    //@ requires 3 >= factors.length;
    //@ requires 1 < factors.length;
    //@ requires 1 <= factors.length;
    //@ requires 1 != factors.length;
    //@ requires -1 < factors.length;
    //@ requires -1 <= factors.length;
    //@ requires -1 != factors.length;
    //@ requires n < factors.length;
    //@ requires n <= factors.length;
    //@ requires n != factors.length;
    //@ requires i >= 3;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < factors.length;
    //@ requires i <= factors.length;
    //@ requires i == factors.length;
    //@ requires i != factors.length;
    //@ requires i >= factors.length;
    //@ requires i > factors.length;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isUgly(0);
        isUgly(1);
        isUgly(2);
        isUgly(3);
        isUgly(15);
        isUgly(-1);
        isUgly(-2);
        isUgly(-3);
		isUgly(4);
        isUgly(5);
        isUgly(7);
        isUgly(8);
		isUgly(13);
		isUgly(17);
		isUgly(12);
		isUgly(16);
    }
}


/home/max/Documents/JMLGPT/tmp/UglyNum.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:79:) in method isUgly
        __Loop_Invariant_Dummy1(n, temp, factors, i);
                               ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:79: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:26:
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:61: verify: Precondition conjunct is false: i < -1
    //@ requires i < -1;
                   ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:85: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:12:) in method main
        isUgly(2);
              ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:12: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:85:
    public static boolean isUgly(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:5: verify: Precondition conjunct is false: n <= 1
    //@ requires n <= 1;
                   ^
6 verification failures

class UglyNum {
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        int temp = n;
        int[] factors = {2, 3, 5};
        int i = 0;
        for (i = 0; i < factors.length; i++) {
            __Loop_Invariant_Dummy1(n, temp, factors, i);
            int factor = factors[i];
            while (temp % factor == 0) {
                temp /= factor;
            }
        }
        __Loop_Invariant_Dummy1(n, temp, factors, i);
        return temp == 1;
    }

    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires 3 <= factors.length;
    //@ requires 3 == factors.length;
    //@ requires 3 >= factors.length;
    //@ requires 1 < factors.length;
    //@ requires 1 <= factors.length;
    //@ requires 1 != factors.length;
    //@ requires -1 < factors.length;
    //@ requires -1 <= factors.length;
    //@ requires -1 != factors.length;
    //@ requires n < factors.length;
    //@ requires n <= factors.length;
    //@ requires n != factors.length;
    //@ requires i >= 3;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < factors.length;
    //@ requires i <= factors.length;
    //@ requires i == factors.length;
    //@ requires i != factors.length;
    //@ requires i >= factors.length;
    //@ requires i > factors.length;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isUgly(0);
        isUgly(1);
        isUgly(2);
        isUgly(3);
        isUgly(15);
        isUgly(-1);
        isUgly(-2);
        isUgly(-3);
		isUgly(4);
        isUgly(5);
        isUgly(7);
        isUgly(8);
		isUgly(13);
		isUgly(17);
		isUgly(12);
		isUgly(16);
    }
}


/home/max/Documents/JMLGPT/tmp/UglyNum.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:78:) in method isUgly
        __Loop_Invariant_Dummy1(n, temp, factors, i);
                               ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:78: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:26:
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:61: verify: Precondition conjunct is false: i <= -1
    //@ requires i <= -1;
                   ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:84: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:12:) in method main
        isUgly(2);
              ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:12: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:84:
    public static boolean isUgly(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:5: verify: Precondition conjunct is false: n <= 1
    //@ requires n <= 1;
                   ^
6 verification failures

class UglyNum {
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        int temp = n;
        int[] factors = {2, 3, 5};
        int i = 0;
        for (i = 0; i < factors.length; i++) {
            __Loop_Invariant_Dummy1(n, temp, factors, i);
            int factor = factors[i];
            while (temp % factor == 0) {
                temp /= factor;
            }
        }
        __Loop_Invariant_Dummy1(n, temp, factors, i);
        return temp == 1;
    }

    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires 3 <= factors.length;
    //@ requires 3 == factors.length;
    //@ requires 3 >= factors.length;
    //@ requires 1 < factors.length;
    //@ requires 1 <= factors.length;
    //@ requires 1 != factors.length;
    //@ requires -1 < factors.length;
    //@ requires -1 <= factors.length;
    //@ requires -1 != factors.length;
    //@ requires n < factors.length;
    //@ requires n <= factors.length;
    //@ requires n != factors.length;
    //@ requires i >= 3;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < factors.length;
    //@ requires i <= factors.length;
    //@ requires i == factors.length;
    //@ requires i != factors.length;
    //@ requires i >= factors.length;
    //@ requires i > factors.length;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isUgly(0);
        isUgly(1);
        isUgly(2);
        isUgly(3);
        isUgly(15);
        isUgly(-1);
        isUgly(-2);
        isUgly(-3);
		isUgly(4);
        isUgly(5);
        isUgly(7);
        isUgly(8);
		isUgly(13);
		isUgly(17);
		isUgly(12);
		isUgly(16);
    }
}


/home/max/Documents/JMLGPT/tmp/UglyNum.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:77:) in method isUgly
        __Loop_Invariant_Dummy1(n, temp, factors, i);
                               ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:77: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:26:
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:61: verify: Precondition conjunct is false: i == -1
    //@ requires i == -1;
                   ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:83: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:12:) in method main
        isUgly(2);
              ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:12: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:83:
    public static boolean isUgly(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:5: verify: Precondition conjunct is false: n <= 1
    //@ requires n <= 1;
                   ^
6 verification failures

class UglyNum {
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        int temp = n;
        int[] factors = {2, 3, 5};
        int i = 0;
        for (i = 0; i < factors.length; i++) {
            __Loop_Invariant_Dummy1(n, temp, factors, i);
            int factor = factors[i];
            while (temp % factor == 0) {
                temp /= factor;
            }
        }
        __Loop_Invariant_Dummy1(n, temp, factors, i);
        return temp == 1;
    }

    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires 3 <= factors.length;
    //@ requires 3 == factors.length;
    //@ requires 3 >= factors.length;
    //@ requires 1 < factors.length;
    //@ requires 1 <= factors.length;
    //@ requires 1 != factors.length;
    //@ requires -1 < factors.length;
    //@ requires -1 <= factors.length;
    //@ requires -1 != factors.length;
    //@ requires n < factors.length;
    //@ requires n <= factors.length;
    //@ requires n != factors.length;
    //@ requires i >= 3;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < factors.length;
    //@ requires i <= factors.length;
    //@ requires i == factors.length;
    //@ requires i != factors.length;
    //@ requires i >= factors.length;
    //@ requires i > factors.length;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isUgly(0);
        isUgly(1);
        isUgly(2);
        isUgly(3);
        isUgly(15);
        isUgly(-1);
        isUgly(-2);
        isUgly(-3);
		isUgly(4);
        isUgly(5);
        isUgly(7);
        isUgly(8);
		isUgly(13);
		isUgly(17);
		isUgly(12);
		isUgly(16);
    }
}


/home/max/Documents/JMLGPT/tmp/UglyNum.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:76:) in method isUgly
        __Loop_Invariant_Dummy1(n, temp, factors, i);
                               ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:76: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:26:
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:64: verify: Precondition conjunct is false: i < factors.length
    //@ requires i < factors.length;
                   ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:82: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:12:) in method main
        isUgly(2);
              ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:12: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:82:
    public static boolean isUgly(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:5: verify: Precondition conjunct is false: n <= 1
    //@ requires n <= 1;
                   ^
6 verification failures

class UglyNum {
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        int temp = n;
        int[] factors = {2, 3, 5};
        int i = 0;
        for (i = 0; i < factors.length; i++) {
            __Loop_Invariant_Dummy1(n, temp, factors, i);
            int factor = factors[i];
            while (temp % factor == 0) {
                temp /= factor;
            }
        }
        __Loop_Invariant_Dummy1(n, temp, factors, i);
        return temp == 1;
    }

    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires 3 <= factors.length;
    //@ requires 3 == factors.length;
    //@ requires 3 >= factors.length;
    //@ requires 1 < factors.length;
    //@ requires 1 <= factors.length;
    //@ requires 1 != factors.length;
    //@ requires -1 < factors.length;
    //@ requires -1 <= factors.length;
    //@ requires -1 != factors.length;
    //@ requires n < factors.length;
    //@ requires n <= factors.length;
    //@ requires n != factors.length;
    //@ requires i >= 3;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i <= factors.length;
    //@ requires i == factors.length;
    //@ requires i != factors.length;
    //@ requires i >= factors.length;
    //@ requires i > factors.length;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isUgly(0);
        isUgly(1);
        isUgly(2);
        isUgly(3);
        isUgly(15);
        isUgly(-1);
        isUgly(-2);
        isUgly(-3);
		isUgly(4);
        isUgly(5);
        isUgly(7);
        isUgly(8);
		isUgly(13);
		isUgly(17);
		isUgly(12);
		isUgly(16);
    }
}


/home/max/Documents/JMLGPT/tmp/UglyNum.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:75:) in method isUgly
        __Loop_Invariant_Dummy1(n, temp, factors, i);
                               ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:75: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:26:
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:64: verify: Precondition conjunct is false: i <= factors.length
    //@ requires i <= factors.length;
                   ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:81: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:12:) in method main
        isUgly(2);
              ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:12: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:81:
    public static boolean isUgly(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:5: verify: Precondition conjunct is false: n <= 1
    //@ requires n <= 1;
                   ^
6 verification failures

class UglyNum {
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        int temp = n;
        int[] factors = {2, 3, 5};
        int i = 0;
        for (i = 0; i < factors.length; i++) {
            __Loop_Invariant_Dummy1(n, temp, factors, i);
            int factor = factors[i];
            while (temp % factor == 0) {
                temp /= factor;
            }
        }
        __Loop_Invariant_Dummy1(n, temp, factors, i);
        return temp == 1;
    }

    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires 3 <= factors.length;
    //@ requires 3 == factors.length;
    //@ requires 3 >= factors.length;
    //@ requires 1 < factors.length;
    //@ requires 1 <= factors.length;
    //@ requires 1 != factors.length;
    //@ requires -1 < factors.length;
    //@ requires -1 <= factors.length;
    //@ requires -1 != factors.length;
    //@ requires n < factors.length;
    //@ requires n <= factors.length;
    //@ requires n != factors.length;
    //@ requires i >= 3;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i == factors.length;
    //@ requires i != factors.length;
    //@ requires i >= factors.length;
    //@ requires i > factors.length;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isUgly(0);
        isUgly(1);
        isUgly(2);
        isUgly(3);
        isUgly(15);
        isUgly(-1);
        isUgly(-2);
        isUgly(-3);
		isUgly(4);
        isUgly(5);
        isUgly(7);
        isUgly(8);
		isUgly(13);
		isUgly(17);
		isUgly(12);
		isUgly(16);
    }
}


/home/max/Documents/JMLGPT/tmp/UglyNum.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:74:) in method isUgly
        __Loop_Invariant_Dummy1(n, temp, factors, i);
                               ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:74: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:26:
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:64: verify: Precondition conjunct is false: i == factors.length
    //@ requires i == factors.length;
                   ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:80: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:12:) in method main
        isUgly(2);
              ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:12: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:80:
    public static boolean isUgly(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:5: verify: Precondition conjunct is false: n <= 1
    //@ requires n <= 1;
                   ^
6 verification failures

class UglyNum {
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        int temp = n;
        int[] factors = {2, 3, 5};
        int i = 0;
        for (i = 0; i < factors.length; i++) {
            __Loop_Invariant_Dummy1(n, temp, factors, i);
            int factor = factors[i];
            while (temp % factor == 0) {
                temp /= factor;
            }
        }
        __Loop_Invariant_Dummy1(n, temp, factors, i);
        return temp == 1;
    }

    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires 3 <= factors.length;
    //@ requires 3 == factors.length;
    //@ requires 3 >= factors.length;
    //@ requires 1 < factors.length;
    //@ requires 1 <= factors.length;
    //@ requires 1 != factors.length;
    //@ requires -1 < factors.length;
    //@ requires -1 <= factors.length;
    //@ requires -1 != factors.length;
    //@ requires n < factors.length;
    //@ requires n <= factors.length;
    //@ requires n != factors.length;
    //@ requires i >= 3;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i != factors.length;
    //@ requires i >= factors.length;
    //@ requires i > factors.length;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isUgly(0);
        isUgly(1);
        isUgly(2);
        isUgly(3);
        isUgly(15);
        isUgly(-1);
        isUgly(-2);
        isUgly(-3);
		isUgly(4);
        isUgly(5);
        isUgly(7);
        isUgly(8);
		isUgly(13);
		isUgly(17);
		isUgly(12);
		isUgly(16);
    }
}


/home/max/Documents/JMLGPT/tmp/UglyNum.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:73:) in method isUgly
        __Loop_Invariant_Dummy1(n, temp, factors, i);
                               ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:73: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:26:
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:64: verify: Precondition conjunct is false: i != factors.length
    //@ requires i != factors.length;
                   ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:79: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:12:) in method main
        isUgly(2);
              ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:12: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:79:
    public static boolean isUgly(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:5: verify: Precondition conjunct is false: n <= 1
    //@ requires n <= 1;
                   ^
6 verification failures

class UglyNum {
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        int temp = n;
        int[] factors = {2, 3, 5};
        int i = 0;
        for (i = 0; i < factors.length; i++) {
            __Loop_Invariant_Dummy1(n, temp, factors, i);
            int factor = factors[i];
            while (temp % factor == 0) {
                temp /= factor;
            }
        }
        __Loop_Invariant_Dummy1(n, temp, factors, i);
        return temp == 1;
    }

    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires 3 <= factors.length;
    //@ requires 3 == factors.length;
    //@ requires 3 >= factors.length;
    //@ requires 1 < factors.length;
    //@ requires 1 <= factors.length;
    //@ requires 1 != factors.length;
    //@ requires -1 < factors.length;
    //@ requires -1 <= factors.length;
    //@ requires -1 != factors.length;
    //@ requires n < factors.length;
    //@ requires n <= factors.length;
    //@ requires n != factors.length;
    //@ requires i >= 3;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i >= factors.length;
    //@ requires i > factors.length;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isUgly(0);
        isUgly(1);
        isUgly(2);
        isUgly(3);
        isUgly(15);
        isUgly(-1);
        isUgly(-2);
        isUgly(-3);
		isUgly(4);
        isUgly(5);
        isUgly(7);
        isUgly(8);
		isUgly(13);
		isUgly(17);
		isUgly(12);
		isUgly(16);
    }
}


/home/max/Documents/JMLGPT/tmp/UglyNum.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:72:) in method isUgly
        __Loop_Invariant_Dummy1(n, temp, factors, i);
                               ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:72: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:26:
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:65: verify: Precondition conjunct is false: i > factors.length
    //@ requires i > factors.length;
                   ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:78: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:12:) in method main
        isUgly(2);
              ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:12: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:78:
    public static boolean isUgly(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:5: verify: Precondition conjunct is false: n <= 1
    //@ requires n <= 1;
                   ^
6 verification failures

class UglyNum {
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        int temp = n;
        int[] factors = {2, 3, 5};
        int i = 0;
        for (i = 0; i < factors.length; i++) {
            __Loop_Invariant_Dummy1(n, temp, factors, i);
            int factor = factors[i];
            while (temp % factor == 0) {
                temp /= factor;
            }
        }
        __Loop_Invariant_Dummy1(n, temp, factors, i);
        return temp == 1;
    }

    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires 3 <= factors.length;
    //@ requires 3 == factors.length;
    //@ requires 3 >= factors.length;
    //@ requires 1 < factors.length;
    //@ requires 1 <= factors.length;
    //@ requires 1 != factors.length;
    //@ requires -1 < factors.length;
    //@ requires -1 <= factors.length;
    //@ requires -1 != factors.length;
    //@ requires n < factors.length;
    //@ requires n <= factors.length;
    //@ requires n != factors.length;
    //@ requires i >= 3;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i >= factors.length;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isUgly(0);
        isUgly(1);
        isUgly(2);
        isUgly(3);
        isUgly(15);
        isUgly(-1);
        isUgly(-2);
        isUgly(-3);
		isUgly(4);
        isUgly(5);
        isUgly(7);
        isUgly(8);
		isUgly(13);
		isUgly(17);
		isUgly(12);
		isUgly(16);
    }
}


/home/max/Documents/JMLGPT/tmp/UglyNum.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:71:) in method isUgly
        __Loop_Invariant_Dummy1(n, temp, factors, i);
                               ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:71: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:26:
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:65: verify: Precondition conjunct is false: i < n
    //@ requires i < n;
                   ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:77: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:12:) in method main
        isUgly(2);
              ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:12: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:77:
    public static boolean isUgly(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:5: verify: Precondition conjunct is false: n <= 1
    //@ requires n <= 1;
                   ^
6 verification failures

class UglyNum {
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        int temp = n;
        int[] factors = {2, 3, 5};
        int i = 0;
        for (i = 0; i < factors.length; i++) {
            __Loop_Invariant_Dummy1(n, temp, factors, i);
            int factor = factors[i];
            while (temp % factor == 0) {
                temp /= factor;
            }
        }
        __Loop_Invariant_Dummy1(n, temp, factors, i);
        return temp == 1;
    }

    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires 3 <= factors.length;
    //@ requires 3 == factors.length;
    //@ requires 3 >= factors.length;
    //@ requires 1 < factors.length;
    //@ requires 1 <= factors.length;
    //@ requires 1 != factors.length;
    //@ requires -1 < factors.length;
    //@ requires -1 <= factors.length;
    //@ requires -1 != factors.length;
    //@ requires n < factors.length;
    //@ requires n <= factors.length;
    //@ requires n != factors.length;
    //@ requires i >= 3;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i >= factors.length;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isUgly(0);
        isUgly(1);
        isUgly(2);
        isUgly(3);
        isUgly(15);
        isUgly(-1);
        isUgly(-2);
        isUgly(-3);
		isUgly(4);
        isUgly(5);
        isUgly(7);
        isUgly(8);
		isUgly(13);
		isUgly(17);
		isUgly(12);
		isUgly(16);
    }
}


/home/max/Documents/JMLGPT/tmp/UglyNum.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:70:) in method isUgly
        __Loop_Invariant_Dummy1(n, temp, factors, i);
                               ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:70: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:26:
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:65: verify: Precondition conjunct is false: i <= n
    //@ requires i <= n;
                   ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:76: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:12:) in method main
        isUgly(2);
              ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:12: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:76:
    public static boolean isUgly(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:5: verify: Precondition conjunct is false: n <= 1
    //@ requires n <= 1;
                   ^
6 verification failures

class UglyNum {
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        int temp = n;
        int[] factors = {2, 3, 5};
        int i = 0;
        for (i = 0; i < factors.length; i++) {
            __Loop_Invariant_Dummy1(n, temp, factors, i);
            int factor = factors[i];
            while (temp % factor == 0) {
                temp /= factor;
            }
        }
        __Loop_Invariant_Dummy1(n, temp, factors, i);
        return temp == 1;
    }

    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires 3 <= factors.length;
    //@ requires 3 == factors.length;
    //@ requires 3 >= factors.length;
    //@ requires 1 < factors.length;
    //@ requires 1 <= factors.length;
    //@ requires 1 != factors.length;
    //@ requires -1 < factors.length;
    //@ requires -1 <= factors.length;
    //@ requires -1 != factors.length;
    //@ requires n < factors.length;
    //@ requires n <= factors.length;
    //@ requires n != factors.length;
    //@ requires i >= 3;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i >= factors.length;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isUgly(0);
        isUgly(1);
        isUgly(2);
        isUgly(3);
        isUgly(15);
        isUgly(-1);
        isUgly(-2);
        isUgly(-3);
		isUgly(4);
        isUgly(5);
        isUgly(7);
        isUgly(8);
		isUgly(13);
		isUgly(17);
		isUgly(12);
		isUgly(16);
    }
}


/home/max/Documents/JMLGPT/tmp/UglyNum.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:69:) in method isUgly
        __Loop_Invariant_Dummy1(n, temp, factors, i);
                               ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:69: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:26:
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:65: verify: Precondition conjunct is false: i == n
    //@ requires i == n;
                   ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:75: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:12:) in method main
        isUgly(2);
              ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:12: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:75:
    public static boolean isUgly(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:5: verify: Precondition conjunct is false: n <= 1
    //@ requires n <= 1;
                   ^
6 verification failures

class UglyNum {
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        int temp = n;
        int[] factors = {2, 3, 5};
        int i = 0;
        for (i = 0; i < factors.length; i++) {
            __Loop_Invariant_Dummy1(n, temp, factors, i);
            int factor = factors[i];
            while (temp % factor == 0) {
                temp /= factor;
            }
        }
        __Loop_Invariant_Dummy1(n, temp, factors, i);
        return temp == 1;
    }

    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires 3 <= factors.length;
    //@ requires 3 == factors.length;
    //@ requires 3 >= factors.length;
    //@ requires 1 < factors.length;
    //@ requires 1 <= factors.length;
    //@ requires 1 != factors.length;
    //@ requires -1 < factors.length;
    //@ requires -1 <= factors.length;
    //@ requires -1 != factors.length;
    //@ requires n < factors.length;
    //@ requires n <= factors.length;
    //@ requires n != factors.length;
    //@ requires i >= 3;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i >= factors.length;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isUgly(0);
        isUgly(1);
        isUgly(2);
        isUgly(3);
        isUgly(15);
        isUgly(-1);
        isUgly(-2);
        isUgly(-3);
		isUgly(4);
        isUgly(5);
        isUgly(7);
        isUgly(8);
		isUgly(13);
		isUgly(17);
		isUgly(12);
		isUgly(16);
    }
}


/home/max/Documents/JMLGPT/tmp/UglyNum.java:27: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:10:) in method isUgly
        return temp == 1;
        ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:10: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:27:
    //@ ensures !\result;
        ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:74: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:12:) in method main
        isUgly(2);
              ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:12: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:74:
    public static boolean isUgly(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:5: verify: Precondition conjunct is false: n <= 1
    //@ requires n <= 1;
                   ^
5 verification failures

class UglyNum {
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        int temp = n;
        int[] factors = {2, 3, 5};
        int i = 0;
        for (i = 0; i < factors.length; i++) {
            __Loop_Invariant_Dummy1(n, temp, factors, i);
            int factor = factors[i];
            while (temp % factor == 0) {
                temp /= factor;
            }
        }
        __Loop_Invariant_Dummy1(n, temp, factors, i);
        return temp == 1;
    }

    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires 3 <= factors.length;
    //@ requires 3 == factors.length;
    //@ requires 3 >= factors.length;
    //@ requires 1 < factors.length;
    //@ requires 1 <= factors.length;
    //@ requires 1 != factors.length;
    //@ requires -1 < factors.length;
    //@ requires -1 <= factors.length;
    //@ requires -1 != factors.length;
    //@ requires n < factors.length;
    //@ requires n <= factors.length;
    //@ requires n != factors.length;
    //@ requires i >= 3;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i >= factors.length;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isUgly(0);
        isUgly(1);
        isUgly(2);
        isUgly(3);
        isUgly(15);
        isUgly(-1);
        isUgly(-2);
        isUgly(-3);
		isUgly(4);
        isUgly(5);
        isUgly(7);
        isUgly(8);
		isUgly(13);
		isUgly(17);
		isUgly(12);
		isUgly(16);
    }
}


/home/max/Documents/JMLGPT/tmp/UglyNum.java:26: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:10:) in method isUgly
        return temp == 1;
        ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:10: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:26:
    //@ ensures n >= 0 ==> !\result;
        ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:73: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:11:) in method main
        isUgly(2);
              ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:11: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:73:
    public static boolean isUgly(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:5: verify: Precondition conjunct is false: n <= 1
    //@ requires n <= 1;
                   ^
5 verification failures

class UglyNum {
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        int temp = n;
        int[] factors = {2, 3, 5};
        int i = 0;
        for (i = 0; i < factors.length; i++) {
            __Loop_Invariant_Dummy1(n, temp, factors, i);
            int factor = factors[i];
            while (temp % factor == 0) {
                temp /= factor;
            }
        }
        __Loop_Invariant_Dummy1(n, temp, factors, i);
        return temp == 1;
    }

    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires 3 <= factors.length;
    //@ requires 3 == factors.length;
    //@ requires 3 >= factors.length;
    //@ requires 1 < factors.length;
    //@ requires 1 <= factors.length;
    //@ requires 1 != factors.length;
    //@ requires -1 < factors.length;
    //@ requires -1 <= factors.length;
    //@ requires -1 != factors.length;
    //@ requires n < factors.length;
    //@ requires n <= factors.length;
    //@ requires n != factors.length;
    //@ requires i >= 3;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i >= factors.length;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isUgly(0);
        isUgly(1);
        isUgly(2);
        isUgly(3);
        isUgly(15);
        isUgly(-1);
        isUgly(-2);
        isUgly(-3);
		isUgly(4);
        isUgly(5);
        isUgly(7);
        isUgly(8);
		isUgly(13);
		isUgly(17);
		isUgly(12);
		isUgly(16);
    }
}


/home/max/Documents/JMLGPT/tmp/UglyNum.java:18: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:66:) in method isUgly
            __Loop_Invariant_Dummy1(n, temp, factors, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:66: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:18:
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:52: verify: Precondition conjunct is false: i >= 3
    //@ requires i >= 3;
                   ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:72: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:10:) in method main
        isUgly(2);
              ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:10: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:72:
    public static boolean isUgly(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:5: verify: Precondition conjunct is false: n <= 1
    //@ requires n <= 1;
                   ^
6 verification failures

class UglyNum {
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        int temp = n;
        int[] factors = {2, 3, 5};
        int i = 0;
        for (i = 0; i < factors.length; i++) {
            __Loop_Invariant_Dummy1(n, temp, factors, i);
            int factor = factors[i];
            while (temp % factor == 0) {
                temp /= factor;
            }
        }
        __Loop_Invariant_Dummy1(n, temp, factors, i);
        return temp == 1;
    }

    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires 3 <= factors.length;
    //@ requires 3 == factors.length;
    //@ requires 3 >= factors.length;
    //@ requires 1 < factors.length;
    //@ requires 1 <= factors.length;
    //@ requires 1 != factors.length;
    //@ requires -1 < factors.length;
    //@ requires -1 <= factors.length;
    //@ requires -1 != factors.length;
    //@ requires n < factors.length;
    //@ requires n <= factors.length;
    //@ requires n != factors.length;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i >= factors.length;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isUgly(0);
        isUgly(1);
        isUgly(2);
        isUgly(3);
        isUgly(15);
        isUgly(-1);
        isUgly(-2);
        isUgly(-3);
		isUgly(4);
        isUgly(5);
        isUgly(7);
        isUgly(8);
		isUgly(13);
		isUgly(17);
		isUgly(12);
		isUgly(16);
    }
}


/home/max/Documents/JMLGPT/tmp/UglyNum.java:18: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:65:) in method isUgly
            __Loop_Invariant_Dummy1(n, temp, factors, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:65: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:18:
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:52: verify: Precondition conjunct is false: i != 1
    //@ requires i != 1;
                   ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:71: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:10:) in method main
        isUgly(2);
              ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:10: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:71:
    public static boolean isUgly(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:5: verify: Precondition conjunct is false: n <= 1
    //@ requires n <= 1;
                   ^
6 verification failures

class UglyNum {
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        int temp = n;
        int[] factors = {2, 3, 5};
        int i = 0;
        for (i = 0; i < factors.length; i++) {
            __Loop_Invariant_Dummy1(n, temp, factors, i);
            int factor = factors[i];
            while (temp % factor == 0) {
                temp /= factor;
            }
        }
        __Loop_Invariant_Dummy1(n, temp, factors, i);
        return temp == 1;
    }

    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires 3 <= factors.length;
    //@ requires 3 == factors.length;
    //@ requires 3 >= factors.length;
    //@ requires 1 < factors.length;
    //@ requires 1 <= factors.length;
    //@ requires 1 != factors.length;
    //@ requires -1 < factors.length;
    //@ requires -1 <= factors.length;
    //@ requires -1 != factors.length;
    //@ requires n < factors.length;
    //@ requires n <= factors.length;
    //@ requires n != factors.length;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i >= factors.length;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isUgly(0);
        isUgly(1);
        isUgly(2);
        isUgly(3);
        isUgly(15);
        isUgly(-1);
        isUgly(-2);
        isUgly(-3);
		isUgly(4);
        isUgly(5);
        isUgly(7);
        isUgly(8);
		isUgly(13);
		isUgly(17);
		isUgly(12);
		isUgly(16);
    }
}


/home/max/Documents/JMLGPT/tmp/UglyNum.java:18: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:64:) in method isUgly
            __Loop_Invariant_Dummy1(n, temp, factors, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:64: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:18:
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:52: verify: Precondition conjunct is false: i >= 1
    //@ requires i >= 1;
                   ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:70: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:10:) in method main
        isUgly(2);
              ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:10: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:70:
    public static boolean isUgly(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:5: verify: Precondition conjunct is false: n <= 1
    //@ requires n <= 1;
                   ^
6 verification failures

class UglyNum {
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        int temp = n;
        int[] factors = {2, 3, 5};
        int i = 0;
        for (i = 0; i < factors.length; i++) {
            __Loop_Invariant_Dummy1(n, temp, factors, i);
            int factor = factors[i];
            while (temp % factor == 0) {
                temp /= factor;
            }
        }
        __Loop_Invariant_Dummy1(n, temp, factors, i);
        return temp == 1;
    }

    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires 3 <= factors.length;
    //@ requires 3 == factors.length;
    //@ requires 3 >= factors.length;
    //@ requires 1 < factors.length;
    //@ requires 1 <= factors.length;
    //@ requires 1 != factors.length;
    //@ requires -1 < factors.length;
    //@ requires -1 <= factors.length;
    //@ requires -1 != factors.length;
    //@ requires n < factors.length;
    //@ requires n <= factors.length;
    //@ requires n != factors.length;
    //@ requires i > 1;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i >= factors.length;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isUgly(0);
        isUgly(1);
        isUgly(2);
        isUgly(3);
        isUgly(15);
        isUgly(-1);
        isUgly(-2);
        isUgly(-3);
		isUgly(4);
        isUgly(5);
        isUgly(7);
        isUgly(8);
		isUgly(13);
		isUgly(17);
		isUgly(12);
		isUgly(16);
    }
}


/home/max/Documents/JMLGPT/tmp/UglyNum.java:18: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:63:) in method isUgly
            __Loop_Invariant_Dummy1(n, temp, factors, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:63: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:18:
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:52: verify: Precondition conjunct is false: i > 1
    //@ requires i > 1;
                   ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:69: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:10:) in method main
        isUgly(2);
              ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:10: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:69:
    public static boolean isUgly(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:5: verify: Precondition conjunct is false: n <= 1
    //@ requires n <= 1;
                   ^
6 verification failures

class UglyNum {
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        int temp = n;
        int[] factors = {2, 3, 5};
        int i = 0;
        for (i = 0; i < factors.length; i++) {
            __Loop_Invariant_Dummy1(n, temp, factors, i);
            int factor = factors[i];
            while (temp % factor == 0) {
                temp /= factor;
            }
        }
        __Loop_Invariant_Dummy1(n, temp, factors, i);
        return temp == 1;
    }

    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires 3 <= factors.length;
    //@ requires 3 == factors.length;
    //@ requires 3 >= factors.length;
    //@ requires 1 < factors.length;
    //@ requires 1 <= factors.length;
    //@ requires 1 != factors.length;
    //@ requires -1 < factors.length;
    //@ requires -1 <= factors.length;
    //@ requires -1 != factors.length;
    //@ requires n < factors.length;
    //@ requires n <= factors.length;
    //@ requires n != factors.length;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i >= factors.length;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isUgly(0);
        isUgly(1);
        isUgly(2);
        isUgly(3);
        isUgly(15);
        isUgly(-1);
        isUgly(-2);
        isUgly(-3);
		isUgly(4);
        isUgly(5);
        isUgly(7);
        isUgly(8);
		isUgly(13);
		isUgly(17);
		isUgly(12);
		isUgly(16);
    }
}


/home/max/Documents/JMLGPT/tmp/UglyNum.java:18: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:62:) in method isUgly
            __Loop_Invariant_Dummy1(n, temp, factors, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:62: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:18:
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:52: verify: Precondition conjunct is false: i != 0
    //@ requires i != 0;
                   ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:68: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:10:) in method main
        isUgly(2);
              ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:10: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:68:
    public static boolean isUgly(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:5: verify: Precondition conjunct is false: n <= 1
    //@ requires n <= 1;
                   ^
6 verification failures

class UglyNum {
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        int temp = n;
        int[] factors = {2, 3, 5};
        int i = 0;
        for (i = 0; i < factors.length; i++) {
            __Loop_Invariant_Dummy1(n, temp, factors, i);
            int factor = factors[i];
            while (temp % factor == 0) {
                temp /= factor;
            }
        }
        __Loop_Invariant_Dummy1(n, temp, factors, i);
        return temp == 1;
    }

    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires 3 <= factors.length;
    //@ requires 3 == factors.length;
    //@ requires 3 >= factors.length;
    //@ requires 1 < factors.length;
    //@ requires 1 <= factors.length;
    //@ requires 1 != factors.length;
    //@ requires -1 < factors.length;
    //@ requires -1 <= factors.length;
    //@ requires -1 != factors.length;
    //@ requires n < factors.length;
    //@ requires n <= factors.length;
    //@ requires n != factors.length;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i >= factors.length;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isUgly(0);
        isUgly(1);
        isUgly(2);
        isUgly(3);
        isUgly(15);
        isUgly(-1);
        isUgly(-2);
        isUgly(-3);
		isUgly(4);
        isUgly(5);
        isUgly(7);
        isUgly(8);
		isUgly(13);
		isUgly(17);
		isUgly(12);
		isUgly(16);
    }
}


/home/max/Documents/JMLGPT/tmp/UglyNum.java:18: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:61:) in method isUgly
            __Loop_Invariant_Dummy1(n, temp, factors, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:61: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:18:
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:52: verify: Precondition conjunct is false: i >= 0
    //@ requires i >= 0;
                   ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:67: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:10:) in method main
        isUgly(2);
              ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:10: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:67:
    public static boolean isUgly(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:5: verify: Precondition conjunct is false: n <= 1
    //@ requires n <= 1;
                   ^
6 verification failures

class UglyNum {
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        int temp = n;
        int[] factors = {2, 3, 5};
        int i = 0;
        for (i = 0; i < factors.length; i++) {
            __Loop_Invariant_Dummy1(n, temp, factors, i);
            int factor = factors[i];
            while (temp % factor == 0) {
                temp /= factor;
            }
        }
        __Loop_Invariant_Dummy1(n, temp, factors, i);
        return temp == 1;
    }

    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires 3 <= factors.length;
    //@ requires 3 == factors.length;
    //@ requires 3 >= factors.length;
    //@ requires 1 < factors.length;
    //@ requires 1 <= factors.length;
    //@ requires 1 != factors.length;
    //@ requires -1 < factors.length;
    //@ requires -1 <= factors.length;
    //@ requires -1 != factors.length;
    //@ requires n < factors.length;
    //@ requires n <= factors.length;
    //@ requires n != factors.length;
    //@ requires i > 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i >= factors.length;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isUgly(0);
        isUgly(1);
        isUgly(2);
        isUgly(3);
        isUgly(15);
        isUgly(-1);
        isUgly(-2);
        isUgly(-3);
		isUgly(4);
        isUgly(5);
        isUgly(7);
        isUgly(8);
		isUgly(13);
		isUgly(17);
		isUgly(12);
		isUgly(16);
    }
}


/home/max/Documents/JMLGPT/tmp/UglyNum.java:18: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:60:) in method isUgly
            __Loop_Invariant_Dummy1(n, temp, factors, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:60: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:18:
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:52: verify: Precondition conjunct is false: i > 0
    //@ requires i > 0;
                   ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:66: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:10:) in method main
        isUgly(2);
              ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:10: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:66:
    public static boolean isUgly(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:5: verify: Precondition conjunct is false: n <= 1
    //@ requires n <= 1;
                   ^
6 verification failures

class UglyNum {
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        int temp = n;
        int[] factors = {2, 3, 5};
        int i = 0;
        for (i = 0; i < factors.length; i++) {
            __Loop_Invariant_Dummy1(n, temp, factors, i);
            int factor = factors[i];
            while (temp % factor == 0) {
                temp /= factor;
            }
        }
        __Loop_Invariant_Dummy1(n, temp, factors, i);
        return temp == 1;
    }

    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires 3 <= factors.length;
    //@ requires 3 == factors.length;
    //@ requires 3 >= factors.length;
    //@ requires 1 < factors.length;
    //@ requires 1 <= factors.length;
    //@ requires 1 != factors.length;
    //@ requires -1 < factors.length;
    //@ requires -1 <= factors.length;
    //@ requires -1 != factors.length;
    //@ requires n < factors.length;
    //@ requires n <= factors.length;
    //@ requires n != factors.length;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i >= factors.length;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isUgly(0);
        isUgly(1);
        isUgly(2);
        isUgly(3);
        isUgly(15);
        isUgly(-1);
        isUgly(-2);
        isUgly(-3);
		isUgly(4);
        isUgly(5);
        isUgly(7);
        isUgly(8);
		isUgly(13);
		isUgly(17);
		isUgly(12);
		isUgly(16);
    }
}


/home/max/Documents/JMLGPT/tmp/UglyNum.java:18: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:59:) in method isUgly
            __Loop_Invariant_Dummy1(n, temp, factors, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:59: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:18:
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:52: verify: Precondition conjunct is false: i != -1
    //@ requires i != -1;
                   ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:65: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:10:) in method main
        isUgly(2);
              ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:10: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:65:
    public static boolean isUgly(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:5: verify: Precondition conjunct is false: n <= 1
    //@ requires n <= 1;
                   ^
6 verification failures

class UglyNum {
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        int temp = n;
        int[] factors = {2, 3, 5};
        int i = 0;
        for (i = 0; i < factors.length; i++) {
            __Loop_Invariant_Dummy1(n, temp, factors, i);
            int factor = factors[i];
            while (temp % factor == 0) {
                temp /= factor;
            }
        }
        __Loop_Invariant_Dummy1(n, temp, factors, i);
        return temp == 1;
    }

    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires 3 <= factors.length;
    //@ requires 3 == factors.length;
    //@ requires 3 >= factors.length;
    //@ requires 1 < factors.length;
    //@ requires 1 <= factors.length;
    //@ requires 1 != factors.length;
    //@ requires -1 < factors.length;
    //@ requires -1 <= factors.length;
    //@ requires -1 != factors.length;
    //@ requires n < factors.length;
    //@ requires n <= factors.length;
    //@ requires n != factors.length;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i >= factors.length;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isUgly(0);
        isUgly(1);
        isUgly(2);
        isUgly(3);
        isUgly(15);
        isUgly(-1);
        isUgly(-2);
        isUgly(-3);
		isUgly(4);
        isUgly(5);
        isUgly(7);
        isUgly(8);
		isUgly(13);
		isUgly(17);
		isUgly(12);
		isUgly(16);
    }
}


/home/max/Documents/JMLGPT/tmp/UglyNum.java:18: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:58:) in method isUgly
            __Loop_Invariant_Dummy1(n, temp, factors, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:58: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:18:
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:52: verify: Precondition conjunct is false: i >= -1
    //@ requires i >= -1;
                   ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:10:) in method main
        isUgly(2);
              ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:10: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:64:
    public static boolean isUgly(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:5: verify: Precondition conjunct is false: n <= 1
    //@ requires n <= 1;
                   ^
6 verification failures

class UglyNum {
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        int temp = n;
        int[] factors = {2, 3, 5};
        int i = 0;
        for (i = 0; i < factors.length; i++) {
            __Loop_Invariant_Dummy1(n, temp, factors, i);
            int factor = factors[i];
            while (temp % factor == 0) {
                temp /= factor;
            }
        }
        __Loop_Invariant_Dummy1(n, temp, factors, i);
        return temp == 1;
    }

    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires 3 <= factors.length;
    //@ requires 3 == factors.length;
    //@ requires 3 >= factors.length;
    //@ requires 1 < factors.length;
    //@ requires 1 <= factors.length;
    //@ requires 1 != factors.length;
    //@ requires -1 < factors.length;
    //@ requires -1 <= factors.length;
    //@ requires -1 != factors.length;
    //@ requires n < factors.length;
    //@ requires n <= factors.length;
    //@ requires n != factors.length;
    //@ requires i > -1;
    //@ requires i >= factors.length;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isUgly(0);
        isUgly(1);
        isUgly(2);
        isUgly(3);
        isUgly(15);
        isUgly(-1);
        isUgly(-2);
        isUgly(-3);
		isUgly(4);
        isUgly(5);
        isUgly(7);
        isUgly(8);
		isUgly(13);
		isUgly(17);
		isUgly(12);
		isUgly(16);
    }
}


/home/max/Documents/JMLGPT/tmp/UglyNum.java:18: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:57:) in method isUgly
            __Loop_Invariant_Dummy1(n, temp, factors, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:57: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:18:
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:52: verify: Precondition conjunct is false: i > -1
    //@ requires i > -1;
                   ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:63: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:10:) in method main
        isUgly(2);
              ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:10: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:63:
    public static boolean isUgly(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:5: verify: Precondition conjunct is false: n <= 1
    //@ requires n <= 1;
                   ^
6 verification failures

class UglyNum {
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        int temp = n;
        int[] factors = {2, 3, 5};
        int i = 0;
        for (i = 0; i < factors.length; i++) {
            __Loop_Invariant_Dummy1(n, temp, factors, i);
            int factor = factors[i];
            while (temp % factor == 0) {
                temp /= factor;
            }
        }
        __Loop_Invariant_Dummy1(n, temp, factors, i);
        return temp == 1;
    }

    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires 3 <= factors.length;
    //@ requires 3 == factors.length;
    //@ requires 3 >= factors.length;
    //@ requires 1 < factors.length;
    //@ requires 1 <= factors.length;
    //@ requires 1 != factors.length;
    //@ requires -1 < factors.length;
    //@ requires -1 <= factors.length;
    //@ requires -1 != factors.length;
    //@ requires n < factors.length;
    //@ requires n <= factors.length;
    //@ requires n != factors.length;
    //@ requires i >= factors.length;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isUgly(0);
        isUgly(1);
        isUgly(2);
        isUgly(3);
        isUgly(15);
        isUgly(-1);
        isUgly(-2);
        isUgly(-3);
		isUgly(4);
        isUgly(5);
        isUgly(7);
        isUgly(8);
		isUgly(13);
		isUgly(17);
		isUgly(12);
		isUgly(16);
    }
}


/home/max/Documents/JMLGPT/tmp/UglyNum.java:18: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:56:) in method isUgly
            __Loop_Invariant_Dummy1(n, temp, factors, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:56: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:18:
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:52: verify: Precondition conjunct is false: i >= factors.length
    //@ requires i >= factors.length;
                   ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:62: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:10:) in method main
        isUgly(2);
              ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:10: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:62:
    public static boolean isUgly(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:5: verify: Precondition conjunct is false: n <= 1
    //@ requires n <= 1;
                   ^
6 verification failures

class UglyNum {
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        int temp = n;
        int[] factors = {2, 3, 5};
        int i = 0;
        for (i = 0; i < factors.length; i++) {
            __Loop_Invariant_Dummy1(n, temp, factors, i);
            int factor = factors[i];
            while (temp % factor == 0) {
                temp /= factor;
            }
        }
        __Loop_Invariant_Dummy1(n, temp, factors, i);
        return temp == 1;
    }

    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires 3 <= factors.length;
    //@ requires 3 == factors.length;
    //@ requires 3 >= factors.length;
    //@ requires 1 < factors.length;
    //@ requires 1 <= factors.length;
    //@ requires 1 != factors.length;
    //@ requires -1 < factors.length;
    //@ requires -1 <= factors.length;
    //@ requires -1 != factors.length;
    //@ requires n < factors.length;
    //@ requires n <= factors.length;
    //@ requires n != factors.length;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isUgly(0);
        isUgly(1);
        isUgly(2);
        isUgly(3);
        isUgly(15);
        isUgly(-1);
        isUgly(-2);
        isUgly(-3);
		isUgly(4);
        isUgly(5);
        isUgly(7);
        isUgly(8);
		isUgly(13);
		isUgly(17);
		isUgly(12);
		isUgly(16);
    }
}


/home/max/Documents/JMLGPT/tmp/UglyNum.java:18: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:55:) in method isUgly
            __Loop_Invariant_Dummy1(n, temp, factors, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:55: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:18:
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:52: verify: Precondition conjunct is false: i != n
    //@ requires i != n;
                   ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:61: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:10:) in method main
        isUgly(2);
              ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:10: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:61:
    public static boolean isUgly(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:5: verify: Precondition conjunct is false: n <= 1
    //@ requires n <= 1;
                   ^
6 verification failures

class UglyNum {
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        int temp = n;
        int[] factors = {2, 3, 5};
        int i = 0;
        for (i = 0; i < factors.length; i++) {
            __Loop_Invariant_Dummy1(n, temp, factors, i);
            int factor = factors[i];
            while (temp % factor == 0) {
                temp /= factor;
            }
        }
        __Loop_Invariant_Dummy1(n, temp, factors, i);
        return temp == 1;
    }

    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires 3 <= factors.length;
    //@ requires 3 == factors.length;
    //@ requires 3 >= factors.length;
    //@ requires 1 < factors.length;
    //@ requires 1 <= factors.length;
    //@ requires 1 != factors.length;
    //@ requires -1 < factors.length;
    //@ requires -1 <= factors.length;
    //@ requires -1 != factors.length;
    //@ requires n < factors.length;
    //@ requires n <= factors.length;
    //@ requires n != factors.length;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isUgly(0);
        isUgly(1);
        isUgly(2);
        isUgly(3);
        isUgly(15);
        isUgly(-1);
        isUgly(-2);
        isUgly(-3);
		isUgly(4);
        isUgly(5);
        isUgly(7);
        isUgly(8);
		isUgly(13);
		isUgly(17);
		isUgly(12);
		isUgly(16);
    }
}


/home/max/Documents/JMLGPT/tmp/UglyNum.java:18: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:54:) in method isUgly
            __Loop_Invariant_Dummy1(n, temp, factors, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:54: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:18:
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:52: verify: Precondition conjunct is false: i >= n
    //@ requires i >= n;
                   ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:60: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:10:) in method main
        isUgly(2);
              ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:10: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:60:
    public static boolean isUgly(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:5: verify: Precondition conjunct is false: n <= 1
    //@ requires n <= 1;
                   ^
6 verification failures

class UglyNum {
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        int temp = n;
        int[] factors = {2, 3, 5};
        int i = 0;
        for (i = 0; i < factors.length; i++) {
            __Loop_Invariant_Dummy1(n, temp, factors, i);
            int factor = factors[i];
            while (temp % factor == 0) {
                temp /= factor;
            }
        }
        __Loop_Invariant_Dummy1(n, temp, factors, i);
        return temp == 1;
    }

    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires 3 <= factors.length;
    //@ requires 3 == factors.length;
    //@ requires 3 >= factors.length;
    //@ requires 1 < factors.length;
    //@ requires 1 <= factors.length;
    //@ requires 1 != factors.length;
    //@ requires -1 < factors.length;
    //@ requires -1 <= factors.length;
    //@ requires -1 != factors.length;
    //@ requires n < factors.length;
    //@ requires n <= factors.length;
    //@ requires n != factors.length;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isUgly(0);
        isUgly(1);
        isUgly(2);
        isUgly(3);
        isUgly(15);
        isUgly(-1);
        isUgly(-2);
        isUgly(-3);
		isUgly(4);
        isUgly(5);
        isUgly(7);
        isUgly(8);
		isUgly(13);
		isUgly(17);
		isUgly(12);
		isUgly(16);
    }
}


/home/max/Documents/JMLGPT/tmp/UglyNum.java:18: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:53:) in method isUgly
            __Loop_Invariant_Dummy1(n, temp, factors, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:53: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:18:
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:52: verify: Precondition conjunct is false: i > n
    //@ requires i > n;
                   ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:59: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:10:) in method main
        isUgly(2);
              ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:10: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:59:
    public static boolean isUgly(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:5: verify: Precondition conjunct is false: n <= 1
    //@ requires n <= 1;
                   ^
6 verification failures

class UglyNum {
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        int temp = n;
        int[] factors = {2, 3, 5};
        int i = 0;
        for (i = 0; i < factors.length; i++) {
            __Loop_Invariant_Dummy1(n, temp, factors, i);
            int factor = factors[i];
            while (temp % factor == 0) {
                temp /= factor;
            }
        }
        __Loop_Invariant_Dummy1(n, temp, factors, i);
        return temp == 1;
    }

    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires 3 <= factors.length;
    //@ requires 3 == factors.length;
    //@ requires 3 >= factors.length;
    //@ requires 1 < factors.length;
    //@ requires 1 <= factors.length;
    //@ requires 1 != factors.length;
    //@ requires -1 < factors.length;
    //@ requires -1 <= factors.length;
    //@ requires -1 != factors.length;
    //@ requires n < factors.length;
    //@ requires n <= factors.length;
    //@ requires n != factors.length;
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isUgly(0);
        isUgly(1);
        isUgly(2);
        isUgly(3);
        isUgly(15);
        isUgly(-1);
        isUgly(-2);
        isUgly(-3);
		isUgly(4);
        isUgly(5);
        isUgly(7);
        isUgly(8);
		isUgly(13);
		isUgly(17);
		isUgly(12);
		isUgly(16);
    }
}


/home/max/Documents/JMLGPT/tmp/UglyNum.java:19: verify: The prover cannot establish an assertion (PossiblyNegativeIndex) in method isUgly
            int factor = factors[i];
                                ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:58: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:10:) in method main
        isUgly(2);
              ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:10: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:58:
    public static boolean isUgly(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:5: verify: Precondition conjunct is false: n <= 1
    //@ requires n <= 1;
                   ^
4 verification failures

class UglyNum {
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        int temp = n;
        int[] factors = {2, 3, 5};
        int i = 0;
        for (i = 0; i < factors.length; i++) {
            __Loop_Invariant_Dummy1(n, temp, factors, i);
            int factor = factors[i];
            while (temp % factor == 0) {
                temp /= factor;
            }
        }
        __Loop_Invariant_Dummy1(n, temp, factors, i);
        return temp == 1;
    }

    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires 3 <= factors.length;
    //@ requires 3 == factors.length;
    //@ requires 3 >= factors.length;
    //@ requires 1 < factors.length;
    //@ requires 1 <= factors.length;
    //@ requires 1 != factors.length;
    //@ requires -1 < factors.length;
    //@ requires -1 <= factors.length;
    //@ requires -1 != factors.length;
    //@ requires n < factors.length;
    //@ requires n <= factors.length;
    //@ requires n != factors.length;
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isUgly(0);
        isUgly(1);
        isUgly(2);
        isUgly(3);
        isUgly(15);
        isUgly(-1);
        isUgly(-2);
        isUgly(-3);
		isUgly(4);
        isUgly(5);
        isUgly(7);
        isUgly(8);
		isUgly(13);
		isUgly(17);
		isUgly(12);
		isUgly(16);
    }
}


/home/max/Documents/JMLGPT/tmp/UglyNum.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:51:) in method isUgly
        __Loop_Invariant_Dummy1(n, temp, factors, i);
                               ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:51: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:23:
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:30: verify: Precondition conjunct is false: n <= 1
    //@ requires n <= 1;
                   ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:58: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:9:) in method main
        isUgly(3);
              ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:9: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:58:
    public static boolean isUgly(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:2: verify: Precondition conjunct is false: n < 3
    //@ requires n < 3;
                   ^
6 verification failures

class UglyNum {
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        int temp = n;
        int[] factors = {2, 3, 5};
        int i = 0;
        for (i = 0; i < factors.length; i++) {
            __Loop_Invariant_Dummy1(n, temp, factors, i);
            int factor = factors[i];
            while (temp % factor == 0) {
                temp /= factor;
            }
        }
        __Loop_Invariant_Dummy1(n, temp, factors, i);
        return temp == 1;
    }

    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires 3 <= factors.length;
    //@ requires 3 == factors.length;
    //@ requires 3 >= factors.length;
    //@ requires 1 < factors.length;
    //@ requires 1 <= factors.length;
    //@ requires 1 != factors.length;
    //@ requires -1 < factors.length;
    //@ requires -1 <= factors.length;
    //@ requires -1 != factors.length;
    //@ requires n < factors.length;
    //@ requires n <= factors.length;
    //@ requires n != factors.length;
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isUgly(0);
        isUgly(1);
        isUgly(2);
        isUgly(3);
        isUgly(15);
        isUgly(-1);
        isUgly(-2);
        isUgly(-3);
		isUgly(4);
        isUgly(5);
        isUgly(7);
        isUgly(8);
		isUgly(13);
		isUgly(17);
		isUgly(12);
		isUgly(16);
    }
}


/home/max/Documents/JMLGPT/tmp/UglyNum.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:50:) in method isUgly
        __Loop_Invariant_Dummy1(n, temp, factors, i);
                               ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:50: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:23:
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:30: verify: Precondition conjunct is false: n == 1
    //@ requires n == 1;
                   ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:57: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:9:) in method main
        isUgly(3);
              ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:9: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:57:
    public static boolean isUgly(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:2: verify: Precondition conjunct is false: n < 3
    //@ requires n < 3;
                   ^
6 verification failures

class UglyNum {
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        int temp = n;
        int[] factors = {2, 3, 5};
        int i = 0;
        for (i = 0; i < factors.length; i++) {
            __Loop_Invariant_Dummy1(n, temp, factors, i);
            int factor = factors[i];
            while (temp % factor == 0) {
                temp /= factor;
            }
        }
        __Loop_Invariant_Dummy1(n, temp, factors, i);
        return temp == 1;
    }

    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires 3 <= factors.length;
    //@ requires 3 == factors.length;
    //@ requires 3 >= factors.length;
    //@ requires 1 < factors.length;
    //@ requires 1 <= factors.length;
    //@ requires 1 != factors.length;
    //@ requires -1 < factors.length;
    //@ requires -1 <= factors.length;
    //@ requires -1 != factors.length;
    //@ requires n < factors.length;
    //@ requires n <= factors.length;
    //@ requires n != factors.length;
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isUgly(0);
        isUgly(1);
        isUgly(2);
        isUgly(3);
        isUgly(15);
        isUgly(-1);
        isUgly(-2);
        isUgly(-3);
		isUgly(4);
        isUgly(5);
        isUgly(7);
        isUgly(8);
		isUgly(13);
		isUgly(17);
		isUgly(12);
		isUgly(16);
    }
}


/home/max/Documents/JMLGPT/tmp/UglyNum.java:18: verify: The prover cannot establish an assertion (PossiblyNegativeIndex) in method isUgly
            int factor = factors[i];
                                ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:56: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:9:) in method main
        isUgly(3);
              ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:9: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:56:
    public static boolean isUgly(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:2: verify: Precondition conjunct is false: n < 3
    //@ requires n < 3;
                   ^
4 verification failures

class UglyNum {
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        int temp = n;
        int[] factors = {2, 3, 5};
        int i = 0;
        for (i = 0; i < factors.length; i++) {
            __Loop_Invariant_Dummy1(n, temp, factors, i);
            int factor = factors[i];
            while (temp % factor == 0) {
                temp /= factor;
            }
        }
        __Loop_Invariant_Dummy1(n, temp, factors, i);
        return temp == 1;
    }

    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires 3 <= factors.length;
    //@ requires 3 == factors.length;
    //@ requires 3 >= factors.length;
    //@ requires 1 < factors.length;
    //@ requires 1 <= factors.length;
    //@ requires 1 != factors.length;
    //@ requires -1 < factors.length;
    //@ requires -1 <= factors.length;
    //@ requires -1 != factors.length;
    //@ requires n < factors.length;
    //@ requires n <= factors.length;
    //@ requires n != factors.length;
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isUgly(0);
        isUgly(1);
        isUgly(2);
        isUgly(3);
        isUgly(15);
        isUgly(-1);
        isUgly(-2);
        isUgly(-3);
		isUgly(4);
        isUgly(5);
        isUgly(7);
        isUgly(8);
		isUgly(13);
		isUgly(17);
		isUgly(12);
		isUgly(16);
    }
}


/home/max/Documents/JMLGPT/tmp/UglyNum.java:17: verify: The prover cannot establish an assertion (PossiblyNegativeIndex) in method isUgly
            int factor = factors[i];
                                ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:55: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:8:) in method main
        isUgly(3);
              ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:8: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:55:
    public static boolean isUgly(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:3: verify: Precondition conjunct is false: n != 3
    //@ requires n != 3;
                   ^
4 verification failures

class UglyNum {
    //@ requires n <= 3;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        int temp = n;
        int[] factors = {2, 3, 5};
        int i = 0;
        for (i = 0; i < factors.length; i++) {
            __Loop_Invariant_Dummy1(n, temp, factors, i);
            int factor = factors[i];
            while (temp % factor == 0) {
                temp /= factor;
            }
        }
        __Loop_Invariant_Dummy1(n, temp, factors, i);
        return temp == 1;
    }

    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires 3 <= factors.length;
    //@ requires 3 == factors.length;
    //@ requires 3 >= factors.length;
    //@ requires 1 < factors.length;
    //@ requires 1 <= factors.length;
    //@ requires 1 != factors.length;
    //@ requires -1 < factors.length;
    //@ requires -1 <= factors.length;
    //@ requires -1 != factors.length;
    //@ requires n < factors.length;
    //@ requires n <= factors.length;
    //@ requires n != factors.length;
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isUgly(0);
        isUgly(1);
        isUgly(2);
        isUgly(3);
        isUgly(15);
        isUgly(-1);
        isUgly(-2);
        isUgly(-3);
		isUgly(4);
        isUgly(5);
        isUgly(7);
        isUgly(8);
		isUgly(13);
		isUgly(17);
		isUgly(12);
		isUgly(16);
    }
}


/home/max/Documents/JMLGPT/tmp/UglyNum.java:21: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:47:) in method isUgly
        __Loop_Invariant_Dummy1(n, temp, factors, i);
                               ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:47: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:21:
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:25: verify: Precondition conjunct is false: n < 3
    //@ requires n < 3;
                   ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:55: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:7:) in method main
        isUgly(15);
              ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:7: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:55:
    public static boolean isUgly(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:2: verify: Precondition conjunct is false: n <= 3
    //@ requires n <= 3;
                   ^
6 verification failures

class UglyNum {
    //@ requires n <= 3;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        int temp = n;
        int[] factors = {2, 3, 5};
        int i = 0;
        for (i = 0; i < factors.length; i++) {
            __Loop_Invariant_Dummy1(n, temp, factors, i);
            int factor = factors[i];
            while (temp % factor == 0) {
                temp /= factor;
            }
        }
        __Loop_Invariant_Dummy1(n, temp, factors, i);
        return temp == 1;
    }

    //@ requires n <= 3;
    //@ requires n != 3;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires 3 <= factors.length;
    //@ requires 3 == factors.length;
    //@ requires 3 >= factors.length;
    //@ requires 1 < factors.length;
    //@ requires 1 <= factors.length;
    //@ requires 1 != factors.length;
    //@ requires -1 < factors.length;
    //@ requires -1 <= factors.length;
    //@ requires -1 != factors.length;
    //@ requires n < factors.length;
    //@ requires n <= factors.length;
    //@ requires n != factors.length;
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isUgly(0);
        isUgly(1);
        isUgly(2);
        isUgly(3);
        isUgly(15);
        isUgly(-1);
        isUgly(-2);
        isUgly(-3);
		isUgly(4);
        isUgly(5);
        isUgly(7);
        isUgly(8);
		isUgly(13);
		isUgly(17);
		isUgly(12);
		isUgly(16);
    }
}


/home/max/Documents/JMLGPT/tmp/UglyNum.java:21: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:46:) in method isUgly
        __Loop_Invariant_Dummy1(n, temp, factors, i);
                               ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:46: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:21:
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:26: verify: Precondition conjunct is false: n != 3
    //@ requires n != 3;
                   ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:54: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:7:) in method main
        isUgly(15);
              ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:7: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:54:
    public static boolean isUgly(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:2: verify: Precondition conjunct is false: n <= 3
    //@ requires n <= 3;
                   ^
6 verification failures

class UglyNum {
    //@ requires n <= 3;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        int temp = n;
        int[] factors = {2, 3, 5};
        int i = 0;
        for (i = 0; i < factors.length; i++) {
            __Loop_Invariant_Dummy1(n, temp, factors, i);
            int factor = factors[i];
            while (temp % factor == 0) {
                temp /= factor;
            }
        }
        __Loop_Invariant_Dummy1(n, temp, factors, i);
        return temp == 1;
    }

    //@ requires n <= 3;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires 3 <= factors.length;
    //@ requires 3 == factors.length;
    //@ requires 3 >= factors.length;
    //@ requires 1 < factors.length;
    //@ requires 1 <= factors.length;
    //@ requires 1 != factors.length;
    //@ requires -1 < factors.length;
    //@ requires -1 <= factors.length;
    //@ requires -1 != factors.length;
    //@ requires n < factors.length;
    //@ requires n <= factors.length;
    //@ requires n != factors.length;
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isUgly(0);
        isUgly(1);
        isUgly(2);
        isUgly(3);
        isUgly(15);
        isUgly(-1);
        isUgly(-2);
        isUgly(-3);
		isUgly(4);
        isUgly(5);
        isUgly(7);
        isUgly(8);
		isUgly(13);
		isUgly(17);
		isUgly(12);
		isUgly(16);
    }
}


/home/max/Documents/JMLGPT/tmp/UglyNum.java:21: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:45:) in method isUgly
        __Loop_Invariant_Dummy1(n, temp, factors, i);
                               ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:45: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:21:
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:42: verify: Precondition conjunct is false: n < factors.length
    //@ requires n < factors.length;
                   ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:53: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:7:) in method main
        isUgly(15);
              ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:7: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:53:
    public static boolean isUgly(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:2: verify: Precondition conjunct is false: n <= 3
    //@ requires n <= 3;
                   ^
6 verification failures

class UglyNum {
    //@ requires n <= 3;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        int temp = n;
        int[] factors = {2, 3, 5};
        int i = 0;
        for (i = 0; i < factors.length; i++) {
            __Loop_Invariant_Dummy1(n, temp, factors, i);
            int factor = factors[i];
            while (temp % factor == 0) {
                temp /= factor;
            }
        }
        __Loop_Invariant_Dummy1(n, temp, factors, i);
        return temp == 1;
    }

    //@ requires n <= 3;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires 3 <= factors.length;
    //@ requires 3 == factors.length;
    //@ requires 3 >= factors.length;
    //@ requires 1 < factors.length;
    //@ requires 1 <= factors.length;
    //@ requires 1 != factors.length;
    //@ requires -1 < factors.length;
    //@ requires -1 <= factors.length;
    //@ requires -1 != factors.length;
    //@ requires n <= factors.length;
    //@ requires n != factors.length;
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isUgly(0);
        isUgly(1);
        isUgly(2);
        isUgly(3);
        isUgly(15);
        isUgly(-1);
        isUgly(-2);
        isUgly(-3);
		isUgly(4);
        isUgly(5);
        isUgly(7);
        isUgly(8);
		isUgly(13);
		isUgly(17);
		isUgly(12);
		isUgly(16);
    }
}


/home/max/Documents/JMLGPT/tmp/UglyNum.java:21: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:44:) in method isUgly
        __Loop_Invariant_Dummy1(n, temp, factors, i);
                               ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:44: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:21:
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:43: verify: Precondition conjunct is false: n != factors.length
    //@ requires n != factors.length;
                   ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:52: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:7:) in method main
        isUgly(15);
              ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:7: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:52:
    public static boolean isUgly(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:2: verify: Precondition conjunct is false: n <= 3
    //@ requires n <= 3;
                   ^
6 verification failures

class UglyNum {
    //@ requires n <= 3;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        int temp = n;
        int[] factors = {2, 3, 5};
        int i = 0;
        for (i = 0; i < factors.length; i++) {
            __Loop_Invariant_Dummy1(n, temp, factors, i);
            int factor = factors[i];
            while (temp % factor == 0) {
                temp /= factor;
            }
        }
        __Loop_Invariant_Dummy1(n, temp, factors, i);
        return temp == 1;
    }

    //@ requires n <= 3;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires 3 <= factors.length;
    //@ requires 3 == factors.length;
    //@ requires 3 >= factors.length;
    //@ requires 1 < factors.length;
    //@ requires 1 <= factors.length;
    //@ requires 1 != factors.length;
    //@ requires -1 < factors.length;
    //@ requires -1 <= factors.length;
    //@ requires -1 != factors.length;
    //@ requires n <= factors.length;
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isUgly(0);
        isUgly(1);
        isUgly(2);
        isUgly(3);
        isUgly(15);
        isUgly(-1);
        isUgly(-2);
        isUgly(-3);
		isUgly(4);
        isUgly(5);
        isUgly(7);
        isUgly(8);
		isUgly(13);
		isUgly(17);
		isUgly(12);
		isUgly(16);
    }
}


/home/max/Documents/JMLGPT/tmp/UglyNum.java:16: verify: The prover cannot establish an assertion (PossiblyNegativeIndex) in method isUgly
            int factor = factors[i];
                                ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:51: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:7:) in method main
        isUgly(15);
              ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:7: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:51:
    public static boolean isUgly(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:2: verify: Precondition conjunct is false: n <= 3
    //@ requires n <= 3;
                   ^
4 verification failures

class UglyNum {
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        int temp = n;
        int[] factors = {2, 3, 5};
        int i = 0;
        for (i = 0; i < factors.length; i++) {
            __Loop_Invariant_Dummy1(n, temp, factors, i);
            int factor = factors[i];
            while (temp % factor == 0) {
                temp /= factor;
            }
        }
        __Loop_Invariant_Dummy1(n, temp, factors, i);
        return temp == 1;
    }

    //@ requires n <= 3;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires 3 <= factors.length;
    //@ requires 3 == factors.length;
    //@ requires 3 >= factors.length;
    //@ requires 1 < factors.length;
    //@ requires 1 <= factors.length;
    //@ requires 1 != factors.length;
    //@ requires -1 < factors.length;
    //@ requires -1 <= factors.length;
    //@ requires -1 != factors.length;
    //@ requires n <= factors.length;
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isUgly(0);
        isUgly(1);
        isUgly(2);
        isUgly(3);
        isUgly(15);
        isUgly(-1);
        isUgly(-2);
        isUgly(-3);
		isUgly(4);
        isUgly(5);
        isUgly(7);
        isUgly(8);
		isUgly(13);
		isUgly(17);
		isUgly(12);
		isUgly(16);
    }
}


/home/max/Documents/JMLGPT/tmp/UglyNum.java:20: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:42:) in method isUgly
        __Loop_Invariant_Dummy1(n, temp, factors, i);
                               ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:42: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:20:
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:24: verify: Precondition conjunct is false: n <= 3
    //@ requires n <= 3;
                   ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:51: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:6:) in method main
        isUgly(-1);
              ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:6: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:51:
    public static boolean isUgly(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:2: verify: Precondition conjunct is false: n >= 0
    //@ requires n >= 0;
                   ^
6 verification failures

class UglyNum {
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        int temp = n;
        int[] factors = {2, 3, 5};
        int i = 0;
        for (i = 0; i < factors.length; i++) {
            __Loop_Invariant_Dummy1(n, temp, factors, i);
            int factor = factors[i];
            while (temp % factor == 0) {
                temp /= factor;
            }
        }
        __Loop_Invariant_Dummy1(n, temp, factors, i);
        return temp == 1;
    }

    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires 3 <= factors.length;
    //@ requires 3 == factors.length;
    //@ requires 3 >= factors.length;
    //@ requires 1 < factors.length;
    //@ requires 1 <= factors.length;
    //@ requires 1 != factors.length;
    //@ requires -1 < factors.length;
    //@ requires -1 <= factors.length;
    //@ requires -1 != factors.length;
    //@ requires n <= factors.length;
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isUgly(0);
        isUgly(1);
        isUgly(2);
        isUgly(3);
        isUgly(15);
        isUgly(-1);
        isUgly(-2);
        isUgly(-3);
		isUgly(4);
        isUgly(5);
        isUgly(7);
        isUgly(8);
		isUgly(13);
		isUgly(17);
		isUgly(12);
		isUgly(16);
    }
}


/home/max/Documents/JMLGPT/tmp/UglyNum.java:20: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:41:) in method isUgly
        __Loop_Invariant_Dummy1(n, temp, factors, i);
                               ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:41: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:20:
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:40: verify: Precondition conjunct is false: n <= factors.length
    //@ requires n <= factors.length;
                   ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:50: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:6:) in method main
        isUgly(-1);
              ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:6: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:50:
    public static boolean isUgly(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:2: verify: Precondition conjunct is false: n >= 0
    //@ requires n >= 0;
                   ^
6 verification failures

class UglyNum {
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        int temp = n;
        int[] factors = {2, 3, 5};
        int i = 0;
        for (i = 0; i < factors.length; i++) {
            __Loop_Invariant_Dummy1(n, temp, factors, i);
            int factor = factors[i];
            while (temp % factor == 0) {
                temp /= factor;
            }
        }
        __Loop_Invariant_Dummy1(n, temp, factors, i);
        return temp == 1;
    }

    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires 3 <= factors.length;
    //@ requires 3 == factors.length;
    //@ requires 3 >= factors.length;
    //@ requires 1 < factors.length;
    //@ requires 1 <= factors.length;
    //@ requires 1 != factors.length;
    //@ requires -1 < factors.length;
    //@ requires -1 <= factors.length;
    //@ requires -1 != factors.length;
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isUgly(0);
        isUgly(1);
        isUgly(2);
        isUgly(3);
        isUgly(15);
        isUgly(-1);
        isUgly(-2);
        isUgly(-3);
		isUgly(4);
        isUgly(5);
        isUgly(7);
        isUgly(8);
		isUgly(13);
		isUgly(17);
		isUgly(12);
		isUgly(16);
    }
}


/home/max/Documents/JMLGPT/tmp/UglyNum.java:15: verify: The prover cannot establish an assertion (PossiblyNegativeIndex) in method isUgly
            int factor = factors[i];
                                ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:49: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:6:) in method main
        isUgly(-1);
              ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:6: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:49:
    public static boolean isUgly(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:2: verify: Precondition conjunct is false: n >= 0
    //@ requires n >= 0;
                   ^
4 verification failures

class UglyNum {
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        int temp = n;
        int[] factors = {2, 3, 5};
        int i = 0;
        for (i = 0; i < factors.length; i++) {
            __Loop_Invariant_Dummy1(n, temp, factors, i);
            int factor = factors[i];
            while (temp % factor == 0) {
                temp /= factor;
            }
        }
        __Loop_Invariant_Dummy1(n, temp, factors, i);
        return temp == 1;
    }

    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires 3 <= factors.length;
    //@ requires 3 == factors.length;
    //@ requires 3 >= factors.length;
    //@ requires 1 < factors.length;
    //@ requires 1 <= factors.length;
    //@ requires 1 != factors.length;
    //@ requires -1 < factors.length;
    //@ requires -1 <= factors.length;
    //@ requires -1 != factors.length;
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isUgly(0);
        isUgly(1);
        isUgly(2);
        isUgly(3);
        isUgly(15);
        isUgly(-1);
        isUgly(-2);
        isUgly(-3);
		isUgly(4);
        isUgly(5);
        isUgly(7);
        isUgly(8);
		isUgly(13);
		isUgly(17);
		isUgly(12);
		isUgly(16);
    }
}


/home/max/Documents/JMLGPT/tmp/UglyNum.java:14: verify: The prover cannot establish an assertion (PossiblyNegativeIndex) in method isUgly
            int factor = factors[i];
                                ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:48: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:5:) in method main
        isUgly(-1);
              ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:5: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:48:
    public static boolean isUgly(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:2: verify: Precondition conjunct is false: n != -1
    //@ requires n != -1;
                   ^
4 verification failures

class UglyNum {
    //@ requires n >= -1;
    //@ requires n > -1;
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        int temp = n;
        int[] factors = {2, 3, 5};
        int i = 0;
        for (i = 0; i < factors.length; i++) {
            __Loop_Invariant_Dummy1(n, temp, factors, i);
            int factor = factors[i];
            while (temp % factor == 0) {
                temp /= factor;
            }
        }
        __Loop_Invariant_Dummy1(n, temp, factors, i);
        return temp == 1;
    }

    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires 3 <= factors.length;
    //@ requires 3 == factors.length;
    //@ requires 3 >= factors.length;
    //@ requires 1 < factors.length;
    //@ requires 1 <= factors.length;
    //@ requires 1 != factors.length;
    //@ requires -1 < factors.length;
    //@ requires -1 <= factors.length;
    //@ requires -1 != factors.length;
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isUgly(0);
        isUgly(1);
        isUgly(2);
        isUgly(3);
        isUgly(15);
        isUgly(-1);
        isUgly(-2);
        isUgly(-3);
		isUgly(4);
        isUgly(5);
        isUgly(7);
        isUgly(8);
		isUgly(13);
		isUgly(17);
		isUgly(12);
		isUgly(16);
    }
}


/home/max/Documents/JMLGPT/tmp/UglyNum.java:13: verify: The prover cannot establish an assertion (PossiblyNegativeIndex) in method isUgly
            int factor = factors[i];
                                ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:4:) in method main
        isUgly(-1);
              ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:47:
    public static boolean isUgly(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:3: verify: Precondition conjunct is false: n > -1
    //@ requires n > -1;
                   ^
4 verification failures

class UglyNum {
    //@ requires n >= -1;
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        int temp = n;
        int[] factors = {2, 3, 5};
        int i = 0;
        for (i = 0; i < factors.length; i++) {
            __Loop_Invariant_Dummy1(n, temp, factors, i);
            int factor = factors[i];
            while (temp % factor == 0) {
                temp /= factor;
            }
        }
        __Loop_Invariant_Dummy1(n, temp, factors, i);
        return temp == 1;
    }

    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires 3 <= factors.length;
    //@ requires 3 == factors.length;
    //@ requires 3 >= factors.length;
    //@ requires 1 < factors.length;
    //@ requires 1 <= factors.length;
    //@ requires 1 != factors.length;
    //@ requires -1 < factors.length;
    //@ requires -1 <= factors.length;
    //@ requires -1 != factors.length;
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isUgly(0);
        isUgly(1);
        isUgly(2);
        isUgly(3);
        isUgly(15);
        isUgly(-1);
        isUgly(-2);
        isUgly(-3);
		isUgly(4);
        isUgly(5);
        isUgly(7);
        isUgly(8);
		isUgly(13);
		isUgly(17);
		isUgly(12);
		isUgly(16);
    }
}


/home/max/Documents/JMLGPT/tmp/UglyNum.java:12: verify: The prover cannot establish an assertion (PossiblyNegativeIndex) in method isUgly
            int factor = factors[i];
                                ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:3:) in method main
        isUgly(-2);
              ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:47:
    public static boolean isUgly(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:2: verify: Precondition conjunct is false: n >= -1
    //@ requires n >= -1;
                   ^
4 verification failures

class UglyNum {
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        int temp = n;
        int[] factors = {2, 3, 5};
        int i = 0;
        for (i = 0; i < factors.length; i++) {
            __Loop_Invariant_Dummy1(n, temp, factors, i);
            int factor = factors[i];
            while (temp % factor == 0) {
                temp /= factor;
            }
        }
        __Loop_Invariant_Dummy1(n, temp, factors, i);
        return temp == 1;
    }

    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires 3 <= factors.length;
    //@ requires 3 == factors.length;
    //@ requires 3 >= factors.length;
    //@ requires 1 < factors.length;
    //@ requires 1 <= factors.length;
    //@ requires 1 != factors.length;
    //@ requires -1 < factors.length;
    //@ requires -1 <= factors.length;
    //@ requires -1 != factors.length;
    public static void __Loop_Invariant_Dummy1(int n, int temp, int[] factors, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isUgly(0);
        isUgly(1);
        isUgly(2);
        isUgly(3);
        isUgly(15);
        isUgly(-1);
        isUgly(-2);
        isUgly(-3);
		isUgly(4);
        isUgly(5);
        isUgly(7);
        isUgly(8);
		isUgly(13);
		isUgly(17);
		isUgly(12);
		isUgly(16);
    }
}


/home/max/Documents/JMLGPT/tmp/UglyNum.java:11: verify: The prover cannot establish an assertion (PossiblyNegativeIndex) in method isUgly
            int factor = factors[i];
                                ^
1 verification failure

