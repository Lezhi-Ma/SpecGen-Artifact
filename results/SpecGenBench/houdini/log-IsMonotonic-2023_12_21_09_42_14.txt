class IsMonotonic {
    //@ non_null
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires 9 < nums.length;
    //@ requires 9 <= nums.length;
    //@ requires 9 == nums.length;
    //@ requires 9 != nums.length;
    //@ requires 9 >= nums.length;
    //@ requires 9 > nums.length;
    //@ requires 7 < nums.length;
    //@ requires 7 <= nums.length;
    //@ requires 7 == nums.length;
    //@ requires 7 != nums.length;
    //@ requires 7 >= nums.length;
    //@ requires 7 > nums.length;
    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures nums == null ==> \result;
    //@ ensures nums == null ==> !\result;
    //@ ensures nums != null ==> \result;
    //@ ensures nums != null ==> !\result;
    public static boolean isMonotonic(int[] nums) {
        boolean inc = true, dec = true;
        int n = nums.length;
        int i = 0;
        for (i = 0; i < n - 1; ++i) {
            __Loop_Invariant_Dummy1(nums, inc, dec, n, i);
            if (nums[i] > nums[i + 1]) {
                inc = false;
            }
            if (nums[i] < nums[i + 1]) {
                dec = false;
            }
        }
        __Loop_Invariant_Dummy1(nums, inc, dec, n, i);
        return inc || dec;
    }

    //@ non_null
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires 9 < nums.length;
    //@ requires 9 <= nums.length;
    //@ requires 9 == nums.length;
    //@ requires 9 != nums.length;
    //@ requires 9 >= nums.length;
    //@ requires 9 > nums.length;
    //@ requires 7 < nums.length;
    //@ requires 7 <= nums.length;
    //@ requires 7 == nums.length;
    //@ requires 7 != nums.length;
    //@ requires 7 >= nums.length;
    //@ requires 7 > nums.length;
    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires inc;
    //@ requires !inc;
    //@ requires dec;
    //@ requires !dec;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 9;
    //@ requires n <= 9;
    //@ requires n == 9;
    //@ requires n != 9;
    //@ requires n >= 9;
    //@ requires n > 9;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n == 7;
    //@ requires n != 7;
    //@ requires n >= 7;
    //@ requires n > 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n == 6;
    //@ requires n != 6;
    //@ requires n >= 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < nums.length;
    //@ requires n <= nums.length;
    //@ requires n == nums.length;
    //@ requires n != nums.length;
    //@ requires n >= nums.length;
    //@ requires n > nums.length;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 9;
    //@ requires i <= 9;
    //@ requires i == 9;
    //@ requires i != 9;
    //@ requires i >= 9;
    //@ requires i > 9;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, boolean inc, boolean dec, int n, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        isMonotonic(arr);
        arr = new int[]{0};
        isMonotonic(arr);
        arr = new int[]{-2, -1};
        isMonotonic(arr);
        arr = new int[]{2, 3};
        isMonotonic(arr);
        arr = new int[]{0, 1};
        isMonotonic(arr);
        arr = new int[]{-2, -3};
        isMonotonic(arr);
        arr = new int[]{};
        isMonotonic(arr);
        arr = new int[]{0, -3, 1, 10};
        isMonotonic(arr);
        arr = new int[]{-3, 0, 1, 10};
        isMonotonic(arr);
        arr = new int[]{-2, -3, 0};
        isMonotonic(arr);
        arr = new int[]{-2, -1, 8};
        isMonotonic(arr);
        arr = new int[]{2, 2};
        isMonotonic(arr);
        arr = new int[]{2, 2, 3, 1, 2};
        isMonotonic(arr);
        arr = new int[]{0, 1, 213, 703, 713};
        isMonotonic(arr);
        arr = new int[]{713, 703, 29, 28, 4, -1};
        isMonotonic(arr);
        arr = new int[]{0, 1, 213, 703, 713, 1919, 1243546};
        isMonotonic(arr);
        arr = new int[]{124, 29, 12, 4, 3, 2, -1};
        isMonotonic(arr);
        arr = new int[]{114, 512, 513, 514, 810, 927, 999, 0, 114514};
        isMonotonic(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/IsMonotonic.java:2: error: No modifiers are allowed prior to a lightweight specification case
    //@ non_null
        ^
/home/max/Documents/JMLGPT/tmp/IsMonotonic.java:80: error: No modifiers are allowed prior to a lightweight specification case
    //@ non_null
        ^
2 errors

class IsMonotonic {
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires 9 < nums.length;
    //@ requires 9 <= nums.length;
    //@ requires 9 == nums.length;
    //@ requires 9 != nums.length;
    //@ requires 9 >= nums.length;
    //@ requires 9 > nums.length;
    //@ requires 7 < nums.length;
    //@ requires 7 <= nums.length;
    //@ requires 7 == nums.length;
    //@ requires 7 != nums.length;
    //@ requires 7 >= nums.length;
    //@ requires 7 > nums.length;
    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures nums == null ==> \result;
    //@ ensures nums == null ==> !\result;
    //@ ensures nums != null ==> \result;
    //@ ensures nums != null ==> !\result;
    public static boolean isMonotonic(int[] nums) {
        boolean inc = true, dec = true;
        int n = nums.length;
        int i = 0;
        for (i = 0; i < n - 1; ++i) {
            __Loop_Invariant_Dummy1(nums, inc, dec, n, i);
            if (nums[i] > nums[i + 1]) {
                inc = false;
            }
            if (nums[i] < nums[i + 1]) {
                dec = false;
            }
        }
        __Loop_Invariant_Dummy1(nums, inc, dec, n, i);
        return inc || dec;
    }

    //@ non_null
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires 9 < nums.length;
    //@ requires 9 <= nums.length;
    //@ requires 9 == nums.length;
    //@ requires 9 != nums.length;
    //@ requires 9 >= nums.length;
    //@ requires 9 > nums.length;
    //@ requires 7 < nums.length;
    //@ requires 7 <= nums.length;
    //@ requires 7 == nums.length;
    //@ requires 7 != nums.length;
    //@ requires 7 >= nums.length;
    //@ requires 7 > nums.length;
    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires inc;
    //@ requires !inc;
    //@ requires dec;
    //@ requires !dec;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 9;
    //@ requires n <= 9;
    //@ requires n == 9;
    //@ requires n != 9;
    //@ requires n >= 9;
    //@ requires n > 9;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n == 7;
    //@ requires n != 7;
    //@ requires n >= 7;
    //@ requires n > 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n == 6;
    //@ requires n != 6;
    //@ requires n >= 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < nums.length;
    //@ requires n <= nums.length;
    //@ requires n == nums.length;
    //@ requires n != nums.length;
    //@ requires n >= nums.length;
    //@ requires n > nums.length;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 9;
    //@ requires i <= 9;
    //@ requires i == 9;
    //@ requires i != 9;
    //@ requires i >= 9;
    //@ requires i > 9;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, boolean inc, boolean dec, int n, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        isMonotonic(arr);
        arr = new int[]{0};
        isMonotonic(arr);
        arr = new int[]{-2, -1};
        isMonotonic(arr);
        arr = new int[]{2, 3};
        isMonotonic(arr);
        arr = new int[]{0, 1};
        isMonotonic(arr);
        arr = new int[]{-2, -3};
        isMonotonic(arr);
        arr = new int[]{};
        isMonotonic(arr);
        arr = new int[]{0, -3, 1, 10};
        isMonotonic(arr);
        arr = new int[]{-3, 0, 1, 10};
        isMonotonic(arr);
        arr = new int[]{-2, -3, 0};
        isMonotonic(arr);
        arr = new int[]{-2, -1, 8};
        isMonotonic(arr);
        arr = new int[]{2, 2};
        isMonotonic(arr);
        arr = new int[]{2, 2, 3, 1, 2};
        isMonotonic(arr);
        arr = new int[]{0, 1, 213, 703, 713};
        isMonotonic(arr);
        arr = new int[]{713, 703, 29, 28, 4, -1};
        isMonotonic(arr);
        arr = new int[]{0, 1, 213, 703, 713, 1919, 1243546};
        isMonotonic(arr);
        arr = new int[]{124, 29, 12, 4, 3, 2, -1};
        isMonotonic(arr);
        arr = new int[]{114, 512, 513, 514, 810, 927, 999, 0, 114514};
        isMonotonic(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/IsMonotonic.java:79: error: No modifiers are allowed prior to a lightweight specification case
    //@ non_null
        ^
1 error

class IsMonotonic {
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires 9 < nums.length;
    //@ requires 9 <= nums.length;
    //@ requires 9 == nums.length;
    //@ requires 9 != nums.length;
    //@ requires 9 >= nums.length;
    //@ requires 9 > nums.length;
    //@ requires 7 < nums.length;
    //@ requires 7 <= nums.length;
    //@ requires 7 == nums.length;
    //@ requires 7 != nums.length;
    //@ requires 7 >= nums.length;
    //@ requires 7 > nums.length;
    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures nums == null ==> \result;
    //@ ensures nums == null ==> !\result;
    //@ ensures nums != null ==> \result;
    //@ ensures nums != null ==> !\result;
    public static boolean isMonotonic(int[] nums) {
        boolean inc = true, dec = true;
        int n = nums.length;
        int i = 0;
        for (i = 0; i < n - 1; ++i) {
            __Loop_Invariant_Dummy1(nums, inc, dec, n, i);
            if (nums[i] > nums[i + 1]) {
                inc = false;
            }
            if (nums[i] < nums[i + 1]) {
                dec = false;
            }
        }
        __Loop_Invariant_Dummy1(nums, inc, dec, n, i);
        return inc || dec;
    }

    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires 9 < nums.length;
    //@ requires 9 <= nums.length;
    //@ requires 9 == nums.length;
    //@ requires 9 != nums.length;
    //@ requires 9 >= nums.length;
    //@ requires 9 > nums.length;
    //@ requires 7 < nums.length;
    //@ requires 7 <= nums.length;
    //@ requires 7 == nums.length;
    //@ requires 7 != nums.length;
    //@ requires 7 >= nums.length;
    //@ requires 7 > nums.length;
    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires inc;
    //@ requires !inc;
    //@ requires dec;
    //@ requires !dec;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 9;
    //@ requires n <= 9;
    //@ requires n == 9;
    //@ requires n != 9;
    //@ requires n >= 9;
    //@ requires n > 9;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n == 7;
    //@ requires n != 7;
    //@ requires n >= 7;
    //@ requires n > 7;
    //@ requires n < 6;
    //@ requires n <= 6;
    //@ requires n == 6;
    //@ requires n != 6;
    //@ requires n >= 6;
    //@ requires n > 6;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < nums.length;
    //@ requires n <= nums.length;
    //@ requires n == nums.length;
    //@ requires n != nums.length;
    //@ requires n >= nums.length;
    //@ requires n > nums.length;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 9;
    //@ requires i <= 9;
    //@ requires i == 9;
    //@ requires i != 9;
    //@ requires i >= 9;
    //@ requires i > 9;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, boolean inc, boolean dec, int n, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        isMonotonic(arr);
        arr = new int[]{0};
        isMonotonic(arr);
        arr = new int[]{-2, -1};
        isMonotonic(arr);
        arr = new int[]{2, 3};
        isMonotonic(arr);
        arr = new int[]{0, 1};
        isMonotonic(arr);
        arr = new int[]{-2, -3};
        isMonotonic(arr);
        arr = new int[]{};
        isMonotonic(arr);
        arr = new int[]{0, -3, 1, 10};
        isMonotonic(arr);
        arr = new int[]{-3, 0, 1, 10};
        isMonotonic(arr);
        arr = new int[]{-2, -3, 0};
        isMonotonic(arr);
        arr = new int[]{-2, -1, 8};
        isMonotonic(arr);
        arr = new int[]{2, 2};
        isMonotonic(arr);
        arr = new int[]{2, 2, 3, 1, 2};
        isMonotonic(arr);
        arr = new int[]{0, 1, 213, 703, 713};
        isMonotonic(arr);
        arr = new int[]{713, 703, 29, 28, 4, -1};
        isMonotonic(arr);
        arr = new int[]{0, 1, 213, 703, 713, 1919, 1243546};
        isMonotonic(arr);
        arr = new int[]{124, 29, 12, 4, 3, 2, -1};
        isMonotonic(arr);
        arr = new int[]{114, 512, 513, 514, 810, 927, 999, 0, 114514};
        isMonotonic(arr);
    }
}

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.LinkedList.linkLast(LinkedList.java:146)
	at java.base/java.util.LinkedList.add(LinkedList.java:342)
	at jdk.compiler/org.smtlib.impl.Factory.fcn(Factory.java:242)
	at jdk.compiler/org.jmlspecs.openjml.esc.SMTTranslator.convertList2(SMTTranslator.java:1677)
	at jdk.compiler/org.jmlspecs.openjml.esc.SMTTranslator.convertBasicBlock(SMTTranslator.java:1381)
	at jdk.compiler/org.jmlspecs.openjml.esc.SMTTranslator.convert(SMTTranslator.java:1039)
	at jdk.compiler/org.jmlspecs.openjml.esc.MethodProverSMT.prove(MethodProverSMT.java:376)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlEsc.doMethod(JmlEsc.java:329)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlEsc.visitMethodDef(JmlEsc.java:221)
	at jdk.compiler/org.jmlspecs.openjml.visitors.JmlTreeScanner.visitJmlMethodDecl(JmlTreeScanner.java:238)
	at jdk.compiler/org.jmlspecs.openjml.JmlTree$JmlMethodDecl.accept(JmlTree.java:1383)
	at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.scan(TreeScanner.java:49)
	at jdk.compiler/org.jmlspecs.openjml.visitors.JmlTreeScanner.scan(JmlTreeScanner.java:70)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlEsc.visitClassDef(JmlEsc.java:169)
	at jdk.compiler/org.jmlspecs.openjml.visitors.JmlTreeScanner.visitJmlClassDecl(JmlTreeScanner.java:106)
	at jdk.compiler/org.jmlspecs.openjml.JmlTree$JmlClassDecl.accept(JmlTree.java:1295)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlEsc.check(JmlEsc.java:117)
	at jdk.compiler/com.sun.tools.javac.main.JmlCompiler.esc(JmlCompiler.java:536)
	at jdk.compiler/com.sun.tools.javac.main.JmlCompiler.flow(JmlCompiler.java:362)
	at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.compile(JavaCompiler.java:936)
	at jdk.compiler/com.sun.tools.javac.main.JmlCompiler.compile(JmlCompiler.java:197)
	at jdk.compiler/com.sun.tools.javac.main.Main.compile(Main.java:321)
	at jdk.compiler/org.jmlspecs.openjml.Main.compile(Main.java:534)
	at jdk.compiler/org.jmlspecs.openjml.Main.execute(Main.java:374)
	at jdk.compiler/org.jmlspecs.openjml.Main.execute(Main.java:332)
	at jdk.compiler/org.jmlspecs.openjml.Main.main(Main.java:295)
	at jdk.compiler/com.sun.tools.javac.Main.main(Main.java:53)
/home/max/Documents/JMLGPT/tmp/IsMonotonic.java:278: error: A catastrophic JML internal error occurred.  Please report the bug with as much information as you can.
    public static void main(String[] args) {
                       ^
  Reason: Prover aborted with exception: ZZZZZ
1 error

