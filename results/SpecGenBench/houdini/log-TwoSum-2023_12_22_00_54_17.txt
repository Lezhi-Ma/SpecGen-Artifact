class TwoSum {
    //@ non_null
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires 8 < nums.length;
    //@ requires 8 <= nums.length;
    //@ requires 8 == nums.length;
    //@ requires 8 != nums.length;
    //@ requires 8 >= nums.length;
    //@ requires 8 > nums.length;
    //@ requires 7 < nums.length;
    //@ requires 7 <= nums.length;
    //@ requires 7 == nums.length;
    //@ requires 7 != nums.length;
    //@ requires 7 >= nums.length;
    //@ requires 7 > nums.length;
    //@ requires target < -1;
    //@ requires target <= -1;
    //@ requires target == -1;
    //@ requires target != -1;
    //@ requires target >= -1;
    //@ requires target > -1;
    //@ requires target < 8;
    //@ requires target <= 8;
    //@ requires target == 8;
    //@ requires target != 8;
    //@ requires target >= 8;
    //@ requires target > 8;
    //@ requires target < 7;
    //@ requires target <= 7;
    //@ requires target == 7;
    //@ requires target != 7;
    //@ requires target >= 7;
    //@ requires target > 7;
    //@ requires target < 5;
    //@ requires target <= 5;
    //@ requires target == 5;
    //@ requires target != 5;
    //@ requires target >= 5;
    //@ requires target > 5;
    //@ requires target < 4;
    //@ requires target <= 4;
    //@ requires target == 4;
    //@ requires target != 4;
    //@ requires target >= 4;
    //@ requires target > 4;
    //@ requires target < nums.length;
    //@ requires target <= nums.length;
    //@ requires target == nums.length;
    //@ requires target != nums.length;
    //@ requires target >= nums.length;
    //@ requires target > nums.length;
    //@ requires target < 2;
    //@ requires target <= 2;
    //@ requires target == 2;
    //@ requires target != 2;
    //@ requires target >= 2;
    //@ requires target > 2;
    //@ requires target < 1;
    //@ requires target <= 1;
    //@ requires target == 1;
    //@ requires target != 1;
    //@ requires target >= 1;
    //@ requires target > 1;
    //@ requires target < 0;
    //@ requires target <= 0;
    //@ requires target == 0;
    //@ requires target != 0;
    //@ requires target >= 0;
    //@ requires target > 0;
    //@ ensures \result != null;
    //@ ensures -1 < \result.length;
    //@ ensures -1 <= \result.length;
    //@ ensures -1 == \result.length;
    //@ ensures -1 != \result.length;
    //@ ensures -1 >= \result.length;
    //@ ensures -1 > \result.length;
    //@ ensures 8 < \result.length;
    //@ ensures 8 <= \result.length;
    //@ ensures 8 == \result.length;
    //@ ensures 8 != \result.length;
    //@ ensures 8 >= \result.length;
    //@ ensures 8 > \result.length;
    //@ ensures target < \result.length;
    //@ ensures target <= \result.length;
    //@ ensures target == \result.length;
    //@ ensures target != \result.length;
    //@ ensures target >= \result.length;
    //@ ensures target > \result.length;
    //@ ensures 7 < \result.length;
    //@ ensures 7 <= \result.length;
    //@ ensures 7 == \result.length;
    //@ ensures 7 != \result.length;
    //@ ensures 7 >= \result.length;
    //@ ensures 7 > \result.length;
    //@ ensures 5 < \result.length;
    //@ ensures 5 <= \result.length;
    //@ ensures 5 == \result.length;
    //@ ensures 5 != \result.length;
    //@ ensures 5 >= \result.length;
    //@ ensures 5 > \result.length;
    //@ ensures 4 < \result.length;
    //@ ensures 4 <= \result.length;
    //@ ensures 4 == \result.length;
    //@ ensures 4 != \result.length;
    //@ ensures 4 >= \result.length;
    //@ ensures 4 > \result.length;
    //@ ensures nums.length < \result.length;
    //@ ensures nums.length <= \result.length;
    //@ ensures nums.length == \result.length;
    //@ ensures nums.length != \result.length;
    //@ ensures nums.length >= \result.length;
    //@ ensures nums.length > \result.length;
    //@ ensures 2 < \result.length;
    //@ ensures 2 <= \result.length;
    //@ ensures 2 == \result.length;
    //@ ensures 2 != \result.length;
    //@ ensures 2 >= \result.length;
    //@ ensures 2 > \result.length;
    //@ ensures 1 < \result.length;
    //@ ensures 1 <= \result.length;
    //@ ensures 1 == \result.length;
    //@ ensures 1 != \result.length;
    //@ ensures 1 >= \result.length;
    //@ ensures 1 > \result.length;
    //@ ensures \fresh(\result);
    //@ ensures nums == null ==> \result != null;
    //@ ensures nums != null ==> \result != null;
    //@ ensures target >= 0 ==> \result != null;
    public static int[] twoSum(int[] nums, int target) {
        int n = nums.length;
        for (int i = 0; i < n; ++i) {
            __Loop_Invariant_Dummy1(nums, target, n, i);
            for (int j = i + 1; j < n; ++j) {
                __Loop_Invariant_Dummy2(nums, target, n, i, j);
                if (nums[i] + nums[j] == target) {
                    return new int[]{i, j};
                }
            }
        }
        return new int[0];
    }

    //@ non_null
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires 8 < nums.length;
    //@ requires 8 <= nums.length;
    //@ requires 8 == nums.length;
    //@ requires 8 != nums.length;
    //@ requires 8 >= nums.length;
    //@ requires 8 > nums.length;
    //@ requires 7 < nums.length;
    //@ requires 7 <= nums.length;
    //@ requires 7 == nums.length;
    //@ requires 7 != nums.length;
    //@ requires 7 >= nums.length;
    //@ requires 7 > nums.length;
    //@ requires target < -1;
    //@ requires target <= -1;
    //@ requires target == -1;
    //@ requires target != -1;
    //@ requires target >= -1;
    //@ requires target > -1;
    //@ requires target < 8;
    //@ requires target <= 8;
    //@ requires target == 8;
    //@ requires target != 8;
    //@ requires target >= 8;
    //@ requires target > 8;
    //@ requires target < 7;
    //@ requires target <= 7;
    //@ requires target == 7;
    //@ requires target != 7;
    //@ requires target >= 7;
    //@ requires target > 7;
    //@ requires target < 5;
    //@ requires target <= 5;
    //@ requires target == 5;
    //@ requires target != 5;
    //@ requires target >= 5;
    //@ requires target > 5;
    //@ requires target < 4;
    //@ requires target <= 4;
    //@ requires target == 4;
    //@ requires target != 4;
    //@ requires target >= 4;
    //@ requires target > 4;
    //@ requires target < nums.length;
    //@ requires target <= nums.length;
    //@ requires target == nums.length;
    //@ requires target != nums.length;
    //@ requires target >= nums.length;
    //@ requires target > nums.length;
    //@ requires target < 2;
    //@ requires target <= 2;
    //@ requires target == 2;
    //@ requires target != 2;
    //@ requires target >= 2;
    //@ requires target > 2;
    //@ requires target < 1;
    //@ requires target <= 1;
    //@ requires target == 1;
    //@ requires target != 1;
    //@ requires target >= 1;
    //@ requires target > 1;
    //@ requires target < 0;
    //@ requires target <= 0;
    //@ requires target == 0;
    //@ requires target != 0;
    //@ requires target >= 0;
    //@ requires target > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n == 8;
    //@ requires n != 8;
    //@ requires n >= 8;
    //@ requires n > 8;
    //@ requires n < target;
    //@ requires n <= target;
    //@ requires n == target;
    //@ requires n != target;
    //@ requires n >= target;
    //@ requires n > target;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n == 7;
    //@ requires n != 7;
    //@ requires n >= 7;
    //@ requires n > 7;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < nums.length;
    //@ requires n <= nums.length;
    //@ requires n == nums.length;
    //@ requires n != nums.length;
    //@ requires n >= nums.length;
    //@ requires n > nums.length;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 8;
    //@ requires i <= 8;
    //@ requires i == 8;
    //@ requires i != 8;
    //@ requires i >= 8;
    //@ requires i > 8;
    //@ requires i < target;
    //@ requires i <= target;
    //@ requires i == target;
    //@ requires i != target;
    //@ requires i >= target;
    //@ requires i > target;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int target, int n, int i) {}
    
    //@ non_null
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires 8 < nums.length;
    //@ requires 8 <= nums.length;
    //@ requires 8 == nums.length;
    //@ requires 8 != nums.length;
    //@ requires 8 >= nums.length;
    //@ requires 8 > nums.length;
    //@ requires 7 < nums.length;
    //@ requires 7 <= nums.length;
    //@ requires 7 == nums.length;
    //@ requires 7 != nums.length;
    //@ requires 7 >= nums.length;
    //@ requires 7 > nums.length;
    //@ requires target < -1;
    //@ requires target <= -1;
    //@ requires target == -1;
    //@ requires target != -1;
    //@ requires target >= -1;
    //@ requires target > -1;
    //@ requires target < 8;
    //@ requires target <= 8;
    //@ requires target == 8;
    //@ requires target != 8;
    //@ requires target >= 8;
    //@ requires target > 8;
    //@ requires target < 7;
    //@ requires target <= 7;
    //@ requires target == 7;
    //@ requires target != 7;
    //@ requires target >= 7;
    //@ requires target > 7;
    //@ requires target < 5;
    //@ requires target <= 5;
    //@ requires target == 5;
    //@ requires target != 5;
    //@ requires target >= 5;
    //@ requires target > 5;
    //@ requires target < 4;
    //@ requires target <= 4;
    //@ requires target == 4;
    //@ requires target != 4;
    //@ requires target >= 4;
    //@ requires target > 4;
    //@ requires target < nums.length;
    //@ requires target <= nums.length;
    //@ requires target == nums.length;
    //@ requires target != nums.length;
    //@ requires target >= nums.length;
    //@ requires target > nums.length;
    //@ requires target < 2;
    //@ requires target <= 2;
    //@ requires target == 2;
    //@ requires target != 2;
    //@ requires target >= 2;
    //@ requires target > 2;
    //@ requires target < 1;
    //@ requires target <= 1;
    //@ requires target == 1;
    //@ requires target != 1;
    //@ requires target >= 1;
    //@ requires target > 1;
    //@ requires target < 0;
    //@ requires target <= 0;
    //@ requires target == 0;
    //@ requires target != 0;
    //@ requires target >= 0;
    //@ requires target > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n == 8;
    //@ requires n != 8;
    //@ requires n >= 8;
    //@ requires n > 8;
    //@ requires n < target;
    //@ requires n <= target;
    //@ requires n == target;
    //@ requires n != target;
    //@ requires n >= target;
    //@ requires n > target;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n == 7;
    //@ requires n != 7;
    //@ requires n >= 7;
    //@ requires n > 7;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < nums.length;
    //@ requires n <= nums.length;
    //@ requires n == nums.length;
    //@ requires n != nums.length;
    //@ requires n >= nums.length;
    //@ requires n > nums.length;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 8;
    //@ requires i <= 8;
    //@ requires i == 8;
    //@ requires i != 8;
    //@ requires i >= 8;
    //@ requires i > 8;
    //@ requires i < target;
    //@ requires i <= target;
    //@ requires i == target;
    //@ requires i != target;
    //@ requires i >= target;
    //@ requires i > target;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires j < n;
    //@ requires j <= n;
    //@ requires j == n;
    //@ requires j != n;
    //@ requires j >= n;
    //@ requires j > n;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < 8;
    //@ requires j <= 8;
    //@ requires j == 8;
    //@ requires j != 8;
    //@ requires j >= 8;
    //@ requires j > 8;
    //@ requires j < target;
    //@ requires j <= target;
    //@ requires j == target;
    //@ requires j != target;
    //@ requires j >= target;
    //@ requires j > target;
    //@ requires j < 7;
    //@ requires j <= 7;
    //@ requires j == 7;
    //@ requires j != 7;
    //@ requires j >= 7;
    //@ requires j > 7;
    //@ requires j < 5;
    //@ requires j <= 5;
    //@ requires j == 5;
    //@ requires j != 5;
    //@ requires j >= 5;
    //@ requires j > 5;
    //@ requires j < 4;
    //@ requires j <= 4;
    //@ requires j == 4;
    //@ requires j != 4;
    //@ requires j >= 4;
    //@ requires j > 4;
    //@ requires j < nums.length;
    //@ requires j <= nums.length;
    //@ requires j == nums.length;
    //@ requires j != nums.length;
    //@ requires j >= nums.length;
    //@ requires j > nums.length;
    //@ requires j < 2;
    //@ requires j <= 2;
    //@ requires j == 2;
    //@ requires j != 2;
    //@ requires j >= 2;
    //@ requires j > 2;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int target, int n, int i, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] nums = new int[]{};
        twoSum(nums, 1);
        twoSum(nums, -114);
        twoSum(nums, 0);
        twoSum(nums, 114);

        nums = new int[]{1};
        twoSum(nums, 1);
        twoSum(nums, 114);
        twoSum(nums, 0);
        twoSum(nums, 114);


        nums = new int[]{0, 0, 0, 0, 0, 0, 0, 0};
        twoSum(nums, 1);
        twoSum(nums, 114);
        twoSum(nums, 0);
        twoSum(nums, 114);

        nums = new int[]{114, 2};
        twoSum(nums, 1);
        twoSum(nums, 116);

        nums = new int[]{1, 3, 2, -9};
        twoSum(nums, 5);
        twoSum(nums, 114);

        nums = new int[]{-114, 514, -114, -1919, -1919, 810, 14};
        twoSum(nums, 14);
        twoSum(nums, -228);


        nums = new int[]{-114, 514, -114, -1919, -1919, 810, 14, 0};
        twoSum(nums, 14);
        twoSum(nums, -1919);


        nums = new int[]{-114, 514, -1919, 810, 14};
        twoSum(nums, 14);
        twoSum(nums, 114514);
    }
}


/home/max/Documents/JMLGPT/tmp/TwoSum.java:2: error: No modifiers are allowed prior to a lightweight specification case
    //@ non_null
        ^
/home/max/Documents/JMLGPT/tmp/TwoSum.java:172: error: No modifiers are allowed prior to a lightweight specification case
    //@ non_null
        ^
/home/max/Documents/JMLGPT/tmp/TwoSum.java:397: error: No modifiers are allowed prior to a lightweight specification case
    //@ non_null
        ^
3 errors

class TwoSum {
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires 8 < nums.length;
    //@ requires 8 <= nums.length;
    //@ requires 8 == nums.length;
    //@ requires 8 != nums.length;
    //@ requires 8 >= nums.length;
    //@ requires 8 > nums.length;
    //@ requires 7 < nums.length;
    //@ requires 7 <= nums.length;
    //@ requires 7 == nums.length;
    //@ requires 7 != nums.length;
    //@ requires 7 >= nums.length;
    //@ requires 7 > nums.length;
    //@ requires target < -1;
    //@ requires target <= -1;
    //@ requires target == -1;
    //@ requires target != -1;
    //@ requires target >= -1;
    //@ requires target > -1;
    //@ requires target < 8;
    //@ requires target <= 8;
    //@ requires target == 8;
    //@ requires target != 8;
    //@ requires target >= 8;
    //@ requires target > 8;
    //@ requires target < 7;
    //@ requires target <= 7;
    //@ requires target == 7;
    //@ requires target != 7;
    //@ requires target >= 7;
    //@ requires target > 7;
    //@ requires target < 5;
    //@ requires target <= 5;
    //@ requires target == 5;
    //@ requires target != 5;
    //@ requires target >= 5;
    //@ requires target > 5;
    //@ requires target < 4;
    //@ requires target <= 4;
    //@ requires target == 4;
    //@ requires target != 4;
    //@ requires target >= 4;
    //@ requires target > 4;
    //@ requires target < nums.length;
    //@ requires target <= nums.length;
    //@ requires target == nums.length;
    //@ requires target != nums.length;
    //@ requires target >= nums.length;
    //@ requires target > nums.length;
    //@ requires target < 2;
    //@ requires target <= 2;
    //@ requires target == 2;
    //@ requires target != 2;
    //@ requires target >= 2;
    //@ requires target > 2;
    //@ requires target < 1;
    //@ requires target <= 1;
    //@ requires target == 1;
    //@ requires target != 1;
    //@ requires target >= 1;
    //@ requires target > 1;
    //@ requires target < 0;
    //@ requires target <= 0;
    //@ requires target == 0;
    //@ requires target != 0;
    //@ requires target >= 0;
    //@ requires target > 0;
    //@ ensures \result != null;
    //@ ensures -1 < \result.length;
    //@ ensures -1 <= \result.length;
    //@ ensures -1 == \result.length;
    //@ ensures -1 != \result.length;
    //@ ensures -1 >= \result.length;
    //@ ensures -1 > \result.length;
    //@ ensures 8 < \result.length;
    //@ ensures 8 <= \result.length;
    //@ ensures 8 == \result.length;
    //@ ensures 8 != \result.length;
    //@ ensures 8 >= \result.length;
    //@ ensures 8 > \result.length;
    //@ ensures target < \result.length;
    //@ ensures target <= \result.length;
    //@ ensures target == \result.length;
    //@ ensures target != \result.length;
    //@ ensures target >= \result.length;
    //@ ensures target > \result.length;
    //@ ensures 7 < \result.length;
    //@ ensures 7 <= \result.length;
    //@ ensures 7 == \result.length;
    //@ ensures 7 != \result.length;
    //@ ensures 7 >= \result.length;
    //@ ensures 7 > \result.length;
    //@ ensures 5 < \result.length;
    //@ ensures 5 <= \result.length;
    //@ ensures 5 == \result.length;
    //@ ensures 5 != \result.length;
    //@ ensures 5 >= \result.length;
    //@ ensures 5 > \result.length;
    //@ ensures 4 < \result.length;
    //@ ensures 4 <= \result.length;
    //@ ensures 4 == \result.length;
    //@ ensures 4 != \result.length;
    //@ ensures 4 >= \result.length;
    //@ ensures 4 > \result.length;
    //@ ensures nums.length < \result.length;
    //@ ensures nums.length <= \result.length;
    //@ ensures nums.length == \result.length;
    //@ ensures nums.length != \result.length;
    //@ ensures nums.length >= \result.length;
    //@ ensures nums.length > \result.length;
    //@ ensures 2 < \result.length;
    //@ ensures 2 <= \result.length;
    //@ ensures 2 == \result.length;
    //@ ensures 2 != \result.length;
    //@ ensures 2 >= \result.length;
    //@ ensures 2 > \result.length;
    //@ ensures 1 < \result.length;
    //@ ensures 1 <= \result.length;
    //@ ensures 1 == \result.length;
    //@ ensures 1 != \result.length;
    //@ ensures 1 >= \result.length;
    //@ ensures 1 > \result.length;
    //@ ensures \fresh(\result);
    //@ ensures nums == null ==> \result != null;
    //@ ensures nums != null ==> \result != null;
    //@ ensures target >= 0 ==> \result != null;
    public static int[] twoSum(int[] nums, int target) {
        int n = nums.length;
        for (int i = 0; i < n; ++i) {
            __Loop_Invariant_Dummy1(nums, target, n, i);
            for (int j = i + 1; j < n; ++j) {
                __Loop_Invariant_Dummy2(nums, target, n, i, j);
                if (nums[i] + nums[j] == target) {
                    return new int[]{i, j};
                }
            }
        }
        return new int[0];
    }

    //@ non_null
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires 8 < nums.length;
    //@ requires 8 <= nums.length;
    //@ requires 8 == nums.length;
    //@ requires 8 != nums.length;
    //@ requires 8 >= nums.length;
    //@ requires 8 > nums.length;
    //@ requires 7 < nums.length;
    //@ requires 7 <= nums.length;
    //@ requires 7 == nums.length;
    //@ requires 7 != nums.length;
    //@ requires 7 >= nums.length;
    //@ requires 7 > nums.length;
    //@ requires target < -1;
    //@ requires target <= -1;
    //@ requires target == -1;
    //@ requires target != -1;
    //@ requires target >= -1;
    //@ requires target > -1;
    //@ requires target < 8;
    //@ requires target <= 8;
    //@ requires target == 8;
    //@ requires target != 8;
    //@ requires target >= 8;
    //@ requires target > 8;
    //@ requires target < 7;
    //@ requires target <= 7;
    //@ requires target == 7;
    //@ requires target != 7;
    //@ requires target >= 7;
    //@ requires target > 7;
    //@ requires target < 5;
    //@ requires target <= 5;
    //@ requires target == 5;
    //@ requires target != 5;
    //@ requires target >= 5;
    //@ requires target > 5;
    //@ requires target < 4;
    //@ requires target <= 4;
    //@ requires target == 4;
    //@ requires target != 4;
    //@ requires target >= 4;
    //@ requires target > 4;
    //@ requires target < nums.length;
    //@ requires target <= nums.length;
    //@ requires target == nums.length;
    //@ requires target != nums.length;
    //@ requires target >= nums.length;
    //@ requires target > nums.length;
    //@ requires target < 2;
    //@ requires target <= 2;
    //@ requires target == 2;
    //@ requires target != 2;
    //@ requires target >= 2;
    //@ requires target > 2;
    //@ requires target < 1;
    //@ requires target <= 1;
    //@ requires target == 1;
    //@ requires target != 1;
    //@ requires target >= 1;
    //@ requires target > 1;
    //@ requires target < 0;
    //@ requires target <= 0;
    //@ requires target == 0;
    //@ requires target != 0;
    //@ requires target >= 0;
    //@ requires target > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n == 8;
    //@ requires n != 8;
    //@ requires n >= 8;
    //@ requires n > 8;
    //@ requires n < target;
    //@ requires n <= target;
    //@ requires n == target;
    //@ requires n != target;
    //@ requires n >= target;
    //@ requires n > target;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n == 7;
    //@ requires n != 7;
    //@ requires n >= 7;
    //@ requires n > 7;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < nums.length;
    //@ requires n <= nums.length;
    //@ requires n == nums.length;
    //@ requires n != nums.length;
    //@ requires n >= nums.length;
    //@ requires n > nums.length;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 8;
    //@ requires i <= 8;
    //@ requires i == 8;
    //@ requires i != 8;
    //@ requires i >= 8;
    //@ requires i > 8;
    //@ requires i < target;
    //@ requires i <= target;
    //@ requires i == target;
    //@ requires i != target;
    //@ requires i >= target;
    //@ requires i > target;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int target, int n, int i) {}
    
    //@ non_null
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires 8 < nums.length;
    //@ requires 8 <= nums.length;
    //@ requires 8 == nums.length;
    //@ requires 8 != nums.length;
    //@ requires 8 >= nums.length;
    //@ requires 8 > nums.length;
    //@ requires 7 < nums.length;
    //@ requires 7 <= nums.length;
    //@ requires 7 == nums.length;
    //@ requires 7 != nums.length;
    //@ requires 7 >= nums.length;
    //@ requires 7 > nums.length;
    //@ requires target < -1;
    //@ requires target <= -1;
    //@ requires target == -1;
    //@ requires target != -1;
    //@ requires target >= -1;
    //@ requires target > -1;
    //@ requires target < 8;
    //@ requires target <= 8;
    //@ requires target == 8;
    //@ requires target != 8;
    //@ requires target >= 8;
    //@ requires target > 8;
    //@ requires target < 7;
    //@ requires target <= 7;
    //@ requires target == 7;
    //@ requires target != 7;
    //@ requires target >= 7;
    //@ requires target > 7;
    //@ requires target < 5;
    //@ requires target <= 5;
    //@ requires target == 5;
    //@ requires target != 5;
    //@ requires target >= 5;
    //@ requires target > 5;
    //@ requires target < 4;
    //@ requires target <= 4;
    //@ requires target == 4;
    //@ requires target != 4;
    //@ requires target >= 4;
    //@ requires target > 4;
    //@ requires target < nums.length;
    //@ requires target <= nums.length;
    //@ requires target == nums.length;
    //@ requires target != nums.length;
    //@ requires target >= nums.length;
    //@ requires target > nums.length;
    //@ requires target < 2;
    //@ requires target <= 2;
    //@ requires target == 2;
    //@ requires target != 2;
    //@ requires target >= 2;
    //@ requires target > 2;
    //@ requires target < 1;
    //@ requires target <= 1;
    //@ requires target == 1;
    //@ requires target != 1;
    //@ requires target >= 1;
    //@ requires target > 1;
    //@ requires target < 0;
    //@ requires target <= 0;
    //@ requires target == 0;
    //@ requires target != 0;
    //@ requires target >= 0;
    //@ requires target > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n == 8;
    //@ requires n != 8;
    //@ requires n >= 8;
    //@ requires n > 8;
    //@ requires n < target;
    //@ requires n <= target;
    //@ requires n == target;
    //@ requires n != target;
    //@ requires n >= target;
    //@ requires n > target;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n == 7;
    //@ requires n != 7;
    //@ requires n >= 7;
    //@ requires n > 7;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < nums.length;
    //@ requires n <= nums.length;
    //@ requires n == nums.length;
    //@ requires n != nums.length;
    //@ requires n >= nums.length;
    //@ requires n > nums.length;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 8;
    //@ requires i <= 8;
    //@ requires i == 8;
    //@ requires i != 8;
    //@ requires i >= 8;
    //@ requires i > 8;
    //@ requires i < target;
    //@ requires i <= target;
    //@ requires i == target;
    //@ requires i != target;
    //@ requires i >= target;
    //@ requires i > target;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires j < n;
    //@ requires j <= n;
    //@ requires j == n;
    //@ requires j != n;
    //@ requires j >= n;
    //@ requires j > n;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < 8;
    //@ requires j <= 8;
    //@ requires j == 8;
    //@ requires j != 8;
    //@ requires j >= 8;
    //@ requires j > 8;
    //@ requires j < target;
    //@ requires j <= target;
    //@ requires j == target;
    //@ requires j != target;
    //@ requires j >= target;
    //@ requires j > target;
    //@ requires j < 7;
    //@ requires j <= 7;
    //@ requires j == 7;
    //@ requires j != 7;
    //@ requires j >= 7;
    //@ requires j > 7;
    //@ requires j < 5;
    //@ requires j <= 5;
    //@ requires j == 5;
    //@ requires j != 5;
    //@ requires j >= 5;
    //@ requires j > 5;
    //@ requires j < 4;
    //@ requires j <= 4;
    //@ requires j == 4;
    //@ requires j != 4;
    //@ requires j >= 4;
    //@ requires j > 4;
    //@ requires j < nums.length;
    //@ requires j <= nums.length;
    //@ requires j == nums.length;
    //@ requires j != nums.length;
    //@ requires j >= nums.length;
    //@ requires j > nums.length;
    //@ requires j < 2;
    //@ requires j <= 2;
    //@ requires j == 2;
    //@ requires j != 2;
    //@ requires j >= 2;
    //@ requires j > 2;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int target, int n, int i, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] nums = new int[]{};
        twoSum(nums, 1);
        twoSum(nums, -114);
        twoSum(nums, 0);
        twoSum(nums, 114);

        nums = new int[]{1};
        twoSum(nums, 1);
        twoSum(nums, 114);
        twoSum(nums, 0);
        twoSum(nums, 114);


        nums = new int[]{0, 0, 0, 0, 0, 0, 0, 0};
        twoSum(nums, 1);
        twoSum(nums, 114);
        twoSum(nums, 0);
        twoSum(nums, 114);

        nums = new int[]{114, 2};
        twoSum(nums, 1);
        twoSum(nums, 116);

        nums = new int[]{1, 3, 2, -9};
        twoSum(nums, 5);
        twoSum(nums, 114);

        nums = new int[]{-114, 514, -114, -1919, -1919, 810, 14};
        twoSum(nums, 14);
        twoSum(nums, -228);


        nums = new int[]{-114, 514, -114, -1919, -1919, 810, 14, 0};
        twoSum(nums, 14);
        twoSum(nums, -1919);


        nums = new int[]{-114, 514, -1919, 810, 14};
        twoSum(nums, 14);
        twoSum(nums, 114514);
    }
}


/home/max/Documents/JMLGPT/tmp/TwoSum.java:171: error: No modifiers are allowed prior to a lightweight specification case
    //@ non_null
        ^
/home/max/Documents/JMLGPT/tmp/TwoSum.java:396: error: No modifiers are allowed prior to a lightweight specification case
    //@ non_null
        ^
2 errors

class TwoSum {
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires 8 < nums.length;
    //@ requires 8 <= nums.length;
    //@ requires 8 == nums.length;
    //@ requires 8 != nums.length;
    //@ requires 8 >= nums.length;
    //@ requires 8 > nums.length;
    //@ requires 7 < nums.length;
    //@ requires 7 <= nums.length;
    //@ requires 7 == nums.length;
    //@ requires 7 != nums.length;
    //@ requires 7 >= nums.length;
    //@ requires 7 > nums.length;
    //@ requires target < -1;
    //@ requires target <= -1;
    //@ requires target == -1;
    //@ requires target != -1;
    //@ requires target >= -1;
    //@ requires target > -1;
    //@ requires target < 8;
    //@ requires target <= 8;
    //@ requires target == 8;
    //@ requires target != 8;
    //@ requires target >= 8;
    //@ requires target > 8;
    //@ requires target < 7;
    //@ requires target <= 7;
    //@ requires target == 7;
    //@ requires target != 7;
    //@ requires target >= 7;
    //@ requires target > 7;
    //@ requires target < 5;
    //@ requires target <= 5;
    //@ requires target == 5;
    //@ requires target != 5;
    //@ requires target >= 5;
    //@ requires target > 5;
    //@ requires target < 4;
    //@ requires target <= 4;
    //@ requires target == 4;
    //@ requires target != 4;
    //@ requires target >= 4;
    //@ requires target > 4;
    //@ requires target < nums.length;
    //@ requires target <= nums.length;
    //@ requires target == nums.length;
    //@ requires target != nums.length;
    //@ requires target >= nums.length;
    //@ requires target > nums.length;
    //@ requires target < 2;
    //@ requires target <= 2;
    //@ requires target == 2;
    //@ requires target != 2;
    //@ requires target >= 2;
    //@ requires target > 2;
    //@ requires target < 1;
    //@ requires target <= 1;
    //@ requires target == 1;
    //@ requires target != 1;
    //@ requires target >= 1;
    //@ requires target > 1;
    //@ requires target < 0;
    //@ requires target <= 0;
    //@ requires target == 0;
    //@ requires target != 0;
    //@ requires target >= 0;
    //@ requires target > 0;
    //@ ensures \result != null;
    //@ ensures -1 < \result.length;
    //@ ensures -1 <= \result.length;
    //@ ensures -1 == \result.length;
    //@ ensures -1 != \result.length;
    //@ ensures -1 >= \result.length;
    //@ ensures -1 > \result.length;
    //@ ensures 8 < \result.length;
    //@ ensures 8 <= \result.length;
    //@ ensures 8 == \result.length;
    //@ ensures 8 != \result.length;
    //@ ensures 8 >= \result.length;
    //@ ensures 8 > \result.length;
    //@ ensures target < \result.length;
    //@ ensures target <= \result.length;
    //@ ensures target == \result.length;
    //@ ensures target != \result.length;
    //@ ensures target >= \result.length;
    //@ ensures target > \result.length;
    //@ ensures 7 < \result.length;
    //@ ensures 7 <= \result.length;
    //@ ensures 7 == \result.length;
    //@ ensures 7 != \result.length;
    //@ ensures 7 >= \result.length;
    //@ ensures 7 > \result.length;
    //@ ensures 5 < \result.length;
    //@ ensures 5 <= \result.length;
    //@ ensures 5 == \result.length;
    //@ ensures 5 != \result.length;
    //@ ensures 5 >= \result.length;
    //@ ensures 5 > \result.length;
    //@ ensures 4 < \result.length;
    //@ ensures 4 <= \result.length;
    //@ ensures 4 == \result.length;
    //@ ensures 4 != \result.length;
    //@ ensures 4 >= \result.length;
    //@ ensures 4 > \result.length;
    //@ ensures nums.length < \result.length;
    //@ ensures nums.length <= \result.length;
    //@ ensures nums.length == \result.length;
    //@ ensures nums.length != \result.length;
    //@ ensures nums.length >= \result.length;
    //@ ensures nums.length > \result.length;
    //@ ensures 2 < \result.length;
    //@ ensures 2 <= \result.length;
    //@ ensures 2 == \result.length;
    //@ ensures 2 != \result.length;
    //@ ensures 2 >= \result.length;
    //@ ensures 2 > \result.length;
    //@ ensures 1 < \result.length;
    //@ ensures 1 <= \result.length;
    //@ ensures 1 == \result.length;
    //@ ensures 1 != \result.length;
    //@ ensures 1 >= \result.length;
    //@ ensures 1 > \result.length;
    //@ ensures \fresh(\result);
    //@ ensures nums == null ==> \result != null;
    //@ ensures nums != null ==> \result != null;
    //@ ensures target >= 0 ==> \result != null;
    public static int[] twoSum(int[] nums, int target) {
        int n = nums.length;
        for (int i = 0; i < n; ++i) {
            __Loop_Invariant_Dummy1(nums, target, n, i);
            for (int j = i + 1; j < n; ++j) {
                __Loop_Invariant_Dummy2(nums, target, n, i, j);
                if (nums[i] + nums[j] == target) {
                    return new int[]{i, j};
                }
            }
        }
        return new int[0];
    }

    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires 8 < nums.length;
    //@ requires 8 <= nums.length;
    //@ requires 8 == nums.length;
    //@ requires 8 != nums.length;
    //@ requires 8 >= nums.length;
    //@ requires 8 > nums.length;
    //@ requires 7 < nums.length;
    //@ requires 7 <= nums.length;
    //@ requires 7 == nums.length;
    //@ requires 7 != nums.length;
    //@ requires 7 >= nums.length;
    //@ requires 7 > nums.length;
    //@ requires target < -1;
    //@ requires target <= -1;
    //@ requires target == -1;
    //@ requires target != -1;
    //@ requires target >= -1;
    //@ requires target > -1;
    //@ requires target < 8;
    //@ requires target <= 8;
    //@ requires target == 8;
    //@ requires target != 8;
    //@ requires target >= 8;
    //@ requires target > 8;
    //@ requires target < 7;
    //@ requires target <= 7;
    //@ requires target == 7;
    //@ requires target != 7;
    //@ requires target >= 7;
    //@ requires target > 7;
    //@ requires target < 5;
    //@ requires target <= 5;
    //@ requires target == 5;
    //@ requires target != 5;
    //@ requires target >= 5;
    //@ requires target > 5;
    //@ requires target < 4;
    //@ requires target <= 4;
    //@ requires target == 4;
    //@ requires target != 4;
    //@ requires target >= 4;
    //@ requires target > 4;
    //@ requires target < nums.length;
    //@ requires target <= nums.length;
    //@ requires target == nums.length;
    //@ requires target != nums.length;
    //@ requires target >= nums.length;
    //@ requires target > nums.length;
    //@ requires target < 2;
    //@ requires target <= 2;
    //@ requires target == 2;
    //@ requires target != 2;
    //@ requires target >= 2;
    //@ requires target > 2;
    //@ requires target < 1;
    //@ requires target <= 1;
    //@ requires target == 1;
    //@ requires target != 1;
    //@ requires target >= 1;
    //@ requires target > 1;
    //@ requires target < 0;
    //@ requires target <= 0;
    //@ requires target == 0;
    //@ requires target != 0;
    //@ requires target >= 0;
    //@ requires target > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n == 8;
    //@ requires n != 8;
    //@ requires n >= 8;
    //@ requires n > 8;
    //@ requires n < target;
    //@ requires n <= target;
    //@ requires n == target;
    //@ requires n != target;
    //@ requires n >= target;
    //@ requires n > target;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n == 7;
    //@ requires n != 7;
    //@ requires n >= 7;
    //@ requires n > 7;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < nums.length;
    //@ requires n <= nums.length;
    //@ requires n == nums.length;
    //@ requires n != nums.length;
    //@ requires n >= nums.length;
    //@ requires n > nums.length;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 8;
    //@ requires i <= 8;
    //@ requires i == 8;
    //@ requires i != 8;
    //@ requires i >= 8;
    //@ requires i > 8;
    //@ requires i < target;
    //@ requires i <= target;
    //@ requires i == target;
    //@ requires i != target;
    //@ requires i >= target;
    //@ requires i > target;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int target, int n, int i) {}
    
    //@ non_null
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires 8 < nums.length;
    //@ requires 8 <= nums.length;
    //@ requires 8 == nums.length;
    //@ requires 8 != nums.length;
    //@ requires 8 >= nums.length;
    //@ requires 8 > nums.length;
    //@ requires 7 < nums.length;
    //@ requires 7 <= nums.length;
    //@ requires 7 == nums.length;
    //@ requires 7 != nums.length;
    //@ requires 7 >= nums.length;
    //@ requires 7 > nums.length;
    //@ requires target < -1;
    //@ requires target <= -1;
    //@ requires target == -1;
    //@ requires target != -1;
    //@ requires target >= -1;
    //@ requires target > -1;
    //@ requires target < 8;
    //@ requires target <= 8;
    //@ requires target == 8;
    //@ requires target != 8;
    //@ requires target >= 8;
    //@ requires target > 8;
    //@ requires target < 7;
    //@ requires target <= 7;
    //@ requires target == 7;
    //@ requires target != 7;
    //@ requires target >= 7;
    //@ requires target > 7;
    //@ requires target < 5;
    //@ requires target <= 5;
    //@ requires target == 5;
    //@ requires target != 5;
    //@ requires target >= 5;
    //@ requires target > 5;
    //@ requires target < 4;
    //@ requires target <= 4;
    //@ requires target == 4;
    //@ requires target != 4;
    //@ requires target >= 4;
    //@ requires target > 4;
    //@ requires target < nums.length;
    //@ requires target <= nums.length;
    //@ requires target == nums.length;
    //@ requires target != nums.length;
    //@ requires target >= nums.length;
    //@ requires target > nums.length;
    //@ requires target < 2;
    //@ requires target <= 2;
    //@ requires target == 2;
    //@ requires target != 2;
    //@ requires target >= 2;
    //@ requires target > 2;
    //@ requires target < 1;
    //@ requires target <= 1;
    //@ requires target == 1;
    //@ requires target != 1;
    //@ requires target >= 1;
    //@ requires target > 1;
    //@ requires target < 0;
    //@ requires target <= 0;
    //@ requires target == 0;
    //@ requires target != 0;
    //@ requires target >= 0;
    //@ requires target > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n == 8;
    //@ requires n != 8;
    //@ requires n >= 8;
    //@ requires n > 8;
    //@ requires n < target;
    //@ requires n <= target;
    //@ requires n == target;
    //@ requires n != target;
    //@ requires n >= target;
    //@ requires n > target;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n == 7;
    //@ requires n != 7;
    //@ requires n >= 7;
    //@ requires n > 7;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < nums.length;
    //@ requires n <= nums.length;
    //@ requires n == nums.length;
    //@ requires n != nums.length;
    //@ requires n >= nums.length;
    //@ requires n > nums.length;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 8;
    //@ requires i <= 8;
    //@ requires i == 8;
    //@ requires i != 8;
    //@ requires i >= 8;
    //@ requires i > 8;
    //@ requires i < target;
    //@ requires i <= target;
    //@ requires i == target;
    //@ requires i != target;
    //@ requires i >= target;
    //@ requires i > target;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires j < n;
    //@ requires j <= n;
    //@ requires j == n;
    //@ requires j != n;
    //@ requires j >= n;
    //@ requires j > n;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < 8;
    //@ requires j <= 8;
    //@ requires j == 8;
    //@ requires j != 8;
    //@ requires j >= 8;
    //@ requires j > 8;
    //@ requires j < target;
    //@ requires j <= target;
    //@ requires j == target;
    //@ requires j != target;
    //@ requires j >= target;
    //@ requires j > target;
    //@ requires j < 7;
    //@ requires j <= 7;
    //@ requires j == 7;
    //@ requires j != 7;
    //@ requires j >= 7;
    //@ requires j > 7;
    //@ requires j < 5;
    //@ requires j <= 5;
    //@ requires j == 5;
    //@ requires j != 5;
    //@ requires j >= 5;
    //@ requires j > 5;
    //@ requires j < 4;
    //@ requires j <= 4;
    //@ requires j == 4;
    //@ requires j != 4;
    //@ requires j >= 4;
    //@ requires j > 4;
    //@ requires j < nums.length;
    //@ requires j <= nums.length;
    //@ requires j == nums.length;
    //@ requires j != nums.length;
    //@ requires j >= nums.length;
    //@ requires j > nums.length;
    //@ requires j < 2;
    //@ requires j <= 2;
    //@ requires j == 2;
    //@ requires j != 2;
    //@ requires j >= 2;
    //@ requires j > 2;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int target, int n, int i, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] nums = new int[]{};
        twoSum(nums, 1);
        twoSum(nums, -114);
        twoSum(nums, 0);
        twoSum(nums, 114);

        nums = new int[]{1};
        twoSum(nums, 1);
        twoSum(nums, 114);
        twoSum(nums, 0);
        twoSum(nums, 114);


        nums = new int[]{0, 0, 0, 0, 0, 0, 0, 0};
        twoSum(nums, 1);
        twoSum(nums, 114);
        twoSum(nums, 0);
        twoSum(nums, 114);

        nums = new int[]{114, 2};
        twoSum(nums, 1);
        twoSum(nums, 116);

        nums = new int[]{1, 3, 2, -9};
        twoSum(nums, 5);
        twoSum(nums, 114);

        nums = new int[]{-114, 514, -114, -1919, -1919, 810, 14};
        twoSum(nums, 14);
        twoSum(nums, -228);


        nums = new int[]{-114, 514, -114, -1919, -1919, 810, 14, 0};
        twoSum(nums, 14);
        twoSum(nums, -1919);


        nums = new int[]{-114, 514, -1919, 810, 14};
        twoSum(nums, 14);
        twoSum(nums, 114514);
    }
}


/home/max/Documents/JMLGPT/tmp/TwoSum.java:395: error: No modifiers are allowed prior to a lightweight specification case
    //@ non_null
        ^
1 error

class TwoSum {
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires 8 < nums.length;
    //@ requires 8 <= nums.length;
    //@ requires 8 == nums.length;
    //@ requires 8 != nums.length;
    //@ requires 8 >= nums.length;
    //@ requires 8 > nums.length;
    //@ requires 7 < nums.length;
    //@ requires 7 <= nums.length;
    //@ requires 7 == nums.length;
    //@ requires 7 != nums.length;
    //@ requires 7 >= nums.length;
    //@ requires 7 > nums.length;
    //@ requires target < -1;
    //@ requires target <= -1;
    //@ requires target == -1;
    //@ requires target != -1;
    //@ requires target >= -1;
    //@ requires target > -1;
    //@ requires target < 8;
    //@ requires target <= 8;
    //@ requires target == 8;
    //@ requires target != 8;
    //@ requires target >= 8;
    //@ requires target > 8;
    //@ requires target < 7;
    //@ requires target <= 7;
    //@ requires target == 7;
    //@ requires target != 7;
    //@ requires target >= 7;
    //@ requires target > 7;
    //@ requires target < 5;
    //@ requires target <= 5;
    //@ requires target == 5;
    //@ requires target != 5;
    //@ requires target >= 5;
    //@ requires target > 5;
    //@ requires target < 4;
    //@ requires target <= 4;
    //@ requires target == 4;
    //@ requires target != 4;
    //@ requires target >= 4;
    //@ requires target > 4;
    //@ requires target < nums.length;
    //@ requires target <= nums.length;
    //@ requires target == nums.length;
    //@ requires target != nums.length;
    //@ requires target >= nums.length;
    //@ requires target > nums.length;
    //@ requires target < 2;
    //@ requires target <= 2;
    //@ requires target == 2;
    //@ requires target != 2;
    //@ requires target >= 2;
    //@ requires target > 2;
    //@ requires target < 1;
    //@ requires target <= 1;
    //@ requires target == 1;
    //@ requires target != 1;
    //@ requires target >= 1;
    //@ requires target > 1;
    //@ requires target < 0;
    //@ requires target <= 0;
    //@ requires target == 0;
    //@ requires target != 0;
    //@ requires target >= 0;
    //@ requires target > 0;
    //@ ensures \result != null;
    //@ ensures -1 < \result.length;
    //@ ensures -1 <= \result.length;
    //@ ensures -1 == \result.length;
    //@ ensures -1 != \result.length;
    //@ ensures -1 >= \result.length;
    //@ ensures -1 > \result.length;
    //@ ensures 8 < \result.length;
    //@ ensures 8 <= \result.length;
    //@ ensures 8 == \result.length;
    //@ ensures 8 != \result.length;
    //@ ensures 8 >= \result.length;
    //@ ensures 8 > \result.length;
    //@ ensures target < \result.length;
    //@ ensures target <= \result.length;
    //@ ensures target == \result.length;
    //@ ensures target != \result.length;
    //@ ensures target >= \result.length;
    //@ ensures target > \result.length;
    //@ ensures 7 < \result.length;
    //@ ensures 7 <= \result.length;
    //@ ensures 7 == \result.length;
    //@ ensures 7 != \result.length;
    //@ ensures 7 >= \result.length;
    //@ ensures 7 > \result.length;
    //@ ensures 5 < \result.length;
    //@ ensures 5 <= \result.length;
    //@ ensures 5 == \result.length;
    //@ ensures 5 != \result.length;
    //@ ensures 5 >= \result.length;
    //@ ensures 5 > \result.length;
    //@ ensures 4 < \result.length;
    //@ ensures 4 <= \result.length;
    //@ ensures 4 == \result.length;
    //@ ensures 4 != \result.length;
    //@ ensures 4 >= \result.length;
    //@ ensures 4 > \result.length;
    //@ ensures nums.length < \result.length;
    //@ ensures nums.length <= \result.length;
    //@ ensures nums.length == \result.length;
    //@ ensures nums.length != \result.length;
    //@ ensures nums.length >= \result.length;
    //@ ensures nums.length > \result.length;
    //@ ensures 2 < \result.length;
    //@ ensures 2 <= \result.length;
    //@ ensures 2 == \result.length;
    //@ ensures 2 != \result.length;
    //@ ensures 2 >= \result.length;
    //@ ensures 2 > \result.length;
    //@ ensures 1 < \result.length;
    //@ ensures 1 <= \result.length;
    //@ ensures 1 == \result.length;
    //@ ensures 1 != \result.length;
    //@ ensures 1 >= \result.length;
    //@ ensures 1 > \result.length;
    //@ ensures \fresh(\result);
    //@ ensures nums == null ==> \result != null;
    //@ ensures nums != null ==> \result != null;
    //@ ensures target >= 0 ==> \result != null;
    public static int[] twoSum(int[] nums, int target) {
        int n = nums.length;
        for (int i = 0; i < n; ++i) {
            __Loop_Invariant_Dummy1(nums, target, n, i);
            for (int j = i + 1; j < n; ++j) {
                __Loop_Invariant_Dummy2(nums, target, n, i, j);
                if (nums[i] + nums[j] == target) {
                    return new int[]{i, j};
                }
            }
        }
        return new int[0];
    }

    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires 8 < nums.length;
    //@ requires 8 <= nums.length;
    //@ requires 8 == nums.length;
    //@ requires 8 != nums.length;
    //@ requires 8 >= nums.length;
    //@ requires 8 > nums.length;
    //@ requires 7 < nums.length;
    //@ requires 7 <= nums.length;
    //@ requires 7 == nums.length;
    //@ requires 7 != nums.length;
    //@ requires 7 >= nums.length;
    //@ requires 7 > nums.length;
    //@ requires target < -1;
    //@ requires target <= -1;
    //@ requires target == -1;
    //@ requires target != -1;
    //@ requires target >= -1;
    //@ requires target > -1;
    //@ requires target < 8;
    //@ requires target <= 8;
    //@ requires target == 8;
    //@ requires target != 8;
    //@ requires target >= 8;
    //@ requires target > 8;
    //@ requires target < 7;
    //@ requires target <= 7;
    //@ requires target == 7;
    //@ requires target != 7;
    //@ requires target >= 7;
    //@ requires target > 7;
    //@ requires target < 5;
    //@ requires target <= 5;
    //@ requires target == 5;
    //@ requires target != 5;
    //@ requires target >= 5;
    //@ requires target > 5;
    //@ requires target < 4;
    //@ requires target <= 4;
    //@ requires target == 4;
    //@ requires target != 4;
    //@ requires target >= 4;
    //@ requires target > 4;
    //@ requires target < nums.length;
    //@ requires target <= nums.length;
    //@ requires target == nums.length;
    //@ requires target != nums.length;
    //@ requires target >= nums.length;
    //@ requires target > nums.length;
    //@ requires target < 2;
    //@ requires target <= 2;
    //@ requires target == 2;
    //@ requires target != 2;
    //@ requires target >= 2;
    //@ requires target > 2;
    //@ requires target < 1;
    //@ requires target <= 1;
    //@ requires target == 1;
    //@ requires target != 1;
    //@ requires target >= 1;
    //@ requires target > 1;
    //@ requires target < 0;
    //@ requires target <= 0;
    //@ requires target == 0;
    //@ requires target != 0;
    //@ requires target >= 0;
    //@ requires target > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n == 8;
    //@ requires n != 8;
    //@ requires n >= 8;
    //@ requires n > 8;
    //@ requires n < target;
    //@ requires n <= target;
    //@ requires n == target;
    //@ requires n != target;
    //@ requires n >= target;
    //@ requires n > target;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n == 7;
    //@ requires n != 7;
    //@ requires n >= 7;
    //@ requires n > 7;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < nums.length;
    //@ requires n <= nums.length;
    //@ requires n == nums.length;
    //@ requires n != nums.length;
    //@ requires n >= nums.length;
    //@ requires n > nums.length;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 8;
    //@ requires i <= 8;
    //@ requires i == 8;
    //@ requires i != 8;
    //@ requires i >= 8;
    //@ requires i > 8;
    //@ requires i < target;
    //@ requires i <= target;
    //@ requires i == target;
    //@ requires i != target;
    //@ requires i >= target;
    //@ requires i > target;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int target, int n, int i) {}
    
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires 8 < nums.length;
    //@ requires 8 <= nums.length;
    //@ requires 8 == nums.length;
    //@ requires 8 != nums.length;
    //@ requires 8 >= nums.length;
    //@ requires 8 > nums.length;
    //@ requires 7 < nums.length;
    //@ requires 7 <= nums.length;
    //@ requires 7 == nums.length;
    //@ requires 7 != nums.length;
    //@ requires 7 >= nums.length;
    //@ requires 7 > nums.length;
    //@ requires target < -1;
    //@ requires target <= -1;
    //@ requires target == -1;
    //@ requires target != -1;
    //@ requires target >= -1;
    //@ requires target > -1;
    //@ requires target < 8;
    //@ requires target <= 8;
    //@ requires target == 8;
    //@ requires target != 8;
    //@ requires target >= 8;
    //@ requires target > 8;
    //@ requires target < 7;
    //@ requires target <= 7;
    //@ requires target == 7;
    //@ requires target != 7;
    //@ requires target >= 7;
    //@ requires target > 7;
    //@ requires target < 5;
    //@ requires target <= 5;
    //@ requires target == 5;
    //@ requires target != 5;
    //@ requires target >= 5;
    //@ requires target > 5;
    //@ requires target < 4;
    //@ requires target <= 4;
    //@ requires target == 4;
    //@ requires target != 4;
    //@ requires target >= 4;
    //@ requires target > 4;
    //@ requires target < nums.length;
    //@ requires target <= nums.length;
    //@ requires target == nums.length;
    //@ requires target != nums.length;
    //@ requires target >= nums.length;
    //@ requires target > nums.length;
    //@ requires target < 2;
    //@ requires target <= 2;
    //@ requires target == 2;
    //@ requires target != 2;
    //@ requires target >= 2;
    //@ requires target > 2;
    //@ requires target < 1;
    //@ requires target <= 1;
    //@ requires target == 1;
    //@ requires target != 1;
    //@ requires target >= 1;
    //@ requires target > 1;
    //@ requires target < 0;
    //@ requires target <= 0;
    //@ requires target == 0;
    //@ requires target != 0;
    //@ requires target >= 0;
    //@ requires target > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 8;
    //@ requires n <= 8;
    //@ requires n == 8;
    //@ requires n != 8;
    //@ requires n >= 8;
    //@ requires n > 8;
    //@ requires n < target;
    //@ requires n <= target;
    //@ requires n == target;
    //@ requires n != target;
    //@ requires n >= target;
    //@ requires n > target;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n == 7;
    //@ requires n != 7;
    //@ requires n >= 7;
    //@ requires n > 7;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < nums.length;
    //@ requires n <= nums.length;
    //@ requires n == nums.length;
    //@ requires n != nums.length;
    //@ requires n >= nums.length;
    //@ requires n > nums.length;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 8;
    //@ requires i <= 8;
    //@ requires i == 8;
    //@ requires i != 8;
    //@ requires i >= 8;
    //@ requires i > 8;
    //@ requires i < target;
    //@ requires i <= target;
    //@ requires i == target;
    //@ requires i != target;
    //@ requires i >= target;
    //@ requires i > target;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires j < n;
    //@ requires j <= n;
    //@ requires j == n;
    //@ requires j != n;
    //@ requires j >= n;
    //@ requires j > n;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < 8;
    //@ requires j <= 8;
    //@ requires j == 8;
    //@ requires j != 8;
    //@ requires j >= 8;
    //@ requires j > 8;
    //@ requires j < target;
    //@ requires j <= target;
    //@ requires j == target;
    //@ requires j != target;
    //@ requires j >= target;
    //@ requires j > target;
    //@ requires j < 7;
    //@ requires j <= 7;
    //@ requires j == 7;
    //@ requires j != 7;
    //@ requires j >= 7;
    //@ requires j > 7;
    //@ requires j < 5;
    //@ requires j <= 5;
    //@ requires j == 5;
    //@ requires j != 5;
    //@ requires j >= 5;
    //@ requires j > 5;
    //@ requires j < 4;
    //@ requires j <= 4;
    //@ requires j == 4;
    //@ requires j != 4;
    //@ requires j >= 4;
    //@ requires j > 4;
    //@ requires j < nums.length;
    //@ requires j <= nums.length;
    //@ requires j == nums.length;
    //@ requires j != nums.length;
    //@ requires j >= nums.length;
    //@ requires j > nums.length;
    //@ requires j < 2;
    //@ requires j <= 2;
    //@ requires j == 2;
    //@ requires j != 2;
    //@ requires j >= 2;
    //@ requires j > 2;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int target, int n, int i, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] nums = new int[]{};
        twoSum(nums, 1);
        twoSum(nums, -114);
        twoSum(nums, 0);
        twoSum(nums, 114);

        nums = new int[]{1};
        twoSum(nums, 1);
        twoSum(nums, 114);
        twoSum(nums, 0);
        twoSum(nums, 114);


        nums = new int[]{0, 0, 0, 0, 0, 0, 0, 0};
        twoSum(nums, 1);
        twoSum(nums, 114);
        twoSum(nums, 0);
        twoSum(nums, 114);

        nums = new int[]{114, 2};
        twoSum(nums, 1);
        twoSum(nums, 116);

        nums = new int[]{1, 3, 2, -9};
        twoSum(nums, 5);
        twoSum(nums, 114);

        nums = new int[]{-114, 514, -114, -1919, -1919, 810, 14};
        twoSum(nums, 14);
        twoSum(nums, -228);


        nums = new int[]{-114, 514, -114, -1919, -1919, 810, 14, 0};
        twoSum(nums, 14);
        twoSum(nums, -1919);


        nums = new int[]{-114, 514, -1919, 810, 14};
        twoSum(nums, 14);
        twoSum(nums, 114514);
    }
}


java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.newNode(HashMap.java:1888)
	at java.base/java.util.HashMap.putVal(HashMap.java:631)
	at java.base/java.util.HashMap.putMapEntries(HashMap.java:516)
	at java.base/java.util.HashMap.putAll(HashMap.java:785)
	at jdk.compiler/org.jmlspecs.openjml.esc.BasicBlocker2$VarMap.putAll(BasicBlocker2.java:2511)
	at jdk.compiler/org.jmlspecs.openjml.esc.BasicBlocker2.initMap(BasicBlocker2.java:792)
	at jdk.compiler/org.jmlspecs.openjml.esc.BasicBlocker2.setCurrentBlock(BasicBlocker2.java:545)
	at jdk.compiler/org.jmlspecs.openjml.esc.BasicBlocker2.setCurrentBlock(BasicBlocker2.java:152)
	at jdk.compiler/org.jmlspecs.openjml.esc.BasicBlockerParent.startBlock(BasicBlockerParent.java:463)
	at jdk.compiler/org.jmlspecs.openjml.esc.BasicBlockerParent.processBlock(BasicBlockerParent.java:404)
	at jdk.compiler/org.jmlspecs.openjml.esc.BasicBlockerParent.processBlocks(BasicBlockerParent.java:352)
	at jdk.compiler/org.jmlspecs.openjml.esc.BasicBlockerParent.visitTry(BasicBlockerParent.java:1048)
	at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCTry.accept(JCTree.java:1401)
	at jdk.compiler/org.jmlspecs.openjml.esc.BasicBlockerParent.processStats(BasicBlockerParent.java:426)
	at jdk.compiler/org.jmlspecs.openjml.esc.BasicBlockerParent.processCurrentBlock(BasicBlockerParent.java:418)
	at jdk.compiler/org.jmlspecs.openjml.esc.BasicBlockerParent.processBlock(BasicBlockerParent.java:405)
	at jdk.compiler/org.jmlspecs.openjml.esc.BasicBlockerParent.processBlocks(BasicBlockerParent.java:352)
	at jdk.compiler/org.jmlspecs.openjml.esc.BasicBlocker2.convertMethodBody(BasicBlocker2.java:617)
	at jdk.compiler/org.jmlspecs.openjml.esc.MethodProverSMT.prove(MethodProverSMT.java:361)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlEsc.doMethod(JmlEsc.java:329)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlEsc.visitMethodDef(JmlEsc.java:221)
	at jdk.compiler/org.jmlspecs.openjml.visitors.JmlTreeScanner.visitJmlMethodDecl(JmlTreeScanner.java:238)
	at jdk.compiler/org.jmlspecs.openjml.JmlTree$JmlMethodDecl.accept(JmlTree.java:1383)
	at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.scan(TreeScanner.java:49)
	at jdk.compiler/org.jmlspecs.openjml.visitors.JmlTreeScanner.scan(JmlTreeScanner.java:70)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlEsc.visitClassDef(JmlEsc.java:169)
	at jdk.compiler/org.jmlspecs.openjml.visitors.JmlTreeScanner.visitJmlClassDecl(JmlTreeScanner.java:106)
	at jdk.compiler/org.jmlspecs.openjml.JmlTree$JmlClassDecl.accept(JmlTree.java:1295)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlEsc.check(JmlEsc.java:117)
	at jdk.compiler/com.sun.tools.javac.main.JmlCompiler.esc(JmlCompiler.java:536)
	at jdk.compiler/com.sun.tools.javac.main.JmlCompiler.flow(JmlCompiler.java:362)
	at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.compile(JavaCompiler.java:936)
/home/max/Documents/JMLGPT/tmp/TwoSum.java:692: error: A catastrophic JML internal error occurred.  Please report the bug with as much information as you can.
    public static void main(String[] args) {
                       ^
  Reason: Prover aborted with exception: ZZZZZ
1 error

