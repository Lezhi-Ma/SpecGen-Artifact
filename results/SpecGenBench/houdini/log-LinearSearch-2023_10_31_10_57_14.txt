public class LinearSearch {
    //@ spec_public
    //@ invariant 0 <= location;
    private static int location;

    //@ non_null
    //@ requires location < array.length;
    //@ requires location <= array.length;
    //@ requires location == array.length;
    //@ requires location != array.length;
    //@ requires location >= array.length;
    //@ requires location > array.length;
    //@ requires 5 < array.length;
    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 != array.length;
    //@ requires 5 >= array.length;
    //@ requires 5 > array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 == array.length;
    //@ requires 3 != array.length;
    //@ requires 3 >= array.length;
    //@ requires 3 > array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 == array.length;
    //@ requires 2 != array.length;
    //@ requires 2 >= array.length;
    //@ requires 2 > array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 == array.length;
    //@ requires 1 != array.length;
    //@ requires 1 >= array.length;
    //@ requires 1 > array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 == array.length;
    //@ requires -1 != array.length;
    //@ requires -1 >= array.length;
    //@ requires -1 > array.length;
    //@ requires search < location;
    //@ requires search <= location;
    //@ requires search == location;
    //@ requires search != location;
    //@ requires search >= location;
    //@ requires search > location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search == 5;
    //@ requires search != 5;
    //@ requires search >= 5;
    //@ requires search > 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search == 3;
    //@ requires search != 3;
    //@ requires search >= 3;
    //@ requires search > 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < array.length;
    //@ ensures \result <= array.length;
    //@ ensures \result == array.length;
    //@ ensures \result != array.length;
    //@ ensures \result >= array.length;
    //@ ensures \result > array.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < location;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result != location;
    //@ ensures \result >= location;
    //@ ensures \result > location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < search;
    //@ ensures \result <= search;
    //@ ensures \result == search;
    //@ ensures \result != search;
    //@ ensures \result >= search;
    //@ ensures \result > search;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures array != null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ non_null
    //@ requires location < array.length;
    //@ requires location <= array.length;
    //@ requires location == array.length;
    //@ requires location != array.length;
    //@ requires location >= array.length;
    //@ requires location > array.length;
    //@ requires 5 < array.length;
    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 != array.length;
    //@ requires 5 >= array.length;
    //@ requires 5 > array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 == array.length;
    //@ requires 3 != array.length;
    //@ requires 3 >= array.length;
    //@ requires 3 > array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 == array.length;
    //@ requires 2 != array.length;
    //@ requires 2 >= array.length;
    //@ requires 2 > array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 == array.length;
    //@ requires 1 != array.length;
    //@ requires 1 >= array.length;
    //@ requires 1 > array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 == array.length;
    //@ requires -1 != array.length;
    //@ requires -1 >= array.length;
    //@ requires -1 > array.length;
    //@ requires search < location;
    //@ requires search <= location;
    //@ requires search == location;
    //@ requires search != location;
    //@ requires search >= location;
    //@ requires search > location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search == 5;
    //@ requires search != 5;
    //@ requires search >= 5;
    //@ requires search > 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search == 3;
    //@ requires search != 3;
    //@ requires search >= 3;
    //@ requires search > 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c == array.length;
    //@ requires c != array.length;
    //@ requires c >= array.length;
    //@ requires c > array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:6: error: No modifiers are allowed prior to a lightweight specification case
    //@ non_null
        ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:164: error: No modifiers are allowed prior to a lightweight specification case
    //@ non_null
        ^
2 errors

public class LinearSearch {
    //@ spec_public
    //@ invariant 0 <= location;
    private static int location;

    //@ requires location < array.length;
    //@ requires location <= array.length;
    //@ requires location == array.length;
    //@ requires location != array.length;
    //@ requires location >= array.length;
    //@ requires location > array.length;
    //@ requires 5 < array.length;
    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 != array.length;
    //@ requires 5 >= array.length;
    //@ requires 5 > array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 == array.length;
    //@ requires 3 != array.length;
    //@ requires 3 >= array.length;
    //@ requires 3 > array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 == array.length;
    //@ requires 2 != array.length;
    //@ requires 2 >= array.length;
    //@ requires 2 > array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 == array.length;
    //@ requires 1 != array.length;
    //@ requires 1 >= array.length;
    //@ requires 1 > array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 == array.length;
    //@ requires -1 != array.length;
    //@ requires -1 >= array.length;
    //@ requires -1 > array.length;
    //@ requires search < location;
    //@ requires search <= location;
    //@ requires search == location;
    //@ requires search != location;
    //@ requires search >= location;
    //@ requires search > location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search == 5;
    //@ requires search != 5;
    //@ requires search >= 5;
    //@ requires search > 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search == 3;
    //@ requires search != 3;
    //@ requires search >= 3;
    //@ requires search > 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < array.length;
    //@ ensures \result <= array.length;
    //@ ensures \result == array.length;
    //@ ensures \result != array.length;
    //@ ensures \result >= array.length;
    //@ ensures \result > array.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < location;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result != location;
    //@ ensures \result >= location;
    //@ ensures \result > location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < search;
    //@ ensures \result <= search;
    //@ ensures \result == search;
    //@ ensures \result != search;
    //@ ensures \result >= search;
    //@ ensures \result > search;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures array != null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ non_null
    //@ requires location < array.length;
    //@ requires location <= array.length;
    //@ requires location == array.length;
    //@ requires location != array.length;
    //@ requires location >= array.length;
    //@ requires location > array.length;
    //@ requires 5 < array.length;
    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 != array.length;
    //@ requires 5 >= array.length;
    //@ requires 5 > array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 == array.length;
    //@ requires 3 != array.length;
    //@ requires 3 >= array.length;
    //@ requires 3 > array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 == array.length;
    //@ requires 2 != array.length;
    //@ requires 2 >= array.length;
    //@ requires 2 > array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 == array.length;
    //@ requires 1 != array.length;
    //@ requires 1 >= array.length;
    //@ requires 1 > array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 == array.length;
    //@ requires -1 != array.length;
    //@ requires -1 >= array.length;
    //@ requires -1 > array.length;
    //@ requires search < location;
    //@ requires search <= location;
    //@ requires search == location;
    //@ requires search != location;
    //@ requires search >= location;
    //@ requires search > location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search == 5;
    //@ requires search != 5;
    //@ requires search >= 5;
    //@ requires search > 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search == 3;
    //@ requires search != 3;
    //@ requires search >= 3;
    //@ requires search > 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c == array.length;
    //@ requires c != array.length;
    //@ requires c >= array.length;
    //@ requires c > array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:163: error: No modifiers are allowed prior to a lightweight specification case
    //@ non_null
        ^
1 error

public class LinearSearch {
    //@ spec_public
    //@ invariant 0 <= location;
    private static int location;

    //@ requires location < array.length;
    //@ requires location <= array.length;
    //@ requires location == array.length;
    //@ requires location != array.length;
    //@ requires location >= array.length;
    //@ requires location > array.length;
    //@ requires 5 < array.length;
    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 != array.length;
    //@ requires 5 >= array.length;
    //@ requires 5 > array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 == array.length;
    //@ requires 3 != array.length;
    //@ requires 3 >= array.length;
    //@ requires 3 > array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 == array.length;
    //@ requires 2 != array.length;
    //@ requires 2 >= array.length;
    //@ requires 2 > array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 == array.length;
    //@ requires 1 != array.length;
    //@ requires 1 >= array.length;
    //@ requires 1 > array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 == array.length;
    //@ requires -1 != array.length;
    //@ requires -1 >= array.length;
    //@ requires -1 > array.length;
    //@ requires search < location;
    //@ requires search <= location;
    //@ requires search == location;
    //@ requires search != location;
    //@ requires search >= location;
    //@ requires search > location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search == 5;
    //@ requires search != 5;
    //@ requires search >= 5;
    //@ requires search > 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search == 3;
    //@ requires search != 3;
    //@ requires search >= 3;
    //@ requires search > 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < array.length;
    //@ ensures \result <= array.length;
    //@ ensures \result == array.length;
    //@ ensures \result != array.length;
    //@ ensures \result >= array.length;
    //@ ensures \result > array.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < location;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result != location;
    //@ ensures \result >= location;
    //@ ensures \result > location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < search;
    //@ ensures \result <= search;
    //@ ensures \result == search;
    //@ ensures \result != search;
    //@ ensures \result >= search;
    //@ ensures \result > search;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures array != null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires location < array.length;
    //@ requires location <= array.length;
    //@ requires location == array.length;
    //@ requires location != array.length;
    //@ requires location >= array.length;
    //@ requires location > array.length;
    //@ requires 5 < array.length;
    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 != array.length;
    //@ requires 5 >= array.length;
    //@ requires 5 > array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 == array.length;
    //@ requires 3 != array.length;
    //@ requires 3 >= array.length;
    //@ requires 3 > array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 == array.length;
    //@ requires 2 != array.length;
    //@ requires 2 >= array.length;
    //@ requires 2 > array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 == array.length;
    //@ requires 1 != array.length;
    //@ requires 1 >= array.length;
    //@ requires 1 > array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 == array.length;
    //@ requires -1 != array.length;
    //@ requires -1 >= array.length;
    //@ requires -1 > array.length;
    //@ requires search < location;
    //@ requires search <= location;
    //@ requires search == location;
    //@ requires search != location;
    //@ requires search >= location;
    //@ requires search > location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search == 5;
    //@ requires search != 5;
    //@ requires search >= 5;
    //@ requires search > 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search == 3;
    //@ requires search != 3;
    //@ requires search >= 3;
    //@ requires search > 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c == array.length;
    //@ requires c != array.length;
    //@ requires c >= array.length;
    //@ requires c > array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:3: error: An identifier with private visibility may not be used in a invariant clause with package visibility
    //@ invariant 0 <= location;
                       ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:2: error: This JML modifier is not allowed for a invariant clause
    //@ spec_public
        ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:6: error: An identifier with private visibility may not be used in a requires clause with public visibility
    //@ requires location < array.length;
                 ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:7: error: An identifier with private visibility may not be used in a requires clause with public visibility
    //@ requires location <= array.length;
                 ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:8: error: An identifier with private visibility may not be used in a requires clause with public visibility
    //@ requires location == array.length;
                 ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:9: error: An identifier with private visibility may not be used in a requires clause with public visibility
    //@ requires location != array.length;
                 ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:10: error: An identifier with private visibility may not be used in a requires clause with public visibility
    //@ requires location >= array.length;
                 ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:11: error: An identifier with private visibility may not be used in a requires clause with public visibility
    //@ requires location > array.length;
                 ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:42: error: An identifier with private visibility may not be used in a requires clause with public visibility
    //@ requires search < location;
                          ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:43: error: An identifier with private visibility may not be used in a requires clause with public visibility
    //@ requires search <= location;
                           ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:44: error: An identifier with private visibility may not be used in a requires clause with public visibility
    //@ requires search == location;
                           ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:45: error: An identifier with private visibility may not be used in a requires clause with public visibility
    //@ requires search != location;
                           ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:46: error: An identifier with private visibility may not be used in a requires clause with public visibility
    //@ requires search >= location;
                           ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:47: error: An identifier with private visibility may not be used in a requires clause with public visibility
    //@ requires search > location;
                          ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:120: error: An identifier with private visibility may not be used in a ensures clause with public visibility
    //@ ensures \result < location;
                          ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:121: error: An identifier with private visibility may not be used in a ensures clause with public visibility
    //@ ensures \result <= location;
                           ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:122: error: An identifier with private visibility may not be used in a ensures clause with public visibility
    //@ ensures \result == location;
                           ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:123: error: An identifier with private visibility may not be used in a ensures clause with public visibility
    //@ ensures \result != location;
                           ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:124: error: An identifier with private visibility may not be used in a ensures clause with public visibility
    //@ ensures \result >= location;
                           ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:125: error: An identifier with private visibility may not be used in a ensures clause with public visibility
    //@ ensures \result > location;
                          ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:163: error: An identifier with private visibility may not be used in a requires clause with public visibility
    //@ requires location < array.length;
                 ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:164: error: An identifier with private visibility may not be used in a requires clause with public visibility
    //@ requires location <= array.length;
                 ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:165: error: An identifier with private visibility may not be used in a requires clause with public visibility
    //@ requires location == array.length;
                 ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:166: error: An identifier with private visibility may not be used in a requires clause with public visibility
    //@ requires location != array.length;
                 ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:167: error: An identifier with private visibility may not be used in a requires clause with public visibility
    //@ requires location >= array.length;
                 ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:168: error: An identifier with private visibility may not be used in a requires clause with public visibility
    //@ requires location > array.length;
                 ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:199: error: An identifier with private visibility may not be used in a requires clause with public visibility
    //@ requires search < location;
                          ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:200: error: An identifier with private visibility may not be used in a requires clause with public visibility
    //@ requires search <= location;
                           ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:201: error: An identifier with private visibility may not be used in a requires clause with public visibility
    //@ requires search == location;
                           ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:202: error: An identifier with private visibility may not be used in a requires clause with public visibility
    //@ requires search != location;
                           ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:203: error: An identifier with private visibility may not be used in a requires clause with public visibility
    //@ requires search >= location;
                           ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:204: error: An identifier with private visibility may not be used in a requires clause with public visibility
    //@ requires search > location;
                          ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:277: error: An identifier with private visibility may not be used in a requires clause with public visibility
    //@ requires c < location;
                     ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:278: error: An identifier with private visibility may not be used in a requires clause with public visibility
    //@ requires c <= location;
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:279: error: An identifier with private visibility may not be used in a requires clause with public visibility
    //@ requires c == location;
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:280: error: An identifier with private visibility may not be used in a requires clause with public visibility
    //@ requires c != location;
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:281: error: An identifier with private visibility may not be used in a requires clause with public visibility
    //@ requires c >= location;
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:282: error: An identifier with private visibility may not be used in a requires clause with public visibility
    //@ requires c > location;
                     ^
38 errors

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires location < array.length;
    //@ requires location <= array.length;
    //@ requires location == array.length;
    //@ requires location != array.length;
    //@ requires location >= array.length;
    //@ requires location > array.length;
    //@ requires 5 < array.length;
    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 != array.length;
    //@ requires 5 >= array.length;
    //@ requires 5 > array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 == array.length;
    //@ requires 3 != array.length;
    //@ requires 3 >= array.length;
    //@ requires 3 > array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 == array.length;
    //@ requires 2 != array.length;
    //@ requires 2 >= array.length;
    //@ requires 2 > array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 == array.length;
    //@ requires 1 != array.length;
    //@ requires 1 >= array.length;
    //@ requires 1 > array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 == array.length;
    //@ requires -1 != array.length;
    //@ requires -1 >= array.length;
    //@ requires -1 > array.length;
    //@ requires search < location;
    //@ requires search <= location;
    //@ requires search == location;
    //@ requires search != location;
    //@ requires search >= location;
    //@ requires search > location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search == 5;
    //@ requires search != 5;
    //@ requires search >= 5;
    //@ requires search > 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search == 3;
    //@ requires search != 3;
    //@ requires search >= 3;
    //@ requires search > 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < array.length;
    //@ ensures \result <= array.length;
    //@ ensures \result == array.length;
    //@ ensures \result != array.length;
    //@ ensures \result >= array.length;
    //@ ensures \result > array.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < location;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result != location;
    //@ ensures \result >= location;
    //@ ensures \result > location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < search;
    //@ ensures \result <= search;
    //@ ensures \result == search;
    //@ ensures \result != search;
    //@ ensures \result >= search;
    //@ ensures \result > search;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures array != null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires location < array.length;
    //@ requires location <= array.length;
    //@ requires location == array.length;
    //@ requires location != array.length;
    //@ requires location >= array.length;
    //@ requires location > array.length;
    //@ requires 5 < array.length;
    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 != array.length;
    //@ requires 5 >= array.length;
    //@ requires 5 > array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 == array.length;
    //@ requires 3 != array.length;
    //@ requires 3 >= array.length;
    //@ requires 3 > array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 == array.length;
    //@ requires 2 != array.length;
    //@ requires 2 >= array.length;
    //@ requires 2 > array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 == array.length;
    //@ requires 1 != array.length;
    //@ requires 1 >= array.length;
    //@ requires 1 > array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 == array.length;
    //@ requires -1 != array.length;
    //@ requires -1 >= array.length;
    //@ requires -1 > array.length;
    //@ requires search < location;
    //@ requires search <= location;
    //@ requires search == location;
    //@ requires search != location;
    //@ requires search >= location;
    //@ requires search > location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search == 5;
    //@ requires search != 5;
    //@ requires search >= 5;
    //@ requires search > 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search == 3;
    //@ requires search != 3;
    //@ requires search >= 3;
    //@ requires search > 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c == array.length;
    //@ requires c != array.length;
    //@ requires c >= array.length;
    //@ requires c > array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:305: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:146:) in method main
        linearSearch(arr, -2);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:146: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:305:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:7: verify: Precondition conjunct is false: location == array.length
    //@ requires location == array.length;
                          ^
3 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires location < array.length;
    //@ requires location <= array.length;
    //@ requires location != array.length;
    //@ requires location >= array.length;
    //@ requires location > array.length;
    //@ requires 5 < array.length;
    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 != array.length;
    //@ requires 5 >= array.length;
    //@ requires 5 > array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 == array.length;
    //@ requires 3 != array.length;
    //@ requires 3 >= array.length;
    //@ requires 3 > array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 == array.length;
    //@ requires 2 != array.length;
    //@ requires 2 >= array.length;
    //@ requires 2 > array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 == array.length;
    //@ requires 1 != array.length;
    //@ requires 1 >= array.length;
    //@ requires 1 > array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 == array.length;
    //@ requires -1 != array.length;
    //@ requires -1 >= array.length;
    //@ requires -1 > array.length;
    //@ requires search < location;
    //@ requires search <= location;
    //@ requires search == location;
    //@ requires search != location;
    //@ requires search >= location;
    //@ requires search > location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search == 5;
    //@ requires search != 5;
    //@ requires search >= 5;
    //@ requires search > 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search == 3;
    //@ requires search != 3;
    //@ requires search >= 3;
    //@ requires search > 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < array.length;
    //@ ensures \result <= array.length;
    //@ ensures \result == array.length;
    //@ ensures \result != array.length;
    //@ ensures \result >= array.length;
    //@ ensures \result > array.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < location;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result != location;
    //@ ensures \result >= location;
    //@ ensures \result > location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < search;
    //@ ensures \result <= search;
    //@ ensures \result == search;
    //@ ensures \result != search;
    //@ ensures \result >= search;
    //@ ensures \result > search;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures array != null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires location < array.length;
    //@ requires location <= array.length;
    //@ requires location == array.length;
    //@ requires location != array.length;
    //@ requires location >= array.length;
    //@ requires location > array.length;
    //@ requires 5 < array.length;
    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 != array.length;
    //@ requires 5 >= array.length;
    //@ requires 5 > array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 == array.length;
    //@ requires 3 != array.length;
    //@ requires 3 >= array.length;
    //@ requires 3 > array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 == array.length;
    //@ requires 2 != array.length;
    //@ requires 2 >= array.length;
    //@ requires 2 > array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 == array.length;
    //@ requires 1 != array.length;
    //@ requires 1 >= array.length;
    //@ requires 1 > array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 == array.length;
    //@ requires -1 != array.length;
    //@ requires -1 >= array.length;
    //@ requires -1 > array.length;
    //@ requires search < location;
    //@ requires search <= location;
    //@ requires search == location;
    //@ requires search != location;
    //@ requires search >= location;
    //@ requires search > location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search == 5;
    //@ requires search != 5;
    //@ requires search >= 5;
    //@ requires search > 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search == 3;
    //@ requires search != 3;
    //@ requires search >= 3;
    //@ requires search > 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c == array.length;
    //@ requires c != array.length;
    //@ requires c >= array.length;
    //@ requires c > array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:304: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:145:) in method main
        linearSearch(arr, -2);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:145: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:304:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:8: verify: Precondition conjunct is false: location >= array.length
    //@ requires location >= array.length;
                          ^
3 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires location < array.length;
    //@ requires location <= array.length;
    //@ requires location != array.length;
    //@ requires location > array.length;
    //@ requires 5 < array.length;
    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 != array.length;
    //@ requires 5 >= array.length;
    //@ requires 5 > array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 == array.length;
    //@ requires 3 != array.length;
    //@ requires 3 >= array.length;
    //@ requires 3 > array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 == array.length;
    //@ requires 2 != array.length;
    //@ requires 2 >= array.length;
    //@ requires 2 > array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 == array.length;
    //@ requires 1 != array.length;
    //@ requires 1 >= array.length;
    //@ requires 1 > array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 == array.length;
    //@ requires -1 != array.length;
    //@ requires -1 >= array.length;
    //@ requires -1 > array.length;
    //@ requires search < location;
    //@ requires search <= location;
    //@ requires search == location;
    //@ requires search != location;
    //@ requires search >= location;
    //@ requires search > location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search == 5;
    //@ requires search != 5;
    //@ requires search >= 5;
    //@ requires search > 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search == 3;
    //@ requires search != 3;
    //@ requires search >= 3;
    //@ requires search > 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < array.length;
    //@ ensures \result <= array.length;
    //@ ensures \result == array.length;
    //@ ensures \result != array.length;
    //@ ensures \result >= array.length;
    //@ ensures \result > array.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < location;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result != location;
    //@ ensures \result >= location;
    //@ ensures \result > location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < search;
    //@ ensures \result <= search;
    //@ ensures \result == search;
    //@ ensures \result != search;
    //@ ensures \result >= search;
    //@ ensures \result > search;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures array != null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires location < array.length;
    //@ requires location <= array.length;
    //@ requires location == array.length;
    //@ requires location != array.length;
    //@ requires location >= array.length;
    //@ requires location > array.length;
    //@ requires 5 < array.length;
    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 != array.length;
    //@ requires 5 >= array.length;
    //@ requires 5 > array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 == array.length;
    //@ requires 3 != array.length;
    //@ requires 3 >= array.length;
    //@ requires 3 > array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 == array.length;
    //@ requires 2 != array.length;
    //@ requires 2 >= array.length;
    //@ requires 2 > array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 == array.length;
    //@ requires 1 != array.length;
    //@ requires 1 >= array.length;
    //@ requires 1 > array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 == array.length;
    //@ requires -1 != array.length;
    //@ requires -1 >= array.length;
    //@ requires -1 > array.length;
    //@ requires search < location;
    //@ requires search <= location;
    //@ requires search == location;
    //@ requires search != location;
    //@ requires search >= location;
    //@ requires search > location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search == 5;
    //@ requires search != 5;
    //@ requires search >= 5;
    //@ requires search > 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search == 3;
    //@ requires search != 3;
    //@ requires search >= 3;
    //@ requires search > 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c == array.length;
    //@ requires c != array.length;
    //@ requires c >= array.length;
    //@ requires c > array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:303: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:144:) in method main
        linearSearch(arr, -2);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:144: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:303:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:5: verify: Precondition conjunct is false: location < array.length
    //@ requires location < array.length;
                          ^
3 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires location <= array.length;
    //@ requires location != array.length;
    //@ requires location > array.length;
    //@ requires 5 < array.length;
    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 != array.length;
    //@ requires 5 >= array.length;
    //@ requires 5 > array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 == array.length;
    //@ requires 3 != array.length;
    //@ requires 3 >= array.length;
    //@ requires 3 > array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 == array.length;
    //@ requires 2 != array.length;
    //@ requires 2 >= array.length;
    //@ requires 2 > array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 == array.length;
    //@ requires 1 != array.length;
    //@ requires 1 >= array.length;
    //@ requires 1 > array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 == array.length;
    //@ requires -1 != array.length;
    //@ requires -1 >= array.length;
    //@ requires -1 > array.length;
    //@ requires search < location;
    //@ requires search <= location;
    //@ requires search == location;
    //@ requires search != location;
    //@ requires search >= location;
    //@ requires search > location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search == 5;
    //@ requires search != 5;
    //@ requires search >= 5;
    //@ requires search > 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search == 3;
    //@ requires search != 3;
    //@ requires search >= 3;
    //@ requires search > 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < array.length;
    //@ ensures \result <= array.length;
    //@ ensures \result == array.length;
    //@ ensures \result != array.length;
    //@ ensures \result >= array.length;
    //@ ensures \result > array.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < location;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result != location;
    //@ ensures \result >= location;
    //@ ensures \result > location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < search;
    //@ ensures \result <= search;
    //@ ensures \result == search;
    //@ ensures \result != search;
    //@ ensures \result >= search;
    //@ ensures \result > search;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures array != null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires location < array.length;
    //@ requires location <= array.length;
    //@ requires location == array.length;
    //@ requires location != array.length;
    //@ requires location >= array.length;
    //@ requires location > array.length;
    //@ requires 5 < array.length;
    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 != array.length;
    //@ requires 5 >= array.length;
    //@ requires 5 > array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 == array.length;
    //@ requires 3 != array.length;
    //@ requires 3 >= array.length;
    //@ requires 3 > array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 == array.length;
    //@ requires 2 != array.length;
    //@ requires 2 >= array.length;
    //@ requires 2 > array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 == array.length;
    //@ requires 1 != array.length;
    //@ requires 1 >= array.length;
    //@ requires 1 > array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 == array.length;
    //@ requires -1 != array.length;
    //@ requires -1 >= array.length;
    //@ requires -1 > array.length;
    //@ requires search < location;
    //@ requires search <= location;
    //@ requires search == location;
    //@ requires search != location;
    //@ requires search >= location;
    //@ requires search > location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search == 5;
    //@ requires search != 5;
    //@ requires search >= 5;
    //@ requires search > 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search == 3;
    //@ requires search != 3;
    //@ requires search >= 3;
    //@ requires search > 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c == array.length;
    //@ requires c != array.length;
    //@ requires c >= array.length;
    //@ requires c > array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:302: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:143:) in method main
        linearSearch(arr, -2);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:143: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:302:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:5: verify: Precondition conjunct is false: location <= array.length
    //@ requires location <= array.length;
                          ^
3 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires location != array.length;
    //@ requires location > array.length;
    //@ requires 5 < array.length;
    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 != array.length;
    //@ requires 5 >= array.length;
    //@ requires 5 > array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 == array.length;
    //@ requires 3 != array.length;
    //@ requires 3 >= array.length;
    //@ requires 3 > array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 == array.length;
    //@ requires 2 != array.length;
    //@ requires 2 >= array.length;
    //@ requires 2 > array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 == array.length;
    //@ requires 1 != array.length;
    //@ requires 1 >= array.length;
    //@ requires 1 > array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 == array.length;
    //@ requires -1 != array.length;
    //@ requires -1 >= array.length;
    //@ requires -1 > array.length;
    //@ requires search < location;
    //@ requires search <= location;
    //@ requires search == location;
    //@ requires search != location;
    //@ requires search >= location;
    //@ requires search > location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search == 5;
    //@ requires search != 5;
    //@ requires search >= 5;
    //@ requires search > 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search == 3;
    //@ requires search != 3;
    //@ requires search >= 3;
    //@ requires search > 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < array.length;
    //@ ensures \result <= array.length;
    //@ ensures \result == array.length;
    //@ ensures \result != array.length;
    //@ ensures \result >= array.length;
    //@ ensures \result > array.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < location;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result != location;
    //@ ensures \result >= location;
    //@ ensures \result > location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < search;
    //@ ensures \result <= search;
    //@ ensures \result == search;
    //@ ensures \result != search;
    //@ ensures \result >= search;
    //@ ensures \result > search;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures array != null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires location < array.length;
    //@ requires location <= array.length;
    //@ requires location == array.length;
    //@ requires location != array.length;
    //@ requires location >= array.length;
    //@ requires location > array.length;
    //@ requires 5 < array.length;
    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 != array.length;
    //@ requires 5 >= array.length;
    //@ requires 5 > array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 == array.length;
    //@ requires 3 != array.length;
    //@ requires 3 >= array.length;
    //@ requires 3 > array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 == array.length;
    //@ requires 2 != array.length;
    //@ requires 2 >= array.length;
    //@ requires 2 > array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 == array.length;
    //@ requires 1 != array.length;
    //@ requires 1 >= array.length;
    //@ requires 1 > array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 == array.length;
    //@ requires -1 != array.length;
    //@ requires -1 >= array.length;
    //@ requires -1 > array.length;
    //@ requires search < location;
    //@ requires search <= location;
    //@ requires search == location;
    //@ requires search != location;
    //@ requires search >= location;
    //@ requires search > location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search == 5;
    //@ requires search != 5;
    //@ requires search >= 5;
    //@ requires search > 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search == 3;
    //@ requires search != 3;
    //@ requires search >= 3;
    //@ requires search > 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c == array.length;
    //@ requires c != array.length;
    //@ requires c >= array.length;
    //@ requires c > array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:301: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:142:) in method main
        linearSearch(arr, -2);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:142: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:301:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:7: verify: Precondition conjunct is false: 5 < array.length
    //@ requires 5 < array.length;
                   ^
3 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires location != array.length;
    //@ requires location > array.length;
    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 != array.length;
    //@ requires 5 >= array.length;
    //@ requires 5 > array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 == array.length;
    //@ requires 3 != array.length;
    //@ requires 3 >= array.length;
    //@ requires 3 > array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 == array.length;
    //@ requires 2 != array.length;
    //@ requires 2 >= array.length;
    //@ requires 2 > array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 == array.length;
    //@ requires 1 != array.length;
    //@ requires 1 >= array.length;
    //@ requires 1 > array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 == array.length;
    //@ requires -1 != array.length;
    //@ requires -1 >= array.length;
    //@ requires -1 > array.length;
    //@ requires search < location;
    //@ requires search <= location;
    //@ requires search == location;
    //@ requires search != location;
    //@ requires search >= location;
    //@ requires search > location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search == 5;
    //@ requires search != 5;
    //@ requires search >= 5;
    //@ requires search > 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search == 3;
    //@ requires search != 3;
    //@ requires search >= 3;
    //@ requires search > 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < array.length;
    //@ ensures \result <= array.length;
    //@ ensures \result == array.length;
    //@ ensures \result != array.length;
    //@ ensures \result >= array.length;
    //@ ensures \result > array.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < location;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result != location;
    //@ ensures \result >= location;
    //@ ensures \result > location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < search;
    //@ ensures \result <= search;
    //@ ensures \result == search;
    //@ ensures \result != search;
    //@ ensures \result >= search;
    //@ ensures \result > search;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures array != null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires location < array.length;
    //@ requires location <= array.length;
    //@ requires location == array.length;
    //@ requires location != array.length;
    //@ requires location >= array.length;
    //@ requires location > array.length;
    //@ requires 5 < array.length;
    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 != array.length;
    //@ requires 5 >= array.length;
    //@ requires 5 > array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 == array.length;
    //@ requires 3 != array.length;
    //@ requires 3 >= array.length;
    //@ requires 3 > array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 == array.length;
    //@ requires 2 != array.length;
    //@ requires 2 >= array.length;
    //@ requires 2 > array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 == array.length;
    //@ requires 1 != array.length;
    //@ requires 1 >= array.length;
    //@ requires 1 > array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 == array.length;
    //@ requires -1 != array.length;
    //@ requires -1 >= array.length;
    //@ requires -1 > array.length;
    //@ requires search < location;
    //@ requires search <= location;
    //@ requires search == location;
    //@ requires search != location;
    //@ requires search >= location;
    //@ requires search > location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search == 5;
    //@ requires search != 5;
    //@ requires search >= 5;
    //@ requires search > 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search == 3;
    //@ requires search != 3;
    //@ requires search >= 3;
    //@ requires search > 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c == array.length;
    //@ requires c != array.length;
    //@ requires c >= array.length;
    //@ requires c > array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:300: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:141:) in method main
        linearSearch(arr, -2);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:141: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:300:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:9: verify: Precondition conjunct is false: 5 != array.length
    //@ requires 5 != array.length;
                   ^
3 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires location != array.length;
    //@ requires location > array.length;
    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 5 > array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 == array.length;
    //@ requires 3 != array.length;
    //@ requires 3 >= array.length;
    //@ requires 3 > array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 == array.length;
    //@ requires 2 != array.length;
    //@ requires 2 >= array.length;
    //@ requires 2 > array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 == array.length;
    //@ requires 1 != array.length;
    //@ requires 1 >= array.length;
    //@ requires 1 > array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 == array.length;
    //@ requires -1 != array.length;
    //@ requires -1 >= array.length;
    //@ requires -1 > array.length;
    //@ requires search < location;
    //@ requires search <= location;
    //@ requires search == location;
    //@ requires search != location;
    //@ requires search >= location;
    //@ requires search > location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search == 5;
    //@ requires search != 5;
    //@ requires search >= 5;
    //@ requires search > 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search == 3;
    //@ requires search != 3;
    //@ requires search >= 3;
    //@ requires search > 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < array.length;
    //@ ensures \result <= array.length;
    //@ ensures \result == array.length;
    //@ ensures \result != array.length;
    //@ ensures \result >= array.length;
    //@ ensures \result > array.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < location;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result != location;
    //@ ensures \result >= location;
    //@ ensures \result > location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < search;
    //@ ensures \result <= search;
    //@ ensures \result == search;
    //@ ensures \result != search;
    //@ ensures \result >= search;
    //@ ensures \result > search;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures array != null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires location < array.length;
    //@ requires location <= array.length;
    //@ requires location == array.length;
    //@ requires location != array.length;
    //@ requires location >= array.length;
    //@ requires location > array.length;
    //@ requires 5 < array.length;
    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 != array.length;
    //@ requires 5 >= array.length;
    //@ requires 5 > array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 == array.length;
    //@ requires 3 != array.length;
    //@ requires 3 >= array.length;
    //@ requires 3 > array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 == array.length;
    //@ requires 2 != array.length;
    //@ requires 2 >= array.length;
    //@ requires 2 > array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 == array.length;
    //@ requires 1 != array.length;
    //@ requires 1 >= array.length;
    //@ requires 1 > array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 == array.length;
    //@ requires -1 != array.length;
    //@ requires -1 >= array.length;
    //@ requires -1 > array.length;
    //@ requires search < location;
    //@ requires search <= location;
    //@ requires search == location;
    //@ requires search != location;
    //@ requires search >= location;
    //@ requires search > location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search == 5;
    //@ requires search != 5;
    //@ requires search >= 5;
    //@ requires search > 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search == 3;
    //@ requires search != 3;
    //@ requires search >= 3;
    //@ requires search > 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c == array.length;
    //@ requires c != array.length;
    //@ requires c >= array.length;
    //@ requires c > array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:299: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:140:) in method main
        linearSearch(arr, -2);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:140: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:299:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:5: verify: Precondition conjunct is false: location != array.length
    //@ requires location != array.length;
                          ^
3 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires location > array.length;
    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 5 > array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 == array.length;
    //@ requires 3 != array.length;
    //@ requires 3 >= array.length;
    //@ requires 3 > array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 == array.length;
    //@ requires 2 != array.length;
    //@ requires 2 >= array.length;
    //@ requires 2 > array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 == array.length;
    //@ requires 1 != array.length;
    //@ requires 1 >= array.length;
    //@ requires 1 > array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 == array.length;
    //@ requires -1 != array.length;
    //@ requires -1 >= array.length;
    //@ requires -1 > array.length;
    //@ requires search < location;
    //@ requires search <= location;
    //@ requires search == location;
    //@ requires search != location;
    //@ requires search >= location;
    //@ requires search > location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search == 5;
    //@ requires search != 5;
    //@ requires search >= 5;
    //@ requires search > 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search == 3;
    //@ requires search != 3;
    //@ requires search >= 3;
    //@ requires search > 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < array.length;
    //@ ensures \result <= array.length;
    //@ ensures \result == array.length;
    //@ ensures \result != array.length;
    //@ ensures \result >= array.length;
    //@ ensures \result > array.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < location;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result != location;
    //@ ensures \result >= location;
    //@ ensures \result > location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < search;
    //@ ensures \result <= search;
    //@ ensures \result == search;
    //@ ensures \result != search;
    //@ ensures \result >= search;
    //@ ensures \result > search;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures array != null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires location < array.length;
    //@ requires location <= array.length;
    //@ requires location == array.length;
    //@ requires location != array.length;
    //@ requires location >= array.length;
    //@ requires location > array.length;
    //@ requires 5 < array.length;
    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 != array.length;
    //@ requires 5 >= array.length;
    //@ requires 5 > array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 == array.length;
    //@ requires 3 != array.length;
    //@ requires 3 >= array.length;
    //@ requires 3 > array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 == array.length;
    //@ requires 2 != array.length;
    //@ requires 2 >= array.length;
    //@ requires 2 > array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 == array.length;
    //@ requires 1 != array.length;
    //@ requires 1 >= array.length;
    //@ requires 1 > array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 == array.length;
    //@ requires -1 != array.length;
    //@ requires -1 >= array.length;
    //@ requires -1 > array.length;
    //@ requires search < location;
    //@ requires search <= location;
    //@ requires search == location;
    //@ requires search != location;
    //@ requires search >= location;
    //@ requires search > location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search == 5;
    //@ requires search != 5;
    //@ requires search >= 5;
    //@ requires search > 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search == 3;
    //@ requires search != 3;
    //@ requires search >= 3;
    //@ requires search > 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c == array.length;
    //@ requires c != array.length;
    //@ requires c >= array.length;
    //@ requires c > array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:298: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:139:) in method main
        linearSearch(arr, -2);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:139: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:298:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:5: verify: Precondition conjunct is false: location > array.length
    //@ requires location > array.length;
                          ^
3 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 5 > array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 == array.length;
    //@ requires 3 != array.length;
    //@ requires 3 >= array.length;
    //@ requires 3 > array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 == array.length;
    //@ requires 2 != array.length;
    //@ requires 2 >= array.length;
    //@ requires 2 > array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 == array.length;
    //@ requires 1 != array.length;
    //@ requires 1 >= array.length;
    //@ requires 1 > array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 == array.length;
    //@ requires -1 != array.length;
    //@ requires -1 >= array.length;
    //@ requires -1 > array.length;
    //@ requires search < location;
    //@ requires search <= location;
    //@ requires search == location;
    //@ requires search != location;
    //@ requires search >= location;
    //@ requires search > location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search == 5;
    //@ requires search != 5;
    //@ requires search >= 5;
    //@ requires search > 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search == 3;
    //@ requires search != 3;
    //@ requires search >= 3;
    //@ requires search > 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < array.length;
    //@ ensures \result <= array.length;
    //@ ensures \result == array.length;
    //@ ensures \result != array.length;
    //@ ensures \result >= array.length;
    //@ ensures \result > array.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < location;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result != location;
    //@ ensures \result >= location;
    //@ ensures \result > location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < search;
    //@ ensures \result <= search;
    //@ ensures \result == search;
    //@ ensures \result != search;
    //@ ensures \result >= search;
    //@ ensures \result > search;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures array != null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires location < array.length;
    //@ requires location <= array.length;
    //@ requires location == array.length;
    //@ requires location != array.length;
    //@ requires location >= array.length;
    //@ requires location > array.length;
    //@ requires 5 < array.length;
    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 != array.length;
    //@ requires 5 >= array.length;
    //@ requires 5 > array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 == array.length;
    //@ requires 3 != array.length;
    //@ requires 3 >= array.length;
    //@ requires 3 > array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 == array.length;
    //@ requires 2 != array.length;
    //@ requires 2 >= array.length;
    //@ requires 2 > array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 == array.length;
    //@ requires 1 != array.length;
    //@ requires 1 >= array.length;
    //@ requires 1 > array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 == array.length;
    //@ requires -1 != array.length;
    //@ requires -1 >= array.length;
    //@ requires -1 > array.length;
    //@ requires search < location;
    //@ requires search <= location;
    //@ requires search == location;
    //@ requires search != location;
    //@ requires search >= location;
    //@ requires search > location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search == 5;
    //@ requires search != 5;
    //@ requires search >= 5;
    //@ requires search > 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search == 3;
    //@ requires search != 3;
    //@ requires search >= 3;
    //@ requires search > 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c == array.length;
    //@ requires c != array.length;
    //@ requires c >= array.length;
    //@ requires c > array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:297: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:138:) in method main
        linearSearch(arr, -2);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:138: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:297:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:8: verify: Precondition conjunct is false: 5 > array.length
    //@ requires 5 > array.length;
                   ^
3 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 == array.length;
    //@ requires 3 != array.length;
    //@ requires 3 >= array.length;
    //@ requires 3 > array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 == array.length;
    //@ requires 2 != array.length;
    //@ requires 2 >= array.length;
    //@ requires 2 > array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 == array.length;
    //@ requires 1 != array.length;
    //@ requires 1 >= array.length;
    //@ requires 1 > array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 == array.length;
    //@ requires -1 != array.length;
    //@ requires -1 >= array.length;
    //@ requires -1 > array.length;
    //@ requires search < location;
    //@ requires search <= location;
    //@ requires search == location;
    //@ requires search != location;
    //@ requires search >= location;
    //@ requires search > location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search == 5;
    //@ requires search != 5;
    //@ requires search >= 5;
    //@ requires search > 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search == 3;
    //@ requires search != 3;
    //@ requires search >= 3;
    //@ requires search > 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < array.length;
    //@ ensures \result <= array.length;
    //@ ensures \result == array.length;
    //@ ensures \result != array.length;
    //@ ensures \result >= array.length;
    //@ ensures \result > array.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < location;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result != location;
    //@ ensures \result >= location;
    //@ ensures \result > location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < search;
    //@ ensures \result <= search;
    //@ ensures \result == search;
    //@ ensures \result != search;
    //@ ensures \result >= search;
    //@ ensures \result > search;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures array != null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires location < array.length;
    //@ requires location <= array.length;
    //@ requires location == array.length;
    //@ requires location != array.length;
    //@ requires location >= array.length;
    //@ requires location > array.length;
    //@ requires 5 < array.length;
    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 != array.length;
    //@ requires 5 >= array.length;
    //@ requires 5 > array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 == array.length;
    //@ requires 3 != array.length;
    //@ requires 3 >= array.length;
    //@ requires 3 > array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 == array.length;
    //@ requires 2 != array.length;
    //@ requires 2 >= array.length;
    //@ requires 2 > array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 == array.length;
    //@ requires 1 != array.length;
    //@ requires 1 >= array.length;
    //@ requires 1 > array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 == array.length;
    //@ requires -1 != array.length;
    //@ requires -1 >= array.length;
    //@ requires -1 > array.length;
    //@ requires search < location;
    //@ requires search <= location;
    //@ requires search == location;
    //@ requires search != location;
    //@ requires search >= location;
    //@ requires search > location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search == 5;
    //@ requires search != 5;
    //@ requires search >= 5;
    //@ requires search > 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search == 3;
    //@ requires search != 3;
    //@ requires search >= 3;
    //@ requires search > 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c == array.length;
    //@ requires c != array.length;
    //@ requires c >= array.length;
    //@ requires c > array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:296: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:137:) in method main
        linearSearch(arr, -2);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:137: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:296:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:10: verify: Precondition conjunct is false: 3 == array.length
    //@ requires 3 == array.length;
                   ^
3 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 3 >= array.length;
    //@ requires 3 > array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 == array.length;
    //@ requires 2 != array.length;
    //@ requires 2 >= array.length;
    //@ requires 2 > array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 == array.length;
    //@ requires 1 != array.length;
    //@ requires 1 >= array.length;
    //@ requires 1 > array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 == array.length;
    //@ requires -1 != array.length;
    //@ requires -1 >= array.length;
    //@ requires -1 > array.length;
    //@ requires search < location;
    //@ requires search <= location;
    //@ requires search == location;
    //@ requires search != location;
    //@ requires search >= location;
    //@ requires search > location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search == 5;
    //@ requires search != 5;
    //@ requires search >= 5;
    //@ requires search > 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search == 3;
    //@ requires search != 3;
    //@ requires search >= 3;
    //@ requires search > 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < array.length;
    //@ ensures \result <= array.length;
    //@ ensures \result == array.length;
    //@ ensures \result != array.length;
    //@ ensures \result >= array.length;
    //@ ensures \result > array.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < location;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result != location;
    //@ ensures \result >= location;
    //@ ensures \result > location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < search;
    //@ ensures \result <= search;
    //@ ensures \result == search;
    //@ ensures \result != search;
    //@ ensures \result >= search;
    //@ ensures \result > search;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures array != null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires location < array.length;
    //@ requires location <= array.length;
    //@ requires location == array.length;
    //@ requires location != array.length;
    //@ requires location >= array.length;
    //@ requires location > array.length;
    //@ requires 5 < array.length;
    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 != array.length;
    //@ requires 5 >= array.length;
    //@ requires 5 > array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 == array.length;
    //@ requires 3 != array.length;
    //@ requires 3 >= array.length;
    //@ requires 3 > array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 == array.length;
    //@ requires 2 != array.length;
    //@ requires 2 >= array.length;
    //@ requires 2 > array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 == array.length;
    //@ requires 1 != array.length;
    //@ requires 1 >= array.length;
    //@ requires 1 > array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 == array.length;
    //@ requires -1 != array.length;
    //@ requires -1 >= array.length;
    //@ requires -1 > array.length;
    //@ requires search < location;
    //@ requires search <= location;
    //@ requires search == location;
    //@ requires search != location;
    //@ requires search >= location;
    //@ requires search > location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search == 5;
    //@ requires search != 5;
    //@ requires search >= 5;
    //@ requires search > 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search == 3;
    //@ requires search != 3;
    //@ requires search >= 3;
    //@ requires search > 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c == array.length;
    //@ requires c != array.length;
    //@ requires c >= array.length;
    //@ requires c > array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:295: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:136:) in method main
        linearSearch(arr, -2);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:136: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:295:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:11: verify: Precondition conjunct is false: 3 >= array.length
    //@ requires 3 >= array.length;
                   ^
3 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 3 > array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 == array.length;
    //@ requires 2 != array.length;
    //@ requires 2 >= array.length;
    //@ requires 2 > array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 == array.length;
    //@ requires 1 != array.length;
    //@ requires 1 >= array.length;
    //@ requires 1 > array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 == array.length;
    //@ requires -1 != array.length;
    //@ requires -1 >= array.length;
    //@ requires -1 > array.length;
    //@ requires search < location;
    //@ requires search <= location;
    //@ requires search == location;
    //@ requires search != location;
    //@ requires search >= location;
    //@ requires search > location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search == 5;
    //@ requires search != 5;
    //@ requires search >= 5;
    //@ requires search > 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search == 3;
    //@ requires search != 3;
    //@ requires search >= 3;
    //@ requires search > 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < array.length;
    //@ ensures \result <= array.length;
    //@ ensures \result == array.length;
    //@ ensures \result != array.length;
    //@ ensures \result >= array.length;
    //@ ensures \result > array.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < location;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result != location;
    //@ ensures \result >= location;
    //@ ensures \result > location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < search;
    //@ ensures \result <= search;
    //@ ensures \result == search;
    //@ ensures \result != search;
    //@ ensures \result >= search;
    //@ ensures \result > search;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures array != null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires location < array.length;
    //@ requires location <= array.length;
    //@ requires location == array.length;
    //@ requires location != array.length;
    //@ requires location >= array.length;
    //@ requires location > array.length;
    //@ requires 5 < array.length;
    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 != array.length;
    //@ requires 5 >= array.length;
    //@ requires 5 > array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 == array.length;
    //@ requires 3 != array.length;
    //@ requires 3 >= array.length;
    //@ requires 3 > array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 == array.length;
    //@ requires 2 != array.length;
    //@ requires 2 >= array.length;
    //@ requires 2 > array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 == array.length;
    //@ requires 1 != array.length;
    //@ requires 1 >= array.length;
    //@ requires 1 > array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 == array.length;
    //@ requires -1 != array.length;
    //@ requires -1 >= array.length;
    //@ requires -1 > array.length;
    //@ requires search < location;
    //@ requires search <= location;
    //@ requires search == location;
    //@ requires search != location;
    //@ requires search >= location;
    //@ requires search > location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search == 5;
    //@ requires search != 5;
    //@ requires search >= 5;
    //@ requires search > 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search == 3;
    //@ requires search != 3;
    //@ requires search >= 3;
    //@ requires search > 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c == array.length;
    //@ requires c != array.length;
    //@ requires c >= array.length;
    //@ requires c > array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:294: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:135:) in method main
        linearSearch(arr, -2);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:135: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:294:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:11: verify: Precondition conjunct is false: 3 > array.length
    //@ requires 3 > array.length;
                   ^
3 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 == array.length;
    //@ requires 2 != array.length;
    //@ requires 2 >= array.length;
    //@ requires 2 > array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 == array.length;
    //@ requires 1 != array.length;
    //@ requires 1 >= array.length;
    //@ requires 1 > array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 == array.length;
    //@ requires -1 != array.length;
    //@ requires -1 >= array.length;
    //@ requires -1 > array.length;
    //@ requires search < location;
    //@ requires search <= location;
    //@ requires search == location;
    //@ requires search != location;
    //@ requires search >= location;
    //@ requires search > location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search == 5;
    //@ requires search != 5;
    //@ requires search >= 5;
    //@ requires search > 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search == 3;
    //@ requires search != 3;
    //@ requires search >= 3;
    //@ requires search > 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < array.length;
    //@ ensures \result <= array.length;
    //@ ensures \result == array.length;
    //@ ensures \result != array.length;
    //@ ensures \result >= array.length;
    //@ ensures \result > array.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < location;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result != location;
    //@ ensures \result >= location;
    //@ ensures \result > location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < search;
    //@ ensures \result <= search;
    //@ ensures \result == search;
    //@ ensures \result != search;
    //@ ensures \result >= search;
    //@ ensures \result > search;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures array != null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires location < array.length;
    //@ requires location <= array.length;
    //@ requires location == array.length;
    //@ requires location != array.length;
    //@ requires location >= array.length;
    //@ requires location > array.length;
    //@ requires 5 < array.length;
    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 != array.length;
    //@ requires 5 >= array.length;
    //@ requires 5 > array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 == array.length;
    //@ requires 3 != array.length;
    //@ requires 3 >= array.length;
    //@ requires 3 > array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 == array.length;
    //@ requires 2 != array.length;
    //@ requires 2 >= array.length;
    //@ requires 2 > array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 == array.length;
    //@ requires 1 != array.length;
    //@ requires 1 >= array.length;
    //@ requires 1 > array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 == array.length;
    //@ requires -1 != array.length;
    //@ requires -1 >= array.length;
    //@ requires -1 > array.length;
    //@ requires search < location;
    //@ requires search <= location;
    //@ requires search == location;
    //@ requires search != location;
    //@ requires search >= location;
    //@ requires search > location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search == 5;
    //@ requires search != 5;
    //@ requires search >= 5;
    //@ requires search > 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search == 3;
    //@ requires search != 3;
    //@ requires search >= 3;
    //@ requires search > 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c == array.length;
    //@ requires c != array.length;
    //@ requires c >= array.length;
    //@ requires c > array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:293: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:134:) in method main
        linearSearch(arr, -2);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:134: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:293:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:13: verify: Precondition conjunct is false: 2 == array.length
    //@ requires 2 == array.length;
                   ^
3 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 2 >= array.length;
    //@ requires 2 > array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 == array.length;
    //@ requires 1 != array.length;
    //@ requires 1 >= array.length;
    //@ requires 1 > array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 == array.length;
    //@ requires -1 != array.length;
    //@ requires -1 >= array.length;
    //@ requires -1 > array.length;
    //@ requires search < location;
    //@ requires search <= location;
    //@ requires search == location;
    //@ requires search != location;
    //@ requires search >= location;
    //@ requires search > location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search == 5;
    //@ requires search != 5;
    //@ requires search >= 5;
    //@ requires search > 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search == 3;
    //@ requires search != 3;
    //@ requires search >= 3;
    //@ requires search > 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < array.length;
    //@ ensures \result <= array.length;
    //@ ensures \result == array.length;
    //@ ensures \result != array.length;
    //@ ensures \result >= array.length;
    //@ ensures \result > array.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < location;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result != location;
    //@ ensures \result >= location;
    //@ ensures \result > location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < search;
    //@ ensures \result <= search;
    //@ ensures \result == search;
    //@ ensures \result != search;
    //@ ensures \result >= search;
    //@ ensures \result > search;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures array != null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires location < array.length;
    //@ requires location <= array.length;
    //@ requires location == array.length;
    //@ requires location != array.length;
    //@ requires location >= array.length;
    //@ requires location > array.length;
    //@ requires 5 < array.length;
    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 != array.length;
    //@ requires 5 >= array.length;
    //@ requires 5 > array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 == array.length;
    //@ requires 3 != array.length;
    //@ requires 3 >= array.length;
    //@ requires 3 > array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 == array.length;
    //@ requires 2 != array.length;
    //@ requires 2 >= array.length;
    //@ requires 2 > array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 == array.length;
    //@ requires 1 != array.length;
    //@ requires 1 >= array.length;
    //@ requires 1 > array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 == array.length;
    //@ requires -1 != array.length;
    //@ requires -1 >= array.length;
    //@ requires -1 > array.length;
    //@ requires search < location;
    //@ requires search <= location;
    //@ requires search == location;
    //@ requires search != location;
    //@ requires search >= location;
    //@ requires search > location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search == 5;
    //@ requires search != 5;
    //@ requires search >= 5;
    //@ requires search > 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search == 3;
    //@ requires search != 3;
    //@ requires search >= 3;
    //@ requires search > 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c == array.length;
    //@ requires c != array.length;
    //@ requires c >= array.length;
    //@ requires c > array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:292: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:133:) in method main
        linearSearch(arr, -2);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:133: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:292:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:14: verify: Precondition conjunct is false: 2 >= array.length
    //@ requires 2 >= array.length;
                   ^
3 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 2 > array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 == array.length;
    //@ requires 1 != array.length;
    //@ requires 1 >= array.length;
    //@ requires 1 > array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 == array.length;
    //@ requires -1 != array.length;
    //@ requires -1 >= array.length;
    //@ requires -1 > array.length;
    //@ requires search < location;
    //@ requires search <= location;
    //@ requires search == location;
    //@ requires search != location;
    //@ requires search >= location;
    //@ requires search > location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search == 5;
    //@ requires search != 5;
    //@ requires search >= 5;
    //@ requires search > 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search == 3;
    //@ requires search != 3;
    //@ requires search >= 3;
    //@ requires search > 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < array.length;
    //@ ensures \result <= array.length;
    //@ ensures \result == array.length;
    //@ ensures \result != array.length;
    //@ ensures \result >= array.length;
    //@ ensures \result > array.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < location;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result != location;
    //@ ensures \result >= location;
    //@ ensures \result > location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < search;
    //@ ensures \result <= search;
    //@ ensures \result == search;
    //@ ensures \result != search;
    //@ ensures \result >= search;
    //@ ensures \result > search;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures array != null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires location < array.length;
    //@ requires location <= array.length;
    //@ requires location == array.length;
    //@ requires location != array.length;
    //@ requires location >= array.length;
    //@ requires location > array.length;
    //@ requires 5 < array.length;
    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 != array.length;
    //@ requires 5 >= array.length;
    //@ requires 5 > array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 == array.length;
    //@ requires 3 != array.length;
    //@ requires 3 >= array.length;
    //@ requires 3 > array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 == array.length;
    //@ requires 2 != array.length;
    //@ requires 2 >= array.length;
    //@ requires 2 > array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 == array.length;
    //@ requires 1 != array.length;
    //@ requires 1 >= array.length;
    //@ requires 1 > array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 == array.length;
    //@ requires -1 != array.length;
    //@ requires -1 >= array.length;
    //@ requires -1 > array.length;
    //@ requires search < location;
    //@ requires search <= location;
    //@ requires search == location;
    //@ requires search != location;
    //@ requires search >= location;
    //@ requires search > location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search == 5;
    //@ requires search != 5;
    //@ requires search >= 5;
    //@ requires search > 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search == 3;
    //@ requires search != 3;
    //@ requires search >= 3;
    //@ requires search > 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c == array.length;
    //@ requires c != array.length;
    //@ requires c >= array.length;
    //@ requires c > array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:291: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:132:) in method main
        linearSearch(arr, -2);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:132: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:291:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:14: verify: Precondition conjunct is false: 2 > array.length
    //@ requires 2 > array.length;
                   ^
3 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 == array.length;
    //@ requires 1 != array.length;
    //@ requires 1 >= array.length;
    //@ requires 1 > array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 == array.length;
    //@ requires -1 != array.length;
    //@ requires -1 >= array.length;
    //@ requires -1 > array.length;
    //@ requires search < location;
    //@ requires search <= location;
    //@ requires search == location;
    //@ requires search != location;
    //@ requires search >= location;
    //@ requires search > location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search == 5;
    //@ requires search != 5;
    //@ requires search >= 5;
    //@ requires search > 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search == 3;
    //@ requires search != 3;
    //@ requires search >= 3;
    //@ requires search > 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < array.length;
    //@ ensures \result <= array.length;
    //@ ensures \result == array.length;
    //@ ensures \result != array.length;
    //@ ensures \result >= array.length;
    //@ ensures \result > array.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < location;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result != location;
    //@ ensures \result >= location;
    //@ ensures \result > location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < search;
    //@ ensures \result <= search;
    //@ ensures \result == search;
    //@ ensures \result != search;
    //@ ensures \result >= search;
    //@ ensures \result > search;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures array != null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires location < array.length;
    //@ requires location <= array.length;
    //@ requires location == array.length;
    //@ requires location != array.length;
    //@ requires location >= array.length;
    //@ requires location > array.length;
    //@ requires 5 < array.length;
    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 != array.length;
    //@ requires 5 >= array.length;
    //@ requires 5 > array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 == array.length;
    //@ requires 3 != array.length;
    //@ requires 3 >= array.length;
    //@ requires 3 > array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 == array.length;
    //@ requires 2 != array.length;
    //@ requires 2 >= array.length;
    //@ requires 2 > array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 == array.length;
    //@ requires 1 != array.length;
    //@ requires 1 >= array.length;
    //@ requires 1 > array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 == array.length;
    //@ requires -1 != array.length;
    //@ requires -1 >= array.length;
    //@ requires -1 > array.length;
    //@ requires search < location;
    //@ requires search <= location;
    //@ requires search == location;
    //@ requires search != location;
    //@ requires search >= location;
    //@ requires search > location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search == 5;
    //@ requires search != 5;
    //@ requires search >= 5;
    //@ requires search > 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search == 3;
    //@ requires search != 3;
    //@ requires search >= 3;
    //@ requires search > 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c == array.length;
    //@ requires c != array.length;
    //@ requires c >= array.length;
    //@ requires c > array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:290: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:131:) in method main
        linearSearch(arr, -2);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:131: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:290:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:16: verify: Precondition conjunct is false: 1 == array.length
    //@ requires 1 == array.length;
                   ^
3 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires 1 >= array.length;
    //@ requires 1 > array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 == array.length;
    //@ requires -1 != array.length;
    //@ requires -1 >= array.length;
    //@ requires -1 > array.length;
    //@ requires search < location;
    //@ requires search <= location;
    //@ requires search == location;
    //@ requires search != location;
    //@ requires search >= location;
    //@ requires search > location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search == 5;
    //@ requires search != 5;
    //@ requires search >= 5;
    //@ requires search > 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search == 3;
    //@ requires search != 3;
    //@ requires search >= 3;
    //@ requires search > 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < array.length;
    //@ ensures \result <= array.length;
    //@ ensures \result == array.length;
    //@ ensures \result != array.length;
    //@ ensures \result >= array.length;
    //@ ensures \result > array.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < location;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result != location;
    //@ ensures \result >= location;
    //@ ensures \result > location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < search;
    //@ ensures \result <= search;
    //@ ensures \result == search;
    //@ ensures \result != search;
    //@ ensures \result >= search;
    //@ ensures \result > search;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures array != null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires location < array.length;
    //@ requires location <= array.length;
    //@ requires location == array.length;
    //@ requires location != array.length;
    //@ requires location >= array.length;
    //@ requires location > array.length;
    //@ requires 5 < array.length;
    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 != array.length;
    //@ requires 5 >= array.length;
    //@ requires 5 > array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 == array.length;
    //@ requires 3 != array.length;
    //@ requires 3 >= array.length;
    //@ requires 3 > array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 == array.length;
    //@ requires 2 != array.length;
    //@ requires 2 >= array.length;
    //@ requires 2 > array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 == array.length;
    //@ requires 1 != array.length;
    //@ requires 1 >= array.length;
    //@ requires 1 > array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 == array.length;
    //@ requires -1 != array.length;
    //@ requires -1 >= array.length;
    //@ requires -1 > array.length;
    //@ requires search < location;
    //@ requires search <= location;
    //@ requires search == location;
    //@ requires search != location;
    //@ requires search >= location;
    //@ requires search > location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search == 5;
    //@ requires search != 5;
    //@ requires search >= 5;
    //@ requires search > 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search == 3;
    //@ requires search != 3;
    //@ requires search >= 3;
    //@ requires search > 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c == array.length;
    //@ requires c != array.length;
    //@ requires c >= array.length;
    //@ requires c > array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:289: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:130:) in method main
        linearSearch(arr, -2);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:130: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:289:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:17: verify: Precondition conjunct is false: 1 >= array.length
    //@ requires 1 >= array.length;
                   ^
3 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires 1 > array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 == array.length;
    //@ requires -1 != array.length;
    //@ requires -1 >= array.length;
    //@ requires -1 > array.length;
    //@ requires search < location;
    //@ requires search <= location;
    //@ requires search == location;
    //@ requires search != location;
    //@ requires search >= location;
    //@ requires search > location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search == 5;
    //@ requires search != 5;
    //@ requires search >= 5;
    //@ requires search > 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search == 3;
    //@ requires search != 3;
    //@ requires search >= 3;
    //@ requires search > 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < array.length;
    //@ ensures \result <= array.length;
    //@ ensures \result == array.length;
    //@ ensures \result != array.length;
    //@ ensures \result >= array.length;
    //@ ensures \result > array.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < location;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result != location;
    //@ ensures \result >= location;
    //@ ensures \result > location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < search;
    //@ ensures \result <= search;
    //@ ensures \result == search;
    //@ ensures \result != search;
    //@ ensures \result >= search;
    //@ ensures \result > search;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures array != null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires location < array.length;
    //@ requires location <= array.length;
    //@ requires location == array.length;
    //@ requires location != array.length;
    //@ requires location >= array.length;
    //@ requires location > array.length;
    //@ requires 5 < array.length;
    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 != array.length;
    //@ requires 5 >= array.length;
    //@ requires 5 > array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 == array.length;
    //@ requires 3 != array.length;
    //@ requires 3 >= array.length;
    //@ requires 3 > array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 == array.length;
    //@ requires 2 != array.length;
    //@ requires 2 >= array.length;
    //@ requires 2 > array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 == array.length;
    //@ requires 1 != array.length;
    //@ requires 1 >= array.length;
    //@ requires 1 > array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 == array.length;
    //@ requires -1 != array.length;
    //@ requires -1 >= array.length;
    //@ requires -1 > array.length;
    //@ requires search < location;
    //@ requires search <= location;
    //@ requires search == location;
    //@ requires search != location;
    //@ requires search >= location;
    //@ requires search > location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search == 5;
    //@ requires search != 5;
    //@ requires search >= 5;
    //@ requires search > 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search == 3;
    //@ requires search != 3;
    //@ requires search >= 3;
    //@ requires search > 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c == array.length;
    //@ requires c != array.length;
    //@ requires c >= array.length;
    //@ requires c > array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:288: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:129:) in method main
        linearSearch(arr, -2);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:129: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:288:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:17: verify: Precondition conjunct is false: 1 > array.length
    //@ requires 1 > array.length;
                   ^
3 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 == array.length;
    //@ requires -1 != array.length;
    //@ requires -1 >= array.length;
    //@ requires -1 > array.length;
    //@ requires search < location;
    //@ requires search <= location;
    //@ requires search == location;
    //@ requires search != location;
    //@ requires search >= location;
    //@ requires search > location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search == 5;
    //@ requires search != 5;
    //@ requires search >= 5;
    //@ requires search > 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search == 3;
    //@ requires search != 3;
    //@ requires search >= 3;
    //@ requires search > 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < array.length;
    //@ ensures \result <= array.length;
    //@ ensures \result == array.length;
    //@ ensures \result != array.length;
    //@ ensures \result >= array.length;
    //@ ensures \result > array.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < location;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result != location;
    //@ ensures \result >= location;
    //@ ensures \result > location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < search;
    //@ ensures \result <= search;
    //@ ensures \result == search;
    //@ ensures \result != search;
    //@ ensures \result >= search;
    //@ ensures \result > search;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures array != null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires location < array.length;
    //@ requires location <= array.length;
    //@ requires location == array.length;
    //@ requires location != array.length;
    //@ requires location >= array.length;
    //@ requires location > array.length;
    //@ requires 5 < array.length;
    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 != array.length;
    //@ requires 5 >= array.length;
    //@ requires 5 > array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 == array.length;
    //@ requires 3 != array.length;
    //@ requires 3 >= array.length;
    //@ requires 3 > array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 == array.length;
    //@ requires 2 != array.length;
    //@ requires 2 >= array.length;
    //@ requires 2 > array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 == array.length;
    //@ requires 1 != array.length;
    //@ requires 1 >= array.length;
    //@ requires 1 > array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 == array.length;
    //@ requires -1 != array.length;
    //@ requires -1 >= array.length;
    //@ requires -1 > array.length;
    //@ requires search < location;
    //@ requires search <= location;
    //@ requires search == location;
    //@ requires search != location;
    //@ requires search >= location;
    //@ requires search > location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search == 5;
    //@ requires search != 5;
    //@ requires search >= 5;
    //@ requires search > 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search == 3;
    //@ requires search != 3;
    //@ requires search >= 3;
    //@ requires search > 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c == array.length;
    //@ requires c != array.length;
    //@ requires c >= array.length;
    //@ requires c > array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:287: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:128:) in method main
        linearSearch(arr, -2);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:128: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:287:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:19: verify: Precondition conjunct is false: -1 == array.length
    //@ requires -1 == array.length;
                    ^
3 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires -1 >= array.length;
    //@ requires -1 > array.length;
    //@ requires search < location;
    //@ requires search <= location;
    //@ requires search == location;
    //@ requires search != location;
    //@ requires search >= location;
    //@ requires search > location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search == 5;
    //@ requires search != 5;
    //@ requires search >= 5;
    //@ requires search > 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search == 3;
    //@ requires search != 3;
    //@ requires search >= 3;
    //@ requires search > 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < array.length;
    //@ ensures \result <= array.length;
    //@ ensures \result == array.length;
    //@ ensures \result != array.length;
    //@ ensures \result >= array.length;
    //@ ensures \result > array.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < location;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result != location;
    //@ ensures \result >= location;
    //@ ensures \result > location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < search;
    //@ ensures \result <= search;
    //@ ensures \result == search;
    //@ ensures \result != search;
    //@ ensures \result >= search;
    //@ ensures \result > search;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures array != null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires location < array.length;
    //@ requires location <= array.length;
    //@ requires location == array.length;
    //@ requires location != array.length;
    //@ requires location >= array.length;
    //@ requires location > array.length;
    //@ requires 5 < array.length;
    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 != array.length;
    //@ requires 5 >= array.length;
    //@ requires 5 > array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 == array.length;
    //@ requires 3 != array.length;
    //@ requires 3 >= array.length;
    //@ requires 3 > array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 == array.length;
    //@ requires 2 != array.length;
    //@ requires 2 >= array.length;
    //@ requires 2 > array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 == array.length;
    //@ requires 1 != array.length;
    //@ requires 1 >= array.length;
    //@ requires 1 > array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 == array.length;
    //@ requires -1 != array.length;
    //@ requires -1 >= array.length;
    //@ requires -1 > array.length;
    //@ requires search < location;
    //@ requires search <= location;
    //@ requires search == location;
    //@ requires search != location;
    //@ requires search >= location;
    //@ requires search > location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search == 5;
    //@ requires search != 5;
    //@ requires search >= 5;
    //@ requires search > 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search == 3;
    //@ requires search != 3;
    //@ requires search >= 3;
    //@ requires search > 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c == array.length;
    //@ requires c != array.length;
    //@ requires c >= array.length;
    //@ requires c > array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:286: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:127:) in method main
        linearSearch(arr, -2);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:127: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:286:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:20: verify: Precondition conjunct is false: -1 >= array.length
    //@ requires -1 >= array.length;
                    ^
3 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires -1 > array.length;
    //@ requires search < location;
    //@ requires search <= location;
    //@ requires search == location;
    //@ requires search != location;
    //@ requires search >= location;
    //@ requires search > location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search == 5;
    //@ requires search != 5;
    //@ requires search >= 5;
    //@ requires search > 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search == 3;
    //@ requires search != 3;
    //@ requires search >= 3;
    //@ requires search > 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < array.length;
    //@ ensures \result <= array.length;
    //@ ensures \result == array.length;
    //@ ensures \result != array.length;
    //@ ensures \result >= array.length;
    //@ ensures \result > array.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < location;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result != location;
    //@ ensures \result >= location;
    //@ ensures \result > location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < search;
    //@ ensures \result <= search;
    //@ ensures \result == search;
    //@ ensures \result != search;
    //@ ensures \result >= search;
    //@ ensures \result > search;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures array != null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires location < array.length;
    //@ requires location <= array.length;
    //@ requires location == array.length;
    //@ requires location != array.length;
    //@ requires location >= array.length;
    //@ requires location > array.length;
    //@ requires 5 < array.length;
    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 != array.length;
    //@ requires 5 >= array.length;
    //@ requires 5 > array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 == array.length;
    //@ requires 3 != array.length;
    //@ requires 3 >= array.length;
    //@ requires 3 > array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 == array.length;
    //@ requires 2 != array.length;
    //@ requires 2 >= array.length;
    //@ requires 2 > array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 == array.length;
    //@ requires 1 != array.length;
    //@ requires 1 >= array.length;
    //@ requires 1 > array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 == array.length;
    //@ requires -1 != array.length;
    //@ requires -1 >= array.length;
    //@ requires -1 > array.length;
    //@ requires search < location;
    //@ requires search <= location;
    //@ requires search == location;
    //@ requires search != location;
    //@ requires search >= location;
    //@ requires search > location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search == 5;
    //@ requires search != 5;
    //@ requires search >= 5;
    //@ requires search > 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search == 3;
    //@ requires search != 3;
    //@ requires search >= 3;
    //@ requires search > 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c == array.length;
    //@ requires c != array.length;
    //@ requires c >= array.length;
    //@ requires c > array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:285: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:126:) in method main
        linearSearch(arr, -2);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:126: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:285:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:20: verify: Precondition conjunct is false: -1 > array.length
    //@ requires -1 > array.length;
                    ^
3 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < location;
    //@ requires search <= location;
    //@ requires search == location;
    //@ requires search != location;
    //@ requires search >= location;
    //@ requires search > location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search == 5;
    //@ requires search != 5;
    //@ requires search >= 5;
    //@ requires search > 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search == 3;
    //@ requires search != 3;
    //@ requires search >= 3;
    //@ requires search > 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < array.length;
    //@ ensures \result <= array.length;
    //@ ensures \result == array.length;
    //@ ensures \result != array.length;
    //@ ensures \result >= array.length;
    //@ ensures \result > array.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < location;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result != location;
    //@ ensures \result >= location;
    //@ ensures \result > location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < search;
    //@ ensures \result <= search;
    //@ ensures \result == search;
    //@ ensures \result != search;
    //@ ensures \result >= search;
    //@ ensures \result > search;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures array != null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires location < array.length;
    //@ requires location <= array.length;
    //@ requires location == array.length;
    //@ requires location != array.length;
    //@ requires location >= array.length;
    //@ requires location > array.length;
    //@ requires 5 < array.length;
    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 != array.length;
    //@ requires 5 >= array.length;
    //@ requires 5 > array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 == array.length;
    //@ requires 3 != array.length;
    //@ requires 3 >= array.length;
    //@ requires 3 > array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 == array.length;
    //@ requires 2 != array.length;
    //@ requires 2 >= array.length;
    //@ requires 2 > array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 == array.length;
    //@ requires 1 != array.length;
    //@ requires 1 >= array.length;
    //@ requires 1 > array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 == array.length;
    //@ requires -1 != array.length;
    //@ requires -1 >= array.length;
    //@ requires -1 > array.length;
    //@ requires search < location;
    //@ requires search <= location;
    //@ requires search == location;
    //@ requires search != location;
    //@ requires search >= location;
    //@ requires search > location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search == 5;
    //@ requires search != 5;
    //@ requires search >= 5;
    //@ requires search > 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search == 3;
    //@ requires search != 3;
    //@ requires search >= 3;
    //@ requires search > 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c == array.length;
    //@ requires c != array.length;
    //@ requires c >= array.length;
    //@ requires c > array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:284: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:125:) in method main
        linearSearch(arr, -2);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:125: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:284:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:20: verify: Precondition conjunct is false: search < location
    //@ requires search < location;
                        ^
3 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search <= location;
    //@ requires search == location;
    //@ requires search != location;
    //@ requires search >= location;
    //@ requires search > location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search == 5;
    //@ requires search != 5;
    //@ requires search >= 5;
    //@ requires search > 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search == 3;
    //@ requires search != 3;
    //@ requires search >= 3;
    //@ requires search > 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < array.length;
    //@ ensures \result <= array.length;
    //@ ensures \result == array.length;
    //@ ensures \result != array.length;
    //@ ensures \result >= array.length;
    //@ ensures \result > array.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < location;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result != location;
    //@ ensures \result >= location;
    //@ ensures \result > location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < search;
    //@ ensures \result <= search;
    //@ ensures \result == search;
    //@ ensures \result != search;
    //@ ensures \result >= search;
    //@ ensures \result > search;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures array != null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires location < array.length;
    //@ requires location <= array.length;
    //@ requires location == array.length;
    //@ requires location != array.length;
    //@ requires location >= array.length;
    //@ requires location > array.length;
    //@ requires 5 < array.length;
    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 != array.length;
    //@ requires 5 >= array.length;
    //@ requires 5 > array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 == array.length;
    //@ requires 3 != array.length;
    //@ requires 3 >= array.length;
    //@ requires 3 > array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 == array.length;
    //@ requires 2 != array.length;
    //@ requires 2 >= array.length;
    //@ requires 2 > array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 == array.length;
    //@ requires 1 != array.length;
    //@ requires 1 >= array.length;
    //@ requires 1 > array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 == array.length;
    //@ requires -1 != array.length;
    //@ requires -1 >= array.length;
    //@ requires -1 > array.length;
    //@ requires search < location;
    //@ requires search <= location;
    //@ requires search == location;
    //@ requires search != location;
    //@ requires search >= location;
    //@ requires search > location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search == 5;
    //@ requires search != 5;
    //@ requires search >= 5;
    //@ requires search > 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search == 3;
    //@ requires search != 3;
    //@ requires search >= 3;
    //@ requires search > 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c == array.length;
    //@ requires c != array.length;
    //@ requires c >= array.length;
    //@ requires c > array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:283: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:124:) in method main
        linearSearch(arr, -2);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:124: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:283:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:22: verify: Precondition conjunct is false: search != location
    //@ requires search != location;
                        ^
3 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search <= location;
    //@ requires search == location;
    //@ requires search >= location;
    //@ requires search > location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search == 5;
    //@ requires search != 5;
    //@ requires search >= 5;
    //@ requires search > 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search == 3;
    //@ requires search != 3;
    //@ requires search >= 3;
    //@ requires search > 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < array.length;
    //@ ensures \result <= array.length;
    //@ ensures \result == array.length;
    //@ ensures \result != array.length;
    //@ ensures \result >= array.length;
    //@ ensures \result > array.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < location;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result != location;
    //@ ensures \result >= location;
    //@ ensures \result > location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < search;
    //@ ensures \result <= search;
    //@ ensures \result == search;
    //@ ensures \result != search;
    //@ ensures \result >= search;
    //@ ensures \result > search;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures array != null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires location < array.length;
    //@ requires location <= array.length;
    //@ requires location == array.length;
    //@ requires location != array.length;
    //@ requires location >= array.length;
    //@ requires location > array.length;
    //@ requires 5 < array.length;
    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 != array.length;
    //@ requires 5 >= array.length;
    //@ requires 5 > array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 == array.length;
    //@ requires 3 != array.length;
    //@ requires 3 >= array.length;
    //@ requires 3 > array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 == array.length;
    //@ requires 2 != array.length;
    //@ requires 2 >= array.length;
    //@ requires 2 > array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 == array.length;
    //@ requires 1 != array.length;
    //@ requires 1 >= array.length;
    //@ requires 1 > array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 == array.length;
    //@ requires -1 != array.length;
    //@ requires -1 >= array.length;
    //@ requires -1 > array.length;
    //@ requires search < location;
    //@ requires search <= location;
    //@ requires search == location;
    //@ requires search != location;
    //@ requires search >= location;
    //@ requires search > location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search == 5;
    //@ requires search != 5;
    //@ requires search >= 5;
    //@ requires search > 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search == 3;
    //@ requires search != 3;
    //@ requires search >= 3;
    //@ requires search > 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c == array.length;
    //@ requires c != array.length;
    //@ requires c >= array.length;
    //@ requires c > array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:282: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:123:) in method main
        linearSearch(arr, -2);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:123: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:282:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:20: verify: Precondition conjunct is false: search <= location
    //@ requires search <= location;
                        ^
3 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search == location;
    //@ requires search >= location;
    //@ requires search > location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search == 5;
    //@ requires search != 5;
    //@ requires search >= 5;
    //@ requires search > 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search == 3;
    //@ requires search != 3;
    //@ requires search >= 3;
    //@ requires search > 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < array.length;
    //@ ensures \result <= array.length;
    //@ ensures \result == array.length;
    //@ ensures \result != array.length;
    //@ ensures \result >= array.length;
    //@ ensures \result > array.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < location;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result != location;
    //@ ensures \result >= location;
    //@ ensures \result > location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < search;
    //@ ensures \result <= search;
    //@ ensures \result == search;
    //@ ensures \result != search;
    //@ ensures \result >= search;
    //@ ensures \result > search;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures array != null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires location < array.length;
    //@ requires location <= array.length;
    //@ requires location == array.length;
    //@ requires location != array.length;
    //@ requires location >= array.length;
    //@ requires location > array.length;
    //@ requires 5 < array.length;
    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 != array.length;
    //@ requires 5 >= array.length;
    //@ requires 5 > array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 == array.length;
    //@ requires 3 != array.length;
    //@ requires 3 >= array.length;
    //@ requires 3 > array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 == array.length;
    //@ requires 2 != array.length;
    //@ requires 2 >= array.length;
    //@ requires 2 > array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 == array.length;
    //@ requires 1 != array.length;
    //@ requires 1 >= array.length;
    //@ requires 1 > array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 == array.length;
    //@ requires -1 != array.length;
    //@ requires -1 >= array.length;
    //@ requires -1 > array.length;
    //@ requires search < location;
    //@ requires search <= location;
    //@ requires search == location;
    //@ requires search != location;
    //@ requires search >= location;
    //@ requires search > location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search == 5;
    //@ requires search != 5;
    //@ requires search >= 5;
    //@ requires search > 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search == 3;
    //@ requires search != 3;
    //@ requires search >= 3;
    //@ requires search > 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c == array.length;
    //@ requires c != array.length;
    //@ requires c >= array.length;
    //@ requires c > array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:281: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:122:) in method main
        linearSearch(arr, -2);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:122: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:281:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:22: verify: Precondition conjunct is false: search > location
    //@ requires search > location;
                        ^
3 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search == location;
    //@ requires search >= location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search == 5;
    //@ requires search != 5;
    //@ requires search >= 5;
    //@ requires search > 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search == 3;
    //@ requires search != 3;
    //@ requires search >= 3;
    //@ requires search > 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < array.length;
    //@ ensures \result <= array.length;
    //@ ensures \result == array.length;
    //@ ensures \result != array.length;
    //@ ensures \result >= array.length;
    //@ ensures \result > array.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < location;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result != location;
    //@ ensures \result >= location;
    //@ ensures \result > location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < search;
    //@ ensures \result <= search;
    //@ ensures \result == search;
    //@ ensures \result != search;
    //@ ensures \result >= search;
    //@ ensures \result > search;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures array != null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires location < array.length;
    //@ requires location <= array.length;
    //@ requires location == array.length;
    //@ requires location != array.length;
    //@ requires location >= array.length;
    //@ requires location > array.length;
    //@ requires 5 < array.length;
    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 != array.length;
    //@ requires 5 >= array.length;
    //@ requires 5 > array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 == array.length;
    //@ requires 3 != array.length;
    //@ requires 3 >= array.length;
    //@ requires 3 > array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 == array.length;
    //@ requires 2 != array.length;
    //@ requires 2 >= array.length;
    //@ requires 2 > array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 == array.length;
    //@ requires 1 != array.length;
    //@ requires 1 >= array.length;
    //@ requires 1 > array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 == array.length;
    //@ requires -1 != array.length;
    //@ requires -1 >= array.length;
    //@ requires -1 > array.length;
    //@ requires search < location;
    //@ requires search <= location;
    //@ requires search == location;
    //@ requires search != location;
    //@ requires search >= location;
    //@ requires search > location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search == 5;
    //@ requires search != 5;
    //@ requires search >= 5;
    //@ requires search > 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search == 3;
    //@ requires search != 3;
    //@ requires search >= 3;
    //@ requires search > 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c == array.length;
    //@ requires c != array.length;
    //@ requires c >= array.length;
    //@ requires c > array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:280: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:121:) in method main
        linearSearch(arr, -2);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:121: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:280:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:20: verify: Precondition conjunct is false: search == location
    //@ requires search == location;
                        ^
3 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search >= location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search == 5;
    //@ requires search != 5;
    //@ requires search >= 5;
    //@ requires search > 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search == 3;
    //@ requires search != 3;
    //@ requires search >= 3;
    //@ requires search > 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < array.length;
    //@ ensures \result <= array.length;
    //@ ensures \result == array.length;
    //@ ensures \result != array.length;
    //@ ensures \result >= array.length;
    //@ ensures \result > array.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < location;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result != location;
    //@ ensures \result >= location;
    //@ ensures \result > location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < search;
    //@ ensures \result <= search;
    //@ ensures \result == search;
    //@ ensures \result != search;
    //@ ensures \result >= search;
    //@ ensures \result > search;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures array != null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires location < array.length;
    //@ requires location <= array.length;
    //@ requires location == array.length;
    //@ requires location != array.length;
    //@ requires location >= array.length;
    //@ requires location > array.length;
    //@ requires 5 < array.length;
    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 != array.length;
    //@ requires 5 >= array.length;
    //@ requires 5 > array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 == array.length;
    //@ requires 3 != array.length;
    //@ requires 3 >= array.length;
    //@ requires 3 > array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 == array.length;
    //@ requires 2 != array.length;
    //@ requires 2 >= array.length;
    //@ requires 2 > array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 == array.length;
    //@ requires 1 != array.length;
    //@ requires 1 >= array.length;
    //@ requires 1 > array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 == array.length;
    //@ requires -1 != array.length;
    //@ requires -1 >= array.length;
    //@ requires -1 > array.length;
    //@ requires search < location;
    //@ requires search <= location;
    //@ requires search == location;
    //@ requires search != location;
    //@ requires search >= location;
    //@ requires search > location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search == 5;
    //@ requires search != 5;
    //@ requires search >= 5;
    //@ requires search > 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search == 3;
    //@ requires search != 3;
    //@ requires search >= 3;
    //@ requires search > 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c == array.length;
    //@ requires c != array.length;
    //@ requires c >= array.length;
    //@ requires c > array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:279: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:120:) in method main
        linearSearch(arr, -2);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:120: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:279:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:23: verify: Precondition conjunct is false: search == 5
    //@ requires search == 5;
                        ^
3 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search >= location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search >= 5;
    //@ requires search > 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search == 3;
    //@ requires search != 3;
    //@ requires search >= 3;
    //@ requires search > 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < array.length;
    //@ ensures \result <= array.length;
    //@ ensures \result == array.length;
    //@ ensures \result != array.length;
    //@ ensures \result >= array.length;
    //@ ensures \result > array.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < location;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result != location;
    //@ ensures \result >= location;
    //@ ensures \result > location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < search;
    //@ ensures \result <= search;
    //@ ensures \result == search;
    //@ ensures \result != search;
    //@ ensures \result >= search;
    //@ ensures \result > search;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures array != null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires location < array.length;
    //@ requires location <= array.length;
    //@ requires location == array.length;
    //@ requires location != array.length;
    //@ requires location >= array.length;
    //@ requires location > array.length;
    //@ requires 5 < array.length;
    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 != array.length;
    //@ requires 5 >= array.length;
    //@ requires 5 > array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 == array.length;
    //@ requires 3 != array.length;
    //@ requires 3 >= array.length;
    //@ requires 3 > array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 == array.length;
    //@ requires 2 != array.length;
    //@ requires 2 >= array.length;
    //@ requires 2 > array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 == array.length;
    //@ requires 1 != array.length;
    //@ requires 1 >= array.length;
    //@ requires 1 > array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 == array.length;
    //@ requires -1 != array.length;
    //@ requires -1 >= array.length;
    //@ requires -1 > array.length;
    //@ requires search < location;
    //@ requires search <= location;
    //@ requires search == location;
    //@ requires search != location;
    //@ requires search >= location;
    //@ requires search > location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search == 5;
    //@ requires search != 5;
    //@ requires search >= 5;
    //@ requires search > 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search == 3;
    //@ requires search != 3;
    //@ requires search >= 3;
    //@ requires search > 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c == array.length;
    //@ requires c != array.length;
    //@ requires c >= array.length;
    //@ requires c > array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:278: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:119:) in method main
        linearSearch(arr, -2);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:119: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:278:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:20: verify: Precondition conjunct is false: search >= location
    //@ requires search >= location;
                        ^
3 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search >= 5;
    //@ requires search > 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search == 3;
    //@ requires search != 3;
    //@ requires search >= 3;
    //@ requires search > 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < array.length;
    //@ ensures \result <= array.length;
    //@ ensures \result == array.length;
    //@ ensures \result != array.length;
    //@ ensures \result >= array.length;
    //@ ensures \result > array.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < location;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result != location;
    //@ ensures \result >= location;
    //@ ensures \result > location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < search;
    //@ ensures \result <= search;
    //@ ensures \result == search;
    //@ ensures \result != search;
    //@ ensures \result >= search;
    //@ ensures \result > search;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures array != null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires location < array.length;
    //@ requires location <= array.length;
    //@ requires location == array.length;
    //@ requires location != array.length;
    //@ requires location >= array.length;
    //@ requires location > array.length;
    //@ requires 5 < array.length;
    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 != array.length;
    //@ requires 5 >= array.length;
    //@ requires 5 > array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 == array.length;
    //@ requires 3 != array.length;
    //@ requires 3 >= array.length;
    //@ requires 3 > array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 == array.length;
    //@ requires 2 != array.length;
    //@ requires 2 >= array.length;
    //@ requires 2 > array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 == array.length;
    //@ requires 1 != array.length;
    //@ requires 1 >= array.length;
    //@ requires 1 > array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 == array.length;
    //@ requires -1 != array.length;
    //@ requires -1 >= array.length;
    //@ requires -1 > array.length;
    //@ requires search < location;
    //@ requires search <= location;
    //@ requires search == location;
    //@ requires search != location;
    //@ requires search >= location;
    //@ requires search > location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search == 5;
    //@ requires search != 5;
    //@ requires search >= 5;
    //@ requires search > 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search == 3;
    //@ requires search != 3;
    //@ requires search >= 3;
    //@ requires search > 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c == array.length;
    //@ requires c != array.length;
    //@ requires c >= array.length;
    //@ requires c > array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:277: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:118:) in method main
        linearSearch(arr, -2);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:118: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:277:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:23: verify: Precondition conjunct is false: search >= 5
    //@ requires search >= 5;
                        ^
3 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search > 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search == 3;
    //@ requires search != 3;
    //@ requires search >= 3;
    //@ requires search > 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < array.length;
    //@ ensures \result <= array.length;
    //@ ensures \result == array.length;
    //@ ensures \result != array.length;
    //@ ensures \result >= array.length;
    //@ ensures \result > array.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < location;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result != location;
    //@ ensures \result >= location;
    //@ ensures \result > location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < search;
    //@ ensures \result <= search;
    //@ ensures \result == search;
    //@ ensures \result != search;
    //@ ensures \result >= search;
    //@ ensures \result > search;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures array != null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires location < array.length;
    //@ requires location <= array.length;
    //@ requires location == array.length;
    //@ requires location != array.length;
    //@ requires location >= array.length;
    //@ requires location > array.length;
    //@ requires 5 < array.length;
    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 != array.length;
    //@ requires 5 >= array.length;
    //@ requires 5 > array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 == array.length;
    //@ requires 3 != array.length;
    //@ requires 3 >= array.length;
    //@ requires 3 > array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 == array.length;
    //@ requires 2 != array.length;
    //@ requires 2 >= array.length;
    //@ requires 2 > array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 == array.length;
    //@ requires 1 != array.length;
    //@ requires 1 >= array.length;
    //@ requires 1 > array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 == array.length;
    //@ requires -1 != array.length;
    //@ requires -1 >= array.length;
    //@ requires -1 > array.length;
    //@ requires search < location;
    //@ requires search <= location;
    //@ requires search == location;
    //@ requires search != location;
    //@ requires search >= location;
    //@ requires search > location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search == 5;
    //@ requires search != 5;
    //@ requires search >= 5;
    //@ requires search > 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search == 3;
    //@ requires search != 3;
    //@ requires search >= 3;
    //@ requires search > 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c == array.length;
    //@ requires c != array.length;
    //@ requires c >= array.length;
    //@ requires c > array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:276: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:117:) in method main
        linearSearch(arr, -2);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:117: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:276:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:23: verify: Precondition conjunct is false: search > 5
    //@ requires search > 5;
                        ^
3 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search == 3;
    //@ requires search != 3;
    //@ requires search >= 3;
    //@ requires search > 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < array.length;
    //@ ensures \result <= array.length;
    //@ ensures \result == array.length;
    //@ ensures \result != array.length;
    //@ ensures \result >= array.length;
    //@ ensures \result > array.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < location;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result != location;
    //@ ensures \result >= location;
    //@ ensures \result > location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < search;
    //@ ensures \result <= search;
    //@ ensures \result == search;
    //@ ensures \result != search;
    //@ ensures \result >= search;
    //@ ensures \result > search;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures array != null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires location < array.length;
    //@ requires location <= array.length;
    //@ requires location == array.length;
    //@ requires location != array.length;
    //@ requires location >= array.length;
    //@ requires location > array.length;
    //@ requires 5 < array.length;
    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 != array.length;
    //@ requires 5 >= array.length;
    //@ requires 5 > array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 == array.length;
    //@ requires 3 != array.length;
    //@ requires 3 >= array.length;
    //@ requires 3 > array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 == array.length;
    //@ requires 2 != array.length;
    //@ requires 2 >= array.length;
    //@ requires 2 > array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 == array.length;
    //@ requires 1 != array.length;
    //@ requires 1 >= array.length;
    //@ requires 1 > array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 == array.length;
    //@ requires -1 != array.length;
    //@ requires -1 >= array.length;
    //@ requires -1 > array.length;
    //@ requires search < location;
    //@ requires search <= location;
    //@ requires search == location;
    //@ requires search != location;
    //@ requires search >= location;
    //@ requires search > location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search == 5;
    //@ requires search != 5;
    //@ requires search >= 5;
    //@ requires search > 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search == 3;
    //@ requires search != 3;
    //@ requires search >= 3;
    //@ requires search > 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c == array.length;
    //@ requires c != array.length;
    //@ requires c >= array.length;
    //@ requires c > array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:275: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:116:) in method main
        linearSearch(arr, -2);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:116: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:275:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:25: verify: Precondition conjunct is false: search == 3
    //@ requires search == 3;
                        ^
3 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search >= 3;
    //@ requires search > 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < array.length;
    //@ ensures \result <= array.length;
    //@ ensures \result == array.length;
    //@ ensures \result != array.length;
    //@ ensures \result >= array.length;
    //@ ensures \result > array.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < location;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result != location;
    //@ ensures \result >= location;
    //@ ensures \result > location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < search;
    //@ ensures \result <= search;
    //@ ensures \result == search;
    //@ ensures \result != search;
    //@ ensures \result >= search;
    //@ ensures \result > search;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures array != null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires location < array.length;
    //@ requires location <= array.length;
    //@ requires location == array.length;
    //@ requires location != array.length;
    //@ requires location >= array.length;
    //@ requires location > array.length;
    //@ requires 5 < array.length;
    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 != array.length;
    //@ requires 5 >= array.length;
    //@ requires 5 > array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 == array.length;
    //@ requires 3 != array.length;
    //@ requires 3 >= array.length;
    //@ requires 3 > array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 == array.length;
    //@ requires 2 != array.length;
    //@ requires 2 >= array.length;
    //@ requires 2 > array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 == array.length;
    //@ requires 1 != array.length;
    //@ requires 1 >= array.length;
    //@ requires 1 > array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 == array.length;
    //@ requires -1 != array.length;
    //@ requires -1 >= array.length;
    //@ requires -1 > array.length;
    //@ requires search < location;
    //@ requires search <= location;
    //@ requires search == location;
    //@ requires search != location;
    //@ requires search >= location;
    //@ requires search > location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search == 5;
    //@ requires search != 5;
    //@ requires search >= 5;
    //@ requires search > 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search == 3;
    //@ requires search != 3;
    //@ requires search >= 3;
    //@ requires search > 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c == array.length;
    //@ requires c != array.length;
    //@ requires c >= array.length;
    //@ requires c > array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:274: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:115:) in method main
        linearSearch(arr, -2);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:115: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:274:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:26: verify: Precondition conjunct is false: search >= 3
    //@ requires search >= 3;
                        ^
3 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search > 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < array.length;
    //@ ensures \result <= array.length;
    //@ ensures \result == array.length;
    //@ ensures \result != array.length;
    //@ ensures \result >= array.length;
    //@ ensures \result > array.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < location;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result != location;
    //@ ensures \result >= location;
    //@ ensures \result > location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < search;
    //@ ensures \result <= search;
    //@ ensures \result == search;
    //@ ensures \result != search;
    //@ ensures \result >= search;
    //@ ensures \result > search;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures array != null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires location < array.length;
    //@ requires location <= array.length;
    //@ requires location == array.length;
    //@ requires location != array.length;
    //@ requires location >= array.length;
    //@ requires location > array.length;
    //@ requires 5 < array.length;
    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 != array.length;
    //@ requires 5 >= array.length;
    //@ requires 5 > array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 == array.length;
    //@ requires 3 != array.length;
    //@ requires 3 >= array.length;
    //@ requires 3 > array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 == array.length;
    //@ requires 2 != array.length;
    //@ requires 2 >= array.length;
    //@ requires 2 > array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 == array.length;
    //@ requires 1 != array.length;
    //@ requires 1 >= array.length;
    //@ requires 1 > array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 == array.length;
    //@ requires -1 != array.length;
    //@ requires -1 >= array.length;
    //@ requires -1 > array.length;
    //@ requires search < location;
    //@ requires search <= location;
    //@ requires search == location;
    //@ requires search != location;
    //@ requires search >= location;
    //@ requires search > location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search == 5;
    //@ requires search != 5;
    //@ requires search >= 5;
    //@ requires search > 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search == 3;
    //@ requires search != 3;
    //@ requires search >= 3;
    //@ requires search > 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c == array.length;
    //@ requires c != array.length;
    //@ requires c >= array.length;
    //@ requires c > array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:273: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:114:) in method main
        linearSearch(arr, -2);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:114: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:273:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:26: verify: Precondition conjunct is false: search > 3
    //@ requires search > 3;
                        ^
3 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < array.length;
    //@ ensures \result <= array.length;
    //@ ensures \result == array.length;
    //@ ensures \result != array.length;
    //@ ensures \result >= array.length;
    //@ ensures \result > array.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < location;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result != location;
    //@ ensures \result >= location;
    //@ ensures \result > location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < search;
    //@ ensures \result <= search;
    //@ ensures \result == search;
    //@ ensures \result != search;
    //@ ensures \result >= search;
    //@ ensures \result > search;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures array != null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires location < array.length;
    //@ requires location <= array.length;
    //@ requires location == array.length;
    //@ requires location != array.length;
    //@ requires location >= array.length;
    //@ requires location > array.length;
    //@ requires 5 < array.length;
    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 != array.length;
    //@ requires 5 >= array.length;
    //@ requires 5 > array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 == array.length;
    //@ requires 3 != array.length;
    //@ requires 3 >= array.length;
    //@ requires 3 > array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 == array.length;
    //@ requires 2 != array.length;
    //@ requires 2 >= array.length;
    //@ requires 2 > array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 == array.length;
    //@ requires 1 != array.length;
    //@ requires 1 >= array.length;
    //@ requires 1 > array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 == array.length;
    //@ requires -1 != array.length;
    //@ requires -1 >= array.length;
    //@ requires -1 > array.length;
    //@ requires search < location;
    //@ requires search <= location;
    //@ requires search == location;
    //@ requires search != location;
    //@ requires search >= location;
    //@ requires search > location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search == 5;
    //@ requires search != 5;
    //@ requires search >= 5;
    //@ requires search > 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search == 3;
    //@ requires search != 3;
    //@ requires search >= 3;
    //@ requires search > 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c == array.length;
    //@ requires c != array.length;
    //@ requires c >= array.length;
    //@ requires c > array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:272: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:113:) in method main
        linearSearch(arr, -2);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:113: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:272:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:28: verify: Precondition conjunct is false: search == 2
    //@ requires search == 2;
                        ^
3 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < array.length;
    //@ ensures \result <= array.length;
    //@ ensures \result == array.length;
    //@ ensures \result != array.length;
    //@ ensures \result >= array.length;
    //@ ensures \result > array.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < location;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result != location;
    //@ ensures \result >= location;
    //@ ensures \result > location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < search;
    //@ ensures \result <= search;
    //@ ensures \result == search;
    //@ ensures \result != search;
    //@ ensures \result >= search;
    //@ ensures \result > search;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures array != null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires location < array.length;
    //@ requires location <= array.length;
    //@ requires location == array.length;
    //@ requires location != array.length;
    //@ requires location >= array.length;
    //@ requires location > array.length;
    //@ requires 5 < array.length;
    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 != array.length;
    //@ requires 5 >= array.length;
    //@ requires 5 > array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 == array.length;
    //@ requires 3 != array.length;
    //@ requires 3 >= array.length;
    //@ requires 3 > array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 == array.length;
    //@ requires 2 != array.length;
    //@ requires 2 >= array.length;
    //@ requires 2 > array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 == array.length;
    //@ requires 1 != array.length;
    //@ requires 1 >= array.length;
    //@ requires 1 > array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 == array.length;
    //@ requires -1 != array.length;
    //@ requires -1 >= array.length;
    //@ requires -1 > array.length;
    //@ requires search < location;
    //@ requires search <= location;
    //@ requires search == location;
    //@ requires search != location;
    //@ requires search >= location;
    //@ requires search > location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search == 5;
    //@ requires search != 5;
    //@ requires search >= 5;
    //@ requires search > 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search == 3;
    //@ requires search != 3;
    //@ requires search >= 3;
    //@ requires search > 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c == array.length;
    //@ requires c != array.length;
    //@ requires c >= array.length;
    //@ requires c > array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:271: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:112:) in method main
        linearSearch(arr, -2);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:112: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:271:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:29: verify: Precondition conjunct is false: search >= 2
    //@ requires search >= 2;
                        ^
3 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < array.length;
    //@ ensures \result <= array.length;
    //@ ensures \result == array.length;
    //@ ensures \result != array.length;
    //@ ensures \result >= array.length;
    //@ ensures \result > array.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < location;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result != location;
    //@ ensures \result >= location;
    //@ ensures \result > location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < search;
    //@ ensures \result <= search;
    //@ ensures \result == search;
    //@ ensures \result != search;
    //@ ensures \result >= search;
    //@ ensures \result > search;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures array != null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires location < array.length;
    //@ requires location <= array.length;
    //@ requires location == array.length;
    //@ requires location != array.length;
    //@ requires location >= array.length;
    //@ requires location > array.length;
    //@ requires 5 < array.length;
    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 != array.length;
    //@ requires 5 >= array.length;
    //@ requires 5 > array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 == array.length;
    //@ requires 3 != array.length;
    //@ requires 3 >= array.length;
    //@ requires 3 > array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 == array.length;
    //@ requires 2 != array.length;
    //@ requires 2 >= array.length;
    //@ requires 2 > array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 == array.length;
    //@ requires 1 != array.length;
    //@ requires 1 >= array.length;
    //@ requires 1 > array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 == array.length;
    //@ requires -1 != array.length;
    //@ requires -1 >= array.length;
    //@ requires -1 > array.length;
    //@ requires search < location;
    //@ requires search <= location;
    //@ requires search == location;
    //@ requires search != location;
    //@ requires search >= location;
    //@ requires search > location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search == 5;
    //@ requires search != 5;
    //@ requires search >= 5;
    //@ requires search > 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search == 3;
    //@ requires search != 3;
    //@ requires search >= 3;
    //@ requires search > 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c == array.length;
    //@ requires c != array.length;
    //@ requires c >= array.length;
    //@ requires c > array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:270: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:111:) in method main
        linearSearch(arr, -2);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:111: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:270:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:29: verify: Precondition conjunct is false: search > 2
    //@ requires search > 2;
                        ^
3 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < array.length;
    //@ ensures \result <= array.length;
    //@ ensures \result == array.length;
    //@ ensures \result != array.length;
    //@ ensures \result >= array.length;
    //@ ensures \result > array.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < location;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result != location;
    //@ ensures \result >= location;
    //@ ensures \result > location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < search;
    //@ ensures \result <= search;
    //@ ensures \result == search;
    //@ ensures \result != search;
    //@ ensures \result >= search;
    //@ ensures \result > search;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures array != null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires location < array.length;
    //@ requires location <= array.length;
    //@ requires location == array.length;
    //@ requires location != array.length;
    //@ requires location >= array.length;
    //@ requires location > array.length;
    //@ requires 5 < array.length;
    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 != array.length;
    //@ requires 5 >= array.length;
    //@ requires 5 > array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 == array.length;
    //@ requires 3 != array.length;
    //@ requires 3 >= array.length;
    //@ requires 3 > array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 == array.length;
    //@ requires 2 != array.length;
    //@ requires 2 >= array.length;
    //@ requires 2 > array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 == array.length;
    //@ requires 1 != array.length;
    //@ requires 1 >= array.length;
    //@ requires 1 > array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 == array.length;
    //@ requires -1 != array.length;
    //@ requires -1 >= array.length;
    //@ requires -1 > array.length;
    //@ requires search < location;
    //@ requires search <= location;
    //@ requires search == location;
    //@ requires search != location;
    //@ requires search >= location;
    //@ requires search > location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search == 5;
    //@ requires search != 5;
    //@ requires search >= 5;
    //@ requires search > 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search == 3;
    //@ requires search != 3;
    //@ requires search >= 3;
    //@ requires search > 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c == array.length;
    //@ requires c != array.length;
    //@ requires c >= array.length;
    //@ requires c > array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:269: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:110:) in method main
        linearSearch(arr, -2);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:110: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:269:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:31: verify: Precondition conjunct is false: search == 1
    //@ requires search == 1;
                        ^
3 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < array.length;
    //@ ensures \result <= array.length;
    //@ ensures \result == array.length;
    //@ ensures \result != array.length;
    //@ ensures \result >= array.length;
    //@ ensures \result > array.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < location;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result != location;
    //@ ensures \result >= location;
    //@ ensures \result > location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < search;
    //@ ensures \result <= search;
    //@ ensures \result == search;
    //@ ensures \result != search;
    //@ ensures \result >= search;
    //@ ensures \result > search;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures array != null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires location < array.length;
    //@ requires location <= array.length;
    //@ requires location == array.length;
    //@ requires location != array.length;
    //@ requires location >= array.length;
    //@ requires location > array.length;
    //@ requires 5 < array.length;
    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 != array.length;
    //@ requires 5 >= array.length;
    //@ requires 5 > array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 == array.length;
    //@ requires 3 != array.length;
    //@ requires 3 >= array.length;
    //@ requires 3 > array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 == array.length;
    //@ requires 2 != array.length;
    //@ requires 2 >= array.length;
    //@ requires 2 > array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 == array.length;
    //@ requires 1 != array.length;
    //@ requires 1 >= array.length;
    //@ requires 1 > array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 == array.length;
    //@ requires -1 != array.length;
    //@ requires -1 >= array.length;
    //@ requires -1 > array.length;
    //@ requires search < location;
    //@ requires search <= location;
    //@ requires search == location;
    //@ requires search != location;
    //@ requires search >= location;
    //@ requires search > location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search == 5;
    //@ requires search != 5;
    //@ requires search >= 5;
    //@ requires search > 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search == 3;
    //@ requires search != 3;
    //@ requires search >= 3;
    //@ requires search > 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c == array.length;
    //@ requires c != array.length;
    //@ requires c >= array.length;
    //@ requires c > array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:268: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:109:) in method main
        linearSearch(arr, -2);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:109: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:268:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:32: verify: Precondition conjunct is false: search >= 1
    //@ requires search >= 1;
                        ^
3 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < array.length;
    //@ ensures \result <= array.length;
    //@ ensures \result == array.length;
    //@ ensures \result != array.length;
    //@ ensures \result >= array.length;
    //@ ensures \result > array.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < location;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result != location;
    //@ ensures \result >= location;
    //@ ensures \result > location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < search;
    //@ ensures \result <= search;
    //@ ensures \result == search;
    //@ ensures \result != search;
    //@ ensures \result >= search;
    //@ ensures \result > search;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures array != null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires location < array.length;
    //@ requires location <= array.length;
    //@ requires location == array.length;
    //@ requires location != array.length;
    //@ requires location >= array.length;
    //@ requires location > array.length;
    //@ requires 5 < array.length;
    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 != array.length;
    //@ requires 5 >= array.length;
    //@ requires 5 > array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 == array.length;
    //@ requires 3 != array.length;
    //@ requires 3 >= array.length;
    //@ requires 3 > array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 == array.length;
    //@ requires 2 != array.length;
    //@ requires 2 >= array.length;
    //@ requires 2 > array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 == array.length;
    //@ requires 1 != array.length;
    //@ requires 1 >= array.length;
    //@ requires 1 > array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 == array.length;
    //@ requires -1 != array.length;
    //@ requires -1 >= array.length;
    //@ requires -1 > array.length;
    //@ requires search < location;
    //@ requires search <= location;
    //@ requires search == location;
    //@ requires search != location;
    //@ requires search >= location;
    //@ requires search > location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search == 5;
    //@ requires search != 5;
    //@ requires search >= 5;
    //@ requires search > 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search == 3;
    //@ requires search != 3;
    //@ requires search >= 3;
    //@ requires search > 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c == array.length;
    //@ requires c != array.length;
    //@ requires c >= array.length;
    //@ requires c > array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:267: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:108:) in method main
        linearSearch(arr, -2);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:108: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:267:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:32: verify: Precondition conjunct is false: search > 1
    //@ requires search > 1;
                        ^
3 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < array.length;
    //@ ensures \result <= array.length;
    //@ ensures \result == array.length;
    //@ ensures \result != array.length;
    //@ ensures \result >= array.length;
    //@ ensures \result > array.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < location;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result != location;
    //@ ensures \result >= location;
    //@ ensures \result > location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < search;
    //@ ensures \result <= search;
    //@ ensures \result == search;
    //@ ensures \result != search;
    //@ ensures \result >= search;
    //@ ensures \result > search;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures array != null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires location < array.length;
    //@ requires location <= array.length;
    //@ requires location == array.length;
    //@ requires location != array.length;
    //@ requires location >= array.length;
    //@ requires location > array.length;
    //@ requires 5 < array.length;
    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 != array.length;
    //@ requires 5 >= array.length;
    //@ requires 5 > array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 == array.length;
    //@ requires 3 != array.length;
    //@ requires 3 >= array.length;
    //@ requires 3 > array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 == array.length;
    //@ requires 2 != array.length;
    //@ requires 2 >= array.length;
    //@ requires 2 > array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 == array.length;
    //@ requires 1 != array.length;
    //@ requires 1 >= array.length;
    //@ requires 1 > array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 == array.length;
    //@ requires -1 != array.length;
    //@ requires -1 >= array.length;
    //@ requires -1 > array.length;
    //@ requires search < location;
    //@ requires search <= location;
    //@ requires search == location;
    //@ requires search != location;
    //@ requires search >= location;
    //@ requires search > location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search == 5;
    //@ requires search != 5;
    //@ requires search >= 5;
    //@ requires search > 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search == 3;
    //@ requires search != 3;
    //@ requires search >= 3;
    //@ requires search > 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c == array.length;
    //@ requires c != array.length;
    //@ requires c >= array.length;
    //@ requires c > array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:266: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:107:) in method main
        linearSearch(arr, -2);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:107: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:266:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:34: verify: Precondition conjunct is false: search == 0
    //@ requires search == 0;
                        ^
3 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < array.length;
    //@ ensures \result <= array.length;
    //@ ensures \result == array.length;
    //@ ensures \result != array.length;
    //@ ensures \result >= array.length;
    //@ ensures \result > array.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < location;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result != location;
    //@ ensures \result >= location;
    //@ ensures \result > location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < search;
    //@ ensures \result <= search;
    //@ ensures \result == search;
    //@ ensures \result != search;
    //@ ensures \result >= search;
    //@ ensures \result > search;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures array != null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires location < array.length;
    //@ requires location <= array.length;
    //@ requires location == array.length;
    //@ requires location != array.length;
    //@ requires location >= array.length;
    //@ requires location > array.length;
    //@ requires 5 < array.length;
    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 != array.length;
    //@ requires 5 >= array.length;
    //@ requires 5 > array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 == array.length;
    //@ requires 3 != array.length;
    //@ requires 3 >= array.length;
    //@ requires 3 > array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 == array.length;
    //@ requires 2 != array.length;
    //@ requires 2 >= array.length;
    //@ requires 2 > array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 == array.length;
    //@ requires 1 != array.length;
    //@ requires 1 >= array.length;
    //@ requires 1 > array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 == array.length;
    //@ requires -1 != array.length;
    //@ requires -1 >= array.length;
    //@ requires -1 > array.length;
    //@ requires search < location;
    //@ requires search <= location;
    //@ requires search == location;
    //@ requires search != location;
    //@ requires search >= location;
    //@ requires search > location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search == 5;
    //@ requires search != 5;
    //@ requires search >= 5;
    //@ requires search > 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search == 3;
    //@ requires search != 3;
    //@ requires search >= 3;
    //@ requires search > 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c == array.length;
    //@ requires c != array.length;
    //@ requires c >= array.length;
    //@ requires c > array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:265: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:106:) in method main
        linearSearch(arr, -2);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:106: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:265:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:35: verify: Precondition conjunct is false: search >= 0
    //@ requires search >= 0;
                        ^
3 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < array.length;
    //@ ensures \result <= array.length;
    //@ ensures \result == array.length;
    //@ ensures \result != array.length;
    //@ ensures \result >= array.length;
    //@ ensures \result > array.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < location;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result != location;
    //@ ensures \result >= location;
    //@ ensures \result > location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < search;
    //@ ensures \result <= search;
    //@ ensures \result == search;
    //@ ensures \result != search;
    //@ ensures \result >= search;
    //@ ensures \result > search;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures array != null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires location < array.length;
    //@ requires location <= array.length;
    //@ requires location == array.length;
    //@ requires location != array.length;
    //@ requires location >= array.length;
    //@ requires location > array.length;
    //@ requires 5 < array.length;
    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 != array.length;
    //@ requires 5 >= array.length;
    //@ requires 5 > array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 == array.length;
    //@ requires 3 != array.length;
    //@ requires 3 >= array.length;
    //@ requires 3 > array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 == array.length;
    //@ requires 2 != array.length;
    //@ requires 2 >= array.length;
    //@ requires 2 > array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 == array.length;
    //@ requires 1 != array.length;
    //@ requires 1 >= array.length;
    //@ requires 1 > array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 == array.length;
    //@ requires -1 != array.length;
    //@ requires -1 >= array.length;
    //@ requires -1 > array.length;
    //@ requires search < location;
    //@ requires search <= location;
    //@ requires search == location;
    //@ requires search != location;
    //@ requires search >= location;
    //@ requires search > location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search == 5;
    //@ requires search != 5;
    //@ requires search >= 5;
    //@ requires search > 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search == 3;
    //@ requires search != 3;
    //@ requires search >= 3;
    //@ requires search > 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c == array.length;
    //@ requires c != array.length;
    //@ requires c >= array.length;
    //@ requires c > array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:264: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:105:) in method main
        linearSearch(arr, -2);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:105: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:264:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:35: verify: Precondition conjunct is false: search > 0
    //@ requires search > 0;
                        ^
3 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < array.length;
    //@ ensures \result <= array.length;
    //@ ensures \result == array.length;
    //@ ensures \result != array.length;
    //@ ensures \result >= array.length;
    //@ ensures \result > array.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < location;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result != location;
    //@ ensures \result >= location;
    //@ ensures \result > location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < search;
    //@ ensures \result <= search;
    //@ ensures \result == search;
    //@ ensures \result != search;
    //@ ensures \result >= search;
    //@ ensures \result > search;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures array != null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires location < array.length;
    //@ requires location <= array.length;
    //@ requires location == array.length;
    //@ requires location != array.length;
    //@ requires location >= array.length;
    //@ requires location > array.length;
    //@ requires 5 < array.length;
    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 != array.length;
    //@ requires 5 >= array.length;
    //@ requires 5 > array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 == array.length;
    //@ requires 3 != array.length;
    //@ requires 3 >= array.length;
    //@ requires 3 > array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 == array.length;
    //@ requires 2 != array.length;
    //@ requires 2 >= array.length;
    //@ requires 2 > array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 == array.length;
    //@ requires 1 != array.length;
    //@ requires 1 >= array.length;
    //@ requires 1 > array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 == array.length;
    //@ requires -1 != array.length;
    //@ requires -1 >= array.length;
    //@ requires -1 > array.length;
    //@ requires search < location;
    //@ requires search <= location;
    //@ requires search == location;
    //@ requires search != location;
    //@ requires search >= location;
    //@ requires search > location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search == 5;
    //@ requires search != 5;
    //@ requires search >= 5;
    //@ requires search > 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search == 3;
    //@ requires search != 3;
    //@ requires search >= 3;
    //@ requires search > 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c == array.length;
    //@ requires c != array.length;
    //@ requires c >= array.length;
    //@ requires c > array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:263: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:104:) in method main
        linearSearch(arr, -2);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:104: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:263:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:37: verify: Precondition conjunct is false: search == -1
    //@ requires search == -1;
                        ^
3 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < array.length;
    //@ ensures \result <= array.length;
    //@ ensures \result == array.length;
    //@ ensures \result != array.length;
    //@ ensures \result >= array.length;
    //@ ensures \result > array.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < location;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result != location;
    //@ ensures \result >= location;
    //@ ensures \result > location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < search;
    //@ ensures \result <= search;
    //@ ensures \result == search;
    //@ ensures \result != search;
    //@ ensures \result >= search;
    //@ ensures \result > search;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures array != null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires location < array.length;
    //@ requires location <= array.length;
    //@ requires location == array.length;
    //@ requires location != array.length;
    //@ requires location >= array.length;
    //@ requires location > array.length;
    //@ requires 5 < array.length;
    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 != array.length;
    //@ requires 5 >= array.length;
    //@ requires 5 > array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 == array.length;
    //@ requires 3 != array.length;
    //@ requires 3 >= array.length;
    //@ requires 3 > array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 == array.length;
    //@ requires 2 != array.length;
    //@ requires 2 >= array.length;
    //@ requires 2 > array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 == array.length;
    //@ requires 1 != array.length;
    //@ requires 1 >= array.length;
    //@ requires 1 > array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 == array.length;
    //@ requires -1 != array.length;
    //@ requires -1 >= array.length;
    //@ requires -1 > array.length;
    //@ requires search < location;
    //@ requires search <= location;
    //@ requires search == location;
    //@ requires search != location;
    //@ requires search >= location;
    //@ requires search > location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search == 5;
    //@ requires search != 5;
    //@ requires search >= 5;
    //@ requires search > 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search == 3;
    //@ requires search != 3;
    //@ requires search >= 3;
    //@ requires search > 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c == array.length;
    //@ requires c != array.length;
    //@ requires c >= array.length;
    //@ requires c > array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:262: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:103:) in method main
        linearSearch(arr, -2);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:103: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:262:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:38: verify: Precondition conjunct is false: search >= -1
    //@ requires search >= -1;
                        ^
3 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < array.length;
    //@ ensures \result <= array.length;
    //@ ensures \result == array.length;
    //@ ensures \result != array.length;
    //@ ensures \result >= array.length;
    //@ ensures \result > array.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < location;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result != location;
    //@ ensures \result >= location;
    //@ ensures \result > location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < search;
    //@ ensures \result <= search;
    //@ ensures \result == search;
    //@ ensures \result != search;
    //@ ensures \result >= search;
    //@ ensures \result > search;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures array != null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires location < array.length;
    //@ requires location <= array.length;
    //@ requires location == array.length;
    //@ requires location != array.length;
    //@ requires location >= array.length;
    //@ requires location > array.length;
    //@ requires 5 < array.length;
    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 != array.length;
    //@ requires 5 >= array.length;
    //@ requires 5 > array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 == array.length;
    //@ requires 3 != array.length;
    //@ requires 3 >= array.length;
    //@ requires 3 > array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 == array.length;
    //@ requires 2 != array.length;
    //@ requires 2 >= array.length;
    //@ requires 2 > array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 == array.length;
    //@ requires 1 != array.length;
    //@ requires 1 >= array.length;
    //@ requires 1 > array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 == array.length;
    //@ requires -1 != array.length;
    //@ requires -1 >= array.length;
    //@ requires -1 > array.length;
    //@ requires search < location;
    //@ requires search <= location;
    //@ requires search == location;
    //@ requires search != location;
    //@ requires search >= location;
    //@ requires search > location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search == 5;
    //@ requires search != 5;
    //@ requires search >= 5;
    //@ requires search > 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search == 3;
    //@ requires search != 3;
    //@ requires search >= 3;
    //@ requires search > 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c == array.length;
    //@ requires c != array.length;
    //@ requires c >= array.length;
    //@ requires c > array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:261: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:102:) in method main
        linearSearch(arr, -2);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:102: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:261:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:38: verify: Precondition conjunct is false: search > -1
    //@ requires search > -1;
                        ^
3 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < array.length;
    //@ ensures \result <= array.length;
    //@ ensures \result == array.length;
    //@ ensures \result != array.length;
    //@ ensures \result >= array.length;
    //@ ensures \result > array.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < location;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result != location;
    //@ ensures \result >= location;
    //@ ensures \result > location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < search;
    //@ ensures \result <= search;
    //@ ensures \result == search;
    //@ ensures \result != search;
    //@ ensures \result >= search;
    //@ ensures \result > search;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures array != null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires location < array.length;
    //@ requires location <= array.length;
    //@ requires location == array.length;
    //@ requires location != array.length;
    //@ requires location >= array.length;
    //@ requires location > array.length;
    //@ requires 5 < array.length;
    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 != array.length;
    //@ requires 5 >= array.length;
    //@ requires 5 > array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 == array.length;
    //@ requires 3 != array.length;
    //@ requires 3 >= array.length;
    //@ requires 3 > array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 == array.length;
    //@ requires 2 != array.length;
    //@ requires 2 >= array.length;
    //@ requires 2 > array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 == array.length;
    //@ requires 1 != array.length;
    //@ requires 1 >= array.length;
    //@ requires 1 > array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 == array.length;
    //@ requires -1 != array.length;
    //@ requires -1 >= array.length;
    //@ requires -1 > array.length;
    //@ requires search < location;
    //@ requires search <= location;
    //@ requires search == location;
    //@ requires search != location;
    //@ requires search >= location;
    //@ requires search > location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search == 5;
    //@ requires search != 5;
    //@ requires search >= 5;
    //@ requires search > 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search == 3;
    //@ requires search != 3;
    //@ requires search >= 3;
    //@ requires search > 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c == array.length;
    //@ requires c != array.length;
    //@ requires c >= array.length;
    //@ requires c > array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:260: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:101:) in method main
        linearSearch(arr, -2);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:101: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:260:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:40: verify: Precondition conjunct is false: search == array.length
    //@ requires search == array.length;
                        ^
3 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < array.length;
    //@ ensures \result <= array.length;
    //@ ensures \result == array.length;
    //@ ensures \result != array.length;
    //@ ensures \result >= array.length;
    //@ ensures \result > array.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < location;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result != location;
    //@ ensures \result >= location;
    //@ ensures \result > location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < search;
    //@ ensures \result <= search;
    //@ ensures \result == search;
    //@ ensures \result != search;
    //@ ensures \result >= search;
    //@ ensures \result > search;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures array != null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires location < array.length;
    //@ requires location <= array.length;
    //@ requires location == array.length;
    //@ requires location != array.length;
    //@ requires location >= array.length;
    //@ requires location > array.length;
    //@ requires 5 < array.length;
    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 != array.length;
    //@ requires 5 >= array.length;
    //@ requires 5 > array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 == array.length;
    //@ requires 3 != array.length;
    //@ requires 3 >= array.length;
    //@ requires 3 > array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 == array.length;
    //@ requires 2 != array.length;
    //@ requires 2 >= array.length;
    //@ requires 2 > array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 == array.length;
    //@ requires 1 != array.length;
    //@ requires 1 >= array.length;
    //@ requires 1 > array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 == array.length;
    //@ requires -1 != array.length;
    //@ requires -1 >= array.length;
    //@ requires -1 > array.length;
    //@ requires search < location;
    //@ requires search <= location;
    //@ requires search == location;
    //@ requires search != location;
    //@ requires search >= location;
    //@ requires search > location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search == 5;
    //@ requires search != 5;
    //@ requires search >= 5;
    //@ requires search > 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search == 3;
    //@ requires search != 3;
    //@ requires search >= 3;
    //@ requires search > 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c == array.length;
    //@ requires c != array.length;
    //@ requires c >= array.length;
    //@ requires c > array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:259: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:100:) in method main
        linearSearch(arr, -2);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:100: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:259:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:41: verify: Precondition conjunct is false: search >= array.length
    //@ requires search >= array.length;
                        ^
3 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ requires search > array.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < array.length;
    //@ ensures \result <= array.length;
    //@ ensures \result == array.length;
    //@ ensures \result != array.length;
    //@ ensures \result >= array.length;
    //@ ensures \result > array.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < location;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result != location;
    //@ ensures \result >= location;
    //@ ensures \result > location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < search;
    //@ ensures \result <= search;
    //@ ensures \result == search;
    //@ ensures \result != search;
    //@ ensures \result >= search;
    //@ ensures \result > search;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures array != null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires location < array.length;
    //@ requires location <= array.length;
    //@ requires location == array.length;
    //@ requires location != array.length;
    //@ requires location >= array.length;
    //@ requires location > array.length;
    //@ requires 5 < array.length;
    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 != array.length;
    //@ requires 5 >= array.length;
    //@ requires 5 > array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 == array.length;
    //@ requires 3 != array.length;
    //@ requires 3 >= array.length;
    //@ requires 3 > array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 == array.length;
    //@ requires 2 != array.length;
    //@ requires 2 >= array.length;
    //@ requires 2 > array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 == array.length;
    //@ requires 1 != array.length;
    //@ requires 1 >= array.length;
    //@ requires 1 > array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 == array.length;
    //@ requires -1 != array.length;
    //@ requires -1 >= array.length;
    //@ requires -1 > array.length;
    //@ requires search < location;
    //@ requires search <= location;
    //@ requires search == location;
    //@ requires search != location;
    //@ requires search >= location;
    //@ requires search > location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search == 5;
    //@ requires search != 5;
    //@ requires search >= 5;
    //@ requires search > 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search == 3;
    //@ requires search != 3;
    //@ requires search >= 3;
    //@ requires search > 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c == array.length;
    //@ requires c != array.length;
    //@ requires c >= array.length;
    //@ requires c > array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:258: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:99:) in method main
        linearSearch(arr, -2);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:99: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:258:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:41: verify: Precondition conjunct is false: search > array.length
    //@ requires search > array.length;
                        ^
3 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < array.length;
    //@ ensures \result <= array.length;
    //@ ensures \result == array.length;
    //@ ensures \result != array.length;
    //@ ensures \result >= array.length;
    //@ ensures \result > array.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < location;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result != location;
    //@ ensures \result >= location;
    //@ ensures \result > location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < search;
    //@ ensures \result <= search;
    //@ ensures \result == search;
    //@ ensures \result != search;
    //@ ensures \result >= search;
    //@ ensures \result > search;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures array != null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires location < array.length;
    //@ requires location <= array.length;
    //@ requires location == array.length;
    //@ requires location != array.length;
    //@ requires location >= array.length;
    //@ requires location > array.length;
    //@ requires 5 < array.length;
    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 != array.length;
    //@ requires 5 >= array.length;
    //@ requires 5 > array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 == array.length;
    //@ requires 3 != array.length;
    //@ requires 3 >= array.length;
    //@ requires 3 > array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 == array.length;
    //@ requires 2 != array.length;
    //@ requires 2 >= array.length;
    //@ requires 2 > array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 == array.length;
    //@ requires 1 != array.length;
    //@ requires 1 >= array.length;
    //@ requires 1 > array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 == array.length;
    //@ requires -1 != array.length;
    //@ requires -1 >= array.length;
    //@ requires -1 > array.length;
    //@ requires search < location;
    //@ requires search <= location;
    //@ requires search == location;
    //@ requires search != location;
    //@ requires search >= location;
    //@ requires search > location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search == 5;
    //@ requires search != 5;
    //@ requires search >= 5;
    //@ requires search > 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search == 3;
    //@ requires search != 3;
    //@ requires search >= 3;
    //@ requires search > 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c == array.length;
    //@ requires c != array.length;
    //@ requires c >= array.length;
    //@ requires c > array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:111: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:41:) in method linearSearch
        return location;
        ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:41: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:111:
    //@ ensures \result < -1;
        ^
2 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < array.length;
    //@ ensures \result <= array.length;
    //@ ensures \result == array.length;
    //@ ensures \result != array.length;
    //@ ensures \result >= array.length;
    //@ ensures \result > array.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < location;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result != location;
    //@ ensures \result >= location;
    //@ ensures \result > location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < search;
    //@ ensures \result <= search;
    //@ ensures \result == search;
    //@ ensures \result != search;
    //@ ensures \result >= search;
    //@ ensures \result > search;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures array != null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires location < array.length;
    //@ requires location <= array.length;
    //@ requires location == array.length;
    //@ requires location != array.length;
    //@ requires location >= array.length;
    //@ requires location > array.length;
    //@ requires 5 < array.length;
    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 != array.length;
    //@ requires 5 >= array.length;
    //@ requires 5 > array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 == array.length;
    //@ requires 3 != array.length;
    //@ requires 3 >= array.length;
    //@ requires 3 > array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 == array.length;
    //@ requires 2 != array.length;
    //@ requires 2 >= array.length;
    //@ requires 2 > array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 == array.length;
    //@ requires 1 != array.length;
    //@ requires 1 >= array.length;
    //@ requires 1 > array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 == array.length;
    //@ requires -1 != array.length;
    //@ requires -1 >= array.length;
    //@ requires -1 > array.length;
    //@ requires search < location;
    //@ requires search <= location;
    //@ requires search == location;
    //@ requires search != location;
    //@ requires search >= location;
    //@ requires search > location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search == 5;
    //@ requires search != 5;
    //@ requires search >= 5;
    //@ requires search > 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search == 3;
    //@ requires search != 3;
    //@ requires search >= 3;
    //@ requires search > 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c == array.length;
    //@ requires c != array.length;
    //@ requires c >= array.length;
    //@ requires c > array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:110: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:43:) in method linearSearch
        return location;
        ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:43: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:110:
    //@ ensures \result != -1;
        ^
2 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < array.length;
    //@ ensures \result <= array.length;
    //@ ensures \result == array.length;
    //@ ensures \result != array.length;
    //@ ensures \result >= array.length;
    //@ ensures \result > array.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < location;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result != location;
    //@ ensures \result >= location;
    //@ ensures \result > location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < search;
    //@ ensures \result <= search;
    //@ ensures \result == search;
    //@ ensures \result != search;
    //@ ensures \result >= search;
    //@ ensures \result > search;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures array != null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires location < array.length;
    //@ requires location <= array.length;
    //@ requires location == array.length;
    //@ requires location != array.length;
    //@ requires location >= array.length;
    //@ requires location > array.length;
    //@ requires 5 < array.length;
    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 != array.length;
    //@ requires 5 >= array.length;
    //@ requires 5 > array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 == array.length;
    //@ requires 3 != array.length;
    //@ requires 3 >= array.length;
    //@ requires 3 > array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 == array.length;
    //@ requires 2 != array.length;
    //@ requires 2 >= array.length;
    //@ requires 2 > array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 == array.length;
    //@ requires 1 != array.length;
    //@ requires 1 >= array.length;
    //@ requires 1 > array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 == array.length;
    //@ requires -1 != array.length;
    //@ requires -1 >= array.length;
    //@ requires -1 > array.length;
    //@ requires search < location;
    //@ requires search <= location;
    //@ requires search == location;
    //@ requires search != location;
    //@ requires search >= location;
    //@ requires search > location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search == 5;
    //@ requires search != 5;
    //@ requires search >= 5;
    //@ requires search > 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search == 3;
    //@ requires search != 3;
    //@ requires search >= 3;
    //@ requires search > 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c == array.length;
    //@ requires c != array.length;
    //@ requires c >= array.length;
    //@ requires c > array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:109: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:44:) in method linearSearch
        return location;
        ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:44: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:109:
    //@ ensures \result > -1;
        ^
2 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ ensures \result < array.length;
    //@ ensures \result <= array.length;
    //@ ensures \result == array.length;
    //@ ensures \result != array.length;
    //@ ensures \result >= array.length;
    //@ ensures \result > array.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < location;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result != location;
    //@ ensures \result >= location;
    //@ ensures \result > location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < search;
    //@ ensures \result <= search;
    //@ ensures \result == search;
    //@ ensures \result != search;
    //@ ensures \result >= search;
    //@ ensures \result > search;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures array != null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires location < array.length;
    //@ requires location <= array.length;
    //@ requires location == array.length;
    //@ requires location != array.length;
    //@ requires location >= array.length;
    //@ requires location > array.length;
    //@ requires 5 < array.length;
    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 != array.length;
    //@ requires 5 >= array.length;
    //@ requires 5 > array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 == array.length;
    //@ requires 3 != array.length;
    //@ requires 3 >= array.length;
    //@ requires 3 > array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 == array.length;
    //@ requires 2 != array.length;
    //@ requires 2 >= array.length;
    //@ requires 2 > array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 == array.length;
    //@ requires 1 != array.length;
    //@ requires 1 >= array.length;
    //@ requires 1 > array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 == array.length;
    //@ requires -1 != array.length;
    //@ requires -1 >= array.length;
    //@ requires -1 > array.length;
    //@ requires search < location;
    //@ requires search <= location;
    //@ requires search == location;
    //@ requires search != location;
    //@ requires search >= location;
    //@ requires search > location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search == 5;
    //@ requires search != 5;
    //@ requires search >= 5;
    //@ requires search > 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search == 3;
    //@ requires search != 3;
    //@ requires search >= 3;
    //@ requires search > 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c == array.length;
    //@ requires c != array.length;
    //@ requires c >= array.length;
    //@ requires c > array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:99: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:249:) in method linearSearch
            __Loop_Invariant_Dummy1(array, search, c);
                                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:249: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:99:
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:113: verify: Precondition conjunct is false: location == array.length
    //@ requires location == array.length;
                          ^
3 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ ensures \result < array.length;
    //@ ensures \result <= array.length;
    //@ ensures \result == array.length;
    //@ ensures \result != array.length;
    //@ ensures \result >= array.length;
    //@ ensures \result > array.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < location;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result != location;
    //@ ensures \result >= location;
    //@ ensures \result > location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < search;
    //@ ensures \result <= search;
    //@ ensures \result == search;
    //@ ensures \result != search;
    //@ ensures \result >= search;
    //@ ensures \result > search;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures array != null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires location < array.length;
    //@ requires location <= array.length;
    //@ requires location != array.length;
    //@ requires location >= array.length;
    //@ requires location > array.length;
    //@ requires 5 < array.length;
    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 != array.length;
    //@ requires 5 >= array.length;
    //@ requires 5 > array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 == array.length;
    //@ requires 3 != array.length;
    //@ requires 3 >= array.length;
    //@ requires 3 > array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 == array.length;
    //@ requires 2 != array.length;
    //@ requires 2 >= array.length;
    //@ requires 2 > array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 == array.length;
    //@ requires 1 != array.length;
    //@ requires 1 >= array.length;
    //@ requires 1 > array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 == array.length;
    //@ requires -1 != array.length;
    //@ requires -1 >= array.length;
    //@ requires -1 > array.length;
    //@ requires search < location;
    //@ requires search <= location;
    //@ requires search == location;
    //@ requires search != location;
    //@ requires search >= location;
    //@ requires search > location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search == 5;
    //@ requires search != 5;
    //@ requires search >= 5;
    //@ requires search > 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search == 3;
    //@ requires search != 3;
    //@ requires search >= 3;
    //@ requires search > 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c == array.length;
    //@ requires c != array.length;
    //@ requires c >= array.length;
    //@ requires c > array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:108: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:42:) in method linearSearch
        return location;
        ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:42: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:108:
    //@ ensures \result == -1;
        ^
2 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= -1;
    //@ ensures \result >= -1;
    //@ ensures \result < array.length;
    //@ ensures \result <= array.length;
    //@ ensures \result == array.length;
    //@ ensures \result != array.length;
    //@ ensures \result >= array.length;
    //@ ensures \result > array.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < location;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result != location;
    //@ ensures \result >= location;
    //@ ensures \result > location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < search;
    //@ ensures \result <= search;
    //@ ensures \result == search;
    //@ ensures \result != search;
    //@ ensures \result >= search;
    //@ ensures \result > search;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures array != null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires location < array.length;
    //@ requires location <= array.length;
    //@ requires location != array.length;
    //@ requires location >= array.length;
    //@ requires location > array.length;
    //@ requires 5 < array.length;
    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 != array.length;
    //@ requires 5 >= array.length;
    //@ requires 5 > array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 == array.length;
    //@ requires 3 != array.length;
    //@ requires 3 >= array.length;
    //@ requires 3 > array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 == array.length;
    //@ requires 2 != array.length;
    //@ requires 2 >= array.length;
    //@ requires 2 > array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 == array.length;
    //@ requires 1 != array.length;
    //@ requires 1 >= array.length;
    //@ requires 1 > array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 == array.length;
    //@ requires -1 != array.length;
    //@ requires -1 >= array.length;
    //@ requires -1 > array.length;
    //@ requires search < location;
    //@ requires search <= location;
    //@ requires search == location;
    //@ requires search != location;
    //@ requires search >= location;
    //@ requires search > location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search == 5;
    //@ requires search != 5;
    //@ requires search >= 5;
    //@ requires search > 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search == 3;
    //@ requires search != 3;
    //@ requires search >= 3;
    //@ requires search > 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c == array.length;
    //@ requires c != array.length;
    //@ requires c >= array.length;
    //@ requires c > array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:98: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:247:) in method linearSearch
            __Loop_Invariant_Dummy1(array, search, c);
                                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:247: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:98:
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:113: verify: Precondition conjunct is false: location >= array.length
    //@ requires location >= array.length;
                          ^
3 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= -1;
    //@ ensures \result >= -1;
    //@ ensures \result < array.length;
    //@ ensures \result <= array.length;
    //@ ensures \result == array.length;
    //@ ensures \result != array.length;
    //@ ensures \result >= array.length;
    //@ ensures \result > array.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < location;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result != location;
    //@ ensures \result >= location;
    //@ ensures \result > location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < search;
    //@ ensures \result <= search;
    //@ ensures \result == search;
    //@ ensures \result != search;
    //@ ensures \result >= search;
    //@ ensures \result > search;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures array != null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires location < array.length;
    //@ requires location <= array.length;
    //@ requires location != array.length;
    //@ requires location > array.length;
    //@ requires 5 < array.length;
    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 != array.length;
    //@ requires 5 >= array.length;
    //@ requires 5 > array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 == array.length;
    //@ requires 3 != array.length;
    //@ requires 3 >= array.length;
    //@ requires 3 > array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 == array.length;
    //@ requires 2 != array.length;
    //@ requires 2 >= array.length;
    //@ requires 2 > array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 == array.length;
    //@ requires 1 != array.length;
    //@ requires 1 >= array.length;
    //@ requires 1 > array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 == array.length;
    //@ requires -1 != array.length;
    //@ requires -1 >= array.length;
    //@ requires -1 > array.length;
    //@ requires search < location;
    //@ requires search <= location;
    //@ requires search == location;
    //@ requires search != location;
    //@ requires search >= location;
    //@ requires search > location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search == 5;
    //@ requires search != 5;
    //@ requires search >= 5;
    //@ requires search > 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search == 3;
    //@ requires search != 3;
    //@ requires search >= 3;
    //@ requires search > 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c == array.length;
    //@ requires c != array.length;
    //@ requires c >= array.length;
    //@ requires c > array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:98: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:246:) in method linearSearch
            __Loop_Invariant_Dummy1(array, search, c);
                                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:246: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:98:
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:110: verify: Precondition conjunct is false: location < array.length
    //@ requires location < array.length;
                          ^
3 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= -1;
    //@ ensures \result >= -1;
    //@ ensures \result < array.length;
    //@ ensures \result <= array.length;
    //@ ensures \result == array.length;
    //@ ensures \result != array.length;
    //@ ensures \result >= array.length;
    //@ ensures \result > array.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < location;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result != location;
    //@ ensures \result >= location;
    //@ ensures \result > location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < search;
    //@ ensures \result <= search;
    //@ ensures \result == search;
    //@ ensures \result != search;
    //@ ensures \result >= search;
    //@ ensures \result > search;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures array != null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires location <= array.length;
    //@ requires location != array.length;
    //@ requires location > array.length;
    //@ requires 5 < array.length;
    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 != array.length;
    //@ requires 5 >= array.length;
    //@ requires 5 > array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 == array.length;
    //@ requires 3 != array.length;
    //@ requires 3 >= array.length;
    //@ requires 3 > array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 == array.length;
    //@ requires 2 != array.length;
    //@ requires 2 >= array.length;
    //@ requires 2 > array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 == array.length;
    //@ requires 1 != array.length;
    //@ requires 1 >= array.length;
    //@ requires 1 > array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 == array.length;
    //@ requires -1 != array.length;
    //@ requires -1 >= array.length;
    //@ requires -1 > array.length;
    //@ requires search < location;
    //@ requires search <= location;
    //@ requires search == location;
    //@ requires search != location;
    //@ requires search >= location;
    //@ requires search > location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search == 5;
    //@ requires search != 5;
    //@ requires search >= 5;
    //@ requires search > 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search == 3;
    //@ requires search != 3;
    //@ requires search >= 3;
    //@ requires search > 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c == array.length;
    //@ requires c != array.length;
    //@ requires c >= array.length;
    //@ requires c > array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:107: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:45:) in method linearSearch
        return location;
        ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:45: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:107:
    //@ ensures \result == array.length;
        ^
2 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= -1;
    //@ ensures \result >= -1;
    //@ ensures \result < array.length;
    //@ ensures \result <= array.length;
    //@ ensures \result != array.length;
    //@ ensures \result >= array.length;
    //@ ensures \result > array.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < location;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result != location;
    //@ ensures \result >= location;
    //@ ensures \result > location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < search;
    //@ ensures \result <= search;
    //@ ensures \result == search;
    //@ ensures \result != search;
    //@ ensures \result >= search;
    //@ ensures \result > search;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures array != null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires location <= array.length;
    //@ requires location != array.length;
    //@ requires location > array.length;
    //@ requires 5 < array.length;
    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 != array.length;
    //@ requires 5 >= array.length;
    //@ requires 5 > array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 == array.length;
    //@ requires 3 != array.length;
    //@ requires 3 >= array.length;
    //@ requires 3 > array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 == array.length;
    //@ requires 2 != array.length;
    //@ requires 2 >= array.length;
    //@ requires 2 > array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 == array.length;
    //@ requires 1 != array.length;
    //@ requires 1 >= array.length;
    //@ requires 1 > array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 == array.length;
    //@ requires -1 != array.length;
    //@ requires -1 >= array.length;
    //@ requires -1 > array.length;
    //@ requires search < location;
    //@ requires search <= location;
    //@ requires search == location;
    //@ requires search != location;
    //@ requires search >= location;
    //@ requires search > location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search == 5;
    //@ requires search != 5;
    //@ requires search >= 5;
    //@ requires search > 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search == 3;
    //@ requires search != 3;
    //@ requires search >= 3;
    //@ requires search > 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c == array.length;
    //@ requires c != array.length;
    //@ requires c >= array.length;
    //@ requires c > array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:97: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:244:) in method linearSearch
            __Loop_Invariant_Dummy1(array, search, c);
                                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:244: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:97:
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:110: verify: Precondition conjunct is false: location != array.length
    //@ requires location != array.length;
                          ^
3 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= -1;
    //@ ensures \result >= -1;
    //@ ensures \result < array.length;
    //@ ensures \result <= array.length;
    //@ ensures \result != array.length;
    //@ ensures \result >= array.length;
    //@ ensures \result > array.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < location;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result != location;
    //@ ensures \result >= location;
    //@ ensures \result > location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < search;
    //@ ensures \result <= search;
    //@ ensures \result == search;
    //@ ensures \result != search;
    //@ ensures \result >= search;
    //@ ensures \result > search;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures array != null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires location <= array.length;
    //@ requires location > array.length;
    //@ requires 5 < array.length;
    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 != array.length;
    //@ requires 5 >= array.length;
    //@ requires 5 > array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 == array.length;
    //@ requires 3 != array.length;
    //@ requires 3 >= array.length;
    //@ requires 3 > array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 == array.length;
    //@ requires 2 != array.length;
    //@ requires 2 >= array.length;
    //@ requires 2 > array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 == array.length;
    //@ requires 1 != array.length;
    //@ requires 1 >= array.length;
    //@ requires 1 > array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 == array.length;
    //@ requires -1 != array.length;
    //@ requires -1 >= array.length;
    //@ requires -1 > array.length;
    //@ requires search < location;
    //@ requires search <= location;
    //@ requires search == location;
    //@ requires search != location;
    //@ requires search >= location;
    //@ requires search > location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search == 5;
    //@ requires search != 5;
    //@ requires search >= 5;
    //@ requires search > 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search == 3;
    //@ requires search != 3;
    //@ requires search >= 3;
    //@ requires search > 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c == array.length;
    //@ requires c != array.length;
    //@ requires c >= array.length;
    //@ requires c > array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:106: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:46:) in method linearSearch
        return location;
        ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:46: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:106:
    //@ ensures \result >= array.length;
        ^
2 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= -1;
    //@ ensures \result >= -1;
    //@ ensures \result < array.length;
    //@ ensures \result <= array.length;
    //@ ensures \result != array.length;
    //@ ensures \result > array.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < location;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result != location;
    //@ ensures \result >= location;
    //@ ensures \result > location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < search;
    //@ ensures \result <= search;
    //@ ensures \result == search;
    //@ ensures \result != search;
    //@ ensures \result >= search;
    //@ ensures \result > search;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures array != null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires location <= array.length;
    //@ requires location > array.length;
    //@ requires 5 < array.length;
    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 != array.length;
    //@ requires 5 >= array.length;
    //@ requires 5 > array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 == array.length;
    //@ requires 3 != array.length;
    //@ requires 3 >= array.length;
    //@ requires 3 > array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 == array.length;
    //@ requires 2 != array.length;
    //@ requires 2 >= array.length;
    //@ requires 2 > array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 == array.length;
    //@ requires 1 != array.length;
    //@ requires 1 >= array.length;
    //@ requires 1 > array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 == array.length;
    //@ requires -1 != array.length;
    //@ requires -1 >= array.length;
    //@ requires -1 > array.length;
    //@ requires search < location;
    //@ requires search <= location;
    //@ requires search == location;
    //@ requires search != location;
    //@ requires search >= location;
    //@ requires search > location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search == 5;
    //@ requires search != 5;
    //@ requires search >= 5;
    //@ requires search > 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search == 3;
    //@ requires search != 3;
    //@ requires search >= 3;
    //@ requires search > 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c == array.length;
    //@ requires c != array.length;
    //@ requires c >= array.length;
    //@ requires c > array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:105: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:46:) in method linearSearch
        return location;
        ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:46: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:105:
    //@ ensures \result > array.length;
        ^
2 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= -1;
    //@ ensures \result >= -1;
    //@ ensures \result < array.length;
    //@ ensures \result <= array.length;
    //@ ensures \result != array.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < location;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result != location;
    //@ ensures \result >= location;
    //@ ensures \result > location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < search;
    //@ ensures \result <= search;
    //@ ensures \result == search;
    //@ ensures \result != search;
    //@ ensures \result >= search;
    //@ ensures \result > search;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures array != null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires location <= array.length;
    //@ requires location > array.length;
    //@ requires 5 < array.length;
    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 != array.length;
    //@ requires 5 >= array.length;
    //@ requires 5 > array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 == array.length;
    //@ requires 3 != array.length;
    //@ requires 3 >= array.length;
    //@ requires 3 > array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 == array.length;
    //@ requires 2 != array.length;
    //@ requires 2 >= array.length;
    //@ requires 2 > array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 == array.length;
    //@ requires 1 != array.length;
    //@ requires 1 >= array.length;
    //@ requires 1 > array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 == array.length;
    //@ requires -1 != array.length;
    //@ requires -1 >= array.length;
    //@ requires -1 > array.length;
    //@ requires search < location;
    //@ requires search <= location;
    //@ requires search == location;
    //@ requires search != location;
    //@ requires search >= location;
    //@ requires search > location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search == 5;
    //@ requires search != 5;
    //@ requires search >= 5;
    //@ requires search > 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search == 3;
    //@ requires search != 3;
    //@ requires search >= 3;
    //@ requires search > 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c == array.length;
    //@ requires c != array.length;
    //@ requires c >= array.length;
    //@ requires c > array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:104: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:48:) in method linearSearch
        return location;
        ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:48: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:104:
    //@ ensures \result == 5;
        ^
2 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= -1;
    //@ ensures \result >= -1;
    //@ ensures \result < array.length;
    //@ ensures \result <= array.length;
    //@ ensures \result != array.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < location;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result != location;
    //@ ensures \result >= location;
    //@ ensures \result > location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < search;
    //@ ensures \result <= search;
    //@ ensures \result == search;
    //@ ensures \result != search;
    //@ ensures \result >= search;
    //@ ensures \result > search;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures array != null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires location <= array.length;
    //@ requires location > array.length;
    //@ requires 5 < array.length;
    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 != array.length;
    //@ requires 5 >= array.length;
    //@ requires 5 > array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 == array.length;
    //@ requires 3 != array.length;
    //@ requires 3 >= array.length;
    //@ requires 3 > array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 == array.length;
    //@ requires 2 != array.length;
    //@ requires 2 >= array.length;
    //@ requires 2 > array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 == array.length;
    //@ requires 1 != array.length;
    //@ requires 1 >= array.length;
    //@ requires 1 > array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 == array.length;
    //@ requires -1 != array.length;
    //@ requires -1 >= array.length;
    //@ requires -1 > array.length;
    //@ requires search < location;
    //@ requires search <= location;
    //@ requires search == location;
    //@ requires search != location;
    //@ requires search >= location;
    //@ requires search > location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search == 5;
    //@ requires search != 5;
    //@ requires search >= 5;
    //@ requires search > 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search == 3;
    //@ requires search != 3;
    //@ requires search >= 3;
    //@ requires search > 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c == array.length;
    //@ requires c != array.length;
    //@ requires c >= array.length;
    //@ requires c > array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:94: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:240:) in method linearSearch
            __Loop_Invariant_Dummy1(array, search, c);
                                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:240: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:94:
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:107: verify: Precondition conjunct is false: location > array.length
    //@ requires location > array.length;
                          ^
3 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= -1;
    //@ ensures \result >= -1;
    //@ ensures \result < array.length;
    //@ ensures \result <= array.length;
    //@ ensures \result != array.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < location;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result != location;
    //@ ensures \result >= location;
    //@ ensures \result > location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < search;
    //@ ensures \result <= search;
    //@ ensures \result == search;
    //@ ensures \result != search;
    //@ ensures \result >= search;
    //@ ensures \result > search;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures array != null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires location <= array.length;
    //@ requires 5 < array.length;
    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 != array.length;
    //@ requires 5 >= array.length;
    //@ requires 5 > array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 == array.length;
    //@ requires 3 != array.length;
    //@ requires 3 >= array.length;
    //@ requires 3 > array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 == array.length;
    //@ requires 2 != array.length;
    //@ requires 2 >= array.length;
    //@ requires 2 > array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 == array.length;
    //@ requires 1 != array.length;
    //@ requires 1 >= array.length;
    //@ requires 1 > array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 == array.length;
    //@ requires -1 != array.length;
    //@ requires -1 >= array.length;
    //@ requires -1 > array.length;
    //@ requires search < location;
    //@ requires search <= location;
    //@ requires search == location;
    //@ requires search != location;
    //@ requires search >= location;
    //@ requires search > location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search == 5;
    //@ requires search != 5;
    //@ requires search >= 5;
    //@ requires search > 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search == 3;
    //@ requires search != 3;
    //@ requires search >= 3;
    //@ requires search > 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c == array.length;
    //@ requires c != array.length;
    //@ requires c >= array.length;
    //@ requires c > array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:103: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:49:) in method linearSearch
        return location;
        ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:49: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:103:
    //@ ensures \result >= 5;
        ^
2 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= -1;
    //@ ensures \result >= -1;
    //@ ensures \result < array.length;
    //@ ensures \result <= array.length;
    //@ ensures \result != array.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result != 5;
    //@ ensures \result > 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < location;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result != location;
    //@ ensures \result >= location;
    //@ ensures \result > location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < search;
    //@ ensures \result <= search;
    //@ ensures \result == search;
    //@ ensures \result != search;
    //@ ensures \result >= search;
    //@ ensures \result > search;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures array != null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires location <= array.length;
    //@ requires 5 < array.length;
    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 != array.length;
    //@ requires 5 >= array.length;
    //@ requires 5 > array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 == array.length;
    //@ requires 3 != array.length;
    //@ requires 3 >= array.length;
    //@ requires 3 > array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 == array.length;
    //@ requires 2 != array.length;
    //@ requires 2 >= array.length;
    //@ requires 2 > array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 == array.length;
    //@ requires 1 != array.length;
    //@ requires 1 >= array.length;
    //@ requires 1 > array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 == array.length;
    //@ requires -1 != array.length;
    //@ requires -1 >= array.length;
    //@ requires -1 > array.length;
    //@ requires search < location;
    //@ requires search <= location;
    //@ requires search == location;
    //@ requires search != location;
    //@ requires search >= location;
    //@ requires search > location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search == 5;
    //@ requires search != 5;
    //@ requires search >= 5;
    //@ requires search > 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search == 3;
    //@ requires search != 3;
    //@ requires search >= 3;
    //@ requires search > 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c == array.length;
    //@ requires c != array.length;
    //@ requires c >= array.length;
    //@ requires c > array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:102: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:42:) in method linearSearch
        return location;
        ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:42: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:102:
    //@ ensures \result >= -1;
        ^
2 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= -1;
    //@ ensures \result < array.length;
    //@ ensures \result <= array.length;
    //@ ensures \result != array.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result != 5;
    //@ ensures \result > 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < location;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result != location;
    //@ ensures \result >= location;
    //@ ensures \result > location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < search;
    //@ ensures \result <= search;
    //@ ensures \result == search;
    //@ ensures \result != search;
    //@ ensures \result >= search;
    //@ ensures \result > search;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures array != null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires location <= array.length;
    //@ requires 5 < array.length;
    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 != array.length;
    //@ requires 5 >= array.length;
    //@ requires 5 > array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 == array.length;
    //@ requires 3 != array.length;
    //@ requires 3 >= array.length;
    //@ requires 3 > array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 == array.length;
    //@ requires 2 != array.length;
    //@ requires 2 >= array.length;
    //@ requires 2 > array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 == array.length;
    //@ requires 1 != array.length;
    //@ requires 1 >= array.length;
    //@ requires 1 > array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 == array.length;
    //@ requires -1 != array.length;
    //@ requires -1 >= array.length;
    //@ requires -1 > array.length;
    //@ requires search < location;
    //@ requires search <= location;
    //@ requires search == location;
    //@ requires search != location;
    //@ requires search >= location;
    //@ requires search > location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search == 5;
    //@ requires search != 5;
    //@ requires search >= 5;
    //@ requires search > 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search == 3;
    //@ requires search != 3;
    //@ requires search >= 3;
    //@ requires search > 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c == array.length;
    //@ requires c != array.length;
    //@ requires c >= array.length;
    //@ requires c > array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:92: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:237:) in method linearSearch
            __Loop_Invariant_Dummy1(array, search, c);
                                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:237: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:92:
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:104: verify: Precondition conjunct is false: location <= array.length
    //@ requires location <= array.length;
                          ^
3 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= -1;
    //@ ensures \result < array.length;
    //@ ensures \result <= array.length;
    //@ ensures \result != array.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result != 5;
    //@ ensures \result > 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < location;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result != location;
    //@ ensures \result >= location;
    //@ ensures \result > location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < search;
    //@ ensures \result <= search;
    //@ ensures \result == search;
    //@ ensures \result != search;
    //@ ensures \result >= search;
    //@ ensures \result > search;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures array != null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 < array.length;
    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 != array.length;
    //@ requires 5 >= array.length;
    //@ requires 5 > array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 == array.length;
    //@ requires 3 != array.length;
    //@ requires 3 >= array.length;
    //@ requires 3 > array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 == array.length;
    //@ requires 2 != array.length;
    //@ requires 2 >= array.length;
    //@ requires 2 > array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 == array.length;
    //@ requires 1 != array.length;
    //@ requires 1 >= array.length;
    //@ requires 1 > array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 == array.length;
    //@ requires -1 != array.length;
    //@ requires -1 >= array.length;
    //@ requires -1 > array.length;
    //@ requires search < location;
    //@ requires search <= location;
    //@ requires search == location;
    //@ requires search != location;
    //@ requires search >= location;
    //@ requires search > location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search == 5;
    //@ requires search != 5;
    //@ requires search >= 5;
    //@ requires search > 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search == 3;
    //@ requires search != 3;
    //@ requires search >= 3;
    //@ requires search > 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c == array.length;
    //@ requires c != array.length;
    //@ requires c >= array.length;
    //@ requires c > array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:101: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:48:) in method linearSearch
        return location;
        ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:48: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:101:
    //@ ensures \result > 5;
        ^
2 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= -1;
    //@ ensures \result < array.length;
    //@ ensures \result <= array.length;
    //@ ensures \result != array.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result != 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < location;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result != location;
    //@ ensures \result >= location;
    //@ ensures \result > location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < search;
    //@ ensures \result <= search;
    //@ ensures \result == search;
    //@ ensures \result != search;
    //@ ensures \result >= search;
    //@ ensures \result > search;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures array != null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 < array.length;
    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 != array.length;
    //@ requires 5 >= array.length;
    //@ requires 5 > array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 == array.length;
    //@ requires 3 != array.length;
    //@ requires 3 >= array.length;
    //@ requires 3 > array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 == array.length;
    //@ requires 2 != array.length;
    //@ requires 2 >= array.length;
    //@ requires 2 > array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 == array.length;
    //@ requires 1 != array.length;
    //@ requires 1 >= array.length;
    //@ requires 1 > array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 == array.length;
    //@ requires -1 != array.length;
    //@ requires -1 >= array.length;
    //@ requires -1 > array.length;
    //@ requires search < location;
    //@ requires search <= location;
    //@ requires search == location;
    //@ requires search != location;
    //@ requires search >= location;
    //@ requires search > location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search == 5;
    //@ requires search != 5;
    //@ requires search >= 5;
    //@ requires search > 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search == 3;
    //@ requires search != 3;
    //@ requires search >= 3;
    //@ requires search > 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c == array.length;
    //@ requires c != array.length;
    //@ requires c >= array.length;
    //@ requires c > array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:91: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:235:) in method linearSearch
            __Loop_Invariant_Dummy1(array, search, c);
                                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:235: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:91:
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:103: verify: Precondition conjunct is false: 5 < array.length
    //@ requires 5 < array.length;
                   ^
3 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= -1;
    //@ ensures \result < array.length;
    //@ ensures \result <= array.length;
    //@ ensures \result != array.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result != 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < location;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result != location;
    //@ ensures \result >= location;
    //@ ensures \result > location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < search;
    //@ ensures \result <= search;
    //@ ensures \result == search;
    //@ ensures \result != search;
    //@ ensures \result >= search;
    //@ ensures \result > search;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures array != null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 != array.length;
    //@ requires 5 >= array.length;
    //@ requires 5 > array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 == array.length;
    //@ requires 3 != array.length;
    //@ requires 3 >= array.length;
    //@ requires 3 > array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 == array.length;
    //@ requires 2 != array.length;
    //@ requires 2 >= array.length;
    //@ requires 2 > array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 == array.length;
    //@ requires 1 != array.length;
    //@ requires 1 >= array.length;
    //@ requires 1 > array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 == array.length;
    //@ requires -1 != array.length;
    //@ requires -1 >= array.length;
    //@ requires -1 > array.length;
    //@ requires search < location;
    //@ requires search <= location;
    //@ requires search == location;
    //@ requires search != location;
    //@ requires search >= location;
    //@ requires search > location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search == 5;
    //@ requires search != 5;
    //@ requires search >= 5;
    //@ requires search > 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search == 3;
    //@ requires search != 3;
    //@ requires search >= 3;
    //@ requires search > 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c == array.length;
    //@ requires c != array.length;
    //@ requires c >= array.length;
    //@ requires c > array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:100: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:50:) in method linearSearch
        return location;
        ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:50: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:100:
    //@ ensures \result == 3;
        ^
2 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= -1;
    //@ ensures \result < array.length;
    //@ ensures \result <= array.length;
    //@ ensures \result != array.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result != 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < location;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result != location;
    //@ ensures \result >= location;
    //@ ensures \result > location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < search;
    //@ ensures \result <= search;
    //@ ensures \result == search;
    //@ ensures \result != search;
    //@ ensures \result >= search;
    //@ ensures \result > search;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures array != null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 != array.length;
    //@ requires 5 >= array.length;
    //@ requires 5 > array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 == array.length;
    //@ requires 3 != array.length;
    //@ requires 3 >= array.length;
    //@ requires 3 > array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 == array.length;
    //@ requires 2 != array.length;
    //@ requires 2 >= array.length;
    //@ requires 2 > array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 == array.length;
    //@ requires 1 != array.length;
    //@ requires 1 >= array.length;
    //@ requires 1 > array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 == array.length;
    //@ requires -1 != array.length;
    //@ requires -1 >= array.length;
    //@ requires -1 > array.length;
    //@ requires search < location;
    //@ requires search <= location;
    //@ requires search == location;
    //@ requires search != location;
    //@ requires search >= location;
    //@ requires search > location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search == 5;
    //@ requires search != 5;
    //@ requires search >= 5;
    //@ requires search > 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search == 3;
    //@ requires search != 3;
    //@ requires search >= 3;
    //@ requires search > 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c == array.length;
    //@ requires c != array.length;
    //@ requires c >= array.length;
    //@ requires c > array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:90: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:233:) in method linearSearch
            __Loop_Invariant_Dummy1(array, search, c);
                                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:233: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:90:
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:104: verify: Precondition conjunct is false: 5 != array.length
    //@ requires 5 != array.length;
                   ^
3 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= -1;
    //@ ensures \result < array.length;
    //@ ensures \result <= array.length;
    //@ ensures \result != array.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result != 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < location;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result != location;
    //@ ensures \result >= location;
    //@ ensures \result > location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < search;
    //@ ensures \result <= search;
    //@ ensures \result == search;
    //@ ensures \result != search;
    //@ ensures \result >= search;
    //@ ensures \result > search;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures array != null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 5 > array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 == array.length;
    //@ requires 3 != array.length;
    //@ requires 3 >= array.length;
    //@ requires 3 > array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 == array.length;
    //@ requires 2 != array.length;
    //@ requires 2 >= array.length;
    //@ requires 2 > array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 == array.length;
    //@ requires 1 != array.length;
    //@ requires 1 >= array.length;
    //@ requires 1 > array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 == array.length;
    //@ requires -1 != array.length;
    //@ requires -1 >= array.length;
    //@ requires -1 > array.length;
    //@ requires search < location;
    //@ requires search <= location;
    //@ requires search == location;
    //@ requires search != location;
    //@ requires search >= location;
    //@ requires search > location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search == 5;
    //@ requires search != 5;
    //@ requires search >= 5;
    //@ requires search > 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search == 3;
    //@ requires search != 3;
    //@ requires search >= 3;
    //@ requires search > 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c == array.length;
    //@ requires c != array.length;
    //@ requires c >= array.length;
    //@ requires c > array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:99: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:51:) in method linearSearch
        return location;
        ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:51: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:99:
    //@ ensures \result >= 3;
        ^
2 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= -1;
    //@ ensures \result < array.length;
    //@ ensures \result <= array.length;
    //@ ensures \result != array.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result != 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result != 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < location;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result != location;
    //@ ensures \result >= location;
    //@ ensures \result > location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < search;
    //@ ensures \result <= search;
    //@ ensures \result == search;
    //@ ensures \result != search;
    //@ ensures \result >= search;
    //@ ensures \result > search;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures array != null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 5 > array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 == array.length;
    //@ requires 3 != array.length;
    //@ requires 3 >= array.length;
    //@ requires 3 > array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 == array.length;
    //@ requires 2 != array.length;
    //@ requires 2 >= array.length;
    //@ requires 2 > array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 == array.length;
    //@ requires 1 != array.length;
    //@ requires 1 >= array.length;
    //@ requires 1 > array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 == array.length;
    //@ requires -1 != array.length;
    //@ requires -1 >= array.length;
    //@ requires -1 > array.length;
    //@ requires search < location;
    //@ requires search <= location;
    //@ requires search == location;
    //@ requires search != location;
    //@ requires search >= location;
    //@ requires search > location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search == 5;
    //@ requires search != 5;
    //@ requires search >= 5;
    //@ requires search > 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search == 3;
    //@ requires search != 3;
    //@ requires search >= 3;
    //@ requires search > 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c == array.length;
    //@ requires c != array.length;
    //@ requires c >= array.length;
    //@ requires c > array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:98: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:51:) in method linearSearch
        return location;
        ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:51: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:98:
    //@ ensures \result > 3;
        ^
2 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= -1;
    //@ ensures \result < array.length;
    //@ ensures \result <= array.length;
    //@ ensures \result != array.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result != 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result != 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < location;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result != location;
    //@ ensures \result >= location;
    //@ ensures \result > location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < search;
    //@ ensures \result <= search;
    //@ ensures \result == search;
    //@ ensures \result != search;
    //@ ensures \result >= search;
    //@ ensures \result > search;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures array != null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 5 > array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 == array.length;
    //@ requires 3 != array.length;
    //@ requires 3 >= array.length;
    //@ requires 3 > array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 == array.length;
    //@ requires 2 != array.length;
    //@ requires 2 >= array.length;
    //@ requires 2 > array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 == array.length;
    //@ requires 1 != array.length;
    //@ requires 1 >= array.length;
    //@ requires 1 > array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 == array.length;
    //@ requires -1 != array.length;
    //@ requires -1 >= array.length;
    //@ requires -1 > array.length;
    //@ requires search < location;
    //@ requires search <= location;
    //@ requires search == location;
    //@ requires search != location;
    //@ requires search >= location;
    //@ requires search > location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search == 5;
    //@ requires search != 5;
    //@ requires search >= 5;
    //@ requires search > 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search == 3;
    //@ requires search != 3;
    //@ requires search >= 3;
    //@ requires search > 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c == array.length;
    //@ requires c != array.length;
    //@ requires c >= array.length;
    //@ requires c > array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:88: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:230:) in method linearSearch
            __Loop_Invariant_Dummy1(array, search, c);
                                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:230: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:88:
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:103: verify: Precondition conjunct is false: 5 > array.length
    //@ requires 5 > array.length;
                   ^
3 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= -1;
    //@ ensures \result < array.length;
    //@ ensures \result <= array.length;
    //@ ensures \result != array.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result != 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result != 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < location;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result != location;
    //@ ensures \result >= location;
    //@ ensures \result > location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < search;
    //@ ensures \result <= search;
    //@ ensures \result == search;
    //@ ensures \result != search;
    //@ ensures \result >= search;
    //@ ensures \result > search;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures array != null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 == array.length;
    //@ requires 3 != array.length;
    //@ requires 3 >= array.length;
    //@ requires 3 > array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 == array.length;
    //@ requires 2 != array.length;
    //@ requires 2 >= array.length;
    //@ requires 2 > array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 == array.length;
    //@ requires 1 != array.length;
    //@ requires 1 >= array.length;
    //@ requires 1 > array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 == array.length;
    //@ requires -1 != array.length;
    //@ requires -1 >= array.length;
    //@ requires -1 > array.length;
    //@ requires search < location;
    //@ requires search <= location;
    //@ requires search == location;
    //@ requires search != location;
    //@ requires search >= location;
    //@ requires search > location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search == 5;
    //@ requires search != 5;
    //@ requires search >= 5;
    //@ requires search > 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search == 3;
    //@ requires search != 3;
    //@ requires search >= 3;
    //@ requires search > 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c == array.length;
    //@ requires c != array.length;
    //@ requires c >= array.length;
    //@ requires c > array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:97: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:53:) in method linearSearch
        return location;
        ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:53: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:97:
    //@ ensures \result == 2;
        ^
2 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= -1;
    //@ ensures \result < array.length;
    //@ ensures \result <= array.length;
    //@ ensures \result != array.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result != 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result != 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < location;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result != location;
    //@ ensures \result >= location;
    //@ ensures \result > location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < search;
    //@ ensures \result <= search;
    //@ ensures \result == search;
    //@ ensures \result != search;
    //@ ensures \result >= search;
    //@ ensures \result > search;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures array != null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 == array.length;
    //@ requires 3 != array.length;
    //@ requires 3 >= array.length;
    //@ requires 3 > array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 == array.length;
    //@ requires 2 != array.length;
    //@ requires 2 >= array.length;
    //@ requires 2 > array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 == array.length;
    //@ requires 1 != array.length;
    //@ requires 1 >= array.length;
    //@ requires 1 > array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 == array.length;
    //@ requires -1 != array.length;
    //@ requires -1 >= array.length;
    //@ requires -1 > array.length;
    //@ requires search < location;
    //@ requires search <= location;
    //@ requires search == location;
    //@ requires search != location;
    //@ requires search >= location;
    //@ requires search > location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search == 5;
    //@ requires search != 5;
    //@ requires search >= 5;
    //@ requires search > 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search == 3;
    //@ requires search != 3;
    //@ requires search >= 3;
    //@ requires search > 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c == array.length;
    //@ requires c != array.length;
    //@ requires c >= array.length;
    //@ requires c > array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:87: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:228:) in method linearSearch
            __Loop_Invariant_Dummy1(array, search, c);
                                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:228: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:87:
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:104: verify: Precondition conjunct is false: 3 == array.length
    //@ requires 3 == array.length;
                   ^
3 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= -1;
    //@ ensures \result < array.length;
    //@ ensures \result <= array.length;
    //@ ensures \result != array.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result != 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result != 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < location;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result != location;
    //@ ensures \result >= location;
    //@ ensures \result > location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < search;
    //@ ensures \result <= search;
    //@ ensures \result == search;
    //@ ensures \result != search;
    //@ ensures \result >= search;
    //@ ensures \result > search;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures array != null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 3 >= array.length;
    //@ requires 3 > array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 == array.length;
    //@ requires 2 != array.length;
    //@ requires 2 >= array.length;
    //@ requires 2 > array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 == array.length;
    //@ requires 1 != array.length;
    //@ requires 1 >= array.length;
    //@ requires 1 > array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 == array.length;
    //@ requires -1 != array.length;
    //@ requires -1 >= array.length;
    //@ requires -1 > array.length;
    //@ requires search < location;
    //@ requires search <= location;
    //@ requires search == location;
    //@ requires search != location;
    //@ requires search >= location;
    //@ requires search > location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search == 5;
    //@ requires search != 5;
    //@ requires search >= 5;
    //@ requires search > 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search == 3;
    //@ requires search != 3;
    //@ requires search >= 3;
    //@ requires search > 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c == array.length;
    //@ requires c != array.length;
    //@ requires c >= array.length;
    //@ requires c > array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:96: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:54:) in method linearSearch
        return location;
        ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:54: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:96:
    //@ ensures \result >= 2;
        ^
2 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= -1;
    //@ ensures \result < array.length;
    //@ ensures \result <= array.length;
    //@ ensures \result != array.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result != 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result != 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result != 2;
    //@ ensures \result > 2;
    //@ ensures \result < location;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result != location;
    //@ ensures \result >= location;
    //@ ensures \result > location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < search;
    //@ ensures \result <= search;
    //@ ensures \result == search;
    //@ ensures \result != search;
    //@ ensures \result >= search;
    //@ ensures \result > search;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures array != null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 3 >= array.length;
    //@ requires 3 > array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 == array.length;
    //@ requires 2 != array.length;
    //@ requires 2 >= array.length;
    //@ requires 2 > array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 == array.length;
    //@ requires 1 != array.length;
    //@ requires 1 >= array.length;
    //@ requires 1 > array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 == array.length;
    //@ requires -1 != array.length;
    //@ requires -1 >= array.length;
    //@ requires -1 > array.length;
    //@ requires search < location;
    //@ requires search <= location;
    //@ requires search == location;
    //@ requires search != location;
    //@ requires search >= location;
    //@ requires search > location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search == 5;
    //@ requires search != 5;
    //@ requires search >= 5;
    //@ requires search > 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search == 3;
    //@ requires search != 3;
    //@ requires search >= 3;
    //@ requires search > 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c == array.length;
    //@ requires c != array.length;
    //@ requires c >= array.length;
    //@ requires c > array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:95: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:54:) in method linearSearch
        return location;
        ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:54: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:95:
    //@ ensures \result > 2;
        ^
2 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= -1;
    //@ ensures \result < array.length;
    //@ ensures \result <= array.length;
    //@ ensures \result != array.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result != 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result != 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result != 2;
    //@ ensures \result < location;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result != location;
    //@ ensures \result >= location;
    //@ ensures \result > location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < search;
    //@ ensures \result <= search;
    //@ ensures \result == search;
    //@ ensures \result != search;
    //@ ensures \result >= search;
    //@ ensures \result > search;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures array != null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 3 >= array.length;
    //@ requires 3 > array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 == array.length;
    //@ requires 2 != array.length;
    //@ requires 2 >= array.length;
    //@ requires 2 > array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 == array.length;
    //@ requires 1 != array.length;
    //@ requires 1 >= array.length;
    //@ requires 1 > array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 == array.length;
    //@ requires -1 != array.length;
    //@ requires -1 >= array.length;
    //@ requires -1 > array.length;
    //@ requires search < location;
    //@ requires search <= location;
    //@ requires search == location;
    //@ requires search != location;
    //@ requires search >= location;
    //@ requires search > location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search == 5;
    //@ requires search != 5;
    //@ requires search >= 5;
    //@ requires search > 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search == 3;
    //@ requires search != 3;
    //@ requires search >= 3;
    //@ requires search > 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c == array.length;
    //@ requires c != array.length;
    //@ requires c >= array.length;
    //@ requires c > array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:94: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:54:) in method linearSearch
        return location;
        ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:54: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:94:
    //@ ensures \result < location;
        ^
2 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= -1;
    //@ ensures \result < array.length;
    //@ ensures \result <= array.length;
    //@ ensures \result != array.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result != 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result != 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result != 2;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result != location;
    //@ ensures \result >= location;
    //@ ensures \result > location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < search;
    //@ ensures \result <= search;
    //@ ensures \result == search;
    //@ ensures \result != search;
    //@ ensures \result >= search;
    //@ ensures \result > search;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures array != null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 3 >= array.length;
    //@ requires 3 > array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 == array.length;
    //@ requires 2 != array.length;
    //@ requires 2 >= array.length;
    //@ requires 2 > array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 == array.length;
    //@ requires 1 != array.length;
    //@ requires 1 >= array.length;
    //@ requires 1 > array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 == array.length;
    //@ requires -1 != array.length;
    //@ requires -1 >= array.length;
    //@ requires -1 > array.length;
    //@ requires search < location;
    //@ requires search <= location;
    //@ requires search == location;
    //@ requires search != location;
    //@ requires search >= location;
    //@ requires search > location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search == 5;
    //@ requires search != 5;
    //@ requires search >= 5;
    //@ requires search > 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search == 3;
    //@ requires search != 3;
    //@ requires search >= 3;
    //@ requires search > 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c == array.length;
    //@ requires c != array.length;
    //@ requires c >= array.length;
    //@ requires c > array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:84: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:224:) in method linearSearch
            __Loop_Invariant_Dummy1(array, search, c);
                                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:224: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:84:
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:102: verify: Precondition conjunct is false: 3 >= array.length
    //@ requires 3 >= array.length;
                   ^
3 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= -1;
    //@ ensures \result < array.length;
    //@ ensures \result <= array.length;
    //@ ensures \result != array.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result != 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result != 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result != 2;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result != location;
    //@ ensures \result >= location;
    //@ ensures \result > location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < search;
    //@ ensures \result <= search;
    //@ ensures \result == search;
    //@ ensures \result != search;
    //@ ensures \result >= search;
    //@ ensures \result > search;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures array != null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 3 > array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 == array.length;
    //@ requires 2 != array.length;
    //@ requires 2 >= array.length;
    //@ requires 2 > array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 == array.length;
    //@ requires 1 != array.length;
    //@ requires 1 >= array.length;
    //@ requires 1 > array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 == array.length;
    //@ requires -1 != array.length;
    //@ requires -1 >= array.length;
    //@ requires -1 > array.length;
    //@ requires search < location;
    //@ requires search <= location;
    //@ requires search == location;
    //@ requires search != location;
    //@ requires search >= location;
    //@ requires search > location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search == 5;
    //@ requires search != 5;
    //@ requires search >= 5;
    //@ requires search > 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search == 3;
    //@ requires search != 3;
    //@ requires search >= 3;
    //@ requires search > 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c == array.length;
    //@ requires c != array.length;
    //@ requires c >= array.length;
    //@ requires c > array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:84: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:223:) in method linearSearch
            __Loop_Invariant_Dummy1(array, search, c);
                                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:223: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:84:
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:102: verify: Precondition conjunct is false: 3 > array.length
    //@ requires 3 > array.length;
                   ^
3 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= -1;
    //@ ensures \result < array.length;
    //@ ensures \result <= array.length;
    //@ ensures \result != array.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result != 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result != 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result != 2;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result != location;
    //@ ensures \result >= location;
    //@ ensures \result > location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < search;
    //@ ensures \result <= search;
    //@ ensures \result == search;
    //@ ensures \result != search;
    //@ ensures \result >= search;
    //@ ensures \result > search;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures array != null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 == array.length;
    //@ requires 2 != array.length;
    //@ requires 2 >= array.length;
    //@ requires 2 > array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 == array.length;
    //@ requires 1 != array.length;
    //@ requires 1 >= array.length;
    //@ requires 1 > array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 == array.length;
    //@ requires -1 != array.length;
    //@ requires -1 >= array.length;
    //@ requires -1 > array.length;
    //@ requires search < location;
    //@ requires search <= location;
    //@ requires search == location;
    //@ requires search != location;
    //@ requires search >= location;
    //@ requires search > location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search == 5;
    //@ requires search != 5;
    //@ requires search >= 5;
    //@ requires search > 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search == 3;
    //@ requires search != 3;
    //@ requires search >= 3;
    //@ requires search > 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c == array.length;
    //@ requires c != array.length;
    //@ requires c >= array.length;
    //@ requires c > array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:84: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:222:) in method linearSearch
            __Loop_Invariant_Dummy1(array, search, c);
                                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:222: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:84:
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:104: verify: Precondition conjunct is false: 2 == array.length
    //@ requires 2 == array.length;
                   ^
3 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= -1;
    //@ ensures \result < array.length;
    //@ ensures \result <= array.length;
    //@ ensures \result != array.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result != 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result != 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result != 2;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result != location;
    //@ ensures \result >= location;
    //@ ensures \result > location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < search;
    //@ ensures \result <= search;
    //@ ensures \result == search;
    //@ ensures \result != search;
    //@ ensures \result >= search;
    //@ ensures \result > search;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures array != null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 2 >= array.length;
    //@ requires 2 > array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 == array.length;
    //@ requires 1 != array.length;
    //@ requires 1 >= array.length;
    //@ requires 1 > array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 == array.length;
    //@ requires -1 != array.length;
    //@ requires -1 >= array.length;
    //@ requires -1 > array.length;
    //@ requires search < location;
    //@ requires search <= location;
    //@ requires search == location;
    //@ requires search != location;
    //@ requires search >= location;
    //@ requires search > location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search == 5;
    //@ requires search != 5;
    //@ requires search >= 5;
    //@ requires search > 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search == 3;
    //@ requires search != 3;
    //@ requires search >= 3;
    //@ requires search > 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c == array.length;
    //@ requires c != array.length;
    //@ requires c >= array.length;
    //@ requires c > array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:93: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:56:) in method linearSearch
        return location;
        ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:56: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:93:
    //@ ensures \result != location;
        ^
2 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= -1;
    //@ ensures \result < array.length;
    //@ ensures \result <= array.length;
    //@ ensures \result != array.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result != 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result != 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result != 2;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures \result > location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < search;
    //@ ensures \result <= search;
    //@ ensures \result == search;
    //@ ensures \result != search;
    //@ ensures \result >= search;
    //@ ensures \result > search;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures array != null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 2 >= array.length;
    //@ requires 2 > array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 == array.length;
    //@ requires 1 != array.length;
    //@ requires 1 >= array.length;
    //@ requires 1 > array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 == array.length;
    //@ requires -1 != array.length;
    //@ requires -1 >= array.length;
    //@ requires -1 > array.length;
    //@ requires search < location;
    //@ requires search <= location;
    //@ requires search == location;
    //@ requires search != location;
    //@ requires search >= location;
    //@ requires search > location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search == 5;
    //@ requires search != 5;
    //@ requires search >= 5;
    //@ requires search > 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search == 3;
    //@ requires search != 3;
    //@ requires search >= 3;
    //@ requires search > 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c == array.length;
    //@ requires c != array.length;
    //@ requires c >= array.length;
    //@ requires c > array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:92: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:57:) in method linearSearch
        return location;
        ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:57: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:92:
    //@ ensures \result > location;
        ^
2 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= -1;
    //@ ensures \result < array.length;
    //@ ensures \result <= array.length;
    //@ ensures \result != array.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result != 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result != 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result != 2;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < search;
    //@ ensures \result <= search;
    //@ ensures \result == search;
    //@ ensures \result != search;
    //@ ensures \result >= search;
    //@ ensures \result > search;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures array != null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 2 >= array.length;
    //@ requires 2 > array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 == array.length;
    //@ requires 1 != array.length;
    //@ requires 1 >= array.length;
    //@ requires 1 > array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 == array.length;
    //@ requires -1 != array.length;
    //@ requires -1 >= array.length;
    //@ requires -1 > array.length;
    //@ requires search < location;
    //@ requires search <= location;
    //@ requires search == location;
    //@ requires search != location;
    //@ requires search >= location;
    //@ requires search > location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search == 5;
    //@ requires search != 5;
    //@ requires search >= 5;
    //@ requires search > 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search == 3;
    //@ requires search != 3;
    //@ requires search >= 3;
    //@ requires search > 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c == array.length;
    //@ requires c != array.length;
    //@ requires c >= array.length;
    //@ requires c > array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:91: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:59:) in method linearSearch
        return location;
        ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:59: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:91:
    //@ ensures \result == 1;
        ^
2 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= -1;
    //@ ensures \result < array.length;
    //@ ensures \result <= array.length;
    //@ ensures \result != array.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result != 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result != 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result != 2;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < search;
    //@ ensures \result <= search;
    //@ ensures \result == search;
    //@ ensures \result != search;
    //@ ensures \result >= search;
    //@ ensures \result > search;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures array != null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 2 >= array.length;
    //@ requires 2 > array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 == array.length;
    //@ requires 1 != array.length;
    //@ requires 1 >= array.length;
    //@ requires 1 > array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 == array.length;
    //@ requires -1 != array.length;
    //@ requires -1 >= array.length;
    //@ requires -1 > array.length;
    //@ requires search < location;
    //@ requires search <= location;
    //@ requires search == location;
    //@ requires search != location;
    //@ requires search >= location;
    //@ requires search > location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search == 5;
    //@ requires search != 5;
    //@ requires search >= 5;
    //@ requires search > 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search == 3;
    //@ requires search != 3;
    //@ requires search >= 3;
    //@ requires search > 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c == array.length;
    //@ requires c != array.length;
    //@ requires c >= array.length;
    //@ requires c > array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:90: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:60:) in method linearSearch
        return location;
        ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:60: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:90:
    //@ ensures \result >= 1;
        ^
2 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= -1;
    //@ ensures \result < array.length;
    //@ ensures \result <= array.length;
    //@ ensures \result != array.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result != 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result != 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result != 2;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < search;
    //@ ensures \result <= search;
    //@ ensures \result == search;
    //@ ensures \result != search;
    //@ ensures \result >= search;
    //@ ensures \result > search;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures array != null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 2 >= array.length;
    //@ requires 2 > array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 == array.length;
    //@ requires 1 != array.length;
    //@ requires 1 >= array.length;
    //@ requires 1 > array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 == array.length;
    //@ requires -1 != array.length;
    //@ requires -1 >= array.length;
    //@ requires -1 > array.length;
    //@ requires search < location;
    //@ requires search <= location;
    //@ requires search == location;
    //@ requires search != location;
    //@ requires search >= location;
    //@ requires search > location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search == 5;
    //@ requires search != 5;
    //@ requires search >= 5;
    //@ requires search > 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search == 3;
    //@ requires search != 3;
    //@ requires search >= 3;
    //@ requires search > 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c == array.length;
    //@ requires c != array.length;
    //@ requires c >= array.length;
    //@ requires c > array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:80: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:217:) in method linearSearch
            __Loop_Invariant_Dummy1(array, search, c);
                                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:217: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:80:
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:101: verify: Precondition conjunct is false: 2 >= array.length
    //@ requires 2 >= array.length;
                   ^
3 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= -1;
    //@ ensures \result < array.length;
    //@ ensures \result <= array.length;
    //@ ensures \result != array.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result != 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result != 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result != 2;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < search;
    //@ ensures \result <= search;
    //@ ensures \result == search;
    //@ ensures \result != search;
    //@ ensures \result >= search;
    //@ ensures \result > search;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures array != null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 2 > array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 == array.length;
    //@ requires 1 != array.length;
    //@ requires 1 >= array.length;
    //@ requires 1 > array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 == array.length;
    //@ requires -1 != array.length;
    //@ requires -1 >= array.length;
    //@ requires -1 > array.length;
    //@ requires search < location;
    //@ requires search <= location;
    //@ requires search == location;
    //@ requires search != location;
    //@ requires search >= location;
    //@ requires search > location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search == 5;
    //@ requires search != 5;
    //@ requires search >= 5;
    //@ requires search > 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search == 3;
    //@ requires search != 3;
    //@ requires search >= 3;
    //@ requires search > 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c == array.length;
    //@ requires c != array.length;
    //@ requires c >= array.length;
    //@ requires c > array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:89: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:60:) in method linearSearch
        return location;
        ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:60: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:89:
    //@ ensures \result > 1;
        ^
2 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= -1;
    //@ ensures \result < array.length;
    //@ ensures \result <= array.length;
    //@ ensures \result != array.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result != 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result != 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result != 2;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < search;
    //@ ensures \result <= search;
    //@ ensures \result == search;
    //@ ensures \result != search;
    //@ ensures \result >= search;
    //@ ensures \result > search;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures array != null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 2 > array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 == array.length;
    //@ requires 1 != array.length;
    //@ requires 1 >= array.length;
    //@ requires 1 > array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 == array.length;
    //@ requires -1 != array.length;
    //@ requires -1 >= array.length;
    //@ requires -1 > array.length;
    //@ requires search < location;
    //@ requires search <= location;
    //@ requires search == location;
    //@ requires search != location;
    //@ requires search >= location;
    //@ requires search > location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search == 5;
    //@ requires search != 5;
    //@ requires search >= 5;
    //@ requires search > 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search == 3;
    //@ requires search != 3;
    //@ requires search >= 3;
    //@ requires search > 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c == array.length;
    //@ requires c != array.length;
    //@ requires c >= array.length;
    //@ requires c > array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:79: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:215:) in method linearSearch
            __Loop_Invariant_Dummy1(array, search, c);
                                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:215: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:79:
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:100: verify: Precondition conjunct is false: 2 > array.length
    //@ requires 2 > array.length;
                   ^
3 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= -1;
    //@ ensures \result < array.length;
    //@ ensures \result <= array.length;
    //@ ensures \result != array.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result != 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result != 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result != 2;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < search;
    //@ ensures \result <= search;
    //@ ensures \result == search;
    //@ ensures \result != search;
    //@ ensures \result >= search;
    //@ ensures \result > search;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures array != null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 == array.length;
    //@ requires 1 != array.length;
    //@ requires 1 >= array.length;
    //@ requires 1 > array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 == array.length;
    //@ requires -1 != array.length;
    //@ requires -1 >= array.length;
    //@ requires -1 > array.length;
    //@ requires search < location;
    //@ requires search <= location;
    //@ requires search == location;
    //@ requires search != location;
    //@ requires search >= location;
    //@ requires search > location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search == 5;
    //@ requires search != 5;
    //@ requires search >= 5;
    //@ requires search > 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search == 3;
    //@ requires search != 3;
    //@ requires search >= 3;
    //@ requires search > 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c == array.length;
    //@ requires c != array.length;
    //@ requires c >= array.length;
    //@ requires c > array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:88: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:62:) in method linearSearch
        return location;
        ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:62: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:88:
    //@ ensures \result == 0;
        ^
2 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= -1;
    //@ ensures \result < array.length;
    //@ ensures \result <= array.length;
    //@ ensures \result != array.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result != 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result != 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result != 2;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < search;
    //@ ensures \result <= search;
    //@ ensures \result == search;
    //@ ensures \result != search;
    //@ ensures \result >= search;
    //@ ensures \result > search;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures array != null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 == array.length;
    //@ requires 1 != array.length;
    //@ requires 1 >= array.length;
    //@ requires 1 > array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 == array.length;
    //@ requires -1 != array.length;
    //@ requires -1 >= array.length;
    //@ requires -1 > array.length;
    //@ requires search < location;
    //@ requires search <= location;
    //@ requires search == location;
    //@ requires search != location;
    //@ requires search >= location;
    //@ requires search > location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search == 5;
    //@ requires search != 5;
    //@ requires search >= 5;
    //@ requires search > 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search == 3;
    //@ requires search != 3;
    //@ requires search >= 3;
    //@ requires search > 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c == array.length;
    //@ requires c != array.length;
    //@ requires c >= array.length;
    //@ requires c > array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:78: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:213:) in method linearSearch
            __Loop_Invariant_Dummy1(array, search, c);
                                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:213: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:78:
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:101: verify: Precondition conjunct is false: 1 == array.length
    //@ requires 1 == array.length;
                   ^
3 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= -1;
    //@ ensures \result < array.length;
    //@ ensures \result <= array.length;
    //@ ensures \result != array.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result != 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result != 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result != 2;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < search;
    //@ ensures \result <= search;
    //@ ensures \result == search;
    //@ ensures \result != search;
    //@ ensures \result >= search;
    //@ ensures \result > search;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures array != null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires 1 >= array.length;
    //@ requires 1 > array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 == array.length;
    //@ requires -1 != array.length;
    //@ requires -1 >= array.length;
    //@ requires -1 > array.length;
    //@ requires search < location;
    //@ requires search <= location;
    //@ requires search == location;
    //@ requires search != location;
    //@ requires search >= location;
    //@ requires search > location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search == 5;
    //@ requires search != 5;
    //@ requires search >= 5;
    //@ requires search > 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search == 3;
    //@ requires search != 3;
    //@ requires search >= 3;
    //@ requires search > 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c == array.length;
    //@ requires c != array.length;
    //@ requires c >= array.length;
    //@ requires c > array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:78: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:212:) in method linearSearch
            __Loop_Invariant_Dummy1(array, search, c);
                                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:212: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:78:
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:102: verify: Precondition conjunct is false: 1 >= array.length
    //@ requires 1 >= array.length;
                   ^
3 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= -1;
    //@ ensures \result < array.length;
    //@ ensures \result <= array.length;
    //@ ensures \result != array.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result != 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result != 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result != 2;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < search;
    //@ ensures \result <= search;
    //@ ensures \result == search;
    //@ ensures \result != search;
    //@ ensures \result >= search;
    //@ ensures \result > search;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures array != null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires 1 > array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 == array.length;
    //@ requires -1 != array.length;
    //@ requires -1 >= array.length;
    //@ requires -1 > array.length;
    //@ requires search < location;
    //@ requires search <= location;
    //@ requires search == location;
    //@ requires search != location;
    //@ requires search >= location;
    //@ requires search > location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search == 5;
    //@ requires search != 5;
    //@ requires search >= 5;
    //@ requires search > 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search == 3;
    //@ requires search != 3;
    //@ requires search >= 3;
    //@ requires search > 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c == array.length;
    //@ requires c != array.length;
    //@ requires c >= array.length;
    //@ requires c > array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:87: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:63:) in method linearSearch
        return location;
        ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:63: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:87:
    //@ ensures \result >= 0;
        ^
2 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= -1;
    //@ ensures \result < array.length;
    //@ ensures \result <= array.length;
    //@ ensures \result != array.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result != 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result != 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result != 2;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result > 0;
    //@ ensures \result < search;
    //@ ensures \result <= search;
    //@ ensures \result == search;
    //@ ensures \result != search;
    //@ ensures \result >= search;
    //@ ensures \result > search;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures array != null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires 1 > array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 == array.length;
    //@ requires -1 != array.length;
    //@ requires -1 >= array.length;
    //@ requires -1 > array.length;
    //@ requires search < location;
    //@ requires search <= location;
    //@ requires search == location;
    //@ requires search != location;
    //@ requires search >= location;
    //@ requires search > location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search == 5;
    //@ requires search != 5;
    //@ requires search >= 5;
    //@ requires search > 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search == 3;
    //@ requires search != 3;
    //@ requires search >= 3;
    //@ requires search > 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c == array.length;
    //@ requires c != array.length;
    //@ requires c >= array.length;
    //@ requires c > array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:86: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:63:) in method linearSearch
        return location;
        ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:63: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:86:
    //@ ensures \result > 0;
        ^
2 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= -1;
    //@ ensures \result < array.length;
    //@ ensures \result <= array.length;
    //@ ensures \result != array.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result != 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result != 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result != 2;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result < search;
    //@ ensures \result <= search;
    //@ ensures \result == search;
    //@ ensures \result != search;
    //@ ensures \result >= search;
    //@ ensures \result > search;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures array != null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires 1 > array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 == array.length;
    //@ requires -1 != array.length;
    //@ requires -1 >= array.length;
    //@ requires -1 > array.length;
    //@ requires search < location;
    //@ requires search <= location;
    //@ requires search == location;
    //@ requires search != location;
    //@ requires search >= location;
    //@ requires search > location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search == 5;
    //@ requires search != 5;
    //@ requires search >= 5;
    //@ requires search > 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search == 3;
    //@ requires search != 3;
    //@ requires search >= 3;
    //@ requires search > 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c == array.length;
    //@ requires c != array.length;
    //@ requires c >= array.length;
    //@ requires c > array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:76: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:209:) in method linearSearch
            __Loop_Invariant_Dummy1(array, search, c);
                                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:209: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:76:
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:100: verify: Precondition conjunct is false: 1 > array.length
    //@ requires 1 > array.length;
                   ^
3 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= -1;
    //@ ensures \result < array.length;
    //@ ensures \result <= array.length;
    //@ ensures \result != array.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result != 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result != 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result != 2;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result < search;
    //@ ensures \result <= search;
    //@ ensures \result == search;
    //@ ensures \result != search;
    //@ ensures \result >= search;
    //@ ensures \result > search;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures array != null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 == array.length;
    //@ requires -1 != array.length;
    //@ requires -1 >= array.length;
    //@ requires -1 > array.length;
    //@ requires search < location;
    //@ requires search <= location;
    //@ requires search == location;
    //@ requires search != location;
    //@ requires search >= location;
    //@ requires search > location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search == 5;
    //@ requires search != 5;
    //@ requires search >= 5;
    //@ requires search > 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search == 3;
    //@ requires search != 3;
    //@ requires search >= 3;
    //@ requires search > 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c == array.length;
    //@ requires c != array.length;
    //@ requires c >= array.length;
    //@ requires c > array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:85: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:63:) in method linearSearch
        return location;
        ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:63: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:85:
    //@ ensures \result < search;
        ^
2 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= -1;
    //@ ensures \result < array.length;
    //@ ensures \result <= array.length;
    //@ ensures \result != array.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result != 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result != 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result != 2;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= search;
    //@ ensures \result == search;
    //@ ensures \result != search;
    //@ ensures \result >= search;
    //@ ensures \result > search;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures array != null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 == array.length;
    //@ requires -1 != array.length;
    //@ requires -1 >= array.length;
    //@ requires -1 > array.length;
    //@ requires search < location;
    //@ requires search <= location;
    //@ requires search == location;
    //@ requires search != location;
    //@ requires search >= location;
    //@ requires search > location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search == 5;
    //@ requires search != 5;
    //@ requires search >= 5;
    //@ requires search > 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search == 3;
    //@ requires search != 3;
    //@ requires search >= 3;
    //@ requires search > 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c == array.length;
    //@ requires c != array.length;
    //@ requires c >= array.length;
    //@ requires c > array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:75: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:207:) in method linearSearch
            __Loop_Invariant_Dummy1(array, search, c);
                                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:207: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:75:
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:101: verify: Precondition conjunct is false: -1 == array.length
    //@ requires -1 == array.length;
                    ^
3 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= -1;
    //@ ensures \result < array.length;
    //@ ensures \result <= array.length;
    //@ ensures \result != array.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result != 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result != 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result != 2;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= search;
    //@ ensures \result == search;
    //@ ensures \result != search;
    //@ ensures \result >= search;
    //@ ensures \result > search;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures array != null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires -1 >= array.length;
    //@ requires -1 > array.length;
    //@ requires search < location;
    //@ requires search <= location;
    //@ requires search == location;
    //@ requires search != location;
    //@ requires search >= location;
    //@ requires search > location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search == 5;
    //@ requires search != 5;
    //@ requires search >= 5;
    //@ requires search > 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search == 3;
    //@ requires search != 3;
    //@ requires search >= 3;
    //@ requires search > 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c == array.length;
    //@ requires c != array.length;
    //@ requires c >= array.length;
    //@ requires c > array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:75: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:206:) in method linearSearch
            __Loop_Invariant_Dummy1(array, search, c);
                                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:206: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:75:
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:102: verify: Precondition conjunct is false: -1 >= array.length
    //@ requires -1 >= array.length;
                    ^
3 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= -1;
    //@ ensures \result < array.length;
    //@ ensures \result <= array.length;
    //@ ensures \result != array.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result != 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result != 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result != 2;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= search;
    //@ ensures \result == search;
    //@ ensures \result != search;
    //@ ensures \result >= search;
    //@ ensures \result > search;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures array != null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires -1 > array.length;
    //@ requires search < location;
    //@ requires search <= location;
    //@ requires search == location;
    //@ requires search != location;
    //@ requires search >= location;
    //@ requires search > location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search == 5;
    //@ requires search != 5;
    //@ requires search >= 5;
    //@ requires search > 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search == 3;
    //@ requires search != 3;
    //@ requires search >= 3;
    //@ requires search > 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c == array.length;
    //@ requires c != array.length;
    //@ requires c >= array.length;
    //@ requires c > array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:75: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:205:) in method linearSearch
            __Loop_Invariant_Dummy1(array, search, c);
                                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:205: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:75:
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:102: verify: Precondition conjunct is false: -1 > array.length
    //@ requires -1 > array.length;
                    ^
3 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= -1;
    //@ ensures \result < array.length;
    //@ ensures \result <= array.length;
    //@ ensures \result != array.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result != 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result != 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result != 2;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= search;
    //@ ensures \result == search;
    //@ ensures \result != search;
    //@ ensures \result >= search;
    //@ ensures \result > search;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures array != null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < location;
    //@ requires search <= location;
    //@ requires search == location;
    //@ requires search != location;
    //@ requires search >= location;
    //@ requires search > location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search == 5;
    //@ requires search != 5;
    //@ requires search >= 5;
    //@ requires search > 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search == 3;
    //@ requires search != 3;
    //@ requires search >= 3;
    //@ requires search > 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c == array.length;
    //@ requires c != array.length;
    //@ requires c >= array.length;
    //@ requires c > array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:84: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:41:) in method linearSearch
        return location;
        ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:41: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:84:
    //@ ensures \result <= -1;
        ^
2 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result < array.length;
    //@ ensures \result <= array.length;
    //@ ensures \result != array.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result != 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result != 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result != 2;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= search;
    //@ ensures \result == search;
    //@ ensures \result != search;
    //@ ensures \result >= search;
    //@ ensures \result > search;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures array != null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < location;
    //@ requires search <= location;
    //@ requires search == location;
    //@ requires search != location;
    //@ requires search >= location;
    //@ requires search > location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search == 5;
    //@ requires search != 5;
    //@ requires search >= 5;
    //@ requires search > 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search == 3;
    //@ requires search != 3;
    //@ requires search >= 3;
    //@ requires search > 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c == array.length;
    //@ requires c != array.length;
    //@ requires c >= array.length;
    //@ requires c > array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:74: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:203:) in method linearSearch
            __Loop_Invariant_Dummy1(array, search, c);
                                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:203: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:74:
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:103: verify: Precondition conjunct is false: search == location
    //@ requires search == location;
                        ^
3 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result < array.length;
    //@ ensures \result <= array.length;
    //@ ensures \result != array.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result != 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result != 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result != 2;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= search;
    //@ ensures \result == search;
    //@ ensures \result != search;
    //@ ensures \result >= search;
    //@ ensures \result > search;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures array != null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < location;
    //@ requires search <= location;
    //@ requires search != location;
    //@ requires search >= location;
    //@ requires search > location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search == 5;
    //@ requires search != 5;
    //@ requires search >= 5;
    //@ requires search > 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search == 3;
    //@ requires search != 3;
    //@ requires search >= 3;
    //@ requires search > 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c == array.length;
    //@ requires c != array.length;
    //@ requires c >= array.length;
    //@ requires c > array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:74: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:202:) in method linearSearch
            __Loop_Invariant_Dummy1(array, search, c);
                                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:202: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:74:
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:104: verify: Precondition conjunct is false: search >= location
    //@ requires search >= location;
                        ^
3 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result < array.length;
    //@ ensures \result <= array.length;
    //@ ensures \result != array.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result != 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result != 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result != 2;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= search;
    //@ ensures \result == search;
    //@ ensures \result != search;
    //@ ensures \result >= search;
    //@ ensures \result > search;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures array != null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < location;
    //@ requires search <= location;
    //@ requires search != location;
    //@ requires search > location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search == 5;
    //@ requires search != 5;
    //@ requires search >= 5;
    //@ requires search > 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search == 3;
    //@ requires search != 3;
    //@ requires search >= 3;
    //@ requires search > 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c == array.length;
    //@ requires c != array.length;
    //@ requires c >= array.length;
    //@ requires c > array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:74: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:201:) in method linearSearch
            __Loop_Invariant_Dummy1(array, search, c);
                                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:201: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:74:
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:104: verify: Precondition conjunct is false: search > location
    //@ requires search > location;
                        ^
3 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result < array.length;
    //@ ensures \result <= array.length;
    //@ ensures \result != array.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result != 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result != 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result != 2;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= search;
    //@ ensures \result == search;
    //@ ensures \result != search;
    //@ ensures \result >= search;
    //@ ensures \result > search;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures array != null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < location;
    //@ requires search <= location;
    //@ requires search != location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search == 5;
    //@ requires search != 5;
    //@ requires search >= 5;
    //@ requires search > 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search == 3;
    //@ requires search != 3;
    //@ requires search >= 3;
    //@ requires search > 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c == array.length;
    //@ requires c != array.length;
    //@ requires c >= array.length;
    //@ requires c > array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:83: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:62:) in method linearSearch
        return location;
        ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:62: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:83:
    //@ ensures \result <= search;
        ^
2 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result < array.length;
    //@ ensures \result <= array.length;
    //@ ensures \result != array.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result != 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result != 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result != 2;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result == search;
    //@ ensures \result != search;
    //@ ensures \result >= search;
    //@ ensures \result > search;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures array != null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < location;
    //@ requires search <= location;
    //@ requires search != location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search == 5;
    //@ requires search != 5;
    //@ requires search >= 5;
    //@ requires search > 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search == 3;
    //@ requires search != 3;
    //@ requires search >= 3;
    //@ requires search > 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c == array.length;
    //@ requires c != array.length;
    //@ requires c >= array.length;
    //@ requires c > array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:82: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:41:) in method linearSearch
        return location;
        ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:41: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:82:
    //@ ensures \result < array.length;
        ^
2 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= array.length;
    //@ ensures \result != array.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result != 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result != 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result != 2;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result == search;
    //@ ensures \result != search;
    //@ ensures \result >= search;
    //@ ensures \result > search;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures array != null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < location;
    //@ requires search <= location;
    //@ requires search != location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search == 5;
    //@ requires search != 5;
    //@ requires search >= 5;
    //@ requires search > 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search == 3;
    //@ requires search != 3;
    //@ requires search >= 3;
    //@ requires search > 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c == array.length;
    //@ requires c != array.length;
    //@ requires c >= array.length;
    //@ requires c > array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:72: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:198:) in method linearSearch
            __Loop_Invariant_Dummy1(array, search, c);
                                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:198: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:72:
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:104: verify: Precondition conjunct is false: search == 5
    //@ requires search == 5;
                        ^
3 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= array.length;
    //@ ensures \result != array.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result != 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result != 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result != 2;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result == search;
    //@ ensures \result != search;
    //@ ensures \result >= search;
    //@ ensures \result > search;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures array != null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < location;
    //@ requires search <= location;
    //@ requires search != location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search >= 5;
    //@ requires search > 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search == 3;
    //@ requires search != 3;
    //@ requires search >= 3;
    //@ requires search > 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c == array.length;
    //@ requires c != array.length;
    //@ requires c >= array.length;
    //@ requires c > array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:72: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:197:) in method linearSearch
            __Loop_Invariant_Dummy1(array, search, c);
                                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:197: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:72:
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:105: verify: Precondition conjunct is false: search >= 5
    //@ requires search >= 5;
                        ^
3 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= array.length;
    //@ ensures \result != array.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result != 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result != 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result != 2;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result == search;
    //@ ensures \result != search;
    //@ ensures \result >= search;
    //@ ensures \result > search;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures array != null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < location;
    //@ requires search <= location;
    //@ requires search != location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search > 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search == 3;
    //@ requires search != 3;
    //@ requires search >= 3;
    //@ requires search > 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c == array.length;
    //@ requires c != array.length;
    //@ requires c >= array.length;
    //@ requires c > array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:72: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:196:) in method linearSearch
            __Loop_Invariant_Dummy1(array, search, c);
                                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:196: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:72:
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:105: verify: Precondition conjunct is false: search > 5
    //@ requires search > 5;
                        ^
3 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= array.length;
    //@ ensures \result != array.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result != 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result != 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result != 2;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result == search;
    //@ ensures \result != search;
    //@ ensures \result >= search;
    //@ ensures \result > search;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures array != null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < location;
    //@ requires search <= location;
    //@ requires search != location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search == 3;
    //@ requires search != 3;
    //@ requires search >= 3;
    //@ requires search > 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c == array.length;
    //@ requires c != array.length;
    //@ requires c >= array.length;
    //@ requires c > array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:72: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:195:) in method linearSearch
            __Loop_Invariant_Dummy1(array, search, c);
                                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:195: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:72:
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:107: verify: Precondition conjunct is false: search == 3
    //@ requires search == 3;
                        ^
3 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= array.length;
    //@ ensures \result != array.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result != 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result != 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result != 2;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result == search;
    //@ ensures \result != search;
    //@ ensures \result >= search;
    //@ ensures \result > search;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures array != null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < location;
    //@ requires search <= location;
    //@ requires search != location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search >= 3;
    //@ requires search > 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c == array.length;
    //@ requires c != array.length;
    //@ requires c >= array.length;
    //@ requires c > array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:72: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:194:) in method linearSearch
            __Loop_Invariant_Dummy1(array, search, c);
                                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:194: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:72:
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:108: verify: Precondition conjunct is false: search >= 3
    //@ requires search >= 3;
                        ^
3 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= array.length;
    //@ ensures \result != array.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result != 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result != 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result != 2;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result == search;
    //@ ensures \result != search;
    //@ ensures \result >= search;
    //@ ensures \result > search;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures array != null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < location;
    //@ requires search <= location;
    //@ requires search != location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search > 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c == array.length;
    //@ requires c != array.length;
    //@ requires c >= array.length;
    //@ requires c > array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:72: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:193:) in method linearSearch
            __Loop_Invariant_Dummy1(array, search, c);
                                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:193: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:72:
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:108: verify: Precondition conjunct is false: search > 3
    //@ requires search > 3;
                        ^
3 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= array.length;
    //@ ensures \result != array.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result != 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result != 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result != 2;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result == search;
    //@ ensures \result != search;
    //@ ensures \result >= search;
    //@ ensures \result > search;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures array != null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < location;
    //@ requires search <= location;
    //@ requires search != location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c == array.length;
    //@ requires c != array.length;
    //@ requires c >= array.length;
    //@ requires c > array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:72: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:192:) in method linearSearch
            __Loop_Invariant_Dummy1(array, search, c);
                                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:192: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:72:
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:99: verify: Precondition conjunct is false: search < location
    //@ requires search < location;
                        ^
3 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= array.length;
    //@ ensures \result != array.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result != 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result != 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result != 2;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result == search;
    //@ ensures \result != search;
    //@ ensures \result >= search;
    //@ ensures \result > search;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures array != null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search <= location;
    //@ requires search != location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search == 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c == array.length;
    //@ requires c != array.length;
    //@ requires c >= array.length;
    //@ requires c > array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:72: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:191:) in method linearSearch
            __Loop_Invariant_Dummy1(array, search, c);
                                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:191: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:72:
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:109: verify: Precondition conjunct is false: search == 2
    //@ requires search == 2;
                        ^
3 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= array.length;
    //@ ensures \result != array.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result != 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result != 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result != 2;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result == search;
    //@ ensures \result != search;
    //@ ensures \result >= search;
    //@ ensures \result > search;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures array != null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search <= location;
    //@ requires search != location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search >= 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c == array.length;
    //@ requires c != array.length;
    //@ requires c >= array.length;
    //@ requires c > array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:72: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:190:) in method linearSearch
            __Loop_Invariant_Dummy1(array, search, c);
                                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:190: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:72:
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:110: verify: Precondition conjunct is false: search >= 2
    //@ requires search >= 2;
                        ^
3 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= array.length;
    //@ ensures \result != array.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result != 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result != 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result != 2;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result == search;
    //@ ensures \result != search;
    //@ ensures \result >= search;
    //@ ensures \result > search;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures array != null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search <= location;
    //@ requires search != location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c == array.length;
    //@ requires c != array.length;
    //@ requires c >= array.length;
    //@ requires c > array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:81: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:61:) in method linearSearch
        return location;
        ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:61: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:81:
    //@ ensures \result == search;
        ^
2 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= array.length;
    //@ ensures \result != array.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result != 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result != 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result != 2;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result != search;
    //@ ensures \result >= search;
    //@ ensures \result > search;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures array != null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search <= location;
    //@ requires search != location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c == array.length;
    //@ requires c != array.length;
    //@ requires c >= array.length;
    //@ requires c > array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:80: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:62:) in method linearSearch
        return location;
        ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:62: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:80:
    //@ ensures \result >= search;
        ^
2 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= array.length;
    //@ ensures \result != array.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result != 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result != 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result != 2;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result != search;
    //@ ensures \result > search;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures array != null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search <= location;
    //@ requires search != location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c == array.length;
    //@ requires c != array.length;
    //@ requires c >= array.length;
    //@ requires c > array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:79: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:64:) in method linearSearch
        return location;
        ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:64: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:79:
    //@ ensures array != null ==> \result >= 0;
        ^
2 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= array.length;
    //@ ensures \result != array.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result != 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result != 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result != 2;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result != search;
    //@ ensures \result > search;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search <= location;
    //@ requires search != location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search > 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c == array.length;
    //@ requires c != array.length;
    //@ requires c >= array.length;
    //@ requires c > array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:69: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:186:) in method linearSearch
            __Loop_Invariant_Dummy1(array, search, c);
                                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:186: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:69:
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:107: verify: Precondition conjunct is false: search > 2
    //@ requires search > 2;
                        ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:193: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:65:) in method main
        linearSearch(arr, 0);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:65: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:193:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:5: verify: Precondition conjunct is false: 5 <= array.length
    //@ requires 5 <= array.length;
                   ^
6 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= array.length;
    //@ ensures \result != array.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result != 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result != 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result != 2;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result != search;
    //@ ensures \result > search;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search <= location;
    //@ requires search != location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search == 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c == array.length;
    //@ requires c != array.length;
    //@ requires c >= array.length;
    //@ requires c > array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:69: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:185:) in method linearSearch
            __Loop_Invariant_Dummy1(array, search, c);
                                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:185: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:69:
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:109: verify: Precondition conjunct is false: search == 1
    //@ requires search == 1;
                        ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:192: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:65:) in method main
        linearSearch(arr, 0);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:65: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:192:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:5: verify: Precondition conjunct is false: 5 <= array.length
    //@ requires 5 <= array.length;
                   ^
6 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= array.length;
    //@ ensures \result != array.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result != 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result != 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result != 2;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result != search;
    //@ ensures \result > search;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search <= location;
    //@ requires search != location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search >= 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c == array.length;
    //@ requires c != array.length;
    //@ requires c >= array.length;
    //@ requires c > array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:69: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:184:) in method linearSearch
            __Loop_Invariant_Dummy1(array, search, c);
                                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:184: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:69:
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:110: verify: Precondition conjunct is false: search >= 1
    //@ requires search >= 1;
                        ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:191: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:65:) in method main
        linearSearch(arr, 0);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:65: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:191:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:5: verify: Precondition conjunct is false: 5 <= array.length
    //@ requires 5 <= array.length;
                   ^
6 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= array.length;
    //@ ensures \result != array.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result != 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result != 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result != 2;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result != search;
    //@ ensures \result > search;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search <= location;
    //@ requires search != location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search > 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c == array.length;
    //@ requires c != array.length;
    //@ requires c >= array.length;
    //@ requires c > array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:69: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:183:) in method linearSearch
            __Loop_Invariant_Dummy1(array, search, c);
                                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:183: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:69:
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:110: verify: Precondition conjunct is false: search > 1
    //@ requires search > 1;
                        ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:190: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:65:) in method main
        linearSearch(arr, 0);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:65: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:190:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:5: verify: Precondition conjunct is false: 5 <= array.length
    //@ requires 5 <= array.length;
                   ^
6 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= array.length;
    //@ ensures \result != array.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result != 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result != 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result != 2;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result != search;
    //@ ensures \result > search;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search <= location;
    //@ requires search != location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search == 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c == array.length;
    //@ requires c != array.length;
    //@ requires c >= array.length;
    //@ requires c > array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:69: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:182:) in method linearSearch
            __Loop_Invariant_Dummy1(array, search, c);
                                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:182: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:69:
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:112: verify: Precondition conjunct is false: search == 0
    //@ requires search == 0;
                        ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:189: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:65:) in method main
        linearSearch(arr, 0);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:65: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:189:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:5: verify: Precondition conjunct is false: 5 <= array.length
    //@ requires 5 <= array.length;
                   ^
6 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= array.length;
    //@ ensures \result != array.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result != 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result != 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result != 2;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result != search;
    //@ ensures \result > search;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search <= location;
    //@ requires search != location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search >= 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c == array.length;
    //@ requires c != array.length;
    //@ requires c >= array.length;
    //@ requires c > array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:69: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:181:) in method linearSearch
            __Loop_Invariant_Dummy1(array, search, c);
                                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:181: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:69:
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:113: verify: Precondition conjunct is false: search >= 0
    //@ requires search >= 0;
                        ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:188: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:65:) in method main
        linearSearch(arr, 0);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:65: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:188:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:5: verify: Precondition conjunct is false: 5 <= array.length
    //@ requires 5 <= array.length;
                   ^
6 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= array.length;
    //@ ensures \result != array.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result != 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result != 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result != 2;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result != search;
    //@ ensures \result > search;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search <= location;
    //@ requires search != location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c == array.length;
    //@ requires c != array.length;
    //@ requires c >= array.length;
    //@ requires c > array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:69: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:180:) in method linearSearch
            __Loop_Invariant_Dummy1(array, search, c);
                                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:180: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:69:
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:96: verify: Precondition conjunct is false: search <= location
    //@ requires search <= location;
                        ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:187: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:65:) in method main
        linearSearch(arr, 0);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:65: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:187:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:5: verify: Precondition conjunct is false: 5 <= array.length
    //@ requires 5 <= array.length;
                   ^
6 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= array.length;
    //@ ensures \result != array.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result != 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result != 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result != 2;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result != search;
    //@ ensures \result > search;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search != location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c == array.length;
    //@ requires c != array.length;
    //@ requires c >= array.length;
    //@ requires c > array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:78: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:62:) in method linearSearch
        return location;
        ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:62: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:78:
    //@ ensures \result > search;
        ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:186: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:65:) in method main
        linearSearch(arr, 0);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:65: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:186:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:5: verify: Precondition conjunct is false: 5 <= array.length
    //@ requires 5 <= array.length;
                   ^
5 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= array.length;
    //@ ensures \result != array.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result != 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result != 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result != 2;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result != search;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search != location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search > 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c == array.length;
    //@ requires c != array.length;
    //@ requires c >= array.length;
    //@ requires c > array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:68: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:178:) in method linearSearch
            __Loop_Invariant_Dummy1(array, search, c);
                                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:178: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:68:
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:111: verify: Precondition conjunct is false: search > 0
    //@ requires search > 0;
                        ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:185: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:64:) in method main
        linearSearch(arr, 0);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:64: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:185:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:5: verify: Precondition conjunct is false: 5 <= array.length
    //@ requires 5 <= array.length;
                   ^
6 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= array.length;
    //@ ensures \result != array.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result != 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result != 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result != 2;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result != search;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search != location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search == -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c == array.length;
    //@ requires c != array.length;
    //@ requires c >= array.length;
    //@ requires c > array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:68: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:177:) in method linearSearch
            __Loop_Invariant_Dummy1(array, search, c);
                                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:177: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:68:
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:113: verify: Precondition conjunct is false: search == -1
    //@ requires search == -1;
                        ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:184: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:64:) in method main
        linearSearch(arr, 0);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:64: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:184:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:5: verify: Precondition conjunct is false: 5 <= array.length
    //@ requires 5 <= array.length;
                   ^
6 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= array.length;
    //@ ensures \result != array.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result != 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result != 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result != 2;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result != search;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search != location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search >= -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c == array.length;
    //@ requires c != array.length;
    //@ requires c >= array.length;
    //@ requires c > array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:68: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:176:) in method linearSearch
            __Loop_Invariant_Dummy1(array, search, c);
                                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:176: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:68:
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:114: verify: Precondition conjunct is false: search >= -1
    //@ requires search >= -1;
                        ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:183: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:64:) in method main
        linearSearch(arr, 0);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:64: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:183:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:5: verify: Precondition conjunct is false: 5 <= array.length
    //@ requires 5 <= array.length;
                   ^
6 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= array.length;
    //@ ensures \result != array.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result != 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result != 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result != 2;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result != search;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search != location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c == array.length;
    //@ requires c != array.length;
    //@ requires c >= array.length;
    //@ requires c > array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:77: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:42:) in method linearSearch
        return location;
        ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:42: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:77:
    //@ ensures \result != array.length;
        ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:182: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:64:) in method main
        linearSearch(arr, 0);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:64: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:182:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:5: verify: Precondition conjunct is false: 5 <= array.length
    //@ requires 5 <= array.length;
                   ^
5 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= array.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result != 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result != 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result != 2;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result != search;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search != location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c == array.length;
    //@ requires c != array.length;
    //@ requires c >= array.length;
    //@ requires c > array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:76: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:41:) in method linearSearch
        return location;
        ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:41: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:76:
    //@ ensures \result <= array.length;
        ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:181: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:63:) in method main
        linearSearch(arr, 0);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:63: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:181:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:5: verify: Precondition conjunct is false: 5 <= array.length
    //@ requires 5 <= array.length;
                   ^
5 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result != 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result != 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result != 2;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result != search;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search != location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search > -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c == array.length;
    //@ requires c != array.length;
    //@ requires c >= array.length;
    //@ requires c > array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:66: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:173:) in method linearSearch
            __Loop_Invariant_Dummy1(array, search, c);
                                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:173: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:66:
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:112: verify: Precondition conjunct is false: search > -1
    //@ requires search > -1;
                        ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:180: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:62:) in method main
        linearSearch(arr, 0);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:62: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:180:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:5: verify: Precondition conjunct is false: 5 <= array.length
    //@ requires 5 <= array.length;
                   ^
6 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result != 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result != 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result != 2;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result != search;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search != location;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c == array.length;
    //@ requires c != array.length;
    //@ requires c >= array.length;
    //@ requires c > array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:66: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:172:) in method linearSearch
            __Loop_Invariant_Dummy1(array, search, c);
                                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:172: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:66:
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:93: verify: Precondition conjunct is false: search != location
    //@ requires search != location;
                        ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:179: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:62:) in method main
        linearSearch(arr, 0);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:62: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:179:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:5: verify: Precondition conjunct is false: 5 <= array.length
    //@ requires 5 <= array.length;
                   ^
6 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result != 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result != 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result != 2;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result != search;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c == array.length;
    //@ requires c != array.length;
    //@ requires c >= array.length;
    //@ requires c > array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:75: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:59:) in method linearSearch
        return location;
        ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:59: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:75:
    //@ ensures \result != search;
        ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:178: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:62:) in method main
        linearSearch(arr, 0);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:62: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:178:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:5: verify: Precondition conjunct is false: 5 <= array.length
    //@ requires 5 <= array.length;
                   ^
5 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result != 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result != 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result != 2;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search == array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c == array.length;
    //@ requires c != array.length;
    //@ requires c >= array.length;
    //@ requires c > array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:65: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:170:) in method linearSearch
            __Loop_Invariant_Dummy1(array, search, c);
                                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:170: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:65:
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:112: verify: Precondition conjunct is false: search == array.length
    //@ requires search == array.length;
                        ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:177: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:61:) in method main
        linearSearch(arr, 0);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:61: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:177:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:5: verify: Precondition conjunct is false: 5 <= array.length
    //@ requires 5 <= array.length;
                   ^
6 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result != 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result != 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result != 2;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ requires search >= array.length;
    //@ requires search > array.length;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c == array.length;
    //@ requires c != array.length;
    //@ requires c >= array.length;
    //@ requires c > array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:65: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:169:) in method linearSearch
            __Loop_Invariant_Dummy1(array, search, c);
                                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:169: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:65:
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:113: verify: Precondition conjunct is false: search >= array.length
    //@ requires search >= array.length;
                        ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:176: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:61:) in method main
        linearSearch(arr, 0);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:61: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:176:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:5: verify: Precondition conjunct is false: 5 <= array.length
    //@ requires 5 <= array.length;
                   ^
6 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result != 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result != 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result != 2;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ requires search > array.length;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c == array.length;
    //@ requires c != array.length;
    //@ requires c >= array.length;
    //@ requires c > array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:65: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:168:) in method linearSearch
            __Loop_Invariant_Dummy1(array, search, c);
                                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:168: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:65:
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:113: verify: Precondition conjunct is false: search > array.length
    //@ requires search > array.length;
                        ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:175: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:61:) in method main
        linearSearch(arr, 0);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:61: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:175:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:5: verify: Precondition conjunct is false: 5 <= array.length
    //@ requires 5 <= array.length;
                   ^
6 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result != 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result != 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result != 2;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c == -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c == array.length;
    //@ requires c != array.length;
    //@ requires c >= array.length;
    //@ requires c > array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:65: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:167:) in method linearSearch
            __Loop_Invariant_Dummy1(array, search, c);
                                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:167: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:65:
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:115: verify: Precondition conjunct is false: c == -1
    //@ requires c == -1;
                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:174: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:61:) in method main
        linearSearch(arr, 0);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:61: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:174:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:5: verify: Precondition conjunct is false: 5 <= array.length
    //@ requires 5 <= array.length;
                   ^
6 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result != 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result != 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result != 2;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c == array.length;
    //@ requires c != array.length;
    //@ requires c >= array.length;
    //@ requires c > array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:74: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:41:) in method linearSearch
        return location;
        ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:41: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:74:
    //@ ensures \result < 5;
        ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:173: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:61:) in method main
        linearSearch(arr, 0);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:61: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:173:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:5: verify: Precondition conjunct is false: 5 <= array.length
    //@ requires 5 <= array.length;
                   ^
5 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= 5;
    //@ ensures \result != 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result != 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result != 2;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c == array.length;
    //@ requires c != array.length;
    //@ requires c >= array.length;
    //@ requires c > array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:73: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:55:) in method linearSearch
        return location;
        ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:55: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:73:
    //@ ensures \result < 0;
        ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:172: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:60:) in method main
        linearSearch(arr, 0);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:60: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:172:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:5: verify: Precondition conjunct is false: 5 <= array.length
    //@ requires 5 <= array.length;
                   ^
5 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= 5;
    //@ ensures \result != 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result != 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result != 2;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c == array.length;
    //@ requires c != array.length;
    //@ requires c >= array.length;
    //@ requires c > array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:72: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:56:) in method linearSearch
        return location;
        ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:56: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:72:
    //@ ensures \result != 0;
        ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:171: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:59:) in method main
        linearSearch(arr, 0);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:59: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:171:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:5: verify: Precondition conjunct is false: 5 <= array.length
    //@ requires 5 <= array.length;
                   ^
5 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= 5;
    //@ ensures \result != 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result != 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result != 2;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result <= 0;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c != -1;
    //@ requires c >= -1;
    //@ requires c > -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c == array.length;
    //@ requires c != array.length;
    //@ requires c >= array.length;
    //@ requires c > array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:62: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:163:) in method linearSearch
            __Loop_Invariant_Dummy1(array, search, c);
                                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:163: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:62:
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:113: verify: Precondition conjunct is false: c >= -1
    //@ requires c >= -1;
                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:170: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:58:) in method main
        linearSearch(arr, 0);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:58: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:170:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:5: verify: Precondition conjunct is false: 5 <= array.length
    //@ requires 5 <= array.length;
                   ^
6 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= 5;
    //@ ensures \result != 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result != 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result != 2;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result <= 0;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ requires c < -1;
    //@ requires c <= -1;
    //@ requires c != -1;
    //@ requires c > -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c == array.length;
    //@ requires c != array.length;
    //@ requires c >= array.length;
    //@ requires c > array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:62: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:162:) in method linearSearch
            __Loop_Invariant_Dummy1(array, search, c);
                                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:162: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:62:
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:110: verify: Precondition conjunct is false: c < -1
    //@ requires c < -1;
                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:169: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:58:) in method main
        linearSearch(arr, 0);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:58: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:169:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:5: verify: Precondition conjunct is false: 5 <= array.length
    //@ requires 5 <= array.length;
                   ^
6 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= 5;
    //@ ensures \result != 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result != 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result != 2;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result <= 0;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ requires c <= -1;
    //@ requires c != -1;
    //@ requires c > -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c == array.length;
    //@ requires c != array.length;
    //@ requires c >= array.length;
    //@ requires c > array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:62: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:161:) in method linearSearch
            __Loop_Invariant_Dummy1(array, search, c);
                                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:161: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:62:
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:112: verify: Precondition conjunct is false: c > -1
    //@ requires c > -1;
                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:168: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:58:) in method main
        linearSearch(arr, 0);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:58: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:168:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:5: verify: Precondition conjunct is false: 5 <= array.length
    //@ requires 5 <= array.length;
                   ^
6 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= 5;
    //@ ensures \result != 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result != 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result != 2;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result <= 0;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ requires c <= -1;
    //@ requires c != -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c == array.length;
    //@ requires c != array.length;
    //@ requires c >= array.length;
    //@ requires c > array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:62: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:160:) in method linearSearch
            __Loop_Invariant_Dummy1(array, search, c);
                                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:160: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:62:
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:110: verify: Precondition conjunct is false: c <= -1
    //@ requires c <= -1;
                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:167: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:58:) in method main
        linearSearch(arr, 0);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:58: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:167:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:5: verify: Precondition conjunct is false: 5 <= array.length
    //@ requires 5 <= array.length;
                   ^
6 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= 5;
    //@ ensures \result != 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result != 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result != 2;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result <= 0;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ requires c != -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c == array.length;
    //@ requires c != array.length;
    //@ requires c >= array.length;
    //@ requires c > array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:62: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:159:) in method linearSearch
            __Loop_Invariant_Dummy1(array, search, c);
                                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:159: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:62:
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:113: verify: Precondition conjunct is false: c == array.length
    //@ requires c == array.length;
                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:166: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:58:) in method main
        linearSearch(arr, 0);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:58: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:166:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:5: verify: Precondition conjunct is false: 5 <= array.length
    //@ requires 5 <= array.length;
                   ^
6 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= 5;
    //@ ensures \result != 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result != 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result != 2;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result <= 0;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ requires c != -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c != array.length;
    //@ requires c >= array.length;
    //@ requires c > array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:62: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:158:) in method linearSearch
            __Loop_Invariant_Dummy1(array, search, c);
                                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:158: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:62:
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:114: verify: Precondition conjunct is false: c >= array.length
    //@ requires c >= array.length;
                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:165: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:58:) in method main
        linearSearch(arr, 0);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:58: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:165:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:5: verify: Precondition conjunct is false: 5 <= array.length
    //@ requires 5 <= array.length;
                   ^
6 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= 5;
    //@ ensures \result != 5;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result != 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result != 2;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result <= 0;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ requires c != -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c != array.length;
    //@ requires c > array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:71: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:43:) in method linearSearch
        return location;
        ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:43: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:71:
    //@ ensures \result < 3;
        ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:164: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:58:) in method main
        linearSearch(arr, 0);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:58: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:164:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:5: verify: Precondition conjunct is false: 5 <= array.length
    //@ requires 5 <= array.length;
                   ^
5 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= 5;
    //@ ensures \result != 5;
    //@ ensures \result <= 3;
    //@ ensures \result != 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result != 2;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result <= 0;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ requires c != -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c != array.length;
    //@ requires c > array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:61: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:156:) in method linearSearch
            __Loop_Invariant_Dummy1(array, search, c);
                                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:156: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:61:
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:113: verify: Precondition conjunct is false: c > array.length
    //@ requires c > array.length;
                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:163: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:57:) in method main
        linearSearch(arr, 0);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:57: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:163:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:5: verify: Precondition conjunct is false: 5 <= array.length
    //@ requires 5 <= array.length;
                   ^
6 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= 5;
    //@ ensures \result != 5;
    //@ ensures \result <= 3;
    //@ ensures \result != 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result != 2;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result <= 0;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ requires c != -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c != array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c == 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:61: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:155:) in method linearSearch
            __Loop_Invariant_Dummy1(array, search, c);
                                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:155: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:61:
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:115: verify: Precondition conjunct is false: c == 5
    //@ requires c == 5;
                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:162: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:57:) in method main
        linearSearch(arr, 0);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:57: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:162:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:5: verify: Precondition conjunct is false: 5 <= array.length
    //@ requires 5 <= array.length;
                   ^
6 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= 5;
    //@ ensures \result != 5;
    //@ ensures \result <= 3;
    //@ ensures \result != 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result != 2;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result <= 0;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ requires c != -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c != array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c != 5;
    //@ requires c >= 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:61: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:154:) in method linearSearch
            __Loop_Invariant_Dummy1(array, search, c);
                                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:154: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:61:
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:116: verify: Precondition conjunct is false: c >= 5
    //@ requires c >= 5;
                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:161: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:57:) in method main
        linearSearch(arr, 0);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:57: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:161:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:5: verify: Precondition conjunct is false: 5 <= array.length
    //@ requires 5 <= array.length;
                   ^
6 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= 5;
    //@ ensures \result != 5;
    //@ ensures \result <= 3;
    //@ ensures \result != 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result != 2;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result <= 0;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ requires c != -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c != array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c != 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:70: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:41:) in method linearSearch
        return location;
        ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:41: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:70:
    //@ ensures \result <= 5;
        ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:160: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:57:) in method main
        linearSearch(arr, 0);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:57: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:160:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:5: verify: Precondition conjunct is false: 5 <= array.length
    //@ requires 5 <= array.length;
                   ^
5 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result != 5;
    //@ ensures \result <= 3;
    //@ ensures \result != 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result != 2;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result <= 0;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ requires c != -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c != array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c != 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:69: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:44:) in method linearSearch
        return location;
        ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:44: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:69:
    //@ ensures \result < 2;
        ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:159: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:56:) in method main
        linearSearch(arr, 0);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:56: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:159:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:5: verify: Precondition conjunct is false: 5 <= array.length
    //@ requires 5 <= array.length;
                   ^
5 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result != 5;
    //@ ensures \result <= 3;
    //@ ensures \result != 3;
    //@ ensures \result <= 2;
    //@ ensures \result != 2;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result <= 0;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ requires c != -1;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c != array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c != 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:59: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:151:) in method linearSearch
            __Loop_Invariant_Dummy1(array, search, c);
                                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:151: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:59:
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:107: verify: Precondition conjunct is false: c != -1
    //@ requires c != -1;
                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:158: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:55:) in method main
        linearSearch(arr, 0);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:55: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:158:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:5: verify: Precondition conjunct is false: 5 <= array.length
    //@ requires 5 <= array.length;
                   ^
6 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result != 5;
    //@ ensures \result <= 3;
    //@ ensures \result != 3;
    //@ ensures \result <= 2;
    //@ ensures \result != 2;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result <= 0;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c != array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c != 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:68: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:41:) in method linearSearch
        return location;
        ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:41: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:68:
    //@ ensures \result != 5;
        ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:157: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:55:) in method main
        linearSearch(arr, 0);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:55: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:157:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:5: verify: Precondition conjunct is false: 5 <= array.length
    //@ requires 5 <= array.length;
                   ^
5 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= 3;
    //@ ensures \result != 3;
    //@ ensures \result <= 2;
    //@ ensures \result != 2;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result <= 0;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c != array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c != 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:67: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:41:) in method linearSearch
        return location;
        ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:41: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:67:
    //@ ensures \result <= 3;
        ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:156: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:54:) in method main
        linearSearch(arr, 0);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:54: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:156:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:5: verify: Precondition conjunct is false: 5 <= array.length
    //@ requires 5 <= array.length;
                   ^
5 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result != 3;
    //@ ensures \result <= 2;
    //@ ensures \result != 2;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result <= 0;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c != array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c != 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:66: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:42:) in method linearSearch
        return location;
        ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:42: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:66:
    //@ ensures \result <= 2;
        ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:155: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:53:) in method main
        linearSearch(arr, 0);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:53: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:155:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:5: verify: Precondition conjunct is false: 5 <= array.length
    //@ requires 5 <= array.length;
                   ^
5 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result != 3;
    //@ ensures \result != 2;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result <= 0;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c != array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c != 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:65: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:46:) in method linearSearch
        return location;
        ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:46: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:65:
    //@ ensures \result < 1;
        ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:154: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:52:) in method main
        linearSearch(arr, 0);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:52: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:154:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:5: verify: Precondition conjunct is false: 5 <= array.length
    //@ requires 5 <= array.length;
                   ^
5 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result != 3;
    //@ ensures \result != 2;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result <= 0;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c != array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c != 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:64: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:46:) in method linearSearch
        return location;
        ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:46: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:64:
    //@ ensures \result <= 1;
        ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:153: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:51:) in method main
        linearSearch(arr, 0);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:51: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:153:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:5: verify: Precondition conjunct is false: 5 <= array.length
    //@ requires 5 <= array.length;
                   ^
5 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result != 3;
    //@ ensures \result != 2;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures \result != 1;
    //@ ensures \result <= 0;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c != array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c != 5;
    //@ requires c > 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:54: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:145:) in method linearSearch
            __Loop_Invariant_Dummy1(array, search, c);
                                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:145: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:54:
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:108: verify: Precondition conjunct is false: c > 5
    //@ requires c > 5;
                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:152: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:50:) in method main
        linearSearch(arr, 0);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:50: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:152:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:5: verify: Precondition conjunct is false: 5 <= array.length
    //@ requires 5 <= array.length;
                   ^
6 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result != 3;
    //@ ensures \result != 2;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures \result != 1;
    //@ ensures \result <= 0;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c != array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c != 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c == 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:54: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:144:) in method linearSearch
            __Loop_Invariant_Dummy1(array, search, c);
                                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:144: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:54:
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:110: verify: Precondition conjunct is false: c == 3
    //@ requires c == 3;
                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:151: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:50:) in method main
        linearSearch(arr, 0);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:50: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:151:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:5: verify: Precondition conjunct is false: 5 <= array.length
    //@ requires 5 <= array.length;
                   ^
6 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result != 3;
    //@ ensures \result != 2;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures \result != 1;
    //@ ensures \result <= 0;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c != array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c != 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:63: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:41:) in method linearSearch
        return location;
        ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:41: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:63:
    //@ ensures \result != 3;
        ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:150: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:50:) in method main
        linearSearch(arr, 0);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:50: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:150:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:5: verify: Precondition conjunct is false: 5 <= array.length
    //@ requires 5 <= array.length;
                   ^
5 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result != 2;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures \result != 1;
    //@ ensures \result <= 0;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c != array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c != 5;
    //@ requires c < 3;
    //@ requires c <= 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:53: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:142:) in method linearSearch
            __Loop_Invariant_Dummy1(array, search, c);
                                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:142: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:53:
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:107: verify: Precondition conjunct is false: c < 3
    //@ requires c < 3;
                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:149: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:49:) in method main
        linearSearch(arr, 0);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:49: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:149:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:5: verify: Precondition conjunct is false: 5 <= array.length
    //@ requires 5 <= array.length;
                   ^
6 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result != 2;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures \result != 1;
    //@ ensures \result <= 0;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c != array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c != 5;
    //@ requires c <= 3;
    //@ requires c != 3;
    //@ requires c >= 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:53: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:141:) in method linearSearch
            __Loop_Invariant_Dummy1(array, search, c);
                                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:141: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:53:
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:109: verify: Precondition conjunct is false: c >= 3
    //@ requires c >= 3;
                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:148: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:49:) in method main
        linearSearch(arr, 0);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:49: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:148:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:5: verify: Precondition conjunct is false: 5 <= array.length
    //@ requires 5 <= array.length;
                   ^
6 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result != 2;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures \result != 1;
    //@ ensures \result <= 0;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c != array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c != 5;
    //@ requires c <= 3;
    //@ requires c != 3;
    //@ requires c > 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:53: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:140:) in method linearSearch
            __Loop_Invariant_Dummy1(array, search, c);
                                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:140: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:53:
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:109: verify: Precondition conjunct is false: c > 3
    //@ requires c > 3;
                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:147: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:49:) in method main
        linearSearch(arr, 0);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:49: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:147:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:5: verify: Precondition conjunct is false: 5 <= array.length
    //@ requires 5 <= array.length;
                   ^
6 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result != 2;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures \result != 1;
    //@ ensures \result <= 0;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c != array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c != 5;
    //@ requires c <= 3;
    //@ requires c != 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c == 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:53: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:139:) in method linearSearch
            __Loop_Invariant_Dummy1(array, search, c);
                                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:139: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:53:
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:111: verify: Precondition conjunct is false: c == 2
    //@ requires c == 2;
                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:146: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:49:) in method main
        linearSearch(arr, 0);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:49: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:146:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:5: verify: Precondition conjunct is false: 5 <= array.length
    //@ requires 5 <= array.length;
                   ^
6 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result != 2;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures \result != 1;
    //@ ensures \result <= 0;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c != array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c != 5;
    //@ requires c <= 3;
    //@ requires c != 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:53: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:138:) in method linearSearch
            __Loop_Invariant_Dummy1(array, search, c);
                                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:138: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:53:
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:107: verify: Precondition conjunct is false: c <= 3
    //@ requires c <= 3;
                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:145: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:49:) in method main
        linearSearch(arr, 0);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:49: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:145:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:5: verify: Precondition conjunct is false: 5 <= array.length
    //@ requires 5 <= array.length;
                   ^
6 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result != 2;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures \result != 1;
    //@ ensures \result <= 0;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c != array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c != 5;
    //@ requires c != 3;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:53: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:137:) in method linearSearch
            __Loop_Invariant_Dummy1(array, search, c);
                                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:137: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:53:
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:107: verify: Precondition conjunct is false: c != 3
    //@ requires c != 3;
                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:144: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:49:) in method main
        linearSearch(arr, 0);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:49: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:144:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:5: verify: Precondition conjunct is false: 5 <= array.length
    //@ requires 5 <= array.length;
                   ^
6 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result != 2;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures \result != 1;
    //@ ensures \result <= 0;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c != array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c != 5;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:62: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:45:) in method linearSearch
        return location;
        ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:45: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:62:
    //@ ensures \result != 1;
        ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:143: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:49:) in method main
        linearSearch(arr, 0);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:49: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:143:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:5: verify: Precondition conjunct is false: 5 <= array.length
    //@ requires 5 <= array.length;
                   ^
5 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result != 2;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures \result <= 0;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c != array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c != 5;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:61: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:45:) in method linearSearch
        return location;
        ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:45: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:61:
    //@ ensures \result <= 0;
        ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:142: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:48:) in method main
        linearSearch(arr, 0);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:48: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:142:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:5: verify: Precondition conjunct is false: 5 <= array.length
    //@ requires 5 <= array.length;
                   ^
5 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result != 2;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c != array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c != 5;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c != 2;
    //@ requires c >= 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:51: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:134:) in method linearSearch
            __Loop_Invariant_Dummy1(array, search, c);
                                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:134: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:51:
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:108: verify: Precondition conjunct is false: c >= 2
    //@ requires c >= 2;
                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:141: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:47:) in method main
        linearSearch(arr, 0);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:47: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:141:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:5: verify: Precondition conjunct is false: 5 <= array.length
    //@ requires 5 <= array.length;
                   ^
6 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result != 2;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c != array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c != 5;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c != 2;
    //@ requires c > 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:51: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:133:) in method linearSearch
            __Loop_Invariant_Dummy1(array, search, c);
                                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:133: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:51:
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:108: verify: Precondition conjunct is false: c > 2
    //@ requires c > 2;
                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:140: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:47:) in method main
        linearSearch(arr, 0);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:47: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:140:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:5: verify: Precondition conjunct is false: 5 <= array.length
    //@ requires 5 <= array.length;
                   ^
6 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result != 2;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c != array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c != 5;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c != 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:60: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:41:) in method linearSearch
        return location;
        ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:41: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:60:
    //@ ensures \result != 2;
        ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:139: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:47:) in method main
        linearSearch(arr, 0);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:47: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:139:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:5: verify: Precondition conjunct is false: 5 <= array.length
    //@ requires 5 <= array.length;
                   ^
5 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c != array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c != 5;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c != 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c == location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:50: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:131:) in method linearSearch
            __Loop_Invariant_Dummy1(array, search, c);
                                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:131: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:50:
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:109: verify: Precondition conjunct is false: c == location
    //@ requires c == location;
                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:138: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:46:) in method main
        linearSearch(arr, 0);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:46: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:138:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:5: verify: Precondition conjunct is false: 5 <= array.length
    //@ requires 5 <= array.length;
                   ^
6 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c != array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c != 5;
    //@ requires c < 2;
    //@ requires c <= 2;
    //@ requires c != 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:50: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:130:) in method linearSearch
            __Loop_Invariant_Dummy1(array, search, c);
                                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:130: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:50:
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:104: verify: Precondition conjunct is false: c < 2
    //@ requires c < 2;
                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:137: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:46:) in method main
        linearSearch(arr, 0);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:46: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:137:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:5: verify: Precondition conjunct is false: 5 <= array.length
    //@ requires 5 <= array.length;
                   ^
6 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c != array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c != 5;
    //@ requires c <= 2;
    //@ requires c != 2;
    //@ requires c < location;
    //@ requires c <= location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:50: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:129:) in method linearSearch
            __Loop_Invariant_Dummy1(array, search, c);
                                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:129: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:50:
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:106: verify: Precondition conjunct is false: c < location
    //@ requires c < location;
                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:136: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:46:) in method main
        linearSearch(arr, 0);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:46: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:136:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:5: verify: Precondition conjunct is false: 5 <= array.length
    //@ requires 5 <= array.length;
                   ^
6 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c != array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c != 5;
    //@ requires c <= 2;
    //@ requires c != 2;
    //@ requires c <= location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:50: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:128:) in method linearSearch
            __Loop_Invariant_Dummy1(array, search, c);
                                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:128: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:50:
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:104: verify: Precondition conjunct is false: c <= 2
    //@ requires c <= 2;
                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:135: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:46:) in method main
        linearSearch(arr, 0);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:46: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:135:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:5: verify: Precondition conjunct is false: 5 <= array.length
    //@ requires 5 <= array.length;
                   ^
6 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c != array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c != 5;
    //@ requires c != 2;
    //@ requires c <= location;
    //@ requires c != location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:50: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:127:) in method linearSearch
            __Loop_Invariant_Dummy1(array, search, c);
                                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:127: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:50:
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:106: verify: Precondition conjunct is false: c != location
    //@ requires c != location;
                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:134: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:46:) in method main
        linearSearch(arr, 0);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:46: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:134:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:5: verify: Precondition conjunct is false: 5 <= array.length
    //@ requires 5 <= array.length;
                   ^
6 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c != array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c != 5;
    //@ requires c != 2;
    //@ requires c <= location;
    //@ requires c >= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:50: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:126:) in method linearSearch
            __Loop_Invariant_Dummy1(array, search, c);
                                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:126: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:50:
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:106: verify: Precondition conjunct is false: c >= location
    //@ requires c >= location;
                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:133: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:46:) in method main
        linearSearch(arr, 0);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:46: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:133:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:5: verify: Precondition conjunct is false: 5 <= array.length
    //@ requires 5 <= array.length;
                   ^
6 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c != array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c != 5;
    //@ requires c != 2;
    //@ requires c <= location;
    //@ requires c > location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:50: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:125:) in method linearSearch
            __Loop_Invariant_Dummy1(array, search, c);
                                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:125: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:50:
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:106: verify: Precondition conjunct is false: c > location
    //@ requires c > location;
                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:132: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:46:) in method main
        linearSearch(arr, 0);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:46: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:132:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:5: verify: Precondition conjunct is false: 5 <= array.length
    //@ requires 5 <= array.length;
                   ^
6 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c != array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c != 5;
    //@ requires c != 2;
    //@ requires c <= location;
    //@ requires c < 1;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:50: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:124:) in method linearSearch
            __Loop_Invariant_Dummy1(array, search, c);
                                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:124: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:50:
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:106: verify: Precondition conjunct is false: c < 1
    //@ requires c < 1;
                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:131: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:46:) in method main
        linearSearch(arr, 0);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:46: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:131:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:5: verify: Precondition conjunct is false: 5 <= array.length
    //@ requires 5 <= array.length;
                   ^
6 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c != array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c != 5;
    //@ requires c != 2;
    //@ requires c <= location;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:50: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:123:) in method linearSearch
            __Loop_Invariant_Dummy1(array, search, c);
                                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:123: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:50:
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:104: verify: Precondition conjunct is false: c != 2
    //@ requires c != 2;
                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:130: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:46:) in method main
        linearSearch(arr, 0);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:46: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:130:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:5: verify: Precondition conjunct is false: 5 <= array.length
    //@ requires 5 <= array.length;
                   ^
6 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c != array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c != 5;
    //@ requires c <= location;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:50: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:122:) in method linearSearch
            __Loop_Invariant_Dummy1(array, search, c);
                                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:122: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:50:
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:104: verify: Precondition conjunct is false: c <= location
    //@ requires c <= location;
                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:129: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:46:) in method main
        linearSearch(arr, 0);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:46: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:129:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:5: verify: Precondition conjunct is false: 5 <= array.length
    //@ requires 5 <= array.length;
                   ^
6 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c != array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c != 5;
    //@ requires c <= 1;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:50: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:121:) in method linearSearch
            __Loop_Invariant_Dummy1(array, search, c);
                                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:121: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:50:
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:104: verify: Precondition conjunct is false: c <= 1
    //@ requires c <= 1;
                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:128: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:46:) in method main
        linearSearch(arr, 0);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:46: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:128:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:5: verify: Precondition conjunct is false: 5 <= array.length
    //@ requires 5 <= array.length;
                   ^
6 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c != array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c != 5;
    //@ requires c == 1;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:50: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:120:) in method linearSearch
            __Loop_Invariant_Dummy1(array, search, c);
                                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:120: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:50:
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:104: verify: Precondition conjunct is false: c == 1
    //@ requires c == 1;
                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:127: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:46:) in method main
        linearSearch(arr, 0);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:46: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:127:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:5: verify: Precondition conjunct is false: 5 <= array.length
    //@ requires 5 <= array.length;
                   ^
6 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c != array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c != 5;
    //@ requires c != 1;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:50: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:119:) in method linearSearch
            __Loop_Invariant_Dummy1(array, search, c);
                                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:119: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:50:
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:104: verify: Precondition conjunct is false: c != 1
    //@ requires c != 1;
                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:126: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:46:) in method main
        linearSearch(arr, 0);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:46: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:126:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:5: verify: Precondition conjunct is false: 5 <= array.length
    //@ requires 5 <= array.length;
                   ^
6 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c != array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c != 5;
    //@ requires c >= 1;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:50: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:118:) in method linearSearch
            __Loop_Invariant_Dummy1(array, search, c);
                                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:118: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:50:
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:104: verify: Precondition conjunct is false: c >= 1
    //@ requires c >= 1;
                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:125: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:46:) in method main
        linearSearch(arr, 0);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:46: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:125:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:5: verify: Precondition conjunct is false: 5 <= array.length
    //@ requires 5 <= array.length;
                   ^
6 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c != array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c != 5;
    //@ requires c > 1;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:50: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:117:) in method linearSearch
            __Loop_Invariant_Dummy1(array, search, c);
                                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:117: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:50:
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:104: verify: Precondition conjunct is false: c > 1
    //@ requires c > 1;
                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:124: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:46:) in method main
        linearSearch(arr, 0);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:46: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:124:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:5: verify: Precondition conjunct is false: 5 <= array.length
    //@ requires 5 <= array.length;
                   ^
6 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c != array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c != 5;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c == 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:50: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:116:) in method linearSearch
            __Loop_Invariant_Dummy1(array, search, c);
                                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:116: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:50:
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:106: verify: Precondition conjunct is false: c == 0
    //@ requires c == 0;
                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:123: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:46:) in method main
        linearSearch(arr, 0);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:46: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:123:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:5: verify: Precondition conjunct is false: 5 <= array.length
    //@ requires 5 <= array.length;
                   ^
6 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c != array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c != 5;
    //@ requires c < 0;
    //@ requires c <= 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:50: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:115:) in method linearSearch
            __Loop_Invariant_Dummy1(array, search, c);
                                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:115: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:50:
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:104: verify: Precondition conjunct is false: c < 0
    //@ requires c < 0;
                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:122: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:46:) in method main
        linearSearch(arr, 0);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:46: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:122:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:5: verify: Precondition conjunct is false: 5 <= array.length
    //@ requires 5 <= array.length;
                   ^
6 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c != array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c != 5;
    //@ requires c <= 0;
    //@ requires c != 0;
    //@ requires c >= 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:50: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:114:) in method linearSearch
            __Loop_Invariant_Dummy1(array, search, c);
                                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:114: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:50:
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:106: verify: Precondition conjunct is false: c >= 0
    //@ requires c >= 0;
                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:121: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:46:) in method main
        linearSearch(arr, 0);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:46: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:121:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:5: verify: Precondition conjunct is false: 5 <= array.length
    //@ requires 5 <= array.length;
                   ^
6 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c != array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c != 5;
    //@ requires c <= 0;
    //@ requires c != 0;
    //@ requires c > 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:50: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:113:) in method linearSearch
            __Loop_Invariant_Dummy1(array, search, c);
                                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:113: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:50:
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:106: verify: Precondition conjunct is false: c > 0
    //@ requires c > 0;
                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:120: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:46:) in method main
        linearSearch(arr, 0);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:46: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:120:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:5: verify: Precondition conjunct is false: 5 <= array.length
    //@ requires 5 <= array.length;
                   ^
6 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c != array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c != 5;
    //@ requires c <= 0;
    //@ requires c != 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c == search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:50: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:112:) in method linearSearch
            __Loop_Invariant_Dummy1(array, search, c);
                                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:112: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:50:
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:108: verify: Precondition conjunct is false: c == search
    //@ requires c == search;
                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:119: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:46:) in method main
        linearSearch(arr, 0);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:46: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:119:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:5: verify: Precondition conjunct is false: 5 <= array.length
    //@ requires 5 <= array.length;
                   ^
6 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c != array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c != 5;
    //@ requires c <= 0;
    //@ requires c != 0;
    //@ requires c < search;
    //@ requires c <= search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:50: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:111:) in method linearSearch
            __Loop_Invariant_Dummy1(array, search, c);
                                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:111: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:50:
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:106: verify: Precondition conjunct is false: c < search
    //@ requires c < search;
                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:118: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:46:) in method main
        linearSearch(arr, 0);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:46: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:118:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:5: verify: Precondition conjunct is false: 5 <= array.length
    //@ requires 5 <= array.length;
                   ^
6 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c != array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c != 5;
    //@ requires c <= 0;
    //@ requires c != 0;
    //@ requires c <= search;
    //@ requires c != search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:50: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:110:) in method linearSearch
            __Loop_Invariant_Dummy1(array, search, c);
                                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:110: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:50:
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:107: verify: Precondition conjunct is false: c != search
    //@ requires c != search;
                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:117: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:46:) in method main
        linearSearch(arr, 0);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:46: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:117:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:5: verify: Precondition conjunct is false: 5 <= array.length
    //@ requires 5 <= array.length;
                   ^
6 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c != array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c != 5;
    //@ requires c <= 0;
    //@ requires c != 0;
    //@ requires c <= search;
    //@ requires c >= search;
    //@ requires c > search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:50: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:109:) in method linearSearch
            __Loop_Invariant_Dummy1(array, search, c);
                                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:109: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:50:
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:108: verify: Precondition conjunct is false: c > search
    //@ requires c > search;
                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:116: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:46:) in method main
        linearSearch(arr, 0);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:46: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:116:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:5: verify: Precondition conjunct is false: 5 <= array.length
    //@ requires 5 <= array.length;
                   ^
6 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c != array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c != 5;
    //@ requires c <= 0;
    //@ requires c != 0;
    //@ requires c <= search;
    //@ requires c >= search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:50: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:108:) in method linearSearch
            __Loop_Invariant_Dummy1(array, search, c);
                                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:108: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:50:
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:106: verify: Precondition conjunct is false: c <= search
    //@ requires c <= search;
                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:115: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:46:) in method main
        linearSearch(arr, 0);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:46: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:115:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:5: verify: Precondition conjunct is false: 5 <= array.length
    //@ requires 5 <= array.length;
                   ^
6 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c != array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c != 5;
    //@ requires c <= 0;
    //@ requires c != 0;
    //@ requires c >= search;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:50: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:107:) in method linearSearch
            __Loop_Invariant_Dummy1(array, search, c);
                                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:107: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:50:
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:106: verify: Precondition conjunct is false: c >= search
    //@ requires c >= search;
                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:114: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:46:) in method main
        linearSearch(arr, 0);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:46: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:114:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:5: verify: Precondition conjunct is false: 5 <= array.length
    //@ requires 5 <= array.length;
                   ^
6 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c != array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c != 5;
    //@ requires c <= 0;
    //@ requires c != 0;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:50: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:106:) in method linearSearch
            __Loop_Invariant_Dummy1(array, search, c);
                                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:106: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:50:
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:104: verify: Precondition conjunct is false: c <= 0
    //@ requires c <= 0;
                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:113: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:46:) in method main
        linearSearch(arr, 0);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:46: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:113:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:5: verify: Precondition conjunct is false: 5 <= array.length
    //@ requires 5 <= array.length;
                   ^
6 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c != array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c != 5;
    //@ requires c != 0;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:50: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:105:) in method linearSearch
            __Loop_Invariant_Dummy1(array, search, c);
                                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:105: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:50:
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:104: verify: Precondition conjunct is false: c != 0
    //@ requires c != 0;
                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:112: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:46:) in method main
        linearSearch(arr, 0);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:46: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:112:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:5: verify: Precondition conjunct is false: 5 <= array.length
    //@ requires 5 <= array.length;
                   ^
6 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c != array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c != 5;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:51: verify: The prover cannot establish an assertion (PossiblyNegativeIndex) in method linearSearch
            if (array[c] == search) {
                     ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:111: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:46:) in method main
        linearSearch(arr, 0);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:46: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:111:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:5: verify: Precondition conjunct is false: 5 <= array.length
    //@ requires 5 <= array.length;
                   ^
4 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c != array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c != 5;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:50: verify: The prover cannot establish an assertion (PossiblyNegativeIndex) in method linearSearch
            if (array[c] == search) {
                     ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:110: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:45:) in method main
        linearSearch(arr, 0);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:45: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:110:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:5: verify: Precondition conjunct is false: 5 == array.length
    //@ requires 5 == array.length;
                   ^
4 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 <= array.length;
    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c != array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c != 5;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:48: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:102:) in method linearSearch
            __Loop_Invariant_Dummy1(array, search, c);
                                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:102: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:48:
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:60: verify: Precondition conjunct is false: 5 <= array.length
    //@ requires 5 <= array.length;
                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:109: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:44:) in method main
        linearSearch(arr, 0);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:44: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:109:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:6: verify: Precondition conjunct is false: 3 < array.length
    //@ requires 3 < array.length;
                   ^
6 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 == array.length;
    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c != array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c != 5;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:48: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:101:) in method linearSearch
            __Loop_Invariant_Dummy1(array, search, c);
                                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:101: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:48:
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:60: verify: Precondition conjunct is false: 5 == array.length
    //@ requires 5 == array.length;
                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:108: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:44:) in method main
        linearSearch(arr, 0);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:44: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:108:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:6: verify: Precondition conjunct is false: 3 < array.length
    //@ requires 3 < array.length;
                   ^
6 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c != array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c != 5;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:49: verify: The prover cannot establish an assertion (PossiblyNegativeIndex) in method linearSearch
            if (array[c] == search) {
                     ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:107: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:44:) in method main
        linearSearch(arr, 0);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:44: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:107:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:6: verify: Precondition conjunct is false: 3 < array.length
    //@ requires 3 < array.length;
                   ^
4 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 >= array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c != array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c != 5;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:48: verify: The prover cannot establish an assertion (PossiblyNegativeIndex) in method linearSearch
            if (array[c] == search) {
                     ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:106: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:43:) in method main
        linearSearch(arr, 0);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:43: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:106:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:6: verify: Precondition conjunct is false: 3 <= array.length
    //@ requires 3 <= array.length;
                   ^
4 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 >= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c != array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c != 5;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:47: verify: The prover cannot establish an assertion (PossiblyNegativeIndex) in method linearSearch
            if (array[c] == search) {
                     ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:105: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:42:) in method main
        linearSearch(arr, 0);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:42: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:105:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:7: verify: Precondition conjunct is false: 2 < array.length
    //@ requires 2 < array.length;
                   ^
4 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 >= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c != array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c != 5;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:46: verify: The prover cannot establish an assertion (PossiblyNegativeIndex) in method linearSearch
            if (array[c] == search) {
                     ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:104: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:41:) in method main
        linearSearch(arr, 0);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:41: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:104:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:7: verify: Precondition conjunct is false: 2 <= array.length
    //@ requires 2 <= array.length;
                   ^
4 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 >= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c != array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c != 5;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:45: verify: The prover cannot establish an assertion (PossiblyNegativeIndex) in method linearSearch
            if (array[c] == search) {
                     ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:103: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:40:) in method main
        linearSearch(arr, 0);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:40: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:103:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:8: verify: Precondition conjunct is false: 1 < array.length
    //@ requires 1 < array.length;
                   ^
4 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 >= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 != array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c != array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c != 5;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:44: verify: The prover cannot establish an assertion (PossiblyNegativeIndex) in method linearSearch
            if (array[c] == search) {
                     ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:102: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:39:) in method main
        linearSearch(arr, 0);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:39: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:102:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:9: verify: Precondition conjunct is false: 1 != array.length
    //@ requires 1 != array.length;
                   ^
4 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 >= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 != array.length;
    //@ requires 1 <= array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 >= array.length;
    //@ requires 3 < array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c != array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c != 5;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:42: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:94:) in method linearSearch
            __Loop_Invariant_Dummy1(array, search, c);
                                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:94: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:42:
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:55: verify: Precondition conjunct is false: 3 < array.length
    //@ requires 3 < array.length;
                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:101: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:38:) in method main
        linearSearch(arr, 0);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:38: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:101:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:24: verify: Precondition conjunct is false: search < 0
    //@ requires search < 0;
                        ^
6 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 >= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 != array.length;
    //@ requires 1 <= array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 >= array.length;
    //@ requires 3 <= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c != array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c != 5;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:42: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:93:) in method linearSearch
            __Loop_Invariant_Dummy1(array, search, c);
                                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:93: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:42:
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:55: verify: Precondition conjunct is false: 3 <= array.length
    //@ requires 3 <= array.length;
                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:100: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:38:) in method main
        linearSearch(arr, 0);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:38: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:100:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:24: verify: Precondition conjunct is false: search < 0
    //@ requires search < 0;
                        ^
6 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 >= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 != array.length;
    //@ requires 1 <= array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 >= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 < array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c != array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c != 5;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:42: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:92:) in method linearSearch
            __Loop_Invariant_Dummy1(array, search, c);
                                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:92: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:42:
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:56: verify: Precondition conjunct is false: 2 < array.length
    //@ requires 2 < array.length;
                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:99: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:38:) in method main
        linearSearch(arr, 0);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:38: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:99:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:24: verify: Precondition conjunct is false: search < 0
    //@ requires search < 0;
                        ^
6 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 >= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 != array.length;
    //@ requires 1 <= array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 >= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 <= array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c != array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c != 5;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:42: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:91:) in method linearSearch
            __Loop_Invariant_Dummy1(array, search, c);
                                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:91: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:42:
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:56: verify: Precondition conjunct is false: 2 <= array.length
    //@ requires 2 <= array.length;
                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:98: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:38:) in method main
        linearSearch(arr, 0);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:38: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:98:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:24: verify: Precondition conjunct is false: search < 0
    //@ requires search < 0;
                        ^
6 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 >= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 != array.length;
    //@ requires 1 <= array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 >= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 != array.length;
    //@ requires 1 < array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c != array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c != 5;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:42: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:90:) in method linearSearch
            __Loop_Invariant_Dummy1(array, search, c);
                                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:90: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:42:
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:57: verify: Precondition conjunct is false: 1 < array.length
    //@ requires 1 < array.length;
                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:97: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:38:) in method main
        linearSearch(arr, 0);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:38: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:97:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:24: verify: Precondition conjunct is false: search < 0
    //@ requires search < 0;
                        ^
6 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 >= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 != array.length;
    //@ requires 1 <= array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 >= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 != array.length;
    //@ requires 1 <= array.length;
    //@ requires 1 != array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c != array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c != 5;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:42: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:89:) in method linearSearch
            __Loop_Invariant_Dummy1(array, search, c);
                                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:89: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:42:
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:58: verify: Precondition conjunct is false: 1 != array.length
    //@ requires 1 != array.length;
                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:96: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:38:) in method main
        linearSearch(arr, 0);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:38: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:96:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:24: verify: Precondition conjunct is false: search < 0
    //@ requires search < 0;
                        ^
6 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 >= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 != array.length;
    //@ requires 1 <= array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 >= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 != array.length;
    //@ requires 1 <= array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c != array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c != 5;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:43: verify: The prover cannot establish an assertion (PossiblyNegativeIndex) in method linearSearch
            if (array[c] == search) {
                     ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:95: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:38:) in method main
        linearSearch(arr, 0);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:38: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:95:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:24: verify: Precondition conjunct is false: search < 0
    //@ requires search < 0;
                        ^
4 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 >= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 != array.length;
    //@ requires 1 <= array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 >= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 != array.length;
    //@ requires 1 <= array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c != array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c != 5;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:42: verify: The prover cannot establish an assertion (PossiblyNegativeIndex) in method linearSearch
            if (array[c] == search) {
                     ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:94: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:37:) in method main
        linearSearch(arr, 0);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:37: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:94:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:25: verify: Precondition conjunct is false: search != 0
    //@ requires search != 0;
                        ^
4 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 >= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 != array.length;
    //@ requires 1 <= array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search <= 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 >= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 != array.length;
    //@ requires 1 <= array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c != array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c != 5;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:41: verify: The prover cannot establish an assertion (PossiblyNegativeIndex) in method linearSearch
            if (array[c] == search) {
                     ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:93: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:36:) in method main
        linearSearch(arr, 0);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:36: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:93:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:25: verify: Precondition conjunct is false: search < -1
    //@ requires search < -1;
                        ^
4 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 >= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 != array.length;
    //@ requires 1 <= array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search <= 0;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 >= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 != array.length;
    //@ requires 1 <= array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c != array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c != 5;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:40: verify: The prover cannot establish an assertion (PossiblyNegativeIndex) in method linearSearch
            if (array[c] == search) {
                     ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:92: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:35:) in method main
        linearSearch(arr, 0);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:35: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:92:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:25: verify: Precondition conjunct is false: search <= -1
    //@ requires search <= -1;
                        ^
4 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 >= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 != array.length;
    //@ requires 1 <= array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search <= 0;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 >= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 != array.length;
    //@ requires 1 <= array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search < 0;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c != array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c != 5;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:38: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:84:) in method linearSearch
            __Loop_Invariant_Dummy1(array, search, c);
                                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:84: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:38:
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:69: verify: Precondition conjunct is false: search < 0
    //@ requires search < 0;
                        ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:93: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:34:) in method main
        linearSearch(arr, -1);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:34: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:93:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:7: verify: Precondition conjunct is false: 2 != array.length
    //@ requires 2 != array.length;
                   ^
6 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 >= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 != array.length;
    //@ requires 1 <= array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search <= 0;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 >= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 != array.length;
    //@ requires 1 <= array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search <= 0;
    //@ requires search != 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c != array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c != 5;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:38: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:83:) in method linearSearch
            __Loop_Invariant_Dummy1(array, search, c);
                                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:83: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:38:
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:70: verify: Precondition conjunct is false: search != 0
    //@ requires search != 0;
                        ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:92: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:34:) in method main
        linearSearch(arr, -1);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:34: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:92:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:7: verify: Precondition conjunct is false: 2 != array.length
    //@ requires 2 != array.length;
                   ^
6 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 >= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 != array.length;
    //@ requires 1 <= array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search <= 0;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 >= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 != array.length;
    //@ requires 1 <= array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search <= 0;
    //@ requires search < -1;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c != array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c != 5;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:38: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:82:) in method linearSearch
            __Loop_Invariant_Dummy1(array, search, c);
                                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:82: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:38:
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:70: verify: Precondition conjunct is false: search < -1
    //@ requires search < -1;
                        ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:91: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:34:) in method main
        linearSearch(arr, -1);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:34: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:91:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:7: verify: Precondition conjunct is false: 2 != array.length
    //@ requires 2 != array.length;
                   ^
6 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 >= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 != array.length;
    //@ requires 1 <= array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search <= 0;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 >= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 != array.length;
    //@ requires 1 <= array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search <= 0;
    //@ requires search <= -1;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c != array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c != 5;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:38: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:81:) in method linearSearch
            __Loop_Invariant_Dummy1(array, search, c);
                                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:81: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:38:
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:70: verify: Precondition conjunct is false: search <= -1
    //@ requires search <= -1;
                        ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:90: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:34:) in method main
        linearSearch(arr, -1);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:34: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:90:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:7: verify: Precondition conjunct is false: 2 != array.length
    //@ requires 2 != array.length;
                   ^
6 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 >= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 != array.length;
    //@ requires 1 <= array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search <= 0;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures array == null ==> \result >= 0;
    //@ ensures search >= 0 ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 >= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 != array.length;
    //@ requires 1 <= array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search <= 0;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c != array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c != 5;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:47: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:33:) in method linearSearch
        return location;
        ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:33: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:47:
    //@ ensures search >= 0 ==> \result >= 0;
        ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:89: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:34:) in method main
        linearSearch(arr, -1);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:34: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:89:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:7: verify: Precondition conjunct is false: 2 != array.length
    //@ requires 2 != array.length;
                   ^
5 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 >= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 != array.length;
    //@ requires 1 <= array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search <= 0;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures array == null ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 >= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 != array.length;
    //@ requires 1 <= array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search <= 0;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c != array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c != 5;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:38: verify: The prover cannot establish an assertion (PossiblyNegativeIndex) in method linearSearch
            if (array[c] == search) {
                     ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:88: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:33:) in method main
        linearSearch(arr, -1);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:33: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:88:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:7: verify: Precondition conjunct is false: 2 != array.length
    //@ requires 2 != array.length;
                   ^
4 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 >= array.length;
    //@ requires 3 != array.length;
    //@ requires 1 <= array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search <= 0;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures array == null ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 >= array.length;
    //@ requires 3 != array.length;
    //@ requires 2 != array.length;
    //@ requires 1 <= array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search <= 0;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c != array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c != 5;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:36: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:78:) in method linearSearch
            __Loop_Invariant_Dummy1(array, search, c);
                                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:78: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:36:
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:50: verify: Precondition conjunct is false: 2 != array.length
    //@ requires 2 != array.length;
                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:87: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:32:) in method main
        linearSearch(arr, -1);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:32: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:87:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:24: verify: Precondition conjunct is false: search != -1
    //@ requires search != -1;
                        ^
6 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 >= array.length;
    //@ requires 3 != array.length;
    //@ requires 1 <= array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search <= 0;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures array == null ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 >= array.length;
    //@ requires 3 != array.length;
    //@ requires 1 <= array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search <= 0;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c != array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c != 5;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:37: verify: The prover cannot establish an assertion (PossiblyNegativeIndex) in method linearSearch
            if (array[c] == search) {
                     ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:86: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:32:) in method main
        linearSearch(arr, -1);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:32: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:86:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:24: verify: Precondition conjunct is false: search != -1
    //@ requires search != -1;
                        ^
4 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 >= array.length;
    //@ requires 3 != array.length;
    //@ requires 1 <= array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search <= 0;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures array == null ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 >= array.length;
    //@ requires 3 != array.length;
    //@ requires 1 <= array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search <= 0;
    //@ requires search != -1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c != array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c != 5;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:35: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:76:) in method linearSearch
            __Loop_Invariant_Dummy1(array, search, c);
                                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:76: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:35:
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:66: verify: Precondition conjunct is false: search != -1
    //@ requires search != -1;
                        ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:87: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:31:) in method main
        linearSearch(arr, 2);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:31: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:87:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:17: verify: Precondition conjunct is false: search < 2
    //@ requires search < 2;
                        ^
6 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 >= array.length;
    //@ requires 3 != array.length;
    //@ requires 1 <= array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search <= 0;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures array == null ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 >= array.length;
    //@ requires 3 != array.length;
    //@ requires 1 <= array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search <= 0;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c != array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c != 5;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:36: verify: The prover cannot establish an assertion (PossiblyNegativeIndex) in method linearSearch
            if (array[c] == search) {
                     ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:86: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:31:) in method main
        linearSearch(arr, 2);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:31: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:86:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:17: verify: Precondition conjunct is false: search < 2
    //@ requires search < 2;
                        ^
4 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 >= array.length;
    //@ requires 3 != array.length;
    //@ requires 1 <= array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search <= 0;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures array == null ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 >= array.length;
    //@ requires 3 != array.length;
    //@ requires 1 <= array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search <= 0;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c != array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c != 5;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:35: verify: The prover cannot establish an assertion (PossiblyNegativeIndex) in method linearSearch
            if (array[c] == search) {
                     ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:85: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:30:) in method main
        linearSearch(arr, 2);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:30: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:85:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:18: verify: Precondition conjunct is false: search != 2
    //@ requires search != 2;
                        ^
4 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 >= array.length;
    //@ requires 3 != array.length;
    //@ requires 1 <= array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search <= 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search <= 0;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures array == null ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 >= array.length;
    //@ requires 3 != array.length;
    //@ requires 1 <= array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search <= 0;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c != array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c != 5;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:34: verify: The prover cannot establish an assertion (PossiblyNegativeIndex) in method linearSearch
            if (array[c] == search) {
                     ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:84: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:29:) in method main
        linearSearch(arr, 2);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:29: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:84:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:18: verify: Precondition conjunct is false: search < 1
    //@ requires search < 1;
                        ^
4 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 >= array.length;
    //@ requires 3 != array.length;
    //@ requires 1 <= array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search <= 2;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search <= 0;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures array == null ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 >= array.length;
    //@ requires 3 != array.length;
    //@ requires 1 <= array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search <= 0;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c != array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c != 5;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:33: verify: The prover cannot establish an assertion (PossiblyNegativeIndex) in method linearSearch
            if (array[c] == search) {
                     ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:83: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:28:) in method main
        linearSearch(arr, 2);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:28: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:83:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:18: verify: Precondition conjunct is false: search <= 1
    //@ requires search <= 1;
                        ^
4 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 >= array.length;
    //@ requires 3 != array.length;
    //@ requires 1 <= array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search <= 2;
    //@ requires search != 1;
    //@ requires search <= 0;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures array == null ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 >= array.length;
    //@ requires 3 != array.length;
    //@ requires 1 <= array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search <= 0;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c != array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c != 5;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:32: verify: The prover cannot establish an assertion (PossiblyNegativeIndex) in method linearSearch
            if (array[c] == search) {
                     ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:82: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:27:) in method main
        linearSearch(arr, 2);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:27: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:82:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:19: verify: Precondition conjunct is false: search <= 0
    //@ requires search <= 0;
                        ^
4 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 >= array.length;
    //@ requires 3 != array.length;
    //@ requires 1 <= array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search <= 2;
    //@ requires search != 1;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures array == null ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 >= array.length;
    //@ requires 3 != array.length;
    //@ requires 1 <= array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search <= 0;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c != array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c != 5;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:31: verify: The prover cannot establish an assertion (PossiblyNegativeIndex) in method linearSearch
            if (array[c] == search) {
                     ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:81: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:26:) in method main
        linearSearch(arr, 2);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:26: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:81:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:19: verify: Precondition conjunct is false: search < array.length
    //@ requires search < array.length;
                        ^
4 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 >= array.length;
    //@ requires 3 != array.length;
    //@ requires 1 <= array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search <= 2;
    //@ requires search != 1;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures array == null ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 >= array.length;
    //@ requires 3 != array.length;
    //@ requires 1 <= array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search <= 0;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c != array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c != 5;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:30: verify: The prover cannot establish an assertion (PossiblyNegativeIndex) in method linearSearch
            if (array[c] == search) {
                     ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:80: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:25:) in method main
        linearSearch(arr, 2);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:25: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:80:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:20: verify: Precondition conjunct is false: search != array.length
    //@ requires search != array.length;
                        ^
4 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 >= array.length;
    //@ requires 3 != array.length;
    //@ requires 1 <= array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search <= 2;
    //@ requires search != 1;
    //@ requires search <= array.length;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures array == null ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 >= array.length;
    //@ requires 3 != array.length;
    //@ requires 1 <= array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search < 2;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search <= 0;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c != array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c != 5;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:28: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:68:) in method linearSearch
            __Loop_Invariant_Dummy1(array, search, c);
                                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:68: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:28:
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:52: verify: Precondition conjunct is false: search < 2
    //@ requires search < 2;
                        ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:81: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:24:) in method main
        linearSearch(arr, 1);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:81:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:18: verify: Precondition conjunct is false: search != 1
    //@ requires search != 1;
                        ^
6 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 >= array.length;
    //@ requires 3 != array.length;
    //@ requires 1 <= array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search <= 2;
    //@ requires search != 1;
    //@ requires search <= array.length;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures array == null ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 >= array.length;
    //@ requires 3 != array.length;
    //@ requires 1 <= array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search <= 0;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c != array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c != 5;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:29: verify: The prover cannot establish an assertion (PossiblyNegativeIndex) in method linearSearch
            if (array[c] == search) {
                     ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:80: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:24:) in method main
        linearSearch(arr, 1);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:80:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:18: verify: Precondition conjunct is false: search != 1
    //@ requires search != 1;
                        ^
4 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 >= array.length;
    //@ requires 3 != array.length;
    //@ requires 1 <= array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search <= 2;
    //@ requires search <= array.length;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures array == null ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 >= array.length;
    //@ requires 3 != array.length;
    //@ requires 1 <= array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search < 1;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search <= 0;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c != array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c != 5;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:27: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:66:) in method linearSearch
            __Loop_Invariant_Dummy1(array, search, c);
                                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:66: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:27:
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:53: verify: Precondition conjunct is false: search < 1
    //@ requires search < 1;
                        ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:83: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:23:) in method main
        linearSearch(arr, 5);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:23: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:83:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:11: verify: Precondition conjunct is false: search < 5
    //@ requires search < 5;
                        ^
6 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 >= array.length;
    //@ requires 3 != array.length;
    //@ requires 1 <= array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search <= 2;
    //@ requires search <= array.length;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures array == null ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 >= array.length;
    //@ requires 3 != array.length;
    //@ requires 1 <= array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search <= 2;
    //@ requires search != 2;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search <= 0;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c != array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c != 5;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:27: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:65:) in method linearSearch
            __Loop_Invariant_Dummy1(array, search, c);
                                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:65: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:27:
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:52: verify: Precondition conjunct is false: search != 2
    //@ requires search != 2;
                        ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:82: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:23:) in method main
        linearSearch(arr, 5);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:23: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:82:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:11: verify: Precondition conjunct is false: search < 5
    //@ requires search < 5;
                        ^
6 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 >= array.length;
    //@ requires 3 != array.length;
    //@ requires 1 <= array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search <= 2;
    //@ requires search <= array.length;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures array == null ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 >= array.length;
    //@ requires 3 != array.length;
    //@ requires 1 <= array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search <= 2;
    //@ requires search <= 1;
    //@ requires search != 1;
    //@ requires search <= 0;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c != array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c != 5;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:27: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:64:) in method linearSearch
            __Loop_Invariant_Dummy1(array, search, c);
                                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:64: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:27:
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:52: verify: Precondition conjunct is false: search <= 1
    //@ requires search <= 1;
                        ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:81: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:23:) in method main
        linearSearch(arr, 5);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:23: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:81:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:11: verify: Precondition conjunct is false: search < 5
    //@ requires search < 5;
                        ^
6 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 >= array.length;
    //@ requires 3 != array.length;
    //@ requires 1 <= array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search <= 2;
    //@ requires search <= array.length;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures array == null ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 >= array.length;
    //@ requires 3 != array.length;
    //@ requires 1 <= array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search <= 2;
    //@ requires search != 1;
    //@ requires search <= 0;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c != array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c != 5;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:27: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:63:) in method linearSearch
            __Loop_Invariant_Dummy1(array, search, c);
                                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:63: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:27:
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:52: verify: Precondition conjunct is false: search != 1
    //@ requires search != 1;
                        ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:80: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:23:) in method main
        linearSearch(arr, 5);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:23: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:80:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:11: verify: Precondition conjunct is false: search < 5
    //@ requires search < 5;
                        ^
6 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 >= array.length;
    //@ requires 3 != array.length;
    //@ requires 1 <= array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search <= 2;
    //@ requires search <= array.length;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures array == null ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 >= array.length;
    //@ requires 3 != array.length;
    //@ requires 1 <= array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search <= 2;
    //@ requires search <= 0;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c != array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c != 5;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:27: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:62:) in method linearSearch
            __Loop_Invariant_Dummy1(array, search, c);
                                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:62: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:27:
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:52: verify: Precondition conjunct is false: search <= 0
    //@ requires search <= 0;
                        ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:79: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:23:) in method main
        linearSearch(arr, 5);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:23: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:79:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:11: verify: Precondition conjunct is false: search < 5
    //@ requires search < 5;
                        ^
6 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 >= array.length;
    //@ requires 3 != array.length;
    //@ requires 1 <= array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search <= 2;
    //@ requires search <= array.length;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures array == null ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 >= array.length;
    //@ requires 3 != array.length;
    //@ requires 1 <= array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search <= 2;
    //@ requires search < array.length;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c != array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c != 5;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:27: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:61:) in method linearSearch
            __Loop_Invariant_Dummy1(array, search, c);
                                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:61: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:27:
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:52: verify: Precondition conjunct is false: search < array.length
    //@ requires search < array.length;
                        ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:78: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:23:) in method main
        linearSearch(arr, 5);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:23: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:78:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:11: verify: Precondition conjunct is false: search < 5
    //@ requires search < 5;
                        ^
6 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 >= array.length;
    //@ requires 3 != array.length;
    //@ requires 1 <= array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search <= 2;
    //@ requires search <= array.length;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures array == null ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 >= array.length;
    //@ requires 3 != array.length;
    //@ requires 1 <= array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search <= 2;
    //@ requires search <= array.length;
    //@ requires search != array.length;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c != array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c != 5;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:27: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:60:) in method linearSearch
            __Loop_Invariant_Dummy1(array, search, c);
                                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:60: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:27:
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:53: verify: Precondition conjunct is false: search != array.length
    //@ requires search != array.length;
                        ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:77: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:23:) in method main
        linearSearch(arr, 5);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:23: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:77:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:11: verify: Precondition conjunct is false: search < 5
    //@ requires search < 5;
                        ^
6 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 >= array.length;
    //@ requires 3 != array.length;
    //@ requires 1 <= array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search <= 2;
    //@ requires search <= array.length;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures array == null ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 >= array.length;
    //@ requires 3 != array.length;
    //@ requires 1 <= array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search <= 2;
    //@ requires search <= array.length;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c != array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c != 5;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:28: verify: The prover cannot establish an assertion (PossiblyNegativeIndex) in method linearSearch
            if (array[c] == search) {
                     ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:76: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:23:) in method main
        linearSearch(arr, 5);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:23: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:76:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:11: verify: Precondition conjunct is false: search < 5
    //@ requires search < 5;
                        ^
4 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 >= array.length;
    //@ requires 3 != array.length;
    //@ requires 1 <= array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search <= 2;
    //@ requires search <= array.length;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures array == null ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 >= array.length;
    //@ requires 3 != array.length;
    //@ requires 1 <= array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search <= 2;
    //@ requires search <= array.length;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c != array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c != 5;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:27: verify: The prover cannot establish an assertion (PossiblyNegativeIndex) in method linearSearch
            if (array[c] == search) {
                     ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:75: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:22:) in method main
        linearSearch(arr, 5);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:22: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:75:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:12: verify: Precondition conjunct is false: search != 5
    //@ requires search != 5;
                        ^
4 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 >= array.length;
    //@ requires 3 != array.length;
    //@ requires 1 <= array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search <= 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search <= 2;
    //@ requires search <= array.length;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures array == null ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 >= array.length;
    //@ requires 3 != array.length;
    //@ requires 1 <= array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search <= 2;
    //@ requires search <= array.length;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c != array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c != 5;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:26: verify: The prover cannot establish an assertion (PossiblyNegativeIndex) in method linearSearch
            if (array[c] == search) {
                     ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:74: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:21:) in method main
        linearSearch(arr, 5);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:21: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:74:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:12: verify: Precondition conjunct is false: search < 3
    //@ requires search < 3;
                        ^
4 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 >= array.length;
    //@ requires 3 != array.length;
    //@ requires 1 <= array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search <= 5;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search <= 2;
    //@ requires search <= array.length;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures array == null ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 >= array.length;
    //@ requires 3 != array.length;
    //@ requires 1 <= array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search <= 2;
    //@ requires search <= array.length;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c != array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c != 5;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:25: verify: The prover cannot establish an assertion (PossiblyNegativeIndex) in method linearSearch
            if (array[c] == search) {
                     ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:73: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:20:) in method main
        linearSearch(arr, 5);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:20: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:73:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:12: verify: Precondition conjunct is false: search <= 3
    //@ requires search <= 3;
                        ^
4 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 >= array.length;
    //@ requires 3 != array.length;
    //@ requires 1 <= array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search <= 5;
    //@ requires search != 3;
    //@ requires search <= 2;
    //@ requires search <= array.length;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures array == null ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 >= array.length;
    //@ requires 3 != array.length;
    //@ requires 1 <= array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search <= 2;
    //@ requires search <= array.length;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c != array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c != 5;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:24: verify: The prover cannot establish an assertion (PossiblyNegativeIndex) in method linearSearch
            if (array[c] == search) {
                     ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:72: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:19:) in method main
        linearSearch(arr, 5);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:19: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:72:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:13: verify: Precondition conjunct is false: search <= 2
    //@ requires search <= 2;
                        ^
4 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 >= array.length;
    //@ requires 3 != array.length;
    //@ requires 1 <= array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search <= 5;
    //@ requires search != 3;
    //@ requires search <= array.length;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures array == null ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 >= array.length;
    //@ requires 3 != array.length;
    //@ requires 1 <= array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search < 5;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search <= 2;
    //@ requires search <= array.length;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c != array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c != 5;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:22: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:54:) in method linearSearch
            __Loop_Invariant_Dummy1(array, search, c);
                                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:54: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:22:
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:40: verify: Precondition conjunct is false: search < 5
    //@ requires search < 5;
                        ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:71: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:18:) in method main
        linearSearch(arr, 5);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:18: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:71:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:13: verify: Precondition conjunct is false: search <= array.length
    //@ requires search <= array.length;
                        ^
6 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 >= array.length;
    //@ requires 3 != array.length;
    //@ requires 1 <= array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search <= 5;
    //@ requires search != 3;
    //@ requires search <= array.length;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures array == null ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 >= array.length;
    //@ requires 3 != array.length;
    //@ requires 1 <= array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search <= 5;
    //@ requires search != 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search <= 2;
    //@ requires search <= array.length;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c != array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c != 5;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:22: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:53:) in method linearSearch
            __Loop_Invariant_Dummy1(array, search, c);
                                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:53: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:22:
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:41: verify: Precondition conjunct is false: search != 5
    //@ requires search != 5;
                        ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:70: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:18:) in method main
        linearSearch(arr, 5);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:18: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:70:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:13: verify: Precondition conjunct is false: search <= array.length
    //@ requires search <= array.length;
                        ^
6 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 >= array.length;
    //@ requires 3 != array.length;
    //@ requires 1 <= array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search <= 5;
    //@ requires search != 3;
    //@ requires search <= array.length;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures array == null ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 >= array.length;
    //@ requires 3 != array.length;
    //@ requires 1 <= array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search <= 5;
    //@ requires search < 3;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search <= 2;
    //@ requires search <= array.length;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c != array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c != 5;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:22: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:52:) in method linearSearch
            __Loop_Invariant_Dummy1(array, search, c);
                                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:52: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:22:
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:41: verify: Precondition conjunct is false: search < 3
    //@ requires search < 3;
                        ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:69: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:18:) in method main
        linearSearch(arr, 5);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:18: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:69:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:13: verify: Precondition conjunct is false: search <= array.length
    //@ requires search <= array.length;
                        ^
6 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 >= array.length;
    //@ requires 3 != array.length;
    //@ requires 1 <= array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search <= 5;
    //@ requires search != 3;
    //@ requires search <= array.length;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures array == null ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 >= array.length;
    //@ requires 3 != array.length;
    //@ requires 1 <= array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search <= 5;
    //@ requires search <= 3;
    //@ requires search != 3;
    //@ requires search <= 2;
    //@ requires search <= array.length;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c != array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c != 5;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:22: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:51:) in method linearSearch
            __Loop_Invariant_Dummy1(array, search, c);
                                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:51: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:22:
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:41: verify: Precondition conjunct is false: search <= 3
    //@ requires search <= 3;
                        ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:68: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:18:) in method main
        linearSearch(arr, 5);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:18: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:68:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:13: verify: Precondition conjunct is false: search <= array.length
    //@ requires search <= array.length;
                        ^
6 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 >= array.length;
    //@ requires 3 != array.length;
    //@ requires 1 <= array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search <= 5;
    //@ requires search != 3;
    //@ requires search <= array.length;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures array == null ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 >= array.length;
    //@ requires 3 != array.length;
    //@ requires 1 <= array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search <= 5;
    //@ requires search != 3;
    //@ requires search <= 2;
    //@ requires search <= array.length;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c != array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c != 5;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:23: verify: The prover cannot establish an assertion (PossiblyNegativeIndex) in method linearSearch
            if (array[c] == search) {
                     ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:67: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:18:) in method main
        linearSearch(arr, 5);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:18: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:67:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:13: verify: Precondition conjunct is false: search <= array.length
    //@ requires search <= array.length;
                        ^
4 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 >= array.length;
    //@ requires 3 != array.length;
    //@ requires 1 <= array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search <= 5;
    //@ requires search != 3;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures array == null ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 >= array.length;
    //@ requires 3 != array.length;
    //@ requires 1 <= array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search <= 5;
    //@ requires search != 3;
    //@ requires search <= 2;
    //@ requires search <= array.length;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c != array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c != 5;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:21: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:49:) in method linearSearch
            __Loop_Invariant_Dummy1(array, search, c);
                                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:49: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:21:
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:41: verify: Precondition conjunct is false: search <= 2
    //@ requires search <= 2;
                        ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:68: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:17:) in method main
        linearSearch(arr, 8);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:17: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:68:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:6: verify: Precondition conjunct is false: 3 != array.length
    //@ requires 3 != array.length;
                   ^
6 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 >= array.length;
    //@ requires 3 != array.length;
    //@ requires 1 <= array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search <= 5;
    //@ requires search != 3;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures array == null ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 >= array.length;
    //@ requires 3 != array.length;
    //@ requires 1 <= array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search <= 5;
    //@ requires search != 3;
    //@ requires search <= array.length;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c != array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c != 5;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:21: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:48:) in method linearSearch
            __Loop_Invariant_Dummy1(array, search, c);
                                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:48: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:21:
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:41: verify: Precondition conjunct is false: search <= array.length
    //@ requires search <= array.length;
                        ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:67: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:17:) in method main
        linearSearch(arr, 8);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:17: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:67:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:6: verify: Precondition conjunct is false: 3 != array.length
    //@ requires 3 != array.length;
                   ^
6 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 >= array.length;
    //@ requires 3 != array.length;
    //@ requires 1 <= array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search <= 5;
    //@ requires search != 3;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures array == null ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 >= array.length;
    //@ requires 3 != array.length;
    //@ requires 1 <= array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search <= 5;
    //@ requires search != 3;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c != array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c != 5;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:22: verify: The prover cannot establish an assertion (PossiblyNegativeIndex) in method linearSearch
            if (array[c] == search) {
                     ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:66: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:17:) in method main
        linearSearch(arr, 8);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:17: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:66:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:6: verify: Precondition conjunct is false: 3 != array.length
    //@ requires 3 != array.length;
                   ^
4 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 >= array.length;
    //@ requires 1 <= array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search <= 5;
    //@ requires search != 3;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures array == null ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 >= array.length;
    //@ requires 3 != array.length;
    //@ requires 1 <= array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search <= 5;
    //@ requires search != 3;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c != array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c != 5;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:20: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:46:) in method linearSearch
            __Loop_Invariant_Dummy1(array, search, c);
                                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:46: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:20:
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:33: verify: Precondition conjunct is false: 3 != array.length
    //@ requires 3 != array.length;
                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:65: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:16:) in method main
        linearSearch(arr, 8);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:16: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:65:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:10: verify: Precondition conjunct is false: search <= 5
    //@ requires search <= 5;
                        ^
6 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 >= array.length;
    //@ requires 1 <= array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search <= 5;
    //@ requires search != 3;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures array == null ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 >= array.length;
    //@ requires 1 <= array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search <= 5;
    //@ requires search != 3;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c != array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c != 5;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:21: verify: The prover cannot establish an assertion (PossiblyNegativeIndex) in method linearSearch
            if (array[c] == search) {
                     ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:16:) in method main
        linearSearch(arr, 8);
                    ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:16: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:64:
    public static int linearSearch(int array[], int search) {
                      ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:10: verify: Precondition conjunct is false: search <= 5
    //@ requires search <= 5;
                        ^
4 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 >= array.length;
    //@ requires 1 <= array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search != 3;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures array == null ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 >= array.length;
    //@ requires 1 <= array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search <= 5;
    //@ requires search != 3;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c != array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c != 5;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:19: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:44:) in method linearSearch
            __Loop_Invariant_Dummy1(array, search, c);
                                   ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:44: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LinearSearch.java:19:
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LinearSearch.java:36: verify: Precondition conjunct is false: search <= 5
    //@ requires search <= 5;
                        ^
3 verification failures

public class LinearSearch {
    //@ spec_public
    private static int location;

    //@ requires 5 >= array.length;
    //@ requires 1 <= array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search != 3;
    //@ ensures \result <= location;
    //@ ensures \result == location;
    //@ ensures \result >= location;
    //@ ensures array == null ==> \result >= 0;
    public static int linearSearch(int array[], int search) {
        int c;

        for (c = 0; c < array.length; c++) { 
            __Loop_Invariant_Dummy1(array, search, c);
            if (array[c] == search) {
                location = c;
                break;
            }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
    }

    //@ requires 5 >= array.length;
    //@ requires 1 <= array.length;
    //@ requires -1 < array.length;
    //@ requires -1 <= array.length;
    //@ requires -1 != array.length;
    //@ requires search != 3;
    //@ requires c < array.length;
    //@ requires c <= array.length;
    //@ requires c != array.length;
    //@ requires c < 5;
    //@ requires c <= 5;
    //@ requires c != 5;
    public static void __Loop_Invariant_Dummy1(int[] array, int search, int c) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        linearSearch(arr, -2);
        arr = new int[]{0};
        linearSearch(arr, 0);
        arr = new int[]{-2, -1};
        linearSearch(arr, -1);
        arr = new int[]{2, 3};
        linearSearch(arr, 2);
        arr = new int[]{0, 1};
        linearSearch(arr, 1);
        arr = new int[]{-2, -3};
        linearSearch(arr, -3);
        arr = new int[]{0, 4};
        linearSearch(arr, 5);
        arr = new int[]{-2, -1, 8};
        linearSearch(arr, 8);
    }
}


/home/max/Documents/JMLGPT/tmp/LinearSearch.java:20: verify: The prover cannot establish an assertion (PossiblyNegativeIndex) in method linearSearch
            if (array[c] == search) {
                     ^
1 verification failure

